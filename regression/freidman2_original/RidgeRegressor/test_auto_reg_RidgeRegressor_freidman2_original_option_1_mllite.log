          X_0          X_1       X_2        X_3       target
0   45.688718   609.092549  0.591968   7.449268   363.446298
1   92.630496  1621.621954  0.997097   3.905369  1619.565758
2   76.131749   526.792001  0.716619   5.202790   385.108775
3   40.067007   524.247515  0.463251   1.522912   246.139654
4   34.726296   778.125942  0.167246   2.339115   134.691570
..        ...          ...       ...        ...          ...
95  22.116345  1162.774063  0.675740   4.934592   786.044214
96  59.325419  1558.844569  0.742170   4.222862  1158.447272
97  74.947222  1754.316103  0.366207   1.961987   646.799393
98  52.067586   534.256140  0.155164   8.526538    97.892577
99   0.743929   167.010742  0.924844  10.614025   154.460077

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[4.5688717e+01 6.0909253e+02 5.9196806e-01 7.4492683e+00]
 [9.2630493e+01 1.6216219e+03 9.9709725e-01 3.9053690e+00]
 [7.6131752e+01 5.2679199e+02 7.1661860e-01 5.2027898e+00]
 [4.0067005e+01 5.2424750e+02 4.6325052e-01 1.5229123e+00]
 [3.4726295e+01 7.7812592e+02 1.6724615e-01 2.3391147e+00]] [ 363.4463  1619.5658   385.10876  246.13965  134.69157]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.005, 'TRAINING')
{ "alpha" : 0.0000001,   , }
{ "alpha" : 0.0000001,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : -389.834229,
			"coeffs" : [ 0.082715, 0.512813, 846.603271, -9.704976 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original_option_1.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : -389.834229,
			"coeffs" : [ 0.082715, 0.512813, 846.603271, -9.704976 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"equations" : 	{
		"coeffs" : [ 0.082715, 0.512813, 846.603271, -9.704976 ],
		"intercept" : -389.834229
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "alpha" : 0.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 355.1624   1255.6603    442.80728   259.73022   130.96107   276.4
 1066.634     134.17073   650.00916   308.15244   394.95355   335.30096
  491.78387   576.3478    788.66223  -103.76329   489.83313    86.356224
  470.84494   499.13483   679.3507    741.9243    527.7947    528.0738
  157.36485   515.5039    699.44086   353.8454    234.49142   628.7216
  731.6268    361.3289    556.7285    536.56384   737.647     665.17896
  443.38013   701.45764   307.00513   944.5634    236.81155   242.04514
  374.08804   345.85977   -54.095108 1192.1896   -139.83891   680.4152
  396.6189   -155.15692   426.05743   365.93835   880.0134     76.91766
  309.78644   439.1449    617.20905   464.48206   689.3022    885.4859
  956.0941    808.3726    413.28143   -65.70674   100.622284  597.52094
  178.64072   341.25555   599.87177   271.57416   856.27423   345.35248
   23.34539   174.51077   741.4918    368.2236    571.6229     11.13088
  712.107     172.23244   991.7262     40.288162  392.399    1128.5078
  116.97609   -57.005318  612.549     -57.232677  579.3439    -40.246967
  243.30844    46.898193  191.87213   -56.523308  744.26953   732.4742
 1001.8087    806.9916    -62.941696  375.83945 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 355.1626   1255.6608    442.80746   259.7304    130.96129   276.4004
 1066.6345    134.17104   650.00934   308.1525    394.954     335.30115
  491.784     576.34827   788.6626   -103.76314   489.8332     86.35644
  470.84525   499.1353    679.3512    741.9247    527.7949    528.0739
  157.36516   515.50397   699.4412    353.84576   234.49179   628.72205
  731.62726   361.32895   556.7288    536.5641    737.64734   665.1793
  443.38043   701.4579    307.00537   944.56384   236.81165   242.04523
  374.0883    345.86008   -54.09503  1192.1901   -139.83875   680.4157
  396.6192   -155.1568    426.0578    365.93854   880.0137     76.917816
  309.78674   439.14532   617.20953   464.48236   689.30273   885.4864
  956.0946    808.3728    413.2816    -65.706604  100.62247   597.5211
  178.64081   341.2556    599.87225   271.5743    856.27454   345.3529
   23.345528  174.51086   741.4923    368.22372   571.6233     11.131018
  712.10736   172.23254   991.7267     40.288406  392.39914  1128.5083
  116.97627   -57.005287  612.5492    -57.232525  579.3441    -40.246937
  243.30862    46.898468  191.87238   -56.523155  744.2697    732.47455
 1001.8092    806.99207   -62.941544  375.83948 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman2_original', 'size': 100, 'mse': 16421.787, 'mae': 95.00642, 'mape': 0.48329967, 'r2': 0.8619652970614295}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman2_original', 'training_time_in_sec': 0.005, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_original', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -389.834229 + 0.082715 * t."X_0" + 0.512813 * t."X_1" + 846.603271 * t."X_2" + -9.704976 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_original', 'RidgeRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_original', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -389.834229 + 0.082715 * t."X_0" + 0.512813 * t."X_1" + 846.603271 * t."X_2" + -9.704976 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_original', 'RidgeRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index    Estimator
0       0   355.162598
1       1  1255.660767
2       2   442.807465
3       3   259.730408
4       4   130.961288
..    ...          ...
95     95   732.474548
96     96  1001.809204
97     97   806.992065
98     98   -62.941544
99     99   375.839478

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_original', 'RidgeRegressor') Estimator 0.00027008056640625
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     116.976273    116.976089   0.000183
85     85     -57.005287    -57.005318   0.000031
86     86     612.549194    612.549011   0.000183
87     87     -57.232525    -57.232677   0.000153
88     88     579.344116    579.343872   0.000244
89     89     -40.246937    -40.246967   0.000031
90     90     243.308624    243.308441   0.000183
91     91      46.898468     46.898193   0.000275
92     92     191.872375    191.872131   0.000244
93     93     -56.523155    -56.523308   0.000153
94     94     744.269714    744.269531   0.000183
95     95     732.474548    732.474182   0.000366
96     96    1001.809204   1001.808716   0.000488
97     97     806.992065    806.991577   0.000488
98     98     -62.941544    -62.941696   0.000153
99     99     375.839478    375.839447   0.000031
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_original', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_original', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -389.834229 + 0.082715 * t."X_0" + 0.512813 * t."X_1" + 846.603271 * t."X_2" + -9.704976 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_original', 'RidgeRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_original', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -389.834229 + 0.082715 * t."X_0" + 0.512813 * t."X_1" + 846.603271 * t."X_2" + -9.704976 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_original', 'RidgeRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index    Estimator
0       0   355.162606
1       1  1255.660802
2       2   442.807489
3       3   259.730422
4       4   130.961326
..    ...          ...
95     95   732.474526
96     96  1001.809257
97     97   806.992147
98     98   -62.941508
99     99   375.839502

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_original', 'RidgeRegressor') Estimator 0.000299789221850304
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     116.976310    116.976089   0.000221
85     85     -57.005258    -57.005318   0.000060
86     86     612.549220    612.549011   0.000209
87     87     -57.232512    -57.232677   0.000165
88     88     579.344191    579.343872   0.000319
89     89     -40.246905    -40.246967   0.000062
90     90     243.308607    243.308441   0.000165
91     91      46.898500     46.898193   0.000307
92     92     191.872418    191.872131   0.000287
93     93     -56.523130    -56.523308   0.000177
94     94     744.269768    744.269531   0.000237
95     95     732.474526    732.474182   0.000344
96     96    1001.809257   1001.808716   0.000542
97     97     806.992147    806.991577   0.000570
98     98     -62.941508    -62.941696   0.000188
99     99     375.839502    375.839447   0.000055
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_original', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_original', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -389.834229 + 0.082715 * t."X_0" + 0.512813 * t."X_1" + 846.603271 * t."X_2" + -9.704976 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_original', 'RidgeRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_original', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -389.834229 + 0.082715 * t."X_0" + 0.512813 * t."X_1" + 846.603271 * t."X_2" + -9.704976 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_original', 'RidgeRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
