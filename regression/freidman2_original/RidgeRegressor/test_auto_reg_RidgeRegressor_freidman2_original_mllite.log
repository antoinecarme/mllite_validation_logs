          X_0          X_1       X_2        X_3       target
0   45.688718   609.092549  0.591968   7.449268   363.446298
1   92.630496  1621.621954  0.997097   3.905369  1619.565758
2   76.131749   526.792001  0.716619   5.202790   385.108775
3   40.067007   524.247515  0.463251   1.522912   246.139654
4   34.726296   778.125942  0.167246   2.339115   134.691570
..        ...          ...       ...        ...          ...
95  22.116345  1162.774063  0.675740   4.934592   786.044214
96  59.325419  1558.844569  0.742170   4.222862  1158.447272
97  74.947222  1754.316103  0.366207   1.961987   646.799393
98  52.067586   534.256140  0.155164   8.526538    97.892577
99   0.743929   167.010742  0.924844  10.614025   154.460077

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[4.5688717e+01 6.0909253e+02 5.9196806e-01 7.4492683e+00]
 [9.2630493e+01 1.6216219e+03 9.9709725e-01 3.9053690e+00]
 [7.6131752e+01 5.2679199e+02 7.1661860e-01 5.2027898e+00]
 [4.0067005e+01 5.2424750e+02 4.6325052e-01 1.5229123e+00]
 [3.4726295e+01 7.7812592e+02 1.6724615e-01 2.3391147e+00]] [ 363.4463  1619.5658   385.10876  246.13965  134.69157]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.006, 'TRAINING')
{ ,   , }
{ ,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : -381.071533,
			"coeffs" : [ 0.085715, 0.507069, 837.175903, -9.538642 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : -381.071533,
			"coeffs" : [ 0.085715, 0.507069, 837.175903, -9.538642 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"equations" : 	{
		"coeffs" : [ 0.085715, 0.507069, 837.175903, -9.538642 ],
		"intercept" : -381.071533
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 356.22192  1246.636     442.88214   261.48798   134.17082   278.20813
 1059.6274    137.78635   647.5162    309.9261    395.557     336.3015
  491.22363   575.0564    784.8168    -97.495285  489.31903    89.931694
  470.4378    498.57434   676.6237    738.43463   527.02234   527.1334
  160.51848   514.6546    696.52277   354.98328   237.01468   626.36084
  728.1954    362.31018   555.73956   535.8751    734.39374   662.9793
  443.23877   698.1921    308.54453   938.89044   239.27257   244.10559
  374.95786   347.15106   -48.904705 1183.7976   -133.50047   677.7857
  397.19363  -148.36075   426.42493   366.84872   874.9529     80.85581
  311.4507    439.34784   615.62714   464.40326   686.2914    880.52686
  950.2519    804.2254    413.31192   -60.069405  104.46415   596.15436
  181.55157   342.78293   597.77936   273.2578    851.69434   346.6815
   27.963673  177.4209    737.90283   368.94867   570.28656    15.697435
  708.89087   175.1346    985.6837     45.09423   393.1267   1120.6683
  120.4232    -51.259308  610.90137   -51.992832  577.9247    -35.01347
  245.29758    51.200108  194.67918   -50.984947  740.5024    729.0746
  995.5012    802.7764    -57.136032  376.69174 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 356.22208  1246.6364    442.88226   261.48813   134.17104   278.20844
 1059.6278    137.78659   647.5163    309.9262    395.5574    336.30167
  491.22375   575.05676   784.8171    -97.49516   489.3191     89.93185
  470.43805   498.57477   676.62415   738.4349    527.0225    527.13354
  160.51878   514.65466   696.5231    354.98352   237.01505   626.3612
  728.19574   362.31024   555.73975   535.87537   734.394     662.97955
  443.239     698.1923    308.54474   938.8908    239.27263   244.10565
  374.95807   347.1513    -48.904613 1183.798    -133.50038   677.7862
  397.19385  -148.36063   426.4253    366.8489    874.9531     80.855934
  311.4509    439.34808   615.6275    464.4035    686.29175   880.5272
  950.25226   804.2256    413.312     -60.069298  104.4643    596.1546
  181.55164   342.78302   597.7797    273.25793   851.6946    346.6818
   27.963795  177.42093   737.9032    368.94876   570.2868     15.697527
  708.89124   175.13467   985.6841     45.094414  393.12683  1120.6688
  120.423355  -51.259277  610.90155   -51.992725  577.9249    -35.01344
  245.29773    51.20032   194.67937   -50.984825  740.5025    729.07495
  995.5016    802.7768    -57.13591   376.69177 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'freidman2_original', 'size': 100, 'mse': 16434.662, 'mae': 95.03647, 'mape': 0.47585946, 'r2': 0.8618570862453969}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'freidman2_original', 'training_time_in_sec': 0.006, 'prediction_time_in_sec': 0.001}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ 0.392860 ],
      "X_1" : [ 2.665941 ],
      "X_2" : [ -3.412926 ],
      "X_3" : [ -5.141717 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 3, 2, 1, 0 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_original', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -381.071533 + 0.085715 * t."X_0" + 0.507069 * t."X_1" + 837.175903 * t."X_2" + -9.538642 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_original', 'RidgeRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_original', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -381.071533 + 0.085715 * t."X_0" + 0.507069 * t."X_1" + 837.175903 * t."X_2" + -9.538642 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_original', 'RidgeRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index    Estimator
0       0   356.222046
1       1  1246.636230
2       2   442.882202
3       3   261.488098
4       4   134.171021
..    ...          ...
95     95   729.074951
96     96   995.501587
97     97   802.776733
98     98   -57.135925
99     99   376.691711

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_original', 'RidgeRegressor') Estimator 0.0001850128173828125
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     120.423340    120.423203   0.000137
85     85     -51.259277    -51.259308   0.000031
86     86     610.901489    610.901367   0.000122
87     87     -51.992733    -51.992832   0.000099
88     88     577.924805    577.924683   0.000122
89     89     -35.013470    -35.013470   0.000000
90     90     245.297729    245.297577   0.000153
91     91      51.200321     51.200108   0.000214
92     92     194.679352    194.679184   0.000168
93     93     -50.984840    -50.984947   0.000107
94     94     740.502441    740.502380   0.000061
95     95     729.074951    729.074585   0.000366
96     96     995.501587    995.501221   0.000366
97     97     802.776733    802.776428   0.000305
98     98     -57.135925    -57.136032   0.000107
99     99     376.691711    376.691742  -0.000031
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_original', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_original_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_original', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -381.071533 + 0.085715 * t."X_0" + 0.507069 * t."X_1" + 837.175903 * t."X_2" + -9.538642 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_original', 'RidgeRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_original', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -381.071533 + 0.085715 * t."X_0" + 0.507069 * t."X_1" + 837.175903 * t."X_2" + -9.538642 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_original', 'RidgeRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index    Estimator
0       0   356.222106
1       1  1246.636386
2       2   442.882261
3       3   261.488120
4       4   134.171029
..    ...          ...
95     95   729.074936
96     96   995.501624
97     97   802.776870
98     98   -57.135911
99     99   376.691751

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_original', 'RidgeRegressor') Estimator 0.00022163522806572188
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     120.423362    120.423203   0.000160
85     85     -51.259253    -51.259308   0.000055
86     86     610.901531    610.901367   0.000164
87     87     -51.992717    -51.992832   0.000115
88     88     577.924883    577.924683   0.000201
89     89     -35.013444    -35.013470   0.000026
90     90     245.297730    245.297577   0.000153
91     91      51.200342     51.200108   0.000234
92     92     194.679389    194.679184   0.000205
93     93     -50.984814    -50.984947   0.000133
94     94     740.502477    740.502380   0.000096
95     95     729.074936    729.074585   0.000351
96     96     995.501624    995.501221   0.000403
97     97     802.776870    802.776428   0.000442
98     98     -57.135911    -57.136032   0.000121
99     99     376.691751    376.691742   0.000009
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_original', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
