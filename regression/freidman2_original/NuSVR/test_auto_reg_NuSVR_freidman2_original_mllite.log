          X_0          X_1       X_2        X_3       target
0   45.688718   609.092549  0.591968   7.449268   363.446298
1   92.630496  1621.621954  0.997097   3.905369  1619.565758
2   76.131749   526.792001  0.716619   5.202790   385.108775
3   40.067007   524.247515  0.463251   1.522912   246.139654
4   34.726296   778.125942  0.167246   2.339115   134.691570
..        ...          ...       ...        ...          ...
95  22.116345  1162.774063  0.675740   4.934592   786.044214
96  59.325419  1558.844569  0.742170   4.222862  1158.447272
97  74.947222  1754.316103  0.366207   1.961987   646.799393
98  52.067586   534.256140  0.155164   8.526538    97.892577
99   0.743929   167.010742  0.924844  10.614025   154.460077

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[4.5688717e+01 6.0909253e+02 5.9196806e-01 7.4492683e+00]
 [9.2630493e+01 1.6216219e+03 9.9709725e-01 3.9053690e+00]
 [7.6131752e+01 5.2679199e+02 7.1661860e-01 5.2027898e+00]
 [4.0067005e+01 5.2424750e+02 4.6325052e-01 1.5229123e+00]
 [3.4726295e+01 7.7812592e+02 1.6724615e-01 2.3391147e+00]] [ 363.4463  1619.5658   385.10876  246.13965  134.69157]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 24 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 36 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 48 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.026, 'TRAINING')
{ ,  "max_iter" : 128  , }
{ ,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.000001, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 50,
	"SupportVectors" : {
		"SV_00" : [ 92.630493, 1621.621948, 0.997097, 3.905369 ],
		"SV_01" : [ 34.726295, 778.125916, 0.167246, 2.339115 ],
		"SV_02" : [ 83.628975, 1564.098755, 0.798945, 2.980786 ],
		"SV_03" : [ 64.806686, 1046.145874, 0.071195, 8.048056 ],
		"SV_04" : [ 71.041054, 1540.879761, 0.056103, 6.055449 ],
		"SV_05" : [ 74.577126, 1412.240356, 0.582418, 4.633062 ],
		"SV_06" : [ 76.304665, 377.450928, 0.181362, 6.939103 ],
		"SV_07" : [ 11.772216, 671.264099, 0.172757, 1.573729 ],
		"SV_08" : [ 41.761013, 1756.453247, 0.074700, 8.084325 ],
		"SV_09" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
		"SV_10" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
		"SV_11" : [ 55.118420, 1002.086060, 0.726658, 4.570618 ],
		"SV_12" : [ 38.088467, 1321.297485, 0.052941, 10.429984 ],
		"SV_13" : [ 44.762737, 1255.201538, 0.591546, 2.754247 ],
		"SV_14" : [ 95.999474, 1121.298950, 0.682591, 3.437388 ],
		"SV_15" : [ 73.448112, 913.160706, 0.789831, 9.069126 ],
		"SV_16" : [ 2.070305, 957.545105, 0.737876, 2.535709 ],
		"SV_17" : [ 76.371201, 1620.264648, 0.622375, 3.062019 ],
		"SV_18" : [ 10.735011, 265.420807, 0.260950, 2.285511 ],
		"SV_19" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
		"SV_20" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
		"SV_21" : [ 1.405850, 1607.972168, 0.402955, 9.850420 ],
		"SV_22" : [ 17.761709, 423.498322, 0.135270, 10.148129 ],
		"SV_23" : [ 39.016674, 895.294678, 0.992031, 3.333866 ],
		"SV_24" : [ 78.286156, 508.159058, 0.252201, 1.424874 ],
		"SV_25" : [ 40.263954, 1592.242188, 0.611773, 6.435989 ],
		"SV_26" : [ 31.518255, 1755.028198, 0.586190, 5.455982 ],
		"SV_27" : [ 65.455681, 755.864746, 0.990681, 3.455762 ],
		"SV_28" : [ 11.179132, 444.204834, 0.202220, 7.809537 ],
		"SV_29" : [ 55.340031, 215.592316, 0.588332, 4.610499 ],
		"SV_30" : [ 63.422050, 921.190674, 0.969793, 5.416355 ],
		"SV_31" : [ 69.792320, 473.447937, 0.233546, 3.411072 ],
		"SV_32" : [ 66.012100, 216.127472, 0.564663, 3.090549 ],
		"SV_33" : [ 14.282172, 1575.160400, 0.428596, 4.169882 ],
		"SV_34" : [ 39.873802, 428.048248, 0.235384, 2.176043 ],
		"SV_35" : [ 51.401745, 1161.331543, 0.618557, 2.218271 ],
		"SV_36" : [ 22.605108, 1660.837036, 0.731124, 9.374556 ],
		"SV_37" : [ 78.244774, 702.214600, 0.183212, 9.434527 ],
		"SV_38" : [ 43.550098, 1462.972046, 0.939145, 3.150335 ],
		"SV_39" : [ 44.357746, 674.885315, 0.220269, 3.032311 ],
		"SV_40" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
		"SV_41" : [ 15.123654, 486.957489, 0.123542, 2.365677 ],
		"SV_42" : [ 45.437614, 168.841202, 0.343817, 3.279963 ],
		"SV_43" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
		"SV_44" : [ 26.014614, 517.573425, 0.156860, 6.909534 ],
		"SV_45" : [ 7.737632, 682.638123, 0.943330, 1.569080 ],
		"SV_46" : [ 22.116344, 1162.774048, 0.675740, 4.934592 ],
		"SV_47" : [ 59.325420, 1558.844604, 0.742170, 4.222862 ],
		"SV_48" : [ 74.947220, 1754.316162, 0.366207, 1.961987 ],
		"SV_49" : [ 52.067585, 534.256165, 0.155164, 8.526538 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef
	},
	"rho" : [ -397.845703 ],
	"nSV" : [ 50 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 48 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_original.json'

MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.000001, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 50,
	"SupportVectors" : {
		"SV_00" : [ 92.630493, 1621.621948, 0.997097, 3.905369 ],
		"SV_01" : [ 34.726295, 778.125916, 0.167246, 2.339115 ],
		"SV_02" : [ 83.628975, 1564.098755, 0.798945, 2.980786 ],
		"SV_03" : [ 64.806686, 1046.145874, 0.071195, 8.048056 ],
		"SV_04" : [ 71.041054, 1540.879761, 0.056103, 6.055449 ],
		"SV_05" : [ 74.577126, 1412.240356, 0.582418, 4.633062 ],
		"SV_06" : [ 76.304665, 377.450928, 0.181362, 6.939103 ],
		"SV_07" : [ 11.772216, 671.264099, 0.172757, 1.573729 ],
		"SV_08" : [ 41.761013, 1756.453247, 0.074700, 8.084325 ],
		"SV_09" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
		"SV_10" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
		"SV_11" : [ 55.118420, 1002.086060, 0.726658, 4.570618 ],
		"SV_12" : [ 38.088467, 1321.297485, 0.052941, 10.429984 ],
		"SV_13" : [ 44.762737, 1255.201538, 0.591546, 2.754247 ],
		"SV_14" : [ 95.999474, 1121.298950, 0.682591, 3.437388 ],
		"SV_15" : [ 73.448112, 913.160706, 0.789831, 9.069126 ],
		"SV_16" : [ 2.070305, 957.545105, 0.737876, 2.535709 ],
		"SV_17" : [ 76.371201, 1620.264648, 0.622375, 3.062019 ],
		"SV_18" : [ 10.735011, 265.420807, 0.260950, 2.285511 ],
		"SV_19" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
		"SV_20" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
		"SV_21" : [ 1.405850, 1607.972168, 0.402955, 9.850420 ],
		"SV_22" : [ 17.761709, 423.498322, 0.135270, 10.148129 ],
		"SV_23" : [ 39.016674, 895.294678, 0.992031, 3.333866 ],
		"SV_24" : [ 78.286156, 508.159058, 0.252201, 1.424874 ],
		"SV_25" : [ 40.263954, 1592.242188, 0.611773, 6.435989 ],
		"SV_26" : [ 31.518255, 1755.028198, 0.586190, 5.455982 ],
		"SV_27" : [ 65.455681, 755.864746, 0.990681, 3.455762 ],
		"SV_28" : [ 11.179132, 444.204834, 0.202220, 7.809537 ],
		"SV_29" : [ 55.340031, 215.592316, 0.588332, 4.610499 ],
		"SV_30" : [ 63.422050, 921.190674, 0.969793, 5.416355 ],
		"SV_31" : [ 69.792320, 473.447937, 0.233546, 3.411072 ],
		"SV_32" : [ 66.012100, 216.127472, 0.564663, 3.090549 ],
		"SV_33" : [ 14.282172, 1575.160400, 0.428596, 4.169882 ],
		"SV_34" : [ 39.873802, 428.048248, 0.235384, 2.176043 ],
		"SV_35" : [ 51.401745, 1161.331543, 0.618557, 2.218271 ],
		"SV_36" : [ 22.605108, 1660.837036, 0.731124, 9.374556 ],
		"SV_37" : [ 78.244774, 702.214600, 0.183212, 9.434527 ],
		"SV_38" : [ 43.550098, 1462.972046, 0.939145, 3.150335 ],
		"SV_39" : [ 44.357746, 674.885315, 0.220269, 3.032311 ],
		"SV_40" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
		"SV_41" : [ 15.123654, 486.957489, 0.123542, 2.365677 ],
		"SV_42" : [ 45.437614, 168.841202, 0.343817, 3.279963 ],
		"SV_43" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
		"SV_44" : [ 26.014614, 517.573425, 0.156860, 6.909534 ],
		"SV_45" : [ 7.737632, 682.638123, 0.943330, 1.569080 ],
		"SV_46" : [ 22.116344, 1162.774048, 0.675740, 4.934592 ],
		"SV_47" : [ 59.325420, 1558.844604, 0.742170, 4.222862 ],
		"SV_48" : [ 74.947220, 1754.316162, 0.366207, 1.961987 ],
		"SV_49" : [ 52.067585, 534.256165, 0.155164, 8.526538 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef
	},
	"rho" : [ -397.845703 ],
	"nSV" : [ 50 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 48 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 1e-06, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.5, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 50,
		"SupportVectors" : 	{
			"SV_00" : [ 92.630493, 1621.621948, 0.997097, 3.905369 ],
			"SV_01" : [ 34.726295, 778.125916, 0.167246, 2.339115 ],
			"SV_02" : [ 83.628975, 1564.098755, 0.798945, 2.980786 ],
			"SV_03" : [ 64.806686, 1046.145874, 0.071195, 8.048056 ],
			"SV_04" : [ 71.041054, 1540.879761, 0.056103, 6.055449 ],
			"SV_05" : [ 74.577126, 1412.240356, 0.582418, 4.633062 ],
			"SV_06" : [ 76.304665, 377.450928, 0.181362, 6.939103 ],
			"SV_07" : [ 11.772216, 671.264099, 0.172757, 1.573729 ],
			"SV_08" : [ 41.761013, 1756.453247, 0.0747, 8.084325 ],
			"SV_09" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
			"SV_10" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
			"SV_11" : [ 55.11842, 1002.08606, 0.726658, 4.570618 ],
			"SV_12" : [ 38.088467, 1321.297485, 0.052941, 10.429984 ],
			"SV_13" : [ 44.762737, 1255.201538, 0.591546, 2.754247 ],
			"SV_14" : [ 95.999474, 1121.29895, 0.682591, 3.437388 ],
			"SV_15" : [ 73.448112, 913.160706, 0.789831, 9.069126 ],
			"SV_16" : [ 2.070305, 957.545105, 0.737876, 2.535709 ],
			"SV_17" : [ 76.371201, 1620.264648, 0.622375, 3.062019 ],
			"SV_18" : [ 10.735011, 265.420807, 0.26095, 2.285511 ],
			"SV_19" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
			"SV_20" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
			"SV_21" : [ 1.40585, 1607.972168, 0.402955, 9.85042 ],
			"SV_22" : [ 17.761709, 423.498322, 0.13527, 10.148129 ],
			"SV_23" : [ 39.016674, 895.294678, 0.992031, 3.333866 ],
			"SV_24" : [ 78.286156, 508.159058, 0.252201, 1.424874 ],
			"SV_25" : [ 40.263954, 1592.242188, 0.611773, 6.435989 ],
			"SV_26" : [ 31.518255, 1755.028198, 0.58619, 5.455982 ],
			"SV_27" : [ 65.455681, 755.864746, 0.990681, 3.455762 ],
			"SV_28" : [ 11.179132, 444.204834, 0.20222, 7.809537 ],
			"SV_29" : [ 55.340031, 215.592316, 0.588332, 4.610499 ],
			"SV_30" : [ 63.42205, 921.190674, 0.969793, 5.416355 ],
			"SV_31" : [ 69.79232, 473.447937, 0.233546, 3.411072 ],
			"SV_32" : [ 66.0121, 216.127472, 0.564663, 3.090549 ],
			"SV_33" : [ 14.282172, 1575.1604, 0.428596, 4.169882 ],
			"SV_34" : [ 39.873802, 428.048248, 0.235384, 2.176043 ],
			"SV_35" : [ 51.401745, 1161.331543, 0.618557, 2.218271 ],
			"SV_36" : [ 22.605108, 1660.837036, 0.731124, 9.374556 ],
			"SV_37" : [ 78.244774, 702.2146, 0.183212, 9.434527 ],
			"SV_38" : [ 43.550098, 1462.972046, 0.939145, 3.150335 ],
			"SV_39" : [ 44.357746, 674.885315, 0.220269, 3.032311 ],
			"SV_40" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
			"SV_41" : [ 15.123654, 486.957489, 0.123542, 2.365677 ],
			"SV_42" : [ 45.437614, 168.841202, 0.343817, 3.279963 ],
			"SV_43" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
			"SV_44" : [ 26.014614, 517.573425, 0.15686, 6.909534 ],
			"SV_45" : [ 7.737632, 682.638123, 0.94333, 1.56908 ],
			"SV_46" : [ 22.116344, 1162.774048, 0.67574, 4.934592 ],
			"SV_47" : [ 59.32542, 1558.844604, 0.74217, 4.222862 ],
			"SV_48" : [ 74.94722, 1754.316162, 0.366207, 1.961987 ],
			"SV_49" : [ 52.067585, 534.256165, 0.155164, 8.526538 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0 ]
		},
		"classes" : 2,
		"nSV" : [ 50 ],
		"n_iter" : [ 48 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -397.845703 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[390.16446 409.66272 388.63058 388.58783 394.0795  403.27563 409.49377
 401.10123 388.0342  386.42682 409.38962 390.91064 390.50116 409.34906
 408.26056 386.6495  385.7565  391.5206  402.56094 409.55484 409.7068
 402.74094 390.23087 386.5513  401.1643  385.93558 399.96912 404.03873
 406.99823 408.7202  405.83377 385.7708  398.29086 396.57364 402.92813
 397.60986 402.69043 398.8083  396.9907  409.6809  385.75473 385.90958
 392.54266 401.23788 385.92105 409.61838 387.37802 409.64764 399.17126
 387.1572  407.5593  389.1044  397.143   388.3257  394.25278 405.61823
 409.70648 401.3131  409.63004 409.62805 409.55856 393.51266 387.96228
 387.421   390.7099  393.2378  385.76044 386.24213 408.43558 387.6689
 397.82657 405.79727 387.79526 385.7635  409.5563  386.03384 404.403
 387.19534 403.8789  385.93317 409.732   392.21353 388.73956 408.81757
 391.58383 385.835   391.32736 388.01346 398.1637  385.745   387.78583
 396.34753 395.00986 388.48514 391.78256 403.91406 409.49112 409.54776
 388.75446 385.78842]
('OPERATION_END_ELAPSED', 0.003, 'PREDICT')
('OPERATION_START', 'PREDICT')
[391.08478 408.83505 389.68384 389.6454  394.5368  402.5529  408.55643
 400.6365  389.1204  387.52042 408.41367 391.7499  391.38647 408.36945
 407.18286 387.7559  386.63007 392.2913  401.91943 409.05515 409.04178
 402.07922 391.14136 387.65363 400.69293 386.93372 399.648   403.23312
 405.94778 407.65372 404.86044 386.67392 398.19022 396.70203 402.24753
 397.5999  402.03415 398.6387  397.06262 408.84534 386.62436 386.89175
 393.19174 400.75558 386.90082 408.7291  388.4925  408.7908  398.9539
 388.272   406.48685 390.11945 397.195   389.39893 394.68765 404.66254
 408.95444 400.82315 409.0628  408.73355 409.05545 394.04288 389.05438
 388.53085 391.57315 393.80234 386.652   387.30914 407.3603  388.77692
 397.7876  404.83035 388.89755 386.6553  408.63486 387.06027 403.5599
 388.31396 403.08966 386.9353  408.98434 392.9041  389.78363 407.75677
 392.34964 386.50812 392.11975 389.10257 398.0795  386.52853 388.8893
 396.506   395.34598 389.54834 392.52243 403.12152 408.54004 409.04498
 389.8003  386.55762]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'freidman2_original', 'size': 100, 'mse': 117216.26, 'mae': 257.3525, 'mape': 1.0789622, 'r2': 0.014728964921828624}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_original.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'freidman2_original', 'training_time_in_sec': 0.026, 'prediction_time_in_sec': 0.002}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ -0.001631 ],
      "X_1" : [ 0.031489 ],
      "X_2" : [ -0.000000 ],
      "X_3" : [ -0.000030 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 1, 0, 3, 2 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_original_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_original_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_original', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_original" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.000000 AS "coeff", 92.630493 AS "sv_0", 1621.621948 AS "sv_1", 0.997097 AS "sv_2", 3.905369 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", -1.000000 AS "coeff", 34.726295 AS "sv_0", 778.125916 AS "sv_1", 0.167246 AS "sv_2", 2.339115 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", 1.000000 AS "coeff", 83.628975 AS "sv_0", 1564.098755 AS "sv_1", 0.798945 AS "sv_2", 2.980786 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", -1.000000 AS "coeff", 64.806686 AS "sv_0", 1046.145874 AS "sv_1", 0.071195 AS "sv_2", 8.04
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_original', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_original', 'NuSVR', 'duckdb')
87 AS "sv_3"
     UNION ALL
     SELECT 49 AS "sv_idx", -1.000000 AS "coeff", 52.067585 AS "sv_0", 534.256165 AS "sv_1", 0.155164 AS "sv_2", 8.526538 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -397.845703 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.000001 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_original', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index   Estimator
0       0  391.084769
1       1  408.835052
2       2  389.683841
3       3  389.645401
4       4  394.536810
..    ...         ...
95     95  403.121532
96     96  408.540051
97     97  409.044993
98     98  389.800299
99     99  386.557606

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_original', 'NuSVR') Estimator 0.7801492242352879
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     392.349625    391.583832   0.765793
85     85     386.508124    385.834991   0.673133
86     86     392.119737    391.327362   0.792375
87     87     389.102573    388.013458   1.089114
88     88     398.079486    398.163696  -0.084211
89     89     386.528531    385.744995   0.783536
90     90     388.889326    387.785828   1.103499
91     91     396.506005    396.347534   0.158471
92     92     395.345974    395.009857   0.336117
93     93     389.548349    388.485138   1.063211
94     94     392.522416    391.782562   0.739853
95     95     403.121532    403.914062  -0.792531
96     96     408.540051    409.491119  -0.951068
97     97     409.044993    409.547760  -0.502767
98     98     389.800299    388.754456   1.045843
99     99     386.557606    385.788422   0.769185
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_original', 'NuSVR', 'Failure')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_original_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_original', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_original" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.000000 AS "coeff", 92.630493 AS "sv_0", 1621.621948 AS "sv_1", 0.997097 AS "sv_2", 3.905369 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", -1.000000 AS "coeff", 34.726295 AS "sv_0", 778.125916 AS "sv_1", 0.167246 AS "sv_2", 2.339115 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", 1.000000 AS "coeff", 83.628975 AS "sv_0", 1564.098755 AS "sv_1", 0.798945 AS "sv_2", 2.980786 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", -1.000000 AS "coeff", 64.806686 AS "sv_0", 1046.145874 AS "sv_1", 0.071195 AS "sv_2", 8.04
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_original', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_original', 'NuSVR', 'sqlite')
 1.961987 AS "sv_3"
     UNION ALL
     SELECT 49 AS "sv_idx", -1.000000 AS "coeff", 52.067585 AS "sv_0", 534.256165 AS "sv_1", 0.155164 AS "sv_2", 8.526538 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -397.845703 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.000001 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_original', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index   Estimator
0       0  391.084769
1       1  408.835052
2       2  389.683841
3       3  389.645401
4       4  394.536811
..    ...         ...
95     95  403.121532
96     96  408.540051
97     97  409.044993
98     98  389.800299
99     99  386.557606

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_original', 'NuSVR') Estimator 0.7801492702836703
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     392.349625    391.583832   0.765794
85     85     386.508124    385.834991   0.673133
86     86     392.119737    391.327362   0.792375
87     87     389.102572    388.013458   1.089114
88     88     398.079486    398.163696  -0.084211
89     89     386.528531    385.744995   0.783536
90     90     388.889326    387.785828   1.103499
91     91     396.506005    396.347534   0.158471
92     92     395.345974    395.009857   0.336117
93     93     389.548349    388.485138   1.063211
94     94     392.522416    391.782562   0.739854
95     95     403.121532    403.914062  -0.792531
96     96     408.540051    409.491119  -0.951068
97     97     409.044993    409.547760  -0.502767
98     98     389.800299    388.754456   1.045843
99     99     386.557606    385.788422   0.769185
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_original', 'NuSVR', 'Failure')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
