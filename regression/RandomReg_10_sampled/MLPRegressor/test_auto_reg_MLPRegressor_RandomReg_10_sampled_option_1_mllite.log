          X_0       X_1       X_2  ...       X_8       X_9      target
0   -0.478793  2.502870 -0.103623  ... -1.647981  0.327583   49.318079
1    1.195055 -1.450382 -0.468737  ...  0.311669  0.685749   -0.276592
2   -0.648732 -0.880620  0.202193  ... -0.548644 -0.541692 -185.910228
3   -0.612877  0.045409  0.558935  ... -0.258238 -0.097936   33.841240
4   -0.749045 -0.067925  0.967609  ...  0.132868 -0.324339   65.232160
..        ...       ...       ...  ...       ...       ...         ...
123 -2.214870  2.759677  0.857991  ... -0.167392 -0.160258 -104.191600
124  0.189147  0.715404 -0.847843  ... -1.081071  0.847987  108.520222
125 -0.033760 -1.761045  0.998932  ...  0.906219  0.310541  -20.749972
126  0.080743  0.950698 -0.216079  ... -2.388599  0.184237 -197.572684
127 -1.670464  0.096577  1.548852  ... -1.129658  1.536895   84.375353

[128 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[-0.4787931   2.50287    -0.10362324 -1.0679785   0.85598224 -2.105926
   1.3220862  -0.73586607 -1.6479812   0.3275829 ]
 [ 1.1950554  -1.4503824  -0.46873727  0.28645465  0.7561831   0.4906449
  -0.91751045  0.852386    0.31166935  0.68574876]
 [-0.648732   -0.8806197   0.20219254  0.52595264  0.65514773 -0.64766103
   0.27212194 -2.4372282  -0.5486439  -0.54169184]
 [-0.6128774   0.04540905  0.55893517 -1.3404816   1.2081138  -0.7919418
   0.9230405   0.22838217 -0.25823826 -0.09793584]
 [-0.7490448  -0.06792526  0.9676091  -0.24765345 -0.7222614   0.46284628
   0.12873757  1.3984412   0.13286762 -0.324339  ]] [  49.318077     -0.27659237 -185.91023      33.84124      65.23216   ]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.012, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 128, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.088139, 0.310714, -0.300965, -0.077055 ],
			"coeffs_1" : [ 0.088907, -0.491681, 0.155878, -0.010197 ],
			"coeffs_2" : [ 0.526929, 0.109845, 0.511868, -0.133354 ],
			"coeffs_3" : [ 0.619173, -0.612093, -0.306264, 0.238544 ],
			"coeffs_4" : [ 0.370547, -0.283200, -0.363002, -0.478460 ],
			"coeffs_5" : [ 0.314499, -0.676053, -0.137792, 0.013544 ],
			"coeffs_6" : [ -0.161844, -0.625996, -0.368686, 0.506284 ],
			"coeffs_7" : [ -0.077011, -0.025391, -0.619549, 0.007227 ],
			"coeffs_8" : [ -0.192014, 0.210107, -0.147190, 0.247019 ],
			"coeffs_9" : [ -0.467205, 0.541851, -0.509685, 0.320019 ],
			"intercepts" : [ -0.500001, 0.348373, 0.187727, 0.565323 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.411864, -0.572196, 0.209331, 0.289484, 0.507601, 0.574837, 0.505829, -0.447092 ],
			"coeffs_1" : [ 0.389828, 0.606613, -0.425390, 0.348897, 0.233621, 0.085699, 0.057092, 0.433066 ],
			"coeffs_2" : [ -0.639972, 0.117465, 0.273194, 0.440896, -0.577032, 0.522213, -0.427841, -0.620480 ],
			"coeffs_3" : [ 0.676165, 0.644882, -0.065315, -0.540905, -0.051430, 0.645468, -0.542066, 0.250682 ],
			"intercepts" : [ 0.298202, 0.385675, 0.653118, -0.323673, 0.279843, 0.529977, 0.484054, -0.086745 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.614875, 0.296030, -0.021512, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.207297, 0.562976, 0.002564, -0.133482, -0.130336, -0.586402 ],
			"coeffs_2" : [ 0.249659, -0.168059, -0.220076, -0.133022, 0.290806, -0.462554 ],
			"coeffs_3" : [ -0.181873, 0.409344, 0.463983, 0.557300, 0.497091, 0.371699 ],
			"coeffs_4" : [ -0.310533, 0.030502, 0.157457, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.410220, 0.425972, 0.088510, -0.225065, -0.157679, -0.324393 ],
			"coeffs_6" : [ 0.311604, 0.329129, -0.422516, 0.212193, -0.398772, -0.001729 ],
			"coeffs_7" : [ 0.090405, -0.293918, 0.270517, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.624636, -0.464417, -0.260034, -0.494865, -0.479260, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.340808 ],
			"coeffs_1" : [ -0.183861 ],
			"coeffs_2" : [ -0.601403 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.840986 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576297 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_sampled_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 128, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.088139, 0.310714, -0.300965, -0.077055 ],
			"coeffs_1" : [ 0.088907, -0.491681, 0.155878, -0.010197 ],
			"coeffs_2" : [ 0.526929, 0.109845, 0.511868, -0.133354 ],
			"coeffs_3" : [ 0.619173, -0.612093, -0.306264, 0.238544 ],
			"coeffs_4" : [ 0.370547, -0.283200, -0.363002, -0.478460 ],
			"coeffs_5" : [ 0.314499, -0.676053, -0.137792, 0.013544 ],
			"coeffs_6" : [ -0.161844, -0.625996, -0.368686, 0.506284 ],
			"coeffs_7" : [ -0.077011, -0.025391, -0.619549, 0.007227 ],
			"coeffs_8" : [ -0.192014, 0.210107, -0.147190, 0.247019 ],
			"coeffs_9" : [ -0.467205, 0.541851, -0.509685, 0.320019 ],
			"intercepts" : [ -0.500001, 0.348373, 0.187727, 0.565323 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.411864, -0.572196, 0.209331, 0.289484, 0.507601, 0.574837, 0.505829, -0.447092 ],
			"coeffs_1" : [ 0.389828, 0.606613, -0.425390, 0.348897, 0.233621, 0.085699, 0.057092, 0.433066 ],
			"coeffs_2" : [ -0.639972, 0.117465, 0.273194, 0.440896, -0.577032, 0.522213, -0.427841, -0.620480 ],
			"coeffs_3" : [ 0.676165, 0.644882, -0.065315, -0.540905, -0.051430, 0.645468, -0.542066, 0.250682 ],
			"intercepts" : [ 0.298202, 0.385675, 0.653118, -0.323673, 0.279843, 0.529977, 0.484054, -0.086745 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.614875, 0.296030, -0.021512, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.207297, 0.562976, 0.002564, -0.133482, -0.130336, -0.586402 ],
			"coeffs_2" : [ 0.249659, -0.168059, -0.220076, -0.133022, 0.290806, -0.462554 ],
			"coeffs_3" : [ -0.181873, 0.409344, 0.463983, 0.557300, 0.497091, 0.371699 ],
			"coeffs_4" : [ -0.310533, 0.030502, 0.157457, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.410220, 0.425972, 0.088510, -0.225065, -0.157679, -0.324393 ],
			"coeffs_6" : [ 0.311604, 0.329129, -0.422516, 0.212193, -0.398772, -0.001729 ],
			"coeffs_7" : [ 0.090405, -0.293918, 0.270517, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.624636, -0.464417, -0.260034, -0.494865, -0.479260, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.340808 ],
			"coeffs_1" : [ -0.183861 ],
			"coeffs_2" : [ -0.601403 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.840986 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576297 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 128
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.088139, 0.310714, -0.300965, -0.077055 ],
			"coeffs_1" : [ 0.088907, -0.491681, 0.155878, -0.010197 ],
			"coeffs_2" : [ 0.526929, 0.109845, 0.511868, -0.133354 ],
			"coeffs_3" : [ 0.619173, -0.612093, -0.306264, 0.238544 ],
			"coeffs_4" : [ 0.370547, -0.2832, -0.363002, -0.47846 ],
			"coeffs_5" : [ 0.314499, -0.676053, -0.137792, 0.013544 ],
			"coeffs_6" : [ -0.161844, -0.625996, -0.368686, 0.506284 ],
			"coeffs_7" : [ -0.077011, -0.025391, -0.619549, 0.007227 ],
			"coeffs_8" : [ -0.192014, 0.210107, -0.14719, 0.247019 ],
			"coeffs_9" : [ -0.467205, 0.541851, -0.509685, 0.320019 ],
			"intercepts" : [ -0.500001, 0.348373, 0.187727, 0.565323 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.411864, -0.572196, 0.209331, 0.289484, 0.507601, 0.574837, 0.505829, -0.447092 ],
			"coeffs_1" : [ 0.389828, 0.606613, -0.42539, 0.348897, 0.233621, 0.085699, 0.057092, 0.433066 ],
			"coeffs_2" : [ -0.639972, 0.117465, 0.273194, 0.440896, -0.577032, 0.522213, -0.427841, -0.62048 ],
			"coeffs_3" : [ 0.676165, 0.644882, -0.065315, -0.540905, -0.05143, 0.645468, -0.542066, 0.250682 ],
			"intercepts" : [ 0.298202, 0.385675, 0.653118, -0.323673, 0.279843, 0.529977, 0.484054, -0.086745 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.614875, 0.29603, -0.021512, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.207297, 0.562976, 0.002564, -0.133482, -0.130336, -0.586402 ],
			"coeffs_2" : [ 0.249659, -0.168059, -0.220076, -0.133022, 0.290806, -0.462554 ],
			"coeffs_3" : [ -0.181873, 0.409344, 0.463983, 0.5573, 0.497091, 0.371699 ],
			"coeffs_4" : [ -0.310533, 0.030502, 0.157457, 0.443776, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.41022, 0.425972, 0.08851, -0.225065, -0.157679, -0.324393 ],
			"coeffs_6" : [ 0.311604, 0.329129, -0.422516, 0.212193, -0.398772, -0.001729 ],
			"coeffs_7" : [ 0.090405, -0.293918, 0.270517, -0.618701, -0.588556, 0.48808 ],
			"intercepts" : [ 0.624636, -0.464417, -0.260034, -0.494865, -0.47926, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.340808 ],
			"coeffs_1" : [ -0.183861 ],
			"coeffs_2" : [ -0.601403 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.840986 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576297 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-1.0437274  -0.7688061  -1.2005788  -0.9203394  -0.95430136 -0.8966832
 -1.1050916  -0.78617406 -0.8332595  -1.0227674  -1.6485978  -1.2775788
 -1.6500458  -0.851272   -0.9861185  -1.0419325  -0.9023745  -1.0961812
 -0.92069167 -0.95427877 -0.9735396  -0.89376456 -1.5638323  -1.0586748
 -1.0057722  -1.024688   -0.88587016 -0.8518601  -1.0202141  -0.9774813
 -1.0789073  -2.1081562  -0.8261911  -1.2737694  -0.9155668  -0.93393576
 -1.1482204  -0.8742642  -0.9316319  -1.364892   -1.0960214  -0.8994296
 -1.531357   -1.1097147  -1.1847817  -0.87384635 -0.829232   -0.9654287
 -0.8702506  -1.3175794  -0.8518109  -1.135346   -1.1714138  -1.1644422
 -0.9507069  -1.3103529  -0.8196781  -1.3442469  -0.7824484  -1.4940441
 -1.014095   -0.9051348  -1.1403799  -0.898868   -1.5602688  -1.0828322
 -1.3062441  -1.0022308  -1.5838608  -1.1309025  -1.1393832  -0.8784359
 -1.1410029  -1.0430532  -0.9473901  -0.81613994 -0.99239445 -1.2059569
 -0.90016687 -1.2334706  -0.8571641  -1.1845795  -0.89227766 -1.2172954
 -1.054304   -0.93024063 -0.9819779  -1.1861113  -0.7745919  -1.1902255
 -0.84563124 -1.1185908  -0.92453086 -1.2071929  -0.90100753 -0.8102476
 -1.2222378  -0.959679   -0.8576727  -1.0394     -0.7710258  -1.1226121
 -1.4864752  -0.85819215 -0.845658   -1.0823983  -0.855685   -1.2385153
 -1.6432545  -0.9898475  -1.2763727  -0.8023132  -0.84292704 -0.7908172
 -0.94327945 -0.9888608  -0.8832066  -1.1844249  -1.0355716  -0.82542443
 -1.1784711  -1.012161   -1.7067327  -1.2237488  -0.89155775 -0.98122096
 -1.323504   -0.9835877 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-1.0437275  -0.76880574 -1.2005783  -0.9203394  -0.954301   -0.89668286
 -1.1050912  -0.7861737  -0.83325917 -1.0227671  -1.6485977  -1.2775787
 -1.650045   -0.85127157 -0.98611736 -1.0419321  -0.9023739  -1.096181
 -0.9206911  -0.9542781  -0.9735393  -0.893764   -1.5638317  -1.0586739
 -1.0057712  -1.0246874  -0.8858697  -0.8518598  -1.0202137  -0.9774803
 -1.0789075  -2.1081553  -0.8261906  -1.2737688  -0.91556656 -0.9339353
 -1.1482201  -0.87426364 -0.9316318  -1.3648914  -1.0960209  -0.8994294
 -1.5313563  -1.1097146  -1.1847807  -0.8738465  -0.8292316  -0.96542794
 -0.8702502  -1.3175793  -0.85181063 -1.135345   -1.1714128  -1.1644415
 -0.9507069  -1.3103521  -0.81967765 -1.3442469  -0.7824479  -1.4940431
 -1.014095   -0.9051343  -1.1403791  -0.898868   -1.5602683  -1.0828323
 -1.3062434  -1.0022302  -1.58386    -1.1309023  -1.139383   -0.8784354
 -1.1410028  -1.0430522  -0.94738907 -0.8161394  -0.9923934  -1.2059567
 -0.90016615 -1.2334696  -0.8571639  -1.1845789  -0.89227676 -1.2172953
 -1.0543036  -0.9302396  -0.9819772  -1.18611    -0.77459145 -1.1902252
 -0.845631   -1.1185904  -0.9245304  -1.2071929  -0.901007   -0.8102472
 -1.2222371  -0.9596783  -0.85767233 -1.0393996  -0.7710251  -1.1226115
 -1.4864749  -0.8581915  -0.84565777 -1.0823979  -0.8556844  -1.2385155
 -1.6432542  -0.98984754 -1.2763715  -0.80231273 -0.84292626 -0.7908168
 -0.94327927 -0.98886085 -0.8832065  -1.1844249  -1.0355716  -0.82542425
 -1.178471   -1.0121603  -1.7067313  -1.2237488  -0.8915571  -0.9812205
 -1.3235034  -0.98358727]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'RandomReg_10_sampled', 'size': 128, 'mse': 22210.908, 'mae': 118.6449, 'mape': 1.0032198, 'r2': 0.0005420894306989998}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'RandomReg_10_sampled', 'training_time_in_sec': 0.012, 'prediction_time_in_sec': 0.002}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ 0.006089 ],
      "X_1" : [ 0.001016 ],
      "X_2" : [ 0.004667 ],
      "X_3" : [ 0.002710 ],
      "X_4" : [ -0.015480 ],
      "X_5" : [ 0.003725 ],
      "X_6" : [ 0.023586 ],
      "X_7" : [ -0.024003 ],
      "X_8" : [ 0.009736 ],
      "X_9" : [ 0.002571 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 7, 6, 4, 8, 0, 2, 5, 3, 9, 1 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_sampled_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_sampled_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_sampled', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "RandomReg_10_sampled" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.500001 + -0.088139 * t."OUT_0"  + 0.088907 * t."OUT_1"  + 0.526929 * t."OUT_2"  + 0.619173 * t."OUT_3"  + 0.370547 * t."OUT_4"  + 0.314499 * t."OUT_5"  + -0.16184
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_sampled', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_sampled', 'MLPRegressor', 'duckdb')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.576297 + -0.340808 * t."OUT_0"  + -0.183861 * t."OUT_1"  + -0.601403 * t."OUT_2"  + -0.667527 * t."OUT_3"  + -0.840986 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_sampled', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 128 entries, 0 to 127
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     128 non-null    float32
 1   X_1     128 non-null    float32
 2   X_2     128 non-null    float32
 3   X_3     128 non-null    float32
 4   X_4     128 non-null    float32
 5   X_5     128 non-null    float32
 6   X_6     128 non-null    float32
 7   X_7     128 non-null    float32
 8   X_8     128 non-null    float32
 9   X_9     128 non-null    float32
dtypes: float32(10)
memory usage: 6.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
...         ...       ...       ...  ...       ...       ...       ...
123   -2.214869  2.759677  0.857991  ... -0.491267 -0.167392 -0.160259
124    0.189147  0.715404 -0.847843  ... -1.143960 -1.081071  0.847987
125   -0.033760 -1.761045  0.998932  ...  0.626949  0.906219  0.310541
126    0.080743  0.950698 -0.216079  ...  1.616820 -2.388599  0.184237
127   -1.670464  0.096577  1.548852  ...  2.304386 -1.129658  1.536895

[128 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 128 entries, 0 to 127
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      128 non-null    int64  
 1   Estimator  128 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 2.1 KB
     index  Estimator
0        0  -1.043728
1        1  -0.768806
2        2  -1.200578
3        3  -0.920339
4        4  -0.954301
..     ...        ...
123    123  -1.223749
124    124  -0.891557
125    125  -0.981220
126    126  -1.323503
127    127  -0.983587

[128 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_sampled', 'MLPRegressor') Estimator 4.796311259269714e-07
     index  SQL_Estimator  Py_Estimator     SQL_Error
112    112      -0.842926     -0.842927  7.748604e-07
113    113      -0.790817     -0.790817  4.172325e-07
114    114      -0.943279     -0.943279  1.788139e-07
115    115      -0.988861     -0.988861 -5.960464e-08
116    116      -0.883206     -0.883207  1.192093e-07
117    117      -1.184425     -1.184425  0.000000e+00
118    118      -1.035572     -1.035572  0.000000e+00
119    119      -0.825424     -0.825424  1.788139e-07
120    120      -1.178471     -1.178471  1.192093e-07
121    121      -1.012160     -1.012161  7.152557e-07
122    122      -1.706731     -1.706733  1.430511e-06
123    123      -1.223749     -1.223749  0.000000e+00
124    124      -0.891557     -0.891558  6.556511e-07
125    125      -0.981220     -0.981221  4.768372e-07
126    126      -1.323503     -1.323504  5.960464e-07
127    127      -0.983587     -0.983588  4.172325e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_sampled', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_sampled_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_sampled', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "RandomReg_10_sampled" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.500001 + -0.088139 * t."OUT_0"  + 0.088907 * t."OUT_1"  + 0.526929 * t."OUT_2"  + 0.619173 * t."OUT_3"  + 0.370547 * t."OUT_4"  + 0.314499 * t."OUT_5"  + -0.16184
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_sampled', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_sampled', 'MLPRegressor', 'sqlite')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.576297 + -0.340808 * t."OUT_0"  + -0.183861 * t."OUT_1"  + -0.601403 * t."OUT_2"  + -0.667527 * t."OUT_3"  + -0.840986 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_sampled', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 128 entries, 0 to 127
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     128 non-null    float32
 1   X_1     128 non-null    float32
 2   X_2     128 non-null    float32
 3   X_3     128 non-null    float32
 4   X_4     128 non-null    float32
 5   X_5     128 non-null    float32
 6   X_6     128 non-null    float32
 7   X_7     128 non-null    float32
 8   X_8     128 non-null    float32
 9   X_9     128 non-null    float32
dtypes: float32(10)
memory usage: 6.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
...         ...       ...       ...  ...       ...       ...       ...
123   -2.214869  2.759677  0.857991  ... -0.491267 -0.167392 -0.160259
124    0.189147  0.715404 -0.847843  ... -1.143960 -1.081071  0.847987
125   -0.033760 -1.761045  0.998932  ...  0.626949  0.906219  0.310541
126    0.080743  0.950698 -0.216079  ...  1.616820 -2.388599  0.184237
127   -1.670464  0.096577  1.548852  ...  2.304386 -1.129658  1.536895

[128 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 128 entries, 0 to 127
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      128 non-null    int64  
 1   Estimator  128 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 2.1 KB
     index  Estimator
0        0  -1.043728
1        1  -0.768806
2        2  -1.200578
3        3  -0.920339
4        4  -0.954301
..     ...        ...
123    123  -1.223749
124    124  -0.891557
125    125  -0.981220
126    126  -1.323503
127    127  -0.983587

[128 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_sampled', 'MLPRegressor') Estimator 4.776382537402535e-07
     index  SQL_Estimator  Py_Estimator     SQL_Error
112    112      -0.842926     -0.842927  7.470062e-07
113    113      -0.790817     -0.790817  3.816373e-07
114    114      -0.943279     -0.943279  1.887583e-07
115    115      -0.988861     -0.988861 -4.756185e-08
116    116      -0.883207     -0.883207  9.615627e-08
117    117      -1.184425     -1.184425  1.516034e-07
118    118      -1.035572     -1.035572  6.623503e-08
119    119      -0.825424     -0.825424  2.039722e-07
120    120      -1.178471     -1.178471  2.574862e-07
121    121      -1.012160     -1.012161  6.243806e-07
122    122      -1.706731     -1.706733  1.359199e-06
123    123      -1.223749     -1.223749  5.847849e-08
124    124      -0.891557     -0.891558  5.983939e-07
125    125      -0.981220     -0.981221  5.037216e-07
126    126      -1.323503     -1.323504  6.970629e-07
127    127      -0.983587     -0.983588  4.466800e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_sampled', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
