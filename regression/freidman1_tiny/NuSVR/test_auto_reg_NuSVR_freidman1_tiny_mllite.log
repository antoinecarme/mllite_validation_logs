         X_0       X_1       X_2  ...       X_8       X_9     target
0   0.544738  0.515912  0.990435  ...  0.898018  0.377159  15.807614
1   0.783459  0.095321  0.135945  ...  0.019766  0.833486  14.766437
2   0.652811  0.757719  0.306902  ...  0.894295  0.086598  22.842493
3   0.226051  0.939732  0.731124  ...  0.185038  0.248943  19.544314
4   0.764610  0.378970  0.823855  ...  0.814980  0.123688  21.897690
5   0.368356  0.189593  0.403483  ...  0.462841  0.813023  11.119547
6   0.888102  0.149216  0.426902  ...  0.865909  0.986362   9.912128
7   0.825366  0.284076  0.971058  ...  0.780396  0.355315  15.012190
8   0.235384  0.117604  0.514017  ...  0.527227  0.211281  10.304959
9   0.834709  0.502155  0.670056  ...  0.038824  0.113899  12.722529
10  0.287599  0.939261  0.380885  ...  0.329620  0.003549  15.371187
11  0.992031  0.233387  0.782862  ...  0.461541  0.895167  11.851628
12  0.020119  0.541789  0.751033  ...  0.950842  0.143679  15.153405
13  0.830477  0.389094  0.475292  ...  0.479506  0.035941  11.800902
14  0.399336  0.628863  0.606025  ...  0.521303  0.455322  19.559005
15  0.634220  0.486969  0.969793  ...  0.697923  0.212891  21.151443

[16 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[0.54473835 0.51591223 0.99043506 0.25514543 0.14395337 0.33235115
  0.8686215  0.04108923 0.8980185  0.37715888]
 [0.78345853 0.09532096 0.1359447  0.858711   0.24078475 0.08367069
  0.05237448 0.42276597 0.01976581 0.8334865 ]
 [0.652811   0.75771934 0.3069025  0.8282855  0.7630638  0.85900337
  0.87337655 0.14607023 0.89429516 0.08659814]
 [0.22605109 0.9397324  0.7311243  0.8374556  0.7824477  0.3529266
  0.1832118  0.84345275 0.18503828 0.2489433 ]
 [0.76461023 0.37897    0.82385516 0.9136035  0.55340034 0.05504839
  0.58833206 0.36104986 0.81497955 0.12368783]] [15.807614 14.766437 22.842493 19.544313 21.89769 ]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.006, 'TRAINING')
{ ,  "max_iter" : 128  , }
{ ,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 1.117303, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 9,
	"SupportVectors" : {
		"SV_0" : [ 0.652811, 0.757719, 0.306902, 0.828286, 0.763064, 0.859003, 0.873377, 0.146070, 0.894295, 0.086598 ],
		"SV_1" : [ 0.226051, 0.939732, 0.731124, 0.837456, 0.782448, 0.352927, 0.183212, 0.843453, 0.185038, 0.248943 ],
		"SV_2" : [ 0.764610, 0.378970, 0.823855, 0.913603, 0.553400, 0.055048, 0.588332, 0.361050, 0.814980, 0.123688 ],
		"SV_3" : [ 0.368356, 0.189593, 0.403483, 0.670145, 0.411066, 0.464093, 0.307388, 0.840440, 0.462841, 0.813023 ],
		"SV_4" : [ 0.888102, 0.149216, 0.426902, 0.180039, 0.792176, 0.085835, 0.603319, 0.653572, 0.865909, 0.986362 ],
		"SV_5" : [ 0.235384, 0.117604, 0.514017, 0.633968, 0.618557, 0.121827, 0.576931, 0.091568, 0.527227, 0.211281 ],
		"SV_6" : [ 0.830477, 0.389094, 0.475292, 0.147457, 0.363702, 0.741192, 0.291713, 0.634453, 0.479506, 0.035941 ],
		"SV_7" : [ 0.399336, 0.628863, 0.606025, 0.837489, 0.772643, 0.257624, 0.166252, 0.040244, 0.521303, 0.455322 ],
		"SV_8" : [ 0.634220, 0.486969, 0.969793, 0.441636, 0.814121, 0.690923, 0.194226, 0.716476, 0.697923, 0.212891 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 1.000000, 0.393959, 1.000000, -1.000000, -1.000000, -1.000000, -1.000000, 0.606041, 1.000000 ]
	},
	"rho" : [ -15.660941 ],
	"nSV" : [ 9 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 7 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_tiny.json'

MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 1.117303, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 9,
	"SupportVectors" : {
		"SV_0" : [ 0.652811, 0.757719, 0.306902, 0.828286, 0.763064, 0.859003, 0.873377, 0.146070, 0.894295, 0.086598 ],
		"SV_1" : [ 0.226051, 0.939732, 0.731124, 0.837456, 0.782448, 0.352927, 0.183212, 0.843453, 0.185038, 0.248943 ],
		"SV_2" : [ 0.764610, 0.378970, 0.823855, 0.913603, 0.553400, 0.055048, 0.588332, 0.361050, 0.814980, 0.123688 ],
		"SV_3" : [ 0.368356, 0.189593, 0.403483, 0.670145, 0.411066, 0.464093, 0.307388, 0.840440, 0.462841, 0.813023 ],
		"SV_4" : [ 0.888102, 0.149216, 0.426902, 0.180039, 0.792176, 0.085835, 0.603319, 0.653572, 0.865909, 0.986362 ],
		"SV_5" : [ 0.235384, 0.117604, 0.514017, 0.633968, 0.618557, 0.121827, 0.576931, 0.091568, 0.527227, 0.211281 ],
		"SV_6" : [ 0.830477, 0.389094, 0.475292, 0.147457, 0.363702, 0.741192, 0.291713, 0.634453, 0.479506, 0.035941 ],
		"SV_7" : [ 0.399336, 0.628863, 0.606025, 0.837489, 0.772643, 0.257624, 0.166252, 0.040244, 0.521303, 0.455322 ],
		"SV_8" : [ 0.634220, 0.486969, 0.969793, 0.441636, 0.814121, 0.690923, 0.194226, 0.716476, 0.697923, 0.212891 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 1.000000, 0.393959, 1.000000, -1.000000, -1.000000, -1.000000, -1.000000, 0.606041, 1.000000 ]
	},
	"rho" : [ -15.660941 ],
	"nSV" : [ 9 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 7 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 16
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 1.117303, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.5, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 9,
		"SupportVectors" : 	{
			"SV_0" : [ 0.652811, 0.757719, 0.306902, 0.828286, 0.763064, 0.859003, 0.873377, 0.14607, 0.894295, 0.086598 ],
			"SV_1" : [ 0.226051, 0.939732, 0.731124, 0.837456, 0.782448, 0.352927, 0.183212, 0.843453, 0.185038, 0.248943 ],
			"SV_2" : [ 0.76461, 0.37897, 0.823855, 0.913603, 0.5534, 0.055048, 0.588332, 0.36105, 0.81498, 0.123688 ],
			"SV_3" : [ 0.368356, 0.189593, 0.403483, 0.670145, 0.411066, 0.464093, 0.307388, 0.84044, 0.462841, 0.813023 ],
			"SV_4" : [ 0.888102, 0.149216, 0.426902, 0.180039, 0.792176, 0.085835, 0.603319, 0.653572, 0.865909, 0.986362 ],
			"SV_5" : [ 0.235384, 0.117604, 0.514017, 0.633968, 0.618557, 0.121827, 0.576931, 0.091568, 0.527227, 0.211281 ],
			"SV_6" : [ 0.830477, 0.389094, 0.475292, 0.147457, 0.363702, 0.741192, 0.291713, 0.634453, 0.479506, 0.035941 ],
			"SV_7" : [ 0.399336, 0.628863, 0.606025, 0.837489, 0.772643, 0.257624, 0.166252, 0.040244, 0.521303, 0.455322 ],
			"SV_8" : [ 0.63422, 0.486969, 0.969793, 0.441636, 0.814121, 0.690923, 0.194226, 0.716476, 0.697923, 0.212891 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ 1.0, 0.393959, 1.0, -1.0, -1.0, -1.0, -1.0, 0.606041, 1.0 ]
		},
		"classes" : 2,
		"nSV" : [ 9 ],
		"n_iter" : [ 7 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -15.660941 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[15.761261  15.2414465 16.760628  16.28474   16.542158  14.642661
 14.54148   15.527341  15.280762  15.360736  15.708075  15.093613
 16.159811  15.078064  16.29943   16.384464 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[15.761261  15.2414465 16.760628  16.28474   16.542158  14.642661
 14.54148   15.52734   15.280763  15.360736  15.708074  15.093612
 16.159811  15.078064  16.29943   16.384464 ]
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'freidman1_tiny', 'size': 16, 'mse': 12.379766, 'mae': 2.9618094, 'mape': 0.20329541, 'r2': 0.273617099815167}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_tiny.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'freidman1_tiny', 'training_time_in_sec': 0.006, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -0.004349 ],
      "X_1" : [ -0.014402 ],
      "X_2" : [ 0.002910 ],
      "X_3" : [ -0.041165 ],
      "X_4" : [ -0.004577 ],
      "X_5" : [ -0.007138 ],
      "X_6" : [ 0.004703 ],
      "X_7" : [ 0.016665 ],
      "X_8" : [ 0.000825 ],
      "X_9" : [ -0.021230 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 3, 9, 7, 1, 5, 6, 4, 0, 2, 8 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_tiny_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_tiny_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_tiny', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_tiny" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.000000 AS "coeff", 0.652811 AS "sv_0", 0.757719 AS "sv_1", 0.306902 AS "sv_2", 0.828286 AS "sv_3", 0.763064 AS "sv_4", 0.859003 
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_tiny', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_tiny', 'NuSVR', 'duckdb')

    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -15.660941 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -1.117303 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_tiny', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
5      0.368356  0.189593  0.403483  ...  0.840440  0.462841  0.813023
6      0.888102  0.149216  0.426902  ...  0.653572  0.865909  0.986362
7      0.825366  0.284076  0.971058  ...  0.900471  0.780397  0.355315
8      0.235384  0.117604  0.514017  ...  0.091568  0.527227  0.211281
9      0.834709  0.502155  0.670056  ...  0.848192  0.038824  0.113899
10     0.287599  0.939261  0.380885  ...  0.812585  0.329620  0.003549
11     0.992031  0.233387  0.782862  ...  0.403574  0.461541  0.895167
12     0.020119  0.541789  0.751033  ...  0.708677  0.950842  0.143679
13     0.830477  0.389094  0.475292  ...  0.634453  0.479506  0.035941
14     0.399336  0.628863  0.606025  ...  0.040244  0.521303  0.455322
15     0.634220  0.486969  0.969793  ...  0.716476  0.697923  0.212891

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  15.761261
1       1  15.241446
2       2  16.760627
3       3  16.284741
4       4  16.542158
5       5  14.642661
6       6  14.541480
7       7  15.527340
8       8  15.280763
9       9  15.360736
10     10  15.708074
11     11  15.093612
12     12  16.159811
13     13  15.078064
14     14  16.299431
15     15  16.384463
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_tiny', 'NuSVR') Estimator 4.131238946492033e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      15.761261     15.761261  1.610223e-07
1       1      15.241446     15.241446 -4.033592e-07
2       2      16.760627     16.760628 -5.635467e-07
3       3      16.284741     16.284740  1.777861e-07
4       4      16.542158     16.542158  2.709184e-07
5       5      14.642661     14.642661  6.975269e-08
6       6      14.541480     14.541480 -9.043479e-08
7       7      15.527340     15.527341 -7.572618e-07
8       8      15.280763     15.280762  8.222613e-07
9       9      15.360736     15.360736 -2.096441e-07
10     10      15.708074     15.708075 -7.395666e-07
11     11      15.093612     15.093613 -9.975430e-07
12     12      16.159811     16.159811 -3.455543e-08
13     13      15.078064     15.078064 -7.553363e-08
14     14      16.299431     16.299431  1.144562e-07
15     15      16.384463     16.384464 -1.122340e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_tiny', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_tiny_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_tiny', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_tiny" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.000000 AS "coeff", 0.652811 AS "sv_0", 0.757719 AS "sv_1", 0.306902 AS "sv_2", 0.828286 AS "sv_3", 0.763064 AS "sv_4", 0.859003 
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_tiny', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_tiny', 'NuSVR', 'sqlite')
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -15.660941 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -1.117303 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_tiny', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
5      0.368356  0.189593  0.403483  ...  0.840440  0.462841  0.813023
6      0.888102  0.149216  0.426902  ...  0.653572  0.865909  0.986362
7      0.825366  0.284076  0.971058  ...  0.900471  0.780397  0.355315
8      0.235384  0.117604  0.514017  ...  0.091568  0.527227  0.211281
9      0.834709  0.502155  0.670056  ...  0.848192  0.038824  0.113899
10     0.287599  0.939261  0.380885  ...  0.812585  0.329620  0.003549
11     0.992031  0.233387  0.782862  ...  0.403574  0.461541  0.895167
12     0.020119  0.541789  0.751033  ...  0.708677  0.950842  0.143679
13     0.830477  0.389094  0.475292  ...  0.634453  0.479506  0.035941
14     0.399336  0.628863  0.606025  ...  0.040244  0.521303  0.455322
15     0.634220  0.486969  0.969793  ...  0.716476  0.697923  0.212891

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  15.761261
1       1  15.241446
2       2  16.760627
3       3  16.284741
4       4  16.542158
5       5  14.642661
6       6  14.541480
7       7  15.527340
8       8  15.280763
9       9  15.360736
10     10  15.708074
11     11  15.093612
12     12  16.159811
13     13  15.078064
14     14  16.299431
15     15  16.384463
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_tiny', 'NuSVR') Estimator 4.0733352513200316e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      15.761261     15.761261  2.150943e-07
1       1      15.241446     15.241446 -3.923170e-07
2       2      16.760627     16.760628 -5.113679e-07
3       3      16.284741     16.284740  2.375215e-07
4       4      16.542158     16.542158  2.814957e-07
5       5      14.642661     14.642661  9.563536e-08
6       6      14.541480     14.541480 -7.007494e-08
7       7      15.527340     15.527341 -7.435266e-07
8       8      15.280763     15.280762  8.197370e-07
9       9      15.360736     15.360736 -1.863200e-07
10     10      15.708074     15.708075 -7.380502e-07
11     11      15.093612     15.093613 -9.631815e-07
12     12      16.159811     16.159811  4.715299e-08
13     13      15.078064     15.078064 -1.930790e-08
14     14      16.299431     16.299431  1.233275e-07
15     15      16.384463     16.384464 -1.073226e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_tiny', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
