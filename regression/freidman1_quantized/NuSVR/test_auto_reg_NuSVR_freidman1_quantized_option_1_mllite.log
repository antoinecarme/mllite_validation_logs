    X_0  X_1  X_2  X_3  X_4  X_5  X_6  X_7  X_8  X_9     target
0     4    3    5    6    9    8   10    3    7    3  15.370928
1     6    4    4    2    4    0    3    5    1    1  13.065349
2     1    6    1    6    8    8    7    2    6    6  15.524062
3     0    7    0    2    9    4    5    1    7    9  12.395770
4     6    8    0    4    0    3    5    5    6    4  19.010028
..  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...        ...
95    7    6    8    3    7    4    7    4    3    0  20.439077
96    1    9    2    4    8    5    0    4    6    6  14.384506
97    9    7    4    1    8    9    0    3    2    6  14.885318
98    3    2    4    6    3    4    3    8    4    8  11.119547
99    2    2    2    0    1    7    5    0    7    0   4.502946

[100 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.  9.  8. 10.  3.  7.  3.]
 [ 6.  4.  4.  2.  4.  0.  3.  5.  1.  1.]
 [ 1.  6.  1.  6.  8.  8.  7.  2.  6.  6.]
 [ 0.  7.  0.  2.  9.  4.  5.  1.  7.  9.]
 [ 6.  8.  0.  4.  0.  3.  5.  5.  6.  4.]] [15.370928 13.06535  15.524062 12.39577  19.010029]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 24 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.019, 'TRAINING')
{ "nu" : 0.1,  "max_iter" : 128  , }
{ "nu" : 0.1,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.011928, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 14,
	"SupportVectors" : {
		"SV_00" : [ 6.000000, 5.000000, 7.000000, 7.000000, 6.000000, 5.000000, 3.000000, 1.000000, 0.000000, 6.000000 ],
		"SV_01" : [ 7.000000, 4.000000, 8.000000, 9.000000, 5.000000, 1.000000, 6.000000, 4.000000, 7.000000, 1.000000 ],
		"SV_02" : [ 2.000000, 3.000000, 6.000000, 0.000000, 5.000000, 2.000000, 1.000000, 9.000000, 4.000000, 4.000000 ],
		"SV_03" : [ 3.000000, 1.000000, 5.000000, 2.000000, 0.000000, 7.000000, 0.000000, 0.000000, 9.000000, 9.000000 ],
		"SV_04" : [ 5.000000, 4.000000, 1.000000, 9.000000, 8.000000, 9.000000, 1.000000, 5.000000, 10.000000, 7.000000 ],
		"SV_05" : [ 6.000000, 5.000000, 1.000000, 9.000000, 4.000000, 7.000000, 0.000000, 6.000000, 5.000000, 8.000000 ],
		"SV_06" : [ 9.000000, 0.000000, 3.000000, 2.000000, 2.000000, 0.000000, 1.000000, 8.000000, 8.000000, 6.000000 ],
		"SV_07" : [ 4.000000, 7.000000, 9.000000, 5.000000, 10.000000, 7.000000, 2.000000, 6.000000, 0.000000, 0.000000 ],
		"SV_08" : [ 9.000000, 1.000000, 6.000000, 0.000000, 1.000000, 4.000000, 9.000000, 6.000000, 1.000000, 6.000000 ],
		"SV_09" : [ 4.000000, 1.000000, 5.000000, 0.000000, 0.000000, 2.000000, 8.000000, 0.000000, 0.000000, 3.000000 ],
		"SV_10" : [ 5.000000, 7.000000, 3.000000, 8.000000, 7.000000, 8.000000, 8.000000, 1.000000, 8.000000, 0.000000 ],
		"SV_11" : [ 3.000000, 2.000000, 2.000000, 0.000000, 4.000000, 4.000000, 0.000000, 8.000000, 6.000000, 5.000000 ],
		"SV_12" : [ 0.000000, 2.000000, 1.000000, 1.000000, 4.000000, 7.000000, 7.000000, 1.000000, 3.000000, 8.000000 ],
		"SV_13" : [ 2.000000, 2.000000, 2.000000, 0.000000, 1.000000, 7.000000, 5.000000, 0.000000, 7.000000, 0.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 0.588424, 0.411577, -1.000000, -1.000000, 1.000000, 1.000000, -0.622438, 1.000000, -0.291799, -1.000000, 1.000000, -0.072273, -0.013491, -1.000000 ]
	},
	"rho" : [ -13.994666 ],
	"nSV" : [ 14 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 25 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.011928, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 14,
	"SupportVectors" : {
		"SV_00" : [ 6.000000, 5.000000, 7.000000, 7.000000, 6.000000, 5.000000, 3.000000, 1.000000, 0.000000, 6.000000 ],
		"SV_01" : [ 7.000000, 4.000000, 8.000000, 9.000000, 5.000000, 1.000000, 6.000000, 4.000000, 7.000000, 1.000000 ],
		"SV_02" : [ 2.000000, 3.000000, 6.000000, 0.000000, 5.000000, 2.000000, 1.000000, 9.000000, 4.000000, 4.000000 ],
		"SV_03" : [ 3.000000, 1.000000, 5.000000, 2.000000, 0.000000, 7.000000, 0.000000, 0.000000, 9.000000, 9.000000 ],
		"SV_04" : [ 5.000000, 4.000000, 1.000000, 9.000000, 8.000000, 9.000000, 1.000000, 5.000000, 10.000000, 7.000000 ],
		"SV_05" : [ 6.000000, 5.000000, 1.000000, 9.000000, 4.000000, 7.000000, 0.000000, 6.000000, 5.000000, 8.000000 ],
		"SV_06" : [ 9.000000, 0.000000, 3.000000, 2.000000, 2.000000, 0.000000, 1.000000, 8.000000, 8.000000, 6.000000 ],
		"SV_07" : [ 4.000000, 7.000000, 9.000000, 5.000000, 10.000000, 7.000000, 2.000000, 6.000000, 0.000000, 0.000000 ],
		"SV_08" : [ 9.000000, 1.000000, 6.000000, 0.000000, 1.000000, 4.000000, 9.000000, 6.000000, 1.000000, 6.000000 ],
		"SV_09" : [ 4.000000, 1.000000, 5.000000, 0.000000, 0.000000, 2.000000, 8.000000, 0.000000, 0.000000, 3.000000 ],
		"SV_10" : [ 5.000000, 7.000000, 3.000000, 8.000000, 7.000000, 8.000000, 8.000000, 1.000000, 8.000000, 0.000000 ],
		"SV_11" : [ 3.000000, 2.000000, 2.000000, 0.000000, 4.000000, 4.000000, 0.000000, 8.000000, 6.000000, 5.000000 ],
		"SV_12" : [ 0.000000, 2.000000, 1.000000, 1.000000, 4.000000, 7.000000, 7.000000, 1.000000, 3.000000, 8.000000 ],
		"SV_13" : [ 2.000000, 2.000000, 2.000000, 0.000000, 1.000000, 7.000000, 5.000000, 0.000000, 7.000000, 0.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 0.588424, 0.411577, -1.000000, -1.000000, 1.000000, 1.000000, -0.622438, 1.000000, -0.291799, -1.000000, 1.000000, -0.072273, -0.013491, -1.000000 ]
	},
	"rho" : [ -13.994666 ],
	"nSV" : [ 14 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 25 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 100
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 0.011928, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.1, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 14,
		"SupportVectors" : 	{
			"SV_00" : [ 6.0, 5.0, 7.0, 7.0, 6.0, 5.0, 3.0, 1.0, 0.0, 6.0 ],
			"SV_01" : [ 7.0, 4.0, 8.0, 9.0, 5.0, 1.0, 6.0, 4.0, 7.0, 1.0 ],
			"SV_02" : [ 2.0, 3.0, 6.0, 0.0, 5.0, 2.0, 1.0, 9.0, 4.0, 4.0 ],
			"SV_03" : [ 3.0, 1.0, 5.0, 2.0, 0.0, 7.0, 0.0, 0.0, 9.0, 9.0 ],
			"SV_04" : [ 5.0, 4.0, 1.0, 9.0, 8.0, 9.0, 1.0, 5.0, 10.0, 7.0 ],
			"SV_05" : [ 6.0, 5.0, 1.0, 9.0, 4.0, 7.0, 0.0, 6.0, 5.0, 8.0 ],
			"SV_06" : [ 9.0, 0.0, 3.0, 2.0, 2.0, 0.0, 1.0, 8.0, 8.0, 6.0 ],
			"SV_07" : [ 4.0, 7.0, 9.0, 5.0, 10.0, 7.0, 2.0, 6.0, 0.0, 0.0 ],
			"SV_08" : [ 9.0, 1.0, 6.0, 0.0, 1.0, 4.0, 9.0, 6.0, 1.0, 6.0 ],
			"SV_09" : [ 4.0, 1.0, 5.0, 0.0, 0.0, 2.0, 8.0, 0.0, 0.0, 3.0 ],
			"SV_10" : [ 5.0, 7.0, 3.0, 8.0, 7.0, 8.0, 8.0, 1.0, 8.0, 0.0 ],
			"SV_11" : [ 3.0, 2.0, 2.0, 0.0, 4.0, 4.0, 0.0, 8.0, 6.0, 5.0 ],
			"SV_12" : [ 0.0, 2.0, 1.0, 1.0, 4.0, 7.0, 7.0, 1.0, 3.0, 8.0 ],
			"SV_13" : [ 2.0, 2.0, 2.0, 0.0, 1.0, 7.0, 5.0, 0.0, 7.0, 0.0 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ 0.588424, 0.411577, -1.0, -1.0, 1.0, 1.0, -0.622438, 1.0, -0.291799, -1.0, 1.0, -0.072273, -0.013491, -1.0 ]
		},
		"classes" : 2,
		"nSV" : [ 14 ],
		"n_iter" : [ 25 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -13.994666 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[14.800286  13.449176  14.82371   14.107508  13.938798  14.426534
 13.854666  13.923882  13.851957  14.07458   13.782519  14.304302
 13.592598  14.6236515 14.970448  13.924669  13.855512  14.206734
 14.334117  14.431941  14.818732  13.343215  15.184513  14.585568
 14.280599  13.235392  14.746498  14.385615  14.5928135 12.902947
 13.476676  13.820516  14.742166  14.988791  13.950508  13.788448
 13.612951  13.331959  14.104669  12.869021  13.262516  14.224569
 13.759665  14.215858  14.299507  14.449346  14.561494  13.314492
 14.774721  13.472057  13.907737  14.029041  15.599471  15.463801
 13.642964  13.094374  14.147455  13.930126  13.812968  13.953151
 14.450129  13.556297  13.923289  14.041272  14.379819  14.434486
 15.188635  14.36504   13.152008  13.965914  12.592699  14.350979
 15.317857  14.085887  14.786722  14.451713  14.254509  14.192668
 14.762019  14.691433  13.607996  13.721713  13.779233  14.495598
 14.163911  13.83474   13.708574  15.222069  12.994352  14.125374
 12.9739275 13.406415  13.617081  15.216298  13.895356  14.517316
 14.534506  14.460909  13.986875  12.678698 ]
('OPERATION_END_ELAPSED', 0.003, 'PREDICT')
('OPERATION_START', 'PREDICT')
[14.800275  13.4491825 14.823697  14.107505  13.938801  14.426526
 13.854668  13.923884  13.851962  14.074579  13.782525  14.304292
 13.592604  14.623638  14.970443  13.924669  13.855518  14.20673
 14.33411   14.431935  14.818712  13.3432255 15.184497  14.585561
 14.280593  13.235406  14.746492  14.385608  14.592803  12.902946
 13.476684  13.820519  14.742149  14.9887705 13.950507  13.788448
 13.612959  13.331968  14.104666  12.869024  13.262524  14.224564
 13.759671  14.215853  14.2994995 14.449342  14.5614805 13.314503
 14.774705  13.472071  13.907742  14.029039  15.599465  15.4638
 13.642977  13.094379  14.1474495 13.930126  13.812974  13.953154
 14.450125  13.556307  13.923292  14.041269  14.379814  14.434476
 15.188629  14.365026  13.152021  13.965914  12.592709  14.350974
 15.317848  14.085889  14.786711  14.451707  14.254509  14.192663
 14.762     14.691424  13.608005  13.721723  13.77924   14.495591
 14.163899  13.834743  13.708577  15.222051  12.994358  14.125376
 12.973943  13.406427  13.617086  15.21628   13.895355  14.517312
 14.534493  14.460898  13.986876  12.678702 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman1_quantized', 'size': 100, 'mse': 19.297985, 'mae': 3.625687, 'mape': 0.32916766, 'r2': 0.1926150811171644}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman1_quantized', 'training_time_in_sec': 0.018, 'prediction_time_in_sec': 0.002}
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_quantized', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 0.588424 AS "coeff", 6.000000 AS "sv_0", 5.000000 AS "sv_1", 7.000000 AS "sv_2", 7.000000 AS "sv_3", 6.000000 AS "sv_4", 5.000
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_quantized', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_quantized', 'NuSVR', 'duckdb')

    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -13.994666 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.011928 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_quantized', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
       X_0  X_1  X_2  X_3  X_4  X_5   X_6  X_7  X_8  X_9
index                                                   
0      4.0  3.0  5.0  6.0  9.0  8.0  10.0  3.0  7.0  3.0
1      6.0  4.0  4.0  2.0  4.0  0.0   3.0  5.0  1.0  1.0
2      1.0  6.0  1.0  6.0  8.0  8.0   7.0  2.0  6.0  6.0
3      0.0  7.0  0.0  2.0  9.0  4.0   5.0  1.0  7.0  9.0
4      6.0  8.0  0.0  4.0  0.0  3.0   5.0  5.0  6.0  4.0
...    ...  ...  ...  ...  ...  ...   ...  ...  ...  ...
95     7.0  6.0  8.0  3.0  7.0  4.0   7.0  4.0  3.0  0.0
96     1.0  9.0  2.0  4.0  8.0  5.0   0.0  4.0  6.0  6.0
97     9.0  7.0  4.0  1.0  8.0  9.0   0.0  3.0  2.0  6.0
98     3.0  2.0  4.0  6.0  3.0  4.0   3.0  8.0  4.0  8.0
99     2.0  2.0  2.0  0.0  1.0  7.0   5.0  0.0  7.0  0.0

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  14.800274
1       1  13.449182
2       2  14.823697
3       3  14.107505
4       4  13.938800
..    ...        ...
95     95  14.517312
96     96  14.534494
97     97  14.460898
98     98  13.986876
99     99  12.678702

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_quantized', 'NuSVR') Estimator 7.273893360491002e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      14.163899     14.163911 -1.155511e-05
85     85      13.834742     13.834740  2.613860e-06
86     86      13.708577     13.708574  2.820264e-06
87     87      15.222051     15.222069 -1.791004e-05
88     88      12.994358     12.994352  5.924013e-06
89     89      14.125375     14.125374  1.407332e-06
90     90      12.973943     12.973927  1.524644e-05
91     91      13.406427     13.406415  1.186608e-05
92     92      13.617086     13.617081  5.236930e-06
93     93      15.216280     15.216298 -1.808735e-05
94     94      13.895355     13.895356 -1.447871e-06
95     95      14.517312     14.517316 -3.565232e-06
96     96      14.534494     14.534506 -1.222677e-05
97     97      14.460898     14.460909 -1.071488e-05
98     98      13.986876     13.986875  9.486552e-07
99     99      12.678702     12.678698  4.755436e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_quantized', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_quantized', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 0.588424 AS "coeff", 6.000000 AS "sv_0", 5.000000 AS "sv_1", 7.000000 AS "sv_2", 7.000000 AS "sv_3", 6.000000 AS "sv_4", 5.000
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_quantized', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_quantized', 'NuSVR', 'sqlite')
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -13.994666 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.011928 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_quantized', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
       X_0  X_1  X_2  X_3  X_4  X_5   X_6  X_7  X_8  X_9
index                                                   
0      4.0  3.0  5.0  6.0  9.0  8.0  10.0  3.0  7.0  3.0
1      6.0  4.0  4.0  2.0  4.0  0.0   3.0  5.0  1.0  1.0
2      1.0  6.0  1.0  6.0  8.0  8.0   7.0  2.0  6.0  6.0
3      0.0  7.0  0.0  2.0  9.0  4.0   5.0  1.0  7.0  9.0
4      6.0  8.0  0.0  4.0  0.0  3.0   5.0  5.0  6.0  4.0
...    ...  ...  ...  ...  ...  ...   ...  ...  ...  ...
95     7.0  6.0  8.0  3.0  7.0  4.0   7.0  4.0  3.0  0.0
96     1.0  9.0  2.0  4.0  8.0  5.0   0.0  4.0  6.0  6.0
97     9.0  7.0  4.0  1.0  8.0  9.0   0.0  3.0  2.0  6.0
98     3.0  2.0  4.0  6.0  3.0  4.0   3.0  8.0  4.0  8.0
99     2.0  2.0  2.0  0.0  1.0  7.0   5.0  0.0  7.0  0.0

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  14.800274
1       1  13.449182
2       2  14.823697
3       3  14.107505
4       4  13.938800
..    ...        ...
95     95  14.517312
96     96  14.534494
97     97  14.460898
98     98  13.986876
99     99  12.678702

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_quantized', 'NuSVR') Estimator 7.274869554638741e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      14.163899     14.163911 -1.154566e-05
85     85      13.834742     13.834740  2.621820e-06
86     86      13.708577     13.708574  2.847623e-06
87     87      15.222051     15.222069 -1.789329e-05
88     88      12.994358     12.994352  5.947453e-06
89     89      14.125375     14.125374  1.417399e-06
90     90      12.973943     12.973927  1.526953e-05
91     91      13.406427     13.406415  1.184149e-05
92     92      13.617086     13.617081  5.224604e-06
93     93      15.216280     15.216298 -1.808252e-05
94     94      13.895355     13.895356 -1.436545e-06
95     95      14.517312     14.517316 -3.563852e-06
96     96      14.534494     14.534506 -1.222423e-05
97     97      14.460898     14.460909 -1.071136e-05
98     98      13.986876     13.986875  9.545276e-07
99     99      12.678702     12.678698  4.769182e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_quantized', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_quantized', 'NuSVR', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 0.588424 AS "coeff", 6.000000 AS "sv_0", 5.000000 AS "sv_1", 7.000000 AS "sv_2", 7.000000 AS "sv_3", 6.000000 AS "sv_4", 5.000
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_quantized', 'NuSVR', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_quantized', 'NuSVR', 'pgsql')

    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -13.994666 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.011928 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_quantized', 'NuSVR', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
