    X_0  X_1  X_2  X_3  X_4  X_5  X_6  X_7  X_8  X_9     target
0     4    3    5    6    9    8   10    3    7    3  15.370928
1     6    4    4    2    4    0    3    5    1    1  13.065349
2     1    6    1    6    8    8    7    2    6    6  15.524062
3     0    7    0    2    9    4    5    1    7    9  12.395770
4     6    8    0    4    0    3    5    5    6    4  19.010028
..  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...        ...
95    7    6    8    3    7    4    7    4    3    0  20.439077
96    1    9    2    4    8    5    0    4    6    6  14.384506
97    9    7    4    1    8    9    0    3    2    6  14.885318
98    3    2    4    6    3    4    3    8    4    8  11.119547
99    2    2    2    0    1    7    5    0    7    0   4.502946

[100 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.  9.  8. 10.  3.  7.  3.]
 [ 6.  4.  4.  2.  4.  0.  3.  5.  1.  1.]
 [ 1.  6.  1.  6.  8.  8.  7.  2.  6.  6.]
 [ 0.  7.  0.  2.  9.  4.  5.  1.  7.  9.]
 [ 6.  8.  0.  4.  0.  3.  5.  5.  6.  4.]] [15.370928 13.06535  15.524062 12.39577  19.010029]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 24 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 36 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 48 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 60 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 72 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 84 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.049, 'TRAINING')
{ ,  "max_iter" : 128  , }
{ ,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.011928, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 61,
	"SupportVectors" : {
		"SV_00" : [ 0.000000, 7.000000, 0.000000, 2.000000, 9.000000, 4.000000, 5.000000, 1.000000, 7.000000, 9.000000 ],
		"SV_01" : [ 6.000000, 8.000000, 0.000000, 4.000000, 0.000000, 3.000000, 5.000000, 5.000000, 6.000000, 4.000000 ],
		"SV_02" : [ 6.000000, 4.000000, 8.000000, 8.000000, 2.000000, 6.000000, 7.000000, 8.000000, 5.000000, 5.000000 ],
		"SV_03" : [ 1.000000, 0.000000, 1.000000, 6.000000, 3.000000, 5.000000, 4.000000, 10.000000, 0.000000, 7.000000 ],
		"SV_04" : [ 6.000000, 5.000000, 7.000000, 7.000000, 6.000000, 5.000000, 3.000000, 1.000000, 0.000000, 6.000000 ],
		"SV_05" : [ 3.000000, 0.000000, 7.000000, 8.000000, 1.000000, 1.000000, 6.000000, 4.000000, 9.000000, 5.000000 ],
		"SV_06" : [ 1.000000, 8.000000, 9.000000, 6.000000, 7.000000, 2.000000, 0.000000, 0.000000, 0.000000, 9.000000 ],
		"SV_07" : [ 3.000000, 8.000000, 1.000000, 4.000000, 4.000000, 8.000000, 2.000000, 2.000000, 1.000000, 9.000000 ],
		"SV_08" : [ 2.000000, 7.000000, 2.000000, 10.000000, 8.000000, 2.000000, 6.000000, 3.000000, 3.000000, 6.000000 ],
		"SV_09" : [ 4.000000, 7.000000, 3.000000, 7.000000, 8.000000, 8.000000, 3.000000, 9.000000, 8.000000, 6.000000 ],
		"SV_10" : [ 4.000000, 6.000000, 1.000000, 9.000000, 2.000000, 3.000000, 4.000000, 9.000000, 5.000000, 6.000000 ],
		"SV_11" : [ 6.000000, 2.000000, 0.000000, 1.000000, 1.000000, 6.000000, 4.000000, 4.000000, 2.000000, 6.000000 ],
		"SV_12" : [ 7.000000, 4.000000, 8.000000, 9.000000, 5.000000, 1.000000, 6.000000, 4.000000, 7.000000, 1.000000 ],
		"SV_13" : [ 7.000000, 9.000000, 1.000000, 7.000000, 2.000000, 1.000000, 4.000000, 2.000000, 4.000000, 2.000000 ],
		"SV_14" : [ 5.000000, 5.000000, 9.000000, 4.000000, 8.000000, 6.000000, 2.000000, 7.000000, 6.000000, 3.000000 ],
		"SV_15" : [ 2.000000, 3.000000, 6.000000, 0.000000, 5.000000, 2.000000, 1.000000, 9.000000, 4.000000, 4.000000 ],
		"SV_16" : [ 8.000000, 1.000000, 7.000000, 0.000000, 5.000000, 6.000000, 5.000000, 7.000000, 3.000000, 2.000000 ],
		"SV_17" : [ 2.000000, 1.000000, 5.000000, 6.000000, 5.000000, 1.000000, 6.000000, 1.000000, 4.000000, 3.000000 ],
		"SV_18" : [ 6.000000, 9.000000, 4.000000, 8.000000, 9.000000, 2.000000, 4.000000, 4.000000, 1.000000, 3.000000 ],
		"SV_19" : [ 9.000000, 0.000000, 4.000000, 3.000000, 9.000000, 3.000000, 8.000000, 6.000000, 1.000000, 3.000000 ],
		"SV_20" : [ 1.000000, 1.000000, 3.000000, 4.000000, 6.000000, 7.000000, 5.000000, 0.000000, 3.000000, 3.000000 ],
		"SV_21" : [ 4.000000, 2.000000, 5.000000, 0.000000, 8.000000, 4.000000, 0.000000, 0.000000, 4.000000, 5.000000 ],
		"SV_22" : [ 2.000000, 5.000000, 2.000000, 2.000000, 0.000000, 5.000000, 0.000000, 4.000000, 9.000000, 0.000000 ],
		"SV_23" : [ 2.000000, 6.000000, 6.000000, 3.000000, 5.000000, 8.000000, 7.000000, 4.000000, 7.000000, 9.000000 ],
		"SV_24" : [ 3.000000, 1.000000, 5.000000, 2.000000, 0.000000, 7.000000, 0.000000, 0.000000, 9.000000, 9.000000 ],
		"SV_25" : [ 7.000000, 7.000000, 8.000000, 2.000000, 2.000000, 4.000000, 6.000000, 1.000000, 4.000000, 7.000000 ],
		"SV_26" : [ 7.000000, 2.000000, 1.000000, 8.000000, 2.000000, 6.000000, 6.000000, 6.000000, 2.000000, 8.000000 ],
		"SV_27" : [ 8.000000, 3.000000, 6.000000, 0.000000, 2.000000, 5.000000, 9.000000, 6.000000, 3.000000, 1.000000 ],
		"SV_28" : [ 0.000000, 7.000000, 0.000000, 8.000000, 8.000000, 7.000000, 5.000000, 2.000000, 9.000000, 9.000000 ],
		"SV_29" : [ 8.000000, 8.000000, 8.000000, 2.000000, 2.000000, 2.000000, 4.000000, 0.000000, 4.000000, 1.000000 ],
		"SV_30" : [ 8.000000, 7.000000, 9.000000, 3.000000, 2.000000, 8.000000, 8.000000, 8.000000, 7.000000, 8.000000 ],
		"SV_31" : [ 5.000000, 4.000000, 1.000000, 9.000000, 8.000000, 9.000000, 1.000000, 5.000000, 10.000000, 7.000000 ],
		"SV_32" : [ 6.000000, 5.000000, 1.000000, 9.000000, 4.000000, 7.000000, 0.000000, 6.000000, 5.000000, 8.000000 ],
		"SV_33" : [ 8.000000, 5.000000, 0.000000, 2.000000, 0.000000, 0.000000, 8.000000, 1.000000, 7.000000, 9.000000 ],
		"SV_34" : [ 9.000000, 0.000000, 3.000000, 2.000000, 2.000000, 0.000000, 1.000000, 8.000000, 8.000000, 6.000000 ],
		"SV_35" : [ 4.000000, 9.000000, 2.000000, 3.000000, 7.000000, 0.000000, 3.000000, 4.000000, 4.000000, 1.000000 ],
		"SV_36" : [ 1.000000, 4.000000, 3.000000, 2.000000, 9.000000, 4.000000, 9.000000, 7.000000, 4.000000, 8.000000 ],
		"SV_37" : [ 3.000000, 4.000000, 4.000000, 5.000000, 2.000000, 2.000000, 9.000000, 6.000000, 8.000000, 4.000000 ],
		"SV_38" : [ 4.000000, 7.000000, 7.000000, 6.000000, 5.000000, 2.000000, 8.000000, 0.000000, 9.000000, 4.000000 ],
		"SV_39" : [ 4.000000, 2.000000, 3.000000, 7.000000, 2.000000, 4.000000, 0.000000, 9.000000, 1.000000, 1.000000 ],
		"SV_40" : [ 4.000000, 4.000000, 0.000000, 3.000000, 9.000000, 8.000000, 1.000000, 5.000000, 0.000000, 2.000000 ],
		"SV_41" : [ 4.000000, 7.000000, 9.000000, 5.000000, 10.000000, 7.000000, 2.000000, 6.000000, 0.000000, 0.000000 ],
		"SV_42" : [ 0.000000, 2.000000, 9.000000, 9.000000, 7.000000, 9.000000, 5.000000, 9.000000, 9.000000, 7.000000 ],
		"SV_43" : [ 9.000000, 1.000000, 6.000000, 0.000000, 1.000000, 4.000000, 9.000000, 6.000000, 1.000000, 6.000000 ],
		"SV_44" : [ 4.000000, 1.000000, 5.000000, 0.000000, 0.000000, 2.000000, 8.000000, 0.000000, 0.000000, 3.000000 ],
		"SV_45" : [ 2.000000, 3.000000, 10.000000, 6.000000, 9.000000, 0.000000, 3.000000, 2.000000, 1.000000, 4.000000 ],
		"SV_46" : [ 5.000000, 7.000000, 3.000000, 8.000000, 7.000000, 8.000000, 8.000000, 1.000000, 8.000000, 0.000000 ],
		"SV_47" : [ 8.000000, 4.000000, 5.000000, 8.000000, 2.000000, 0.000000, 2.000000, 2.000000, 2.000000, 9.000000 ],
		"SV_48" : [ 9.000000, 4.000000, 5.000000, 7.000000, 6.000000, 4.000000, 2.000000, 1.000000, 8.000000, 8.000000 ],
		"SV_49" : [ 10.000000, 0.000000, 0.000000, 0.000000, 7.000000, 0.000000, 9.000000, 6.000000, 5.000000, 0.000000 ],
		"SV_50" : [ 9.000000, 4.000000, 3.000000, 4.000000, 7.000000, 6.000000, 3.000000, 8.000000, 8.000000, 8.000000 ],
		"SV_51" : [ 5.000000, 9.000000, 6.000000, 7.000000, 6.000000, 8.000000, 2.000000, 1.000000, 5.000000, 5.000000 ],
		"SV_52" : [ 3.000000, 2.000000, 2.000000, 0.000000, 4.000000, 4.000000, 0.000000, 8.000000, 6.000000, 5.000000 ],
		"SV_53" : [ 3.000000, 2.000000, 8.000000, 2.000000, 1.000000, 0.000000, 3.000000, 6.000000, 7.000000, 4.000000 ],
		"SV_54" : [ 0.000000, 2.000000, 1.000000, 1.000000, 4.000000, 7.000000, 7.000000, 1.000000, 3.000000, 8.000000 ],
		"SV_55" : [ 9.000000, 2.000000, 4.000000, 1.000000, 7.000000, 1.000000, 6.000000, 7.000000, 8.000000, 9.000000 ],
		"SV_56" : [ 7.000000, 8.000000, 3.000000, 9.000000, 5.000000, 10.000000, 6.000000, 0.000000, 7.000000, 4.000000 ],
		"SV_57" : [ 3.000000, 0.000000, 2.000000, 8.000000, 0.000000, 9.000000, 2.000000, 1.000000, 8.000000, 0.000000 ],
		"SV_58" : [ 7.000000, 6.000000, 8.000000, 3.000000, 7.000000, 4.000000, 7.000000, 4.000000, 3.000000, 0.000000 ],
		"SV_59" : [ 3.000000, 2.000000, 4.000000, 6.000000, 3.000000, 4.000000, 3.000000, 8.000000, 4.000000, 8.000000 ],
		"SV_60" : [ 2.000000, 2.000000, 2.000000, 0.000000, 1.000000, 7.000000, 5.000000, 0.000000, 7.000000, 0.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ -0.073227, 1.000000, 1.000000, -0.709677, 1.000000, -0.516637, 1.000000, 0.393581, 1.000000, 1.000000, 1.000000, -0.230306, 1.000000, 0.566533, 1.000000, -1.000000, -1.000000, -1.000000, 0.641196, -1.000000, -1.000000, -1.000000, -1.000000, -1.000000, -1.000000, 1.000000, 0.093420, -1.000000, 0.836865, -0.450512, 1.000000, 1.000000, 1.000000, 0.654314, -1.000000, 0.715718, -1.000000, -1.000000, 1.000000, -0.198783, 1.000000, 1.000000, 0.171421, -1.000000, -1.000000, 0.250282, 1.000000, 0.173684, 0.749003, -1.000000, 0.640819, 0.113162, -1.000000, -1.000000, -1.000000, -1.000000, 1.000000, -1.000000, 1.000000, -0.820858, -1.000000 ]
	},
	"rho" : [ -14.591139 ],
	"nSV" : [ 61 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 88 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized.json'

MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.011928, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 61,
	"SupportVectors" : {
		"SV_00" : [ 0.000000, 7.000000, 0.000000, 2.000000, 9.000000, 4.000000, 5.000000, 1.000000, 7.000000, 9.000000 ],
		"SV_01" : [ 6.000000, 8.000000, 0.000000, 4.000000, 0.000000, 3.000000, 5.000000, 5.000000, 6.000000, 4.000000 ],
		"SV_02" : [ 6.000000, 4.000000, 8.000000, 8.000000, 2.000000, 6.000000, 7.000000, 8.000000, 5.000000, 5.000000 ],
		"SV_03" : [ 1.000000, 0.000000, 1.000000, 6.000000, 3.000000, 5.000000, 4.000000, 10.000000, 0.000000, 7.000000 ],
		"SV_04" : [ 6.000000, 5.000000, 7.000000, 7.000000, 6.000000, 5.000000, 3.000000, 1.000000, 0.000000, 6.000000 ],
		"SV_05" : [ 3.000000, 0.000000, 7.000000, 8.000000, 1.000000, 1.000000, 6.000000, 4.000000, 9.000000, 5.000000 ],
		"SV_06" : [ 1.000000, 8.000000, 9.000000, 6.000000, 7.000000, 2.000000, 0.000000, 0.000000, 0.000000, 9.000000 ],
		"SV_07" : [ 3.000000, 8.000000, 1.000000, 4.000000, 4.000000, 8.000000, 2.000000, 2.000000, 1.000000, 9.000000 ],
		"SV_08" : [ 2.000000, 7.000000, 2.000000, 10.000000, 8.000000, 2.000000, 6.000000, 3.000000, 3.000000, 6.000000 ],
		"SV_09" : [ 4.000000, 7.000000, 3.000000, 7.000000, 8.000000, 8.000000, 3.000000, 9.000000, 8.000000, 6.000000 ],
		"SV_10" : [ 4.000000, 6.000000, 1.000000, 9.000000, 2.000000, 3.000000, 4.000000, 9.000000, 5.000000, 6.000000 ],
		"SV_11" : [ 6.000000, 2.000000, 0.000000, 1.000000, 1.000000, 6.000000, 4.000000, 4.000000, 2.000000, 6.000000 ],
		"SV_12" : [ 7.000000, 4.000000, 8.000000, 9.000000, 5.000000, 1.000000, 6.000000, 4.000000, 7.000000, 1.000000 ],
		"SV_13" : [ 7.000000, 9.000000, 1.000000, 7.000000, 2.000000, 1.000000, 4.000000, 2.000000, 4.000000, 2.000000 ],
		"SV_14" : [ 5.000000, 5.000000, 9.000000, 4.000000, 8.000000, 6.000000, 2.000000, 7.000000, 6.000000, 3.000000 ],
		"SV_15" : [ 2.000000, 3.000000, 6.000000, 0.000000, 5.000000, 2.000000, 1.000000, 9.000000, 4.000000, 4.000000 ],
		"SV_16" : [ 8.000000, 1.000000, 7.000000, 0.000000, 5.000000, 6.000000, 5.000000, 7.000000, 3.000000, 2.000000 ],
		"SV_17" : [ 2.000000, 1.000000, 5.000000, 6.000000, 5.000000, 1.000000, 6.000000, 1.000000, 4.000000, 3.000000 ],
		"SV_18" : [ 6.000000, 9.000000, 4.000000, 8.000000, 9.000000, 2.000000, 4.000000, 4.000000, 1.000000, 3.000000 ],
		"SV_19" : [ 9.000000, 0.000000, 4.000000, 3.000000, 9.000000, 3.000000, 8.000000, 6.000000, 1.000000, 3.000000 ],
		"SV_20" : [ 1.000000, 1.000000, 3.000000, 4.000000, 6.000000, 7.000000, 5.000000, 0.000000, 3.000000, 3.000000 ],
		"SV_21" : [ 4.000000, 2.000000, 5.000000, 0.000000, 8.000000, 4.000000, 0.000000, 0.000000, 4.000000, 5.000000 ],
		"SV_22" : [ 2.000000, 5.000000, 2.000000, 2.000000, 0.000000, 5.000000, 0.000000, 4.000000, 9.000000, 0.000000 ],
		"SV_23" : [ 2.000000, 6.000000, 6.000000, 3.000000, 5.000000, 8.000000, 7.000000, 4.000000, 7.000000, 9.000000 ],
		"SV_24" : [ 3.000000, 1.000000, 5.000000, 2.000000, 0.000000, 7.000000, 0.000000, 0.000000, 9.000000, 9.000000 ],
		"SV_25" : [ 7.000000, 7.000000, 8.000000, 2.000000, 2.000000, 4.000000, 6.000000, 1.000000, 4.000000, 7.000000 ],
		"SV_26" : [ 7.000000, 2.000000, 1.000000, 8.000000, 2.000000, 6.000000, 6.000000, 6.000000, 2.000000, 8.000000 ],
		"SV_27" : [ 8.000000, 3.000000, 6.000000, 0.000000, 2.000000, 5.000000, 9.000000, 6.000000, 3.000000, 1.000000 ],
		"SV_28" : [ 0.000000, 7.000000, 0.000000, 8.000000, 8.000000, 7.000000, 5.000000, 2.000000, 9.000000, 9.000000 ],
		"SV_29" : [ 8.000000, 8.000000, 8.000000, 2.000000, 2.000000, 2.000000, 4.000000, 0.000000, 4.000000, 1.000000 ],
		"SV_30" : [ 8.000000, 7.000000, 9.000000, 3.000000, 2.000000, 8.000000, 8.000000, 8.000000, 7.000000, 8.000000 ],
		"SV_31" : [ 5.000000, 4.000000, 1.000000, 9.000000, 8.000000, 9.000000, 1.000000, 5.000000, 10.000000, 7.000000 ],
		"SV_32" : [ 6.000000, 5.000000, 1.000000, 9.000000, 4.000000, 7.000000, 0.000000, 6.000000, 5.000000, 8.000000 ],
		"SV_33" : [ 8.000000, 5.000000, 0.000000, 2.000000, 0.000000, 0.000000, 8.000000, 1.000000, 7.000000, 9.000000 ],
		"SV_34" : [ 9.000000, 0.000000, 3.000000, 2.000000, 2.000000, 0.000000, 1.000000, 8.000000, 8.000000, 6.000000 ],
		"SV_35" : [ 4.000000, 9.000000, 2.000000, 3.000000, 7.000000, 0.000000, 3.000000, 4.000000, 4.000000, 1.000000 ],
		"SV_36" : [ 1.000000, 4.000000, 3.000000, 2.000000, 9.000000, 4.000000, 9.000000, 7.000000, 4.000000, 8.000000 ],
		"SV_37" : [ 3.000000, 4.000000, 4.000000, 5.000000, 2.000000, 2.000000, 9.000000, 6.000000, 8.000000, 4.000000 ],
		"SV_38" : [ 4.000000, 7.000000, 7.000000, 6.000000, 5.000000, 2.000000, 8.000000, 0.000000, 9.000000, 4.000000 ],
		"SV_39" : [ 4.000000, 2.000000, 3.000000, 7.000000, 2.000000, 4.000000, 0.000000, 9.000000, 1.000000, 1.000000 ],
		"SV_40" : [ 4.000000, 4.000000, 0.000000, 3.000000, 9.000000, 8.000000, 1.000000, 5.000000, 0.000000, 2.000000 ],
		"SV_41" : [ 4.000000, 7.000000, 9.000000, 5.000000, 10.000000, 7.000000, 2.000000, 6.000000, 0.000000, 0.000000 ],
		"SV_42" : [ 0.000000, 2.000000, 9.000000, 9.000000, 7.000000, 9.000000, 5.000000, 9.000000, 9.000000, 7.000000 ],
		"SV_43" : [ 9.000000, 1.000000, 6.000000, 0.000000, 1.000000, 4.000000, 9.000000, 6.000000, 1.000000, 6.000000 ],
		"SV_44" : [ 4.000000, 1.000000, 5.000000, 0.000000, 0.000000, 2.000000, 8.000000, 0.000000, 0.000000, 3.000000 ],
		"SV_45" : [ 2.000000, 3.000000, 10.000000, 6.000000, 9.000000, 0.000000, 3.000000, 2.000000, 1.000000, 4.000000 ],
		"SV_46" : [ 5.000000, 7.000000, 3.000000, 8.000000, 7.000000, 8.000000, 8.000000, 1.000000, 8.000000, 0.000000 ],
		"SV_47" : [ 8.000000, 4.000000, 5.000000, 8.000000, 2.000000, 0.000000, 2.000000, 2.000000, 2.000000, 9.000000 ],
		"SV_48" : [ 9.000000, 4.000000, 5.000000, 7.000000, 6.000000, 4.000000, 2.000000, 1.000000, 8.000000, 8.000000 ],
		"SV_49" : [ 10.000000, 0.000000, 0.000000, 0.000000, 7.000000, 0.000000, 9.000000, 6.000000, 5.000000, 0.000000 ],
		"SV_50" : [ 9.000000, 4.000000, 3.000000, 4.000000, 7.000000, 6.000000, 3.000000, 8.000000, 8.000000, 8.000000 ],
		"SV_51" : [ 5.000000, 9.000000, 6.000000, 7.000000, 6.000000, 8.000000, 2.000000, 1.000000, 5.000000, 5.000000 ],
		"SV_52" : [ 3.000000, 2.000000, 2.000000, 0.000000, 4.000000, 4.000000, 0.000000, 8.000000, 6.000000, 5.000000 ],
		"SV_53" : [ 3.000000, 2.000000, 8.000000, 2.000000, 1.000000, 0.000000, 3.000000, 6.000000, 7.000000, 4.000000 ],
		"SV_54" : [ 0.000000, 2.000000, 1.000000, 1.000000, 4.000000, 7.000000, 7.000000, 1.000000, 3.000000, 8.000000 ],
		"SV_55" : [ 9.000000, 2.000000, 4.000000, 1.000000, 7.000000, 1.000000, 6.000000, 7.000000, 8.000000, 9.000000 ],
		"SV_56" : [ 7.000000, 8.000000, 3.000000, 9.000000, 5.000000, 10.000000, 6.000000, 0.000000, 7.000000, 4.000000 ],
		"SV_57" : [ 3.000000, 0.000000, 2.000000, 8.000000, 0.000000, 9.000000, 2.000000, 1.000000, 8.000000, 0.000000 ],
		"SV_58" : [ 7.000000, 6.000000, 8.000000, 3.000000, 7.000000, 4.000000, 7.000000, 4.000000, 3.000000, 0.000000 ],
		"SV_59" : [ 3.000000, 2.000000, 4.000000, 6.000000, 3.000000, 4.000000, 3.000000, 8.000000, 4.000000, 8.000000 ],
		"SV_60" : [ 2.000000, 2.000000, 2.000000, 0.000000, 1.000000, 7.000000, 5.000000, 0.000000, 7.000000, 0.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ -0.073227, 1.000000, 1.000000, -0.709677, 1.000000, -0.516637, 1.000000, 0.393581, 1.000000, 1.000000, 1.000000, -0.230306, 1.000000, 0.566533, 1.000000, -1.000000, -1.000000, -1.000000, 0.641196, -1.000000, -1.000000, -1.000000, -1.000000, -1.000000, -1.000000, 1.000000, 0.093420, -1.000000, 0.836865, -0.450512, 1.000000, 1.000000, 1.000000, 0.654314, -1.000000, 0.715718, -1.000000, -1.000000, 1.000000, -0.198783, 1.000000, 1.000000, 0.171421, -1.000000, -1.000000, 0.250282, 1.000000, 0.173684, 0.749003, -1.000000, 0.640819, 0.113162, -1.000000, -1.000000, -1.000000, -1.000000, 1.000000, -1.000000, 1.000000, -0.820858, -1.000000 ]
	},
	"rho" : [ -14.591139 ],
	"nSV" : [ 61 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 88 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 100
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 0.011928, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.5, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 61,
		"SupportVectors" : 	{
			"SV_00" : [ 0.0, 7.0, 0.0, 2.0, 9.0, 4.0, 5.0, 1.0, 7.0, 9.0 ],
			"SV_01" : [ 6.0, 8.0, 0.0, 4.0, 0.0, 3.0, 5.0, 5.0, 6.0, 4.0 ],
			"SV_02" : [ 6.0, 4.0, 8.0, 8.0, 2.0, 6.0, 7.0, 8.0, 5.0, 5.0 ],
			"SV_03" : [ 1.0, 0.0, 1.0, 6.0, 3.0, 5.0, 4.0, 10.0, 0.0, 7.0 ],
			"SV_04" : [ 6.0, 5.0, 7.0, 7.0, 6.0, 5.0, 3.0, 1.0, 0.0, 6.0 ],
			"SV_05" : [ 3.0, 0.0, 7.0, 8.0, 1.0, 1.0, 6.0, 4.0, 9.0, 5.0 ],
			"SV_06" : [ 1.0, 8.0, 9.0, 6.0, 7.0, 2.0, 0.0, 0.0, 0.0, 9.0 ],
			"SV_07" : [ 3.0, 8.0, 1.0, 4.0, 4.0, 8.0, 2.0, 2.0, 1.0, 9.0 ],
			"SV_08" : [ 2.0, 7.0, 2.0, 10.0, 8.0, 2.0, 6.0, 3.0, 3.0, 6.0 ],
			"SV_09" : [ 4.0, 7.0, 3.0, 7.0, 8.0, 8.0, 3.0, 9.0, 8.0, 6.0 ],
			"SV_10" : [ 4.0, 6.0, 1.0, 9.0, 2.0, 3.0, 4.0, 9.0, 5.0, 6.0 ],
			"SV_11" : [ 6.0, 2.0, 0.0, 1.0, 1.0, 6.0, 4.0, 4.0, 2.0, 6.0 ],
			"SV_12" : [ 7.0, 4.0, 8.0, 9.0, 5.0, 1.0, 6.0, 4.0, 7.0, 1.0 ],
			"SV_13" : [ 7.0, 9.0, 1.0, 7.0, 2.0, 1.0, 4.0, 2.0, 4.0, 2.0 ],
			"SV_14" : [ 5.0, 5.0, 9.0, 4.0, 8.0, 6.0, 2.0, 7.0, 6.0, 3.0 ],
			"SV_15" : [ 2.0, 3.0, 6.0, 0.0, 5.0, 2.0, 1.0, 9.0, 4.0, 4.0 ],
			"SV_16" : [ 8.0, 1.0, 7.0, 0.0, 5.0, 6.0, 5.0, 7.0, 3.0, 2.0 ],
			"SV_17" : [ 2.0, 1.0, 5.0, 6.0, 5.0, 1.0, 6.0, 1.0, 4.0, 3.0 ],
			"SV_18" : [ 6.0, 9.0, 4.0, 8.0, 9.0, 2.0, 4.0, 4.0, 1.0, 3.0 ],
			"SV_19" : [ 9.0, 0.0, 4.0, 3.0, 9.0, 3.0, 8.0, 6.0, 1.0, 3.0 ],
			"SV_20" : [ 1.0, 1.0, 3.0, 4.0, 6.0, 7.0, 5.0, 0.0, 3.0, 3.0 ],
			"SV_21" : [ 4.0, 2.0, 5.0, 0.0, 8.0, 4.0, 0.0, 0.0, 4.0, 5.0 ],
			"SV_22" : [ 2.0, 5.0, 2.0, 2.0, 0.0, 5.0, 0.0, 4.0, 9.0, 0.0 ],
			"SV_23" : [ 2.0, 6.0, 6.0, 3.0, 5.0, 8.0, 7.0, 4.0, 7.0, 9.0 ],
			"SV_24" : [ 3.0, 1.0, 5.0, 2.0, 0.0, 7.0, 0.0, 0.0, 9.0, 9.0 ],
			"SV_25" : [ 7.0, 7.0, 8.0, 2.0, 2.0, 4.0, 6.0, 1.0, 4.0, 7.0 ],
			"SV_26" : [ 7.0, 2.0, 1.0, 8.0, 2.0, 6.0, 6.0, 6.0, 2.0, 8.0 ],
			"SV_27" : [ 8.0, 3.0, 6.0, 0.0, 2.0, 5.0, 9.0, 6.0, 3.0, 1.0 ],
			"SV_28" : [ 0.0, 7.0, 0.0, 8.0, 8.0, 7.0, 5.0, 2.0, 9.0, 9.0 ],
			"SV_29" : [ 8.0, 8.0, 8.0, 2.0, 2.0, 2.0, 4.0, 0.0, 4.0, 1.0 ],
			"SV_30" : [ 8.0, 7.0, 9.0, 3.0, 2.0, 8.0, 8.0, 8.0, 7.0, 8.0 ],
			"SV_31" : [ 5.0, 4.0, 1.0, 9.0, 8.0, 9.0, 1.0, 5.0, 10.0, 7.0 ],
			"SV_32" : [ 6.0, 5.0, 1.0, 9.0, 4.0, 7.0, 0.0, 6.0, 5.0, 8.0 ],
			"SV_33" : [ 8.0, 5.0, 0.0, 2.0, 0.0, 0.0, 8.0, 1.0, 7.0, 9.0 ],
			"SV_34" : [ 9.0, 0.0, 3.0, 2.0, 2.0, 0.0, 1.0, 8.0, 8.0, 6.0 ],
			"SV_35" : [ 4.0, 9.0, 2.0, 3.0, 7.0, 0.0, 3.0, 4.0, 4.0, 1.0 ],
			"SV_36" : [ 1.0, 4.0, 3.0, 2.0, 9.0, 4.0, 9.0, 7.0, 4.0, 8.0 ],
			"SV_37" : [ 3.0, 4.0, 4.0, 5.0, 2.0, 2.0, 9.0, 6.0, 8.0, 4.0 ],
			"SV_38" : [ 4.0, 7.0, 7.0, 6.0, 5.0, 2.0, 8.0, 0.0, 9.0, 4.0 ],
			"SV_39" : [ 4.0, 2.0, 3.0, 7.0, 2.0, 4.0, 0.0, 9.0, 1.0, 1.0 ],
			"SV_40" : [ 4.0, 4.0, 0.0, 3.0, 9.0, 8.0, 1.0, 5.0, 0.0, 2.0 ],
			"SV_41" : [ 4.0, 7.0, 9.0, 5.0, 10.0, 7.0, 2.0, 6.0, 0.0, 0.0 ],
			"SV_42" : [ 0.0, 2.0, 9.0, 9.0, 7.0, 9.0, 5.0, 9.0, 9.0, 7.0 ],
			"SV_43" : [ 9.0, 1.0, 6.0, 0.0, 1.0, 4.0, 9.0, 6.0, 1.0, 6.0 ],
			"SV_44" : [ 4.0, 1.0, 5.0, 0.0, 0.0, 2.0, 8.0, 0.0, 0.0, 3.0 ],
			"SV_45" : [ 2.0, 3.0, 10.0, 6.0, 9.0, 0.0, 3.0, 2.0, 1.0, 4.0 ],
			"SV_46" : [ 5.0, 7.0, 3.0, 8.0, 7.0, 8.0, 8.0, 1.0, 8.0, 0.0 ],
			"SV_47" : [ 8.0, 4.0, 5.0, 8.0, 2.0, 0.0, 2.0, 2.0, 2.0, 9.0 ],
			"SV_48" : [ 9.0, 4.0, 5.0, 7.0, 6.0, 4.0, 2.0, 1.0, 8.0, 8.0 ],
			"SV_49" : [ 10.0, 0.0, 0.0, 0.0, 7.0, 0.0, 9.0, 6.0, 5.0, 0.0 ],
			"SV_50" : [ 9.0, 4.0, 3.0, 4.0, 7.0, 6.0, 3.0, 8.0, 8.0, 8.0 ],
			"SV_51" : [ 5.0, 9.0, 6.0, 7.0, 6.0, 8.0, 2.0, 1.0, 5.0, 5.0 ],
			"SV_52" : [ 3.0, 2.0, 2.0, 0.0, 4.0, 4.0, 0.0, 8.0, 6.0, 5.0 ],
			"SV_53" : [ 3.0, 2.0, 8.0, 2.0, 1.0, 0.0, 3.0, 6.0, 7.0, 4.0 ],
			"SV_54" : [ 0.0, 2.0, 1.0, 1.0, 4.0, 7.0, 7.0, 1.0, 3.0, 8.0 ],
			"SV_55" : [ 9.0, 2.0, 4.0, 1.0, 7.0, 1.0, 6.0, 7.0, 8.0, 9.0 ],
			"SV_56" : [ 7.0, 8.0, 3.0, 9.0, 5.0, 10.0, 6.0, 0.0, 7.0, 4.0 ],
			"SV_57" : [ 3.0, 0.0, 2.0, 8.0, 0.0, 9.0, 2.0, 1.0, 8.0, 0.0 ],
			"SV_58" : [ 7.0, 6.0, 8.0, 3.0, 7.0, 4.0, 7.0, 4.0, 3.0, 0.0 ],
			"SV_59" : [ 3.0, 2.0, 4.0, 6.0, 3.0, 4.0, 3.0, 8.0, 4.0, 8.0 ],
			"SV_60" : [ 2.0, 2.0, 2.0, 0.0, 1.0, 7.0, 5.0, 0.0, 7.0, 0.0 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ -0.073227, 1.0, 1.0, -0.709677, 1.0, -0.516637, 1.0, 0.393581, 1.0, 1.0, 1.0, -0.230306, 1.0, 0.566533, 1.0, -1.0, -1.0, -1.0, 0.641196, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 0.09342, -1.0, 0.836865, -0.450512, 1.0, 1.0, 1.0, 0.654314, -1.0, 0.715718, -1.0, -1.0, 1.0, -0.198783, 1.0, 1.0, 0.171421, -1.0, -1.0, 0.250282, 1.0, 0.173684, 0.749003, -1.0, 0.640819, 0.113162, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -0.820858, -1.0 ]
		},
		"classes" : 2,
		"nSV" : [ 61 ],
		"n_iter" : [ 88 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -14.591139 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[15.601543  13.121658  16.308773  14.753942  15.904992  16.307365
 13.366363  12.924835  15.121769  13.953456  12.944655  15.690628
 13.773954  16.58539   17.608532  13.200575  13.2654915 14.600725
 16.671696  16.152351  17.955215  13.151052  18.142216  16.762032
 16.186506  11.967461  16.835964  17.50907   16.578653  11.504723
 11.6827755 12.960434  17.48338   18.752552  12.385168  12.341438
 12.788206  12.390528  14.682452  12.45849   12.695923  13.353697
 15.585125  15.129114  15.731609  15.21691   16.448006  11.73003
 16.885906  14.125756  15.415151  15.921808  17.857132  17.897282
 14.724312  11.910432  16.404493  12.810662  13.448256  15.914299
 16.795046  12.109976  13.720387  14.029024  15.910859  15.468275
 17.232819  15.535903  11.474433  13.933051  11.435119  15.637959
 17.681566  15.187037  17.62779   16.06001   16.10755   14.781147
 16.573679  17.239431  13.128788  12.087942  14.406697  15.914468
 15.849148  13.249534  13.262836  18.917099  11.120905  14.640557
 11.277553  11.625711  12.634458  18.388147  13.059827  15.9681635
 16.716087  15.978948  13.477498  11.211786 ]
('OPERATION_END_ELAPSED', 0.003, 'PREDICT')
('OPERATION_START', 'PREDICT')
[15.601526  13.121681  16.30874   14.753927  15.905     16.307358
 13.366375  12.924854  15.121768  13.953461  12.944674  15.690598
 13.773958  16.585361  17.60851   13.200596  13.265501  14.600717
 16.671669  16.152325  17.95517   13.1510725 18.142181  16.762016
 16.186478  11.967501  16.835949  17.50904   16.578646  11.504744
 11.682799  12.960438  17.483326  18.752499  12.385179  12.341438
 12.788218  12.390542  14.682428  12.458515  12.695944  13.3537035
 15.585131  15.129096  15.731577  15.216907  16.447962  11.730053
 16.88587   14.12578   15.415141  15.921804  17.857101  17.897255
 14.724339  11.910463  16.404482  12.81066   13.448261  15.914292
 16.795027  12.110023  13.720401  14.02903   15.910855  15.468278
 17.23279   15.535882  11.474468  13.933065  11.435169  15.637949
 17.68153   15.187032  17.62775   16.059994  16.10753   14.781147
 16.573637  17.239405  13.128805  12.08798   14.406703  15.91446
 15.849124  13.249561  13.26285   18.917038  11.120932  14.640561
 11.277582  11.625735  12.634472  18.388092  13.059829  15.9681635
 16.71605   15.978918  13.477497  11.211827 ]
('OPERATION_END_ELAPSED', 0.003, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'freidman1_quantized', 'size': 100, 'mse': 9.77984, 'mae': 2.6033812, 'mape': 0.25243253, 'r2': 0.5908330931132411}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'freidman1_quantized', 'training_time_in_sec': 0.049, 'prediction_time_in_sec': 0.003}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -0.055268 ],
      "X_1" : [ 0.015091 ],
      "X_2" : [ 0.002574 ],
      "X_3" : [ -0.342589 ],
      "X_4" : [ 0.048721 ],
      "X_5" : [ -0.097626 ],
      "X_6" : [ -0.021831 ],
      "X_7" : [ 0.016077 ],
      "X_8" : [ 0.005504 ],
      "X_9" : [ 0.002832 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 3, 5, 0, 4, 6, 7, 1, 8, 9, 2 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_quantized', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_quantized" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", -0.073227 AS "coeff", 0.000000 AS "sv_0", 7.000000 AS "sv_1", 0.000000 AS "sv_2", 2.000000 AS "sv_3", 9.000000 AS "sv_4", 4.0
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_quantized', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_quantized', 'NuSVR', 'duckdb')

    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -14.591139 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.011928 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_quantized', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
       X_0  X_1  X_2  X_3  X_4  X_5   X_6  X_7  X_8  X_9
index                                                   
0      4.0  3.0  5.0  6.0  9.0  8.0  10.0  3.0  7.0  3.0
1      6.0  4.0  4.0  2.0  4.0  0.0   3.0  5.0  1.0  1.0
2      1.0  6.0  1.0  6.0  8.0  8.0   7.0  2.0  6.0  6.0
3      0.0  7.0  0.0  2.0  9.0  4.0   5.0  1.0  7.0  9.0
4      6.0  8.0  0.0  4.0  0.0  3.0   5.0  5.0  6.0  4.0
...    ...  ...  ...  ...  ...  ...   ...  ...  ...  ...
95     7.0  6.0  8.0  3.0  7.0  4.0   7.0  4.0  3.0  0.0
96     1.0  9.0  2.0  4.0  8.0  5.0   0.0  4.0  6.0  6.0
97     9.0  7.0  4.0  1.0  8.0  9.0   0.0  3.0  2.0  6.0
98     3.0  2.0  4.0  6.0  3.0  4.0   3.0  8.0  4.0  8.0
99     2.0  2.0  2.0  0.0  1.0  7.0   5.0  0.0  7.0  0.0

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  15.601526
1       1  13.121681
2       2  16.308740
3       3  14.753927
4       4  15.905000
..    ...        ...
95     95  15.968163
96     96  16.716048
97     97  15.978918
98     98  13.477497
99     99  11.211827

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_quantized', 'NuSVR') Estimator 2.087602021491719e-05
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      15.849123     15.849148 -2.437961e-05
85     85      13.249562     13.249534  2.816259e-05
86     86      13.262850     13.262836  1.322906e-05
87     87      18.917038     18.917099 -6.083390e-05
88     88      11.120932     11.120905  2.696654e-05
89     89      14.640562     14.640557  4.243196e-06
90     90      11.277582     11.277553  2.918867e-05
91     91      11.625735     11.625711  2.386151e-05
92     92      12.634472     12.634458  1.474898e-05
93     93      18.388092     18.388147 -5.487437e-05
94     94      13.059829     13.059827  2.279270e-06
95     95      15.968163     15.968163 -1.885020e-07
96     96      16.716048     16.716087 -3.907820e-05
97     97      15.978918     15.978948 -2.921783e-05
98     98      13.477497     13.477498 -6.192387e-07
99     99      11.211827     11.211786  4.076222e-05
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_quantized', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_quantized_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_quantized', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_quantized" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", -0.073227 AS "coeff", 0.000000 AS "sv_0", 7.000000 AS "sv_1", 0.000000 AS "sv_2", 2.000000 AS "sv_3", 9.000000 AS "sv_4", 4.0
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_quantized', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_quantized', 'NuSVR', 'sqlite')
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -14.591139 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.011928 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_quantized', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
       X_0  X_1  X_2  X_3  X_4  X_5   X_6  X_7  X_8  X_9
index                                                   
0      4.0  3.0  5.0  6.0  9.0  8.0  10.0  3.0  7.0  3.0
1      6.0  4.0  4.0  2.0  4.0  0.0   3.0  5.0  1.0  1.0
2      1.0  6.0  1.0  6.0  8.0  8.0   7.0  2.0  6.0  6.0
3      0.0  7.0  0.0  2.0  9.0  4.0   5.0  1.0  7.0  9.0
4      6.0  8.0  0.0  4.0  0.0  3.0   5.0  5.0  6.0  4.0
...    ...  ...  ...  ...  ...  ...   ...  ...  ...  ...
95     7.0  6.0  8.0  3.0  7.0  4.0   7.0  4.0  3.0  0.0
96     1.0  9.0  2.0  4.0  8.0  5.0   0.0  4.0  6.0  6.0
97     9.0  7.0  4.0  1.0  8.0  9.0   0.0  3.0  2.0  6.0
98     3.0  2.0  4.0  6.0  3.0  4.0   3.0  8.0  4.0  8.0
99     2.0  2.0  2.0  0.0  1.0  7.0   5.0  0.0  7.0  0.0

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  15.601526
1       1  13.121681
2       2  16.308740
3       3  14.753927
4       4  15.905000
..    ...        ...
95     95  15.968163
96     96  16.716048
97     97  15.978918
98     98  13.477497
99     99  11.211827

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_quantized', 'NuSVR') Estimator 2.0878903304968333e-05
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      15.849123     15.849148 -2.438689e-05
85     85      13.249562     13.249534  2.814851e-05
86     86      13.262850     13.262836  1.317778e-05
87     87      18.917038     18.917099 -6.088835e-05
88     88      11.120932     11.120905  2.701914e-05
89     89      14.640562     14.640557  4.266759e-06
90     90      11.277582     11.277553  2.916204e-05
91     91      11.625735     11.625711  2.386641e-05
92     92      12.634472     12.634458  1.475294e-05
93     93      18.388093     18.388147 -5.484969e-05
94     94      13.059829     13.059827  2.282918e-06
95     95      15.968163     15.968163 -1.637176e-07
96     96      16.716048     16.716087 -3.911693e-05
97     97      15.978918     15.978948 -2.922592e-05
98     98      13.477497     13.477498 -6.264094e-07
99     99      11.211827     11.211786  4.077720e-05
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_quantized', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
