    X_0  X_1  X_2  X_3  X_4  X_5  X_6  X_7  X_8  X_9     target
0     4    3    5    6    9    8   10    3    7    3  15.370928
1     6    4    4    2    4    0    3    5    1    1  13.065349
2     1    6    1    6    8    8    7    2    6    6  15.524062
3     0    7    0    2    9    4    5    1    7    9  12.395770
4     6    8    0    4    0    3    5    5    6    4  19.010028
..  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...        ...
95    7    6    8    3    7    4    7    4    3    0  20.439077
96    1    9    2    4    8    5    0    4    6    6  14.384506
97    9    7    4    1    8    9    0    3    2    6  14.885318
98    3    2    4    6    3    4    3    8    4    8  11.119547
99    2    2    2    0    1    7    5    0    7    0   4.502946

[100 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.  9.  8. 10.  3.  7.  3.]
 [ 6.  4.  4.  2.  4.  0.  3.  5.  1.  1.]
 [ 1.  6.  1.  6.  8.  8.  7.  2.  6.  6.]
 [ 0.  7.  0.  2.  9.  4.  5.  1.  7.  9.]
 [ 6.  8.  0.  4.  0.  3.  5.  5.  6.  4.]] [15.370928 13.06535  15.524062 12.39577  19.010029]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.02, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.087043, 0.309405, -0.277156, -0.077476 ],
			"coeffs_1" : [ 0.089659, -0.489385, 0.179796, -0.006165 ],
			"coeffs_2" : [ 0.527467, 0.108903, 0.534357, -0.129811 ],
			"coeffs_3" : [ 0.619935, -0.609524, -0.284208, 0.217094 ],
			"coeffs_4" : [ 0.311387, -0.342322, -0.343117, -0.523201 ],
			"coeffs_5" : [ 0.252678, -0.674786, -0.114336, 0.002950 ],
			"coeffs_6" : [ -0.160995, -0.625169, -0.345157, 0.506627 ],
			"coeffs_7" : [ -0.078716, -0.025131, -0.586188, 0.007729 ],
			"coeffs_8" : [ -0.230977, 0.211526, -0.141681, 0.248043 ],
			"coeffs_9" : [ -0.466114, 0.543173, -0.489277, 0.322246 ],
			"intercepts" : [ -0.500910, 0.330124, 0.144239, 0.565784 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.412926, -0.573194, 0.265530, 0.224911, 0.448270, 0.577050, 0.506178, -0.487060 ],
			"coeffs_1" : [ 0.394033, 0.547254, -0.397194, 0.302663, 0.180267, 0.024111, 0.120888, 0.374750 ],
			"coeffs_2" : [ -0.606422, 0.089234, 0.280567, 0.406786, -0.594442, 0.481067, -0.402692, -0.653897 ],
			"coeffs_3" : [ 0.727103, 0.644808, -0.062678, -0.600650, -0.052122, 0.646570, -0.544562, 0.248977 ],
			"intercepts" : [ 0.349218, 0.386924, 0.654121, -0.387519, 0.269251, 0.467107, 0.485258, -0.093428 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.610396, 0.295993, -0.023396, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.266259, 0.559586, -0.003312, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.186746, -0.230646, -0.282191, -0.163966, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.246324, 0.345492, 0.431074, 0.526213, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.308524, 0.031508, 0.156838, 0.413519, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.346469, 0.424130, 0.079443, -0.254996, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313474, 0.333448, -0.472689, 0.181580, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.105209, -0.294055, 0.268314, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.562297, -0.464586, -0.275644, -0.525595, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.276834 ],
			"coeffs_1" : [ -0.181485 ],
			"coeffs_2" : [ -0.579469 ],
			"coeffs_3" : [ -0.638192 ],
			"coeffs_4" : [ -0.819586 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576118 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.087043, 0.309405, -0.277156, -0.077476 ],
			"coeffs_1" : [ 0.089659, -0.489385, 0.179796, -0.006165 ],
			"coeffs_2" : [ 0.527467, 0.108903, 0.534357, -0.129811 ],
			"coeffs_3" : [ 0.619935, -0.609524, -0.284208, 0.217094 ],
			"coeffs_4" : [ 0.311387, -0.342322, -0.343117, -0.523201 ],
			"coeffs_5" : [ 0.252678, -0.674786, -0.114336, 0.002950 ],
			"coeffs_6" : [ -0.160995, -0.625169, -0.345157, 0.506627 ],
			"coeffs_7" : [ -0.078716, -0.025131, -0.586188, 0.007729 ],
			"coeffs_8" : [ -0.230977, 0.211526, -0.141681, 0.248043 ],
			"coeffs_9" : [ -0.466114, 0.543173, -0.489277, 0.322246 ],
			"intercepts" : [ -0.500910, 0.330124, 0.144239, 0.565784 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.412926, -0.573194, 0.265530, 0.224911, 0.448270, 0.577050, 0.506178, -0.487060 ],
			"coeffs_1" : [ 0.394033, 0.547254, -0.397194, 0.302663, 0.180267, 0.024111, 0.120888, 0.374750 ],
			"coeffs_2" : [ -0.606422, 0.089234, 0.280567, 0.406786, -0.594442, 0.481067, -0.402692, -0.653897 ],
			"coeffs_3" : [ 0.727103, 0.644808, -0.062678, -0.600650, -0.052122, 0.646570, -0.544562, 0.248977 ],
			"intercepts" : [ 0.349218, 0.386924, 0.654121, -0.387519, 0.269251, 0.467107, 0.485258, -0.093428 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.610396, 0.295993, -0.023396, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.266259, 0.559586, -0.003312, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.186746, -0.230646, -0.282191, -0.163966, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.246324, 0.345492, 0.431074, 0.526213, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.308524, 0.031508, 0.156838, 0.413519, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.346469, 0.424130, 0.079443, -0.254996, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313474, 0.333448, -0.472689, 0.181580, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.105209, -0.294055, 0.268314, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.562297, -0.464586, -0.275644, -0.525595, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.276834 ],
			"coeffs_1" : [ -0.181485 ],
			"coeffs_2" : [ -0.579469 ],
			"coeffs_3" : [ -0.638192 ],
			"coeffs_4" : [ -0.819586 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576118 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 100
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.087043, 0.309405, -0.277156, -0.077476 ],
			"coeffs_1" : [ 0.089659, -0.489385, 0.179796, -0.006165 ],
			"coeffs_2" : [ 0.527467, 0.108903, 0.534357, -0.129811 ],
			"coeffs_3" : [ 0.619935, -0.609524, -0.284208, 0.217094 ],
			"coeffs_4" : [ 0.311387, -0.342322, -0.343117, -0.523201 ],
			"coeffs_5" : [ 0.252678, -0.674786, -0.114336, 0.00295 ],
			"coeffs_6" : [ -0.160995, -0.625169, -0.345157, 0.506627 ],
			"coeffs_7" : [ -0.078716, -0.025131, -0.586188, 0.007729 ],
			"coeffs_8" : [ -0.230977, 0.211526, -0.141681, 0.248043 ],
			"coeffs_9" : [ -0.466114, 0.543173, -0.489277, 0.322246 ],
			"intercepts" : [ -0.50091, 0.330124, 0.144239, 0.565784 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.412926, -0.573194, 0.26553, 0.224911, 0.44827, 0.57705, 0.506178, -0.48706 ],
			"coeffs_1" : [ 0.394033, 0.547254, -0.397194, 0.302663, 0.180267, 0.024111, 0.120888, 0.37475 ],
			"coeffs_2" : [ -0.606422, 0.089234, 0.280567, 0.406786, -0.594442, 0.481067, -0.402692, -0.653897 ],
			"coeffs_3" : [ 0.727103, 0.644808, -0.062678, -0.60065, -0.052122, 0.64657, -0.544562, 0.248977 ],
			"intercepts" : [ 0.349218, 0.386924, 0.654121, -0.387519, 0.269251, 0.467107, 0.485258, -0.093428 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.610396, 0.295993, -0.023396, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.266259, 0.559586, -0.003312, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.186746, -0.230646, -0.282191, -0.163966, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.246324, 0.345492, 0.431074, 0.526213, 0.47569, 0.371699 ],
			"coeffs_4" : [ -0.308524, 0.031508, 0.156838, 0.413519, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.346469, 0.42413, 0.079443, -0.254996, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313474, 0.333448, -0.472689, 0.18158, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.105209, -0.294055, 0.268314, -0.618701, -0.588556, 0.48808 ],
			"intercepts" : [ 0.562297, -0.464586, -0.275644, -0.525595, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.276834 ],
			"coeffs_1" : [ -0.181485 ],
			"coeffs_2" : [ -0.579469 ],
			"coeffs_3" : [ -0.638192 ],
			"coeffs_4" : [ -0.819586 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576118 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-1.6333727  -1.1177903  -1.2223631  -1.057678   -1.6245993  -1.6119413
 -1.0790193  -1.1835693  -1.8672545  -1.2801884  -1.3798103  -1.7847595
 -1.1867864  -1.4537444  -1.916996   -1.3458897  -1.7065159  -1.868038
 -2.2228081  -0.9891554  -1.5980638  -1.6039331  -1.4399352  -1.4991941
 -1.4332387  -1.2084357  -1.9632711  -1.1546583  -2.2235944  -0.94894546
 -1.1769841  -1.3775134  -2.7790363  -2.3545704  -1.2096065  -1.455565
 -1.0968405  -0.9536321  -1.4572072  -1.7558343  -1.1300728  -0.9902212
 -1.2040792  -2.0518353  -1.4212528  -1.6484158  -1.6763752  -1.0888414
 -1.3810649  -1.7321943  -1.4158609  -1.6347563  -1.3802972  -1.1932822
 -2.281261   -1.8374697  -1.187759   -1.148234   -1.8959944  -1.7730637
 -1.3860885  -0.8371738  -1.5932829  -1.5914996  -1.1280763  -1.5784457
 -3.4758315  -1.9466236  -1.4305923  -1.814666   -1.2783804  -2.6475782
 -1.9182311  -1.633465   -2.0056365  -2.859699   -1.1472919  -1.7414219
 -2.2102327  -1.1681194  -1.1462848  -0.84805167 -1.224744   -0.96685827
 -1.5978185  -1.0972135  -1.2490991  -1.8818988  -0.74485856 -1.1268176
 -1.3131751  -1.4485915  -1.4067855  -1.7094727  -1.5186064  -1.9896221
 -1.2206571  -1.2548224  -1.2120411  -1.1208165 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-1.6333733  -1.1177909  -1.2223631  -1.057678   -1.6245996  -1.6119425
 -1.0790187  -1.1835687  -1.8672552  -1.2801889  -1.3798101  -1.7847602
 -1.1867874  -1.4537444  -1.9169946  -1.3458903  -1.7065169  -1.8680375
 -2.2228084  -0.9891555  -1.5980647  -1.6039338  -1.439936   -1.4991941
 -1.4332392  -1.208437   -1.9632713  -1.1546582  -2.2235935  -0.94894564
 -1.1769848  -1.3775132  -2.7790358  -2.3545709  -1.2096074  -1.4555657
 -1.0968411  -0.9536315  -1.4572086  -1.7558357  -1.1300735  -0.99022126
 -1.2040787  -2.051836   -1.421254   -1.6484166  -1.6763749  -1.088841
 -1.381066   -1.7321959  -1.4158616  -1.6347576  -1.3802983  -1.1932831
 -2.2812624  -1.8374696  -1.1877598  -1.1482352  -1.8959949  -1.7730647
 -1.386089   -0.83717394 -1.5932834  -1.5915003  -1.1280767  -1.5784467
 -3.4758303  -1.9466236  -1.4305933  -1.8146667  -1.2783816  -2.6475766
 -1.9182324  -1.6334659  -2.005635   -2.8596976  -1.1472912  -1.7414229
 -2.2102332  -1.1681203  -1.1462841  -0.8480514  -1.2247446  -0.966858
 -1.5978177  -1.0972143  -1.2491001  -1.8818998  -0.74485856 -1.126817
 -1.3131762  -1.4485928  -1.4067872  -1.7094738  -1.5186064  -1.9896206
 -1.2206582  -1.2548237  -1.2120404  -1.120816  ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman1_quantized', 'size': 100, 'mse': 287.49005, 'mae': 16.171547, 'mape': 1.1166475, 'r2': -11.027947896146012}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman1_quantized', 'training_time_in_sec': 0.02, 'prediction_time_in_sec': 0.002}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -0.001694 ],
      "X_1" : [ -0.001016 ],
      "X_2" : [ 0.012480 ],
      "X_3" : [ 0.048177 ],
      "X_4" : [ -0.022024 ],
      "X_5" : [ 0.009052 ],
      "X_6" : [ -0.038357 ],
      "X_7" : [ -0.007268 ],
      "X_8" : [ 0.012017 ],
      "X_9" : [ -0.014597 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 3, 6, 4, 9, 2, 8, 5, 7, 0, 1 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_quantized_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_quantized', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_quantized" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.500910 + -0.087043 * t."OUT_0"  + 0.089659 * t."OUT_1"  + 0.527467 * t."OUT_2"  + 0.619935 * t."OUT_3"  + 0.311387 * t."OUT_4"  + 0.252678 * t."OUT_5"  + -0.160995
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_quantized', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_quantized', 'MLPRegressor', 'duckdb')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.576118 + -0.276834 * t."OUT_0"  + -0.181485 * t."OUT_1"  + -0.579469 * t."OUT_2"  + -0.638192 * t."OUT_3"  + -0.819586 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_quantized', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
       X_0  X_1  X_2  X_3  X_4  X_5   X_6  X_7  X_8  X_9
index                                                   
0      4.0  3.0  5.0  6.0  9.0  8.0  10.0  3.0  7.0  3.0
1      6.0  4.0  4.0  2.0  4.0  0.0   3.0  5.0  1.0  1.0
2      1.0  6.0  1.0  6.0  8.0  8.0   7.0  2.0  6.0  6.0
3      0.0  7.0  0.0  2.0  9.0  4.0   5.0  1.0  7.0  9.0
4      6.0  8.0  0.0  4.0  0.0  3.0   5.0  5.0  6.0  4.0
...    ...  ...  ...  ...  ...  ...   ...  ...  ...  ...
95     7.0  6.0  8.0  3.0  7.0  4.0   7.0  4.0  3.0  0.0
96     1.0  9.0  2.0  4.0  8.0  5.0   0.0  4.0  6.0  6.0
97     9.0  7.0  4.0  1.0  8.0  9.0   0.0  3.0  2.0  6.0
98     3.0  2.0  4.0  6.0  3.0  4.0   3.0  8.0  4.0  8.0
99     2.0  2.0  2.0  0.0  1.0  7.0   5.0  0.0  7.0  0.0

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  -1.633373
1       1  -1.117791
2       2  -1.222363
3       3  -1.057678
4       4  -1.624600
..    ...        ...
95     95  -1.989621
96     96  -1.220658
97     97  -1.254824
98     98  -1.212040
99     99  -1.120816

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_quantized', 'MLPRegressor') Estimator 7.337331771850586e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      -1.597818     -1.597818  8.344650e-07
85     85      -1.097214     -1.097214 -8.344650e-07
86     86      -1.249100     -1.249099 -9.536743e-07
87     87      -1.881900     -1.881899 -1.072884e-06
88     88      -0.744859     -0.744859  0.000000e+00
89     89      -1.126817     -1.126818  5.960464e-07
90     90      -1.313176     -1.313175 -1.072884e-06
91     91      -1.448593     -1.448591 -1.311302e-06
92     92      -1.406787     -1.406785 -1.668930e-06
93     93      -1.709474     -1.709473 -1.192093e-06
94     94      -1.518606     -1.518606  0.000000e+00
95     95      -1.989621     -1.989622  1.549721e-06
96     96      -1.220658     -1.220657 -1.072884e-06
97     97      -1.254824     -1.254822 -1.311302e-06
98     98      -1.212040     -1.212041  7.152557e-07
99     99      -1.120816     -1.120816  4.768372e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_quantized', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_quantized', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_quantized" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.500910 + -0.087043 * t."OUT_0"  + 0.089659 * t."OUT_1"  + 0.527467 * t."OUT_2"  + 0.619935 * t."OUT_3"  + 0.311387 * t."OUT_4"  + 0.252678 * t."OUT_5"  + -0.160995
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_quantized', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_quantized', 'MLPRegressor', 'sqlite')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.576118 + -0.276834 * t."OUT_0"  + -0.181485 * t."OUT_1"  + -0.579469 * t."OUT_2"  + -0.638192 * t."OUT_3"  + -0.819586 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_quantized', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
       X_0  X_1  X_2  X_3  X_4  X_5   X_6  X_7  X_8  X_9
index                                                   
0      4.0  3.0  5.0  6.0  9.0  8.0  10.0  3.0  7.0  3.0
1      6.0  4.0  4.0  2.0  4.0  0.0   3.0  5.0  1.0  1.0
2      1.0  6.0  1.0  6.0  8.0  8.0   7.0  2.0  6.0  6.0
3      0.0  7.0  0.0  2.0  9.0  4.0   5.0  1.0  7.0  9.0
4      6.0  8.0  0.0  4.0  0.0  3.0   5.0  5.0  6.0  4.0
...    ...  ...  ...  ...  ...  ...   ...  ...  ...  ...
95     7.0  6.0  8.0  3.0  7.0  4.0   7.0  4.0  3.0  0.0
96     1.0  9.0  2.0  4.0  8.0  5.0   0.0  4.0  6.0  6.0
97     9.0  7.0  4.0  1.0  8.0  9.0   0.0  3.0  2.0  6.0
98     3.0  2.0  4.0  6.0  3.0  4.0   3.0  8.0  4.0  8.0
99     2.0  2.0  2.0  0.0  1.0  7.0   5.0  0.0  7.0  0.0

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  -1.633373
1       1  -1.117791
2       2  -1.222363
3       3  -1.057678
4       4  -1.624600
..    ...        ...
95     95  -1.989621
96     96  -1.220658
97     97  -1.254824
98     98  -1.212040
99     99  -1.120816

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_quantized', 'MLPRegressor') Estimator 7.43927341159134e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      -1.597817     -1.597818  1.093573e-06
85     85      -1.097214     -1.097214 -9.454602e-07
86     86      -1.249100     -1.249099 -8.552776e-07
87     87      -1.881900     -1.881899 -1.143609e-06
88     88      -0.744859     -0.744859  2.812829e-09
89     89      -1.126817     -1.126818  4.302476e-07
90     90      -1.313176     -1.313175 -1.084169e-06
91     91      -1.448593     -1.448591 -1.420389e-06
92     92      -1.406787     -1.406785 -1.577330e-06
93     93      -1.709474     -1.709473 -1.233279e-06
94     94      -1.518607     -1.518606 -2.015744e-07
95     95      -1.989621     -1.989622  1.577869e-06
96     96      -1.220658     -1.220657 -1.102592e-06
97     97      -1.254824     -1.254822 -1.337555e-06
98     98      -1.212040     -1.212041  6.813226e-07
99     99      -1.120816     -1.120816  4.485880e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_quantized', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
