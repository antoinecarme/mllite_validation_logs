         age       sex       bmi  ...        s5        s6  target
0   0.038076  0.050680 -0.009439  ... -0.025953  0.106617    81.0
1   0.081666  0.050680  0.001339  ...  0.084492 -0.030072   196.0
2   0.041708 -0.044642 -0.008362  ... -0.048359 -0.030072    81.0
3  -0.041840 -0.044642  0.128521  ... -0.015999 -0.050783   259.0
4   0.023546  0.050680 -0.030996  ... -0.074093 -0.034215    55.0
..       ...       ...       ...  ...       ...       ...     ...
59  0.045341  0.050680  0.068163  ...  0.032432 -0.017646   259.0
60 -0.027310  0.050680  0.060618  ...  0.070207  0.135612   243.0
61 -0.001882 -0.044642  0.054152  ...  0.084492  0.048628   192.0
62  0.045341 -0.044642 -0.006206  ...  0.042897 -0.038357   134.0
63 -0.041840 -0.044642 -0.033151  ... -0.025953 -0.038357    94.0

[64 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[ 0.03807591  0.05068012 -0.00943939  0.00235142  0.00118295  0.03751653
  -0.05444576  0.05017634 -0.02595311  0.10661709]
 [ 0.08166637  0.05068012  0.00133873  0.03564379  0.12639466  0.09106492
   0.019187    0.03430886  0.08449153 -0.03007245]
 [ 0.04170844 -0.04464164 -0.00836158 -0.02632753  0.02457414  0.01622244
   0.07072993 -0.03949338 -0.04835926 -0.03007245]
 [-0.04183994 -0.04464164  0.12852055  0.0631866  -0.03321588 -0.03262872
   0.01182372 -0.03949338 -0.01599887 -0.05078298]
 [ 0.02354575  0.05068012 -0.03099563 -0.00567042 -0.01670444  0.01778818
  -0.03235593 -0.00259226 -0.0740926  -0.03421455]] [ 81. 196.  81. 259.  55.]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 24 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.018, 'TRAINING')
{ ,  "max_iter" : 128  , }
{ ,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 45.754257, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 32,
	"SupportVectors" : {
		"SV_00" : [ 0.038076, 0.050680, -0.009439, 0.002351, 0.001183, 0.037517, -0.054446, 0.050176, -0.025953, 0.106617 ],
		"SV_01" : [ 0.041708, -0.044642, -0.008362, -0.026328, 0.024574, 0.016222, 0.070730, -0.039493, -0.048359, -0.030072 ],
		"SV_02" : [ -0.041840, -0.044642, 0.128521, 0.063187, -0.033216, -0.032629, 0.011824, -0.039493, -0.015999, -0.050783 ],
		"SV_03" : [ 0.023546, 0.050680, -0.030996, -0.005670, -0.016704, 0.017788, -0.032356, -0.002592, -0.074093, -0.034215 ],
		"SV_04" : [ 0.016281, 0.050680, 0.014272, 0.001215, 0.001183, -0.021355, -0.032356, 0.034309, 0.074966, 0.040343 ],
		"SV_05" : [ -0.085430, -0.044642, -0.004050, -0.009113, -0.002945, 0.007767, 0.022869, -0.039493, -0.061176, -0.013504 ],
		"SV_06" : [ -0.001882, -0.044642, 0.033673, 0.125158, 0.024574, 0.026243, -0.010266, -0.002592, 0.026717, 0.061054 ],
		"SV_07" : [ -0.052738, -0.044642, 0.071397, -0.074527, -0.015328, -0.001314, 0.004460, -0.021412, -0.046883, 0.003064 ],
		"SV_08" : [ 0.009016, 0.050680, 0.069241, 0.059744, 0.017694, -0.023234, -0.047082, 0.034309, 0.103297, 0.073480 ],
		"SV_09" : [ -0.060003, 0.050680, -0.047163, -0.022885, -0.071743, -0.057681, -0.006584, -0.039493, -0.062917, -0.054925 ],
		"SV_10" : [ 0.030811, -0.044642, -0.033151, -0.022885, -0.046975, -0.081167, 0.103865, -0.076395, -0.039809, -0.054925 ],
		"SV_11" : [ 0.074401, -0.044642, 0.114509, 0.028758, 0.024574, 0.024991, 0.019187, -0.002592, -0.000612, -0.005220 ],
		"SV_12" : [ -0.103593, 0.050680, -0.023451, -0.022885, -0.086878, -0.067701, -0.017629, -0.039493, -0.078140, -0.071494 ],
		"SV_13" : [ 0.023546, 0.050680, -0.020218, -0.036656, -0.013953, -0.015092, 0.059685, -0.039493, -0.096435, -0.017646 ],
		"SV_14" : [ -0.070900, -0.044642, -0.004050, -0.040099, -0.066239, -0.078662, 0.052322, -0.076395, -0.051404, -0.034215 ],
		"SV_15" : [ 0.019913, 0.050680, 0.104809, 0.070072, -0.035968, -0.026679, -0.024993, -0.002592, 0.003709, 0.040343 ],
		"SV_16" : [ -0.005515, 0.050680, 0.001339, -0.084856, -0.011201, -0.016658, 0.048640, -0.039493, -0.041176, -0.088062 ],
		"SV_17" : [ -0.001882, 0.050680, 0.030440, 0.052858, 0.039710, 0.056619, -0.039719, 0.071210, 0.025395, 0.027917 ],
		"SV_18" : [ 0.016281, -0.044642, 0.020739, 0.021872, -0.013953, -0.013214, -0.006584, -0.002592, 0.013317, 0.040343 ],
		"SV_19" : [ 0.041708, 0.050680, 0.071397, 0.008101, 0.038334, 0.015909, -0.017629, 0.034309, 0.073407, 0.085907 ],
		"SV_20" : [ 0.048974, 0.050680, 0.074630, 0.066629, -0.009825, -0.002253, -0.043401, 0.034309, 0.033654, 0.019633 ],
		"SV_21" : [ -0.027310, 0.050680, -0.055785, 0.025315, -0.007073, -0.023547, 0.052322, -0.039493, -0.005142, -0.050783 ],
		"SV_22" : [ -0.041840, -0.044642, -0.066563, -0.046985, -0.037344, -0.043276, 0.048640, -0.039493, -0.056153, -0.013504 ],
		"SV_23" : [ 0.009016, -0.044642, -0.012673, 0.028758, -0.018080, -0.005072, -0.047082, 0.034309, 0.023371, -0.005220 ],
		"SV_24" : [ 0.045341, -0.044642, -0.006206, -0.015999, 0.125019, 0.125198, 0.019187, 0.034309, 0.032432, -0.005220 ],
		"SV_25" : [ 0.023546, 0.050680, -0.019140, 0.049415, -0.063487, -0.061125, 0.004460, -0.039493, -0.025953, -0.013504 ],
		"SV_26" : [ -0.099961, -0.044642, -0.067641, -0.108956, -0.074494, -0.072712, 0.015505, -0.039493, -0.049872, -0.009362 ],
		"SV_27" : [ -0.049105, -0.044642, 0.160855, -0.046985, -0.029088, -0.019790, -0.047082, 0.034309, 0.028020, 0.011349 ],
		"SV_28" : [ -0.034575, 0.050680, -0.055785, -0.015999, -0.009825, -0.007890, 0.037595, -0.039493, -0.052963, 0.027917 ],
		"SV_29" : [ 0.016281, 0.050680, -0.046085, 0.011544, -0.033216, -0.016032, -0.010266, -0.002592, -0.043984, -0.042499 ],
		"SV_30" : [ 0.045341, 0.050680, 0.068163, 0.008101, -0.016704, 0.004636, -0.076536, 0.071210, 0.032432, -0.017646 ],
		"SV_31" : [ -0.027310, 0.050680, 0.060618, 0.107944, 0.012191, -0.017598, -0.002903, -0.002592, 0.070207, 0.135612 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ -1.000000, -1.000000, 1.000000, -1.000000, 1.000000, -1.000000, 1.000000, -1.000000, 1.000000, -1.000000, -1.000000, 1.000000, -1.000000, -1.000000, -1.000000, 1.000000, -1.000000, 1.000000, 1.000000, 1.000000, 1.000000, -1.000000, -1.000000, 1.000000, 1.000000, 1.000000, -1.000000, 1.000000, -1.000000, -1.000000, 1.000000, 1.000000 ]
	},
	"rho" : [ -147.733551 ],
	"nSV" : [ 32 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 24 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_diabetes_small.json'

MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 45.754257, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 32,
	"SupportVectors" : {
		"SV_00" : [ 0.038076, 0.050680, -0.009439, 0.002351, 0.001183, 0.037517, -0.054446, 0.050176, -0.025953, 0.106617 ],
		"SV_01" : [ 0.041708, -0.044642, -0.008362, -0.026328, 0.024574, 0.016222, 0.070730, -0.039493, -0.048359, -0.030072 ],
		"SV_02" : [ -0.041840, -0.044642, 0.128521, 0.063187, -0.033216, -0.032629, 0.011824, -0.039493, -0.015999, -0.050783 ],
		"SV_03" : [ 0.023546, 0.050680, -0.030996, -0.005670, -0.016704, 0.017788, -0.032356, -0.002592, -0.074093, -0.034215 ],
		"SV_04" : [ 0.016281, 0.050680, 0.014272, 0.001215, 0.001183, -0.021355, -0.032356, 0.034309, 0.074966, 0.040343 ],
		"SV_05" : [ -0.085430, -0.044642, -0.004050, -0.009113, -0.002945, 0.007767, 0.022869, -0.039493, -0.061176, -0.013504 ],
		"SV_06" : [ -0.001882, -0.044642, 0.033673, 0.125158, 0.024574, 0.026243, -0.010266, -0.002592, 0.026717, 0.061054 ],
		"SV_07" : [ -0.052738, -0.044642, 0.071397, -0.074527, -0.015328, -0.001314, 0.004460, -0.021412, -0.046883, 0.003064 ],
		"SV_08" : [ 0.009016, 0.050680, 0.069241, 0.059744, 0.017694, -0.023234, -0.047082, 0.034309, 0.103297, 0.073480 ],
		"SV_09" : [ -0.060003, 0.050680, -0.047163, -0.022885, -0.071743, -0.057681, -0.006584, -0.039493, -0.062917, -0.054925 ],
		"SV_10" : [ 0.030811, -0.044642, -0.033151, -0.022885, -0.046975, -0.081167, 0.103865, -0.076395, -0.039809, -0.054925 ],
		"SV_11" : [ 0.074401, -0.044642, 0.114509, 0.028758, 0.024574, 0.024991, 0.019187, -0.002592, -0.000612, -0.005220 ],
		"SV_12" : [ -0.103593, 0.050680, -0.023451, -0.022885, -0.086878, -0.067701, -0.017629, -0.039493, -0.078140, -0.071494 ],
		"SV_13" : [ 0.023546, 0.050680, -0.020218, -0.036656, -0.013953, -0.015092, 0.059685, -0.039493, -0.096435, -0.017646 ],
		"SV_14" : [ -0.070900, -0.044642, -0.004050, -0.040099, -0.066239, -0.078662, 0.052322, -0.076395, -0.051404, -0.034215 ],
		"SV_15" : [ 0.019913, 0.050680, 0.104809, 0.070072, -0.035968, -0.026679, -0.024993, -0.002592, 0.003709, 0.040343 ],
		"SV_16" : [ -0.005515, 0.050680, 0.001339, -0.084856, -0.011201, -0.016658, 0.048640, -0.039493, -0.041176, -0.088062 ],
		"SV_17" : [ -0.001882, 0.050680, 0.030440, 0.052858, 0.039710, 0.056619, -0.039719, 0.071210, 0.025395, 0.027917 ],
		"SV_18" : [ 0.016281, -0.044642, 0.020739, 0.021872, -0.013953, -0.013214, -0.006584, -0.002592, 0.013317, 0.040343 ],
		"SV_19" : [ 0.041708, 0.050680, 0.071397, 0.008101, 0.038334, 0.015909, -0.017629, 0.034309, 0.073407, 0.085907 ],
		"SV_20" : [ 0.048974, 0.050680, 0.074630, 0.066629, -0.009825, -0.002253, -0.043401, 0.034309, 0.033654, 0.019633 ],
		"SV_21" : [ -0.027310, 0.050680, -0.055785, 0.025315, -0.007073, -0.023547, 0.052322, -0.039493, -0.005142, -0.050783 ],
		"SV_22" : [ -0.041840, -0.044642, -0.066563, -0.046985, -0.037344, -0.043276, 0.048640, -0.039493, -0.056153, -0.013504 ],
		"SV_23" : [ 0.009016, -0.044642, -0.012673, 0.028758, -0.018080, -0.005072, -0.047082, 0.034309, 0.023371, -0.005220 ],
		"SV_24" : [ 0.045341, -0.044642, -0.006206, -0.015999, 0.125019, 0.125198, 0.019187, 0.034309, 0.032432, -0.005220 ],
		"SV_25" : [ 0.023546, 0.050680, -0.019140, 0.049415, -0.063487, -0.061125, 0.004460, -0.039493, -0.025953, -0.013504 ],
		"SV_26" : [ -0.099961, -0.044642, -0.067641, -0.108956, -0.074494, -0.072712, 0.015505, -0.039493, -0.049872, -0.009362 ],
		"SV_27" : [ -0.049105, -0.044642, 0.160855, -0.046985, -0.029088, -0.019790, -0.047082, 0.034309, 0.028020, 0.011349 ],
		"SV_28" : [ -0.034575, 0.050680, -0.055785, -0.015999, -0.009825, -0.007890, 0.037595, -0.039493, -0.052963, 0.027917 ],
		"SV_29" : [ 0.016281, 0.050680, -0.046085, 0.011544, -0.033216, -0.016032, -0.010266, -0.002592, -0.043984, -0.042499 ],
		"SV_30" : [ 0.045341, 0.050680, 0.068163, 0.008101, -0.016704, 0.004636, -0.076536, 0.071210, 0.032432, -0.017646 ],
		"SV_31" : [ -0.027310, 0.050680, 0.060618, 0.107944, 0.012191, -0.017598, -0.002903, -0.002592, 0.070207, 0.135612 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ -1.000000, -1.000000, 1.000000, -1.000000, 1.000000, -1.000000, 1.000000, -1.000000, 1.000000, -1.000000, -1.000000, 1.000000, -1.000000, -1.000000, -1.000000, 1.000000, -1.000000, 1.000000, 1.000000, 1.000000, 1.000000, -1.000000, -1.000000, 1.000000, 1.000000, 1.000000, -1.000000, 1.000000, -1.000000, -1.000000, 1.000000, 1.000000 ]
	},
	"rho" : [ -147.733551 ],
	"nSV" : [ 32 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 24 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 64
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 45.754257, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.5, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 32,
		"SupportVectors" : 	{
			"SV_00" : [ 0.038076, 0.05068, -0.009439, 0.002351, 0.001183, 0.037517, -0.054446, 0.050176, -0.025953, 0.106617 ],
			"SV_01" : [ 0.041708, -0.044642, -0.008362, -0.026328, 0.024574, 0.016222, 0.07073, -0.039493, -0.048359, -0.030072 ],
			"SV_02" : [ -0.04184, -0.044642, 0.128521, 0.063187, -0.033216, -0.032629, 0.011824, -0.039493, -0.015999, -0.050783 ],
			"SV_03" : [ 0.023546, 0.05068, -0.030996, -0.00567, -0.016704, 0.017788, -0.032356, -0.002592, -0.074093, -0.034215 ],
			"SV_04" : [ 0.016281, 0.05068, 0.014272, 0.001215, 0.001183, -0.021355, -0.032356, 0.034309, 0.074966, 0.040343 ],
			"SV_05" : [ -0.08543, -0.044642, -0.00405, -0.009113, -0.002945, 0.007767, 0.022869, -0.039493, -0.061176, -0.013504 ],
			"SV_06" : [ -0.001882, -0.044642, 0.033673, 0.125158, 0.024574, 0.026243, -0.010266, -0.002592, 0.026717, 0.061054 ],
			"SV_07" : [ -0.052738, -0.044642, 0.071397, -0.074527, -0.015328, -0.001314, 0.00446, -0.021412, -0.046883, 0.003064 ],
			"SV_08" : [ 0.009016, 0.05068, 0.069241, 0.059744, 0.017694, -0.023234, -0.047082, 0.034309, 0.103297, 0.07348 ],
			"SV_09" : [ -0.060003, 0.05068, -0.047163, -0.022885, -0.071743, -0.057681, -0.006584, -0.039493, -0.062917, -0.054925 ],
			"SV_10" : [ 0.030811, -0.044642, -0.033151, -0.022885, -0.046975, -0.081167, 0.103865, -0.076395, -0.039809, -0.054925 ],
			"SV_11" : [ 0.074401, -0.044642, 0.114509, 0.028758, 0.024574, 0.024991, 0.019187, -0.002592, -0.000612, -0.00522 ],
			"SV_12" : [ -0.103593, 0.05068, -0.023451, -0.022885, -0.086878, -0.067701, -0.017629, -0.039493, -0.07814, -0.071494 ],
			"SV_13" : [ 0.023546, 0.05068, -0.020218, -0.036656, -0.013953, -0.015092, 0.059685, -0.039493, -0.096435, -0.017646 ],
			"SV_14" : [ -0.0709, -0.044642, -0.00405, -0.040099, -0.066239, -0.078662, 0.052322, -0.076395, -0.051404, -0.034215 ],
			"SV_15" : [ 0.019913, 0.05068, 0.104809, 0.070072, -0.035968, -0.026679, -0.024993, -0.002592, 0.003709, 0.040343 ],
			"SV_16" : [ -0.005515, 0.05068, 0.001339, -0.084856, -0.011201, -0.016658, 0.04864, -0.039493, -0.041176, -0.088062 ],
			"SV_17" : [ -0.001882, 0.05068, 0.03044, 0.052858, 0.03971, 0.056619, -0.039719, 0.07121, 0.025395, 0.027917 ],
			"SV_18" : [ 0.016281, -0.044642, 0.020739, 0.021872, -0.013953, -0.013214, -0.006584, -0.002592, 0.013317, 0.040343 ],
			"SV_19" : [ 0.041708, 0.05068, 0.071397, 0.008101, 0.038334, 0.015909, -0.017629, 0.034309, 0.073407, 0.085907 ],
			"SV_20" : [ 0.048974, 0.05068, 0.07463, 0.066629, -0.009825, -0.002253, -0.043401, 0.034309, 0.033654, 0.019633 ],
			"SV_21" : [ -0.02731, 0.05068, -0.055785, 0.025315, -0.007073, -0.023547, 0.052322, -0.039493, -0.005142, -0.050783 ],
			"SV_22" : [ -0.04184, -0.044642, -0.066563, -0.046985, -0.037344, -0.043276, 0.04864, -0.039493, -0.056153, -0.013504 ],
			"SV_23" : [ 0.009016, -0.044642, -0.012673, 0.028758, -0.01808, -0.005072, -0.047082, 0.034309, 0.023371, -0.00522 ],
			"SV_24" : [ 0.045341, -0.044642, -0.006206, -0.015999, 0.125019, 0.125198, 0.019187, 0.034309, 0.032432, -0.00522 ],
			"SV_25" : [ 0.023546, 0.05068, -0.01914, 0.049415, -0.063487, -0.061125, 0.00446, -0.039493, -0.025953, -0.013504 ],
			"SV_26" : [ -0.099961, -0.044642, -0.067641, -0.108956, -0.074494, -0.072712, 0.015505, -0.039493, -0.049872, -0.009362 ],
			"SV_27" : [ -0.049105, -0.044642, 0.160855, -0.046985, -0.029088, -0.01979, -0.047082, 0.034309, 0.02802, 0.011349 ],
			"SV_28" : [ -0.034575, 0.05068, -0.055785, -0.015999, -0.009825, -0.00789, 0.037595, -0.039493, -0.052963, 0.027917 ],
			"SV_29" : [ 0.016281, 0.05068, -0.046085, 0.011544, -0.033216, -0.016032, -0.010266, -0.002592, -0.043984, -0.042499 ],
			"SV_30" : [ 0.045341, 0.05068, 0.068163, 0.008101, -0.016704, 0.004636, -0.076536, 0.07121, 0.032432, -0.017646 ],
			"SV_31" : [ -0.02731, 0.05068, 0.060618, 0.107944, 0.012191, -0.017598, -0.002903, -0.002592, 0.070207, 0.135612 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0 ]
		},
		"classes" : 2,
		"nSV" : [ 32 ],
		"n_iter" : [ 24 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -147.733551 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[149.00432 149.16672 144.45996 149.30568 144.45714 152.13725 147.54927
 143.49648 151.60355 144.06705 145.54936 146.04478 153.2214  143.04573
 142.18466 147.21959 148.49258 143.91109 143.79715 150.81567 147.31049
 144.26483 143.40662 142.48466 151.74731 152.58154 145.57117 146.37698
 149.77887 145.11801 142.63785 152.40884 141.89325 142.94821 149.7309
 151.88408 148.05573 145.3443  150.43622 152.71751 153.48843 146.18793
 143.63622 144.65738 141.73021 150.17459 143.09184 149.18568 149.85487
 146.26802 144.80829 149.0258  143.56093 145.11565 149.90604 147.66235
 142.87354 148.61244 144.15416 151.87633 151.47919 149.71472 147.30731
 144.67703]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[149.00432 149.16672 144.45998 149.30568 144.45714 152.13724 147.54927
 143.49648 151.60353 144.06705 145.54936 146.04478 153.22139 143.04573
 142.18466 147.21959 148.49258 143.9111  143.79715 150.81567 147.31049
 144.26485 143.40662 142.48468 151.74731 152.58153 145.57117 146.37698
 149.77887 145.11801 142.63785 152.40884 141.89325 142.94823 149.7309
 151.88408 148.05573 145.3443  150.43622 152.7175  153.48842 146.18793
 143.63623 144.65736 141.73021 150.17459 143.09184 149.18568 149.85487
 146.26802 144.80829 149.0258  143.56093 145.11565 149.90602 147.66235
 142.87355 148.61244 144.15417 151.87631 151.47919 149.71472 147.30731
 144.67703]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'diabetes_small', 'size': 64, 'mse': 6131.12, 'mae': 67.40051, 'mape': 0.6357603, 'r2': 0.06159780716537977}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_diabetes_small.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'diabetes_small', 'training_time_in_sec': 0.018, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_diabetes_small_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_small', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", -1.000000 AS "coeff", 0.038076 AS "sv_0", 0.050680 AS "sv_1", -0.009439 AS "sv_2", 0.002351 AS "sv_3", 0.001183 AS "sv_4", 0.0
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_small', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_small', 'NuSVR', 'duckdb')
   (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -147.733551 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -45.754257 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_small', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.038076  0.050680 -0.009439  ...  0.050176 -0.025953  0.106617
1      0.081666  0.050680  0.001339  ...  0.034309  0.084492 -0.030072
2      0.041708 -0.044642 -0.008362  ... -0.039493 -0.048359 -0.030072
3     -0.041840 -0.044642  0.128521  ... -0.039493 -0.015999 -0.050783
4      0.023546  0.050680 -0.030996  ... -0.002592 -0.074093 -0.034215
...         ...       ...       ...  ...       ...       ...       ...
59     0.045341  0.050680  0.068163  ...  0.071210  0.032432 -0.017646
60    -0.027310  0.050680  0.060618  ... -0.002592  0.070207  0.135612
61    -0.001882 -0.044642  0.054152  ...  0.084863  0.084492  0.048628
62     0.045341 -0.044642 -0.006206  ... -0.039493  0.042897 -0.038357
63    -0.041840 -0.044642 -0.033151  ... -0.024733 -0.025953 -0.038357

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index   Estimator
0       0  149.004311
1       1  149.166724
2       2  144.459973
3       3  149.305678
4       4  144.457139
..    ...         ...
59     59  151.876319
60     60  151.479184
61     61  149.714726
62     62  147.307310
63     63  144.677029

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_small', 'NuSVR') Estimator 5.749801325727333e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48     149.854873    149.854874 -5.720770e-07
49     49     146.268021    146.268021  1.254836e-07
50     50     144.808290    144.808289  1.900584e-06
51     51     149.025806    149.025803  3.291980e-06
52     52     143.560929    143.560928  7.941732e-07
53     53     145.115640    145.115646 -6.154424e-06
54     54     149.906028    149.906036 -7.961190e-06
55     55     147.662356    147.662354  2.964155e-06
56     56     142.873553    142.873535  1.825647e-05
57     57     148.612445    148.612442  3.297568e-06
58     58     144.154174    144.154160  1.441383e-05
59     59     151.876319    151.876328 -8.275977e-06
60     60     151.479184    151.479187 -2.907601e-06
61     61     149.714726    149.714722  3.899436e-06
62     62     147.307310    147.307312 -2.393744e-06
63     63     144.677029    144.677032 -3.001898e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_small', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_diabetes_small_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_small', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", -1.000000 AS "coeff", 0.038076 AS "sv_0", 0.050680 AS "sv_1", -0.009439 AS "sv_2", 0.002351 AS "sv_3", 0.001183 AS "sv_4", 0.0
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_small', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_small', 'NuSVR', 'sqlite')
 FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -147.733551 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -45.754257 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_small', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.038076  0.050680 -0.009439  ...  0.050176 -0.025953  0.106617
1      0.081666  0.050680  0.001339  ...  0.034309  0.084492 -0.030072
2      0.041708 -0.044642 -0.008362  ... -0.039493 -0.048359 -0.030072
3     -0.041840 -0.044642  0.128521  ... -0.039493 -0.015999 -0.050783
4      0.023546  0.050680 -0.030996  ... -0.002592 -0.074093 -0.034215
...         ...       ...       ...  ...       ...       ...       ...
59     0.045341  0.050680  0.068163  ...  0.071210  0.032432 -0.017646
60    -0.027310  0.050680  0.060618  ... -0.002592  0.070207  0.135612
61    -0.001882 -0.044642  0.054152  ...  0.084863  0.084492  0.048628
62     0.045341 -0.044642 -0.006206  ... -0.039493  0.042897 -0.038357
63    -0.041840 -0.044642 -0.033151  ... -0.024733 -0.025953 -0.038357

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index   Estimator
0       0  149.004311
1       1  149.166724
2       2  144.459973
3       3  149.305678
4       4  144.457139
..    ...         ...
59     59  151.876319
60     60  151.479184
61     61  149.714726
62     62  147.307310
63     63  144.677029

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_small', 'NuSVR') Estimator 5.779552950890832e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48     149.854873    149.854874 -5.820790e-07
49     49     146.268021    146.268021  1.068628e-07
50     50     144.808290    144.808289  1.802371e-06
51     51     149.025806    149.025803  3.307987e-06
52     52     143.560929    143.560928  7.280574e-07
53     53     145.115640    145.115646 -6.302320e-06
54     54     149.906028    149.906036 -7.939695e-06
55     55     147.662356    147.662354  2.946398e-06
56     56     142.873553    142.873535  1.826952e-05
57     57     148.612445    148.612442  3.308444e-06
58     58     144.154174    144.154160  1.450327e-05
59     59     151.876319    151.876328 -8.336106e-06
60     60     151.479184    151.479187 -2.998715e-06
61     61     149.714726    149.714722  3.958787e-06
62     62     147.307310    147.307312 -2.372329e-06
63     63     144.677029    144.677032 -3.094650e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_small', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_diabetes_small_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_small', 'NuSVR', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", -1.000000 AS "coeff", 0.038076 AS "sv_0", 0.050680 AS "sv_1", -0.009439 AS "sv_2", 0.002351 AS "sv_3", 0.001183 AS "sv_4", 0.0
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_small', 'NuSVR', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_small', 'NuSVR', 'pgsql')
   (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -147.733551 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -45.754257 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_small', 'NuSVR', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
