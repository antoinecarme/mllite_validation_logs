         X_0       X_1       X_2  ...       X_8       X_9     target
0   0.544738  0.515912  0.990435  ...  0.898018  0.377159  15.807614
1   0.783459  0.095321  0.135945  ...  0.019766  0.833486  14.766437
2   0.652811  0.757719  0.306902  ...  0.894295  0.086598  22.842493
3   0.226051  0.939732  0.731124  ...  0.185038  0.248943  19.544314
4   0.764610  0.378970  0.823855  ...  0.814980  0.123688  21.897690
..       ...       ...       ...  ...       ...       ...        ...
59  0.652046  0.852315  0.661294  ...  0.682591  0.243739  18.364700
60  0.133169  0.898182  0.993566  ...  0.014059  0.907372  19.271183
61  0.771820  0.489723  0.677121  ...  0.039136  0.218690  15.917285
62  0.059807  0.098960  0.941488  ...  0.196262  0.732540  13.422214
63  0.672520  0.960422  0.271050  ...  0.918325  0.297702  12.990523

[64 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[0.54473835 0.51591223 0.99043506 0.25514543 0.14395337 0.33235115
  0.8686215  0.04108923 0.8980185  0.37715888]
 [0.78345853 0.09532096 0.1359447  0.858711   0.24078475 0.08367069
  0.05237448 0.42276597 0.01976581 0.8334865 ]
 [0.652811   0.75771934 0.3069025  0.8282855  0.7630638  0.85900337
  0.87337655 0.14607023 0.89429516 0.08659814]
 [0.22605109 0.9397324  0.7311243  0.8374556  0.7824477  0.3529266
  0.1832118  0.84345275 0.18503828 0.2489433 ]
 [0.76461023 0.37897    0.82385516 0.9136035  0.55340034 0.05504839
  0.58833206 0.36104986 0.81497955 0.12368783]] [15.807614 14.766437 22.842493 19.544313 21.89769 ]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.016, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.086587, 0.310166, -0.288638, -0.073266 ],
			"coeffs_1" : [ 0.089569, -0.488652, 0.169381, 0.001102 ],
			"coeffs_2" : [ 0.527469, 0.107819, 0.525145, -0.123864 ],
			"coeffs_3" : [ 0.620004, -0.611606, -0.291816, 0.228996 ],
			"coeffs_4" : [ 0.311347, -0.342043, -0.350668, -0.515059 ],
			"coeffs_5" : [ 0.253060, -0.669470, -0.125154, 0.017161 ],
			"coeffs_6" : [ -0.160480, -0.623610, -0.355292, 0.509397 ],
			"coeffs_7" : [ -0.078514, -0.025769, -0.603239, 0.017154 ],
			"coeffs_8" : [ -0.230541, 0.212947, -0.152320, 0.251564 ],
			"coeffs_9" : [ -0.466198, 0.544261, -0.499647, 0.324255 ],
			"intercepts" : [ -0.500841, 0.330128, 0.134761, 0.571988 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.413336, -0.573370, 0.208778, 0.254996, 0.506303, 0.576824, 0.508444, -0.427178 ],
			"coeffs_1" : [ 0.433333, 0.545586, -0.399634, 0.315838, 0.187167, 0.025286, 0.057347, 0.389185 ],
			"coeffs_2" : [ -0.589903, 0.073201, 0.273697, 0.406786, -0.586993, 0.473829, -0.409931, -0.635660 ],
			"coeffs_3" : [ 0.728467, 0.644325, -0.118965, -0.575044, 0.006178, 0.645640, -0.540907, 0.314357 ],
			"intercepts" : [ 0.349970, 0.386822, 0.594793, -0.357124, 0.329742, 0.466522, 0.486723, -0.027883 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.612354, 0.295576, -0.017285, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.270193, 0.559094, 0.002911, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.187095, -0.230325, -0.278634, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.215160, 0.376506, 0.431074, 0.557300, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.309541, 0.030169, 0.158407, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.345852, 0.423576, 0.083467, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313578, 0.333493, -0.476470, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.091138, -0.295888, 0.274625, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.561978, -0.464744, -0.270356, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.277426 ],
			"coeffs_1" : [ -0.181321 ],
			"coeffs_2" : [ -0.586283 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.789899 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575965 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.086587, 0.310166, -0.288638, -0.073266 ],
			"coeffs_1" : [ 0.089569, -0.488652, 0.169381, 0.001102 ],
			"coeffs_2" : [ 0.527469, 0.107819, 0.525145, -0.123864 ],
			"coeffs_3" : [ 0.620004, -0.611606, -0.291816, 0.228996 ],
			"coeffs_4" : [ 0.311347, -0.342043, -0.350668, -0.515059 ],
			"coeffs_5" : [ 0.253060, -0.669470, -0.125154, 0.017161 ],
			"coeffs_6" : [ -0.160480, -0.623610, -0.355292, 0.509397 ],
			"coeffs_7" : [ -0.078514, -0.025769, -0.603239, 0.017154 ],
			"coeffs_8" : [ -0.230541, 0.212947, -0.152320, 0.251564 ],
			"coeffs_9" : [ -0.466198, 0.544261, -0.499647, 0.324255 ],
			"intercepts" : [ -0.500841, 0.330128, 0.134761, 0.571988 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.413336, -0.573370, 0.208778, 0.254996, 0.506303, 0.576824, 0.508444, -0.427178 ],
			"coeffs_1" : [ 0.433333, 0.545586, -0.399634, 0.315838, 0.187167, 0.025286, 0.057347, 0.389185 ],
			"coeffs_2" : [ -0.589903, 0.073201, 0.273697, 0.406786, -0.586993, 0.473829, -0.409931, -0.635660 ],
			"coeffs_3" : [ 0.728467, 0.644325, -0.118965, -0.575044, 0.006178, 0.645640, -0.540907, 0.314357 ],
			"intercepts" : [ 0.349970, 0.386822, 0.594793, -0.357124, 0.329742, 0.466522, 0.486723, -0.027883 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.612354, 0.295576, -0.017285, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.270193, 0.559094, 0.002911, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.187095, -0.230325, -0.278634, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.215160, 0.376506, 0.431074, 0.557300, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.309541, 0.030169, 0.158407, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.345852, 0.423576, 0.083467, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313578, 0.333493, -0.476470, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.091138, -0.295888, 0.274625, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.561978, -0.464744, -0.270356, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.277426 ],
			"coeffs_1" : [ -0.181321 ],
			"coeffs_2" : [ -0.586283 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.789899 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575965 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 64
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.086587, 0.310166, -0.288638, -0.073266 ],
			"coeffs_1" : [ 0.089569, -0.488652, 0.169381, 0.001102 ],
			"coeffs_2" : [ 0.527469, 0.107819, 0.525145, -0.123864 ],
			"coeffs_3" : [ 0.620004, -0.611606, -0.291816, 0.228996 ],
			"coeffs_4" : [ 0.311347, -0.342043, -0.350668, -0.515059 ],
			"coeffs_5" : [ 0.25306, -0.66947, -0.125154, 0.017161 ],
			"coeffs_6" : [ -0.16048, -0.62361, -0.355292, 0.509397 ],
			"coeffs_7" : [ -0.078514, -0.025769, -0.603239, 0.017154 ],
			"coeffs_8" : [ -0.230541, 0.212947, -0.15232, 0.251564 ],
			"coeffs_9" : [ -0.466198, 0.544261, -0.499647, 0.324255 ],
			"intercepts" : [ -0.500841, 0.330128, 0.134761, 0.571988 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.413336, -0.57337, 0.208778, 0.254996, 0.506303, 0.576824, 0.508444, -0.427178 ],
			"coeffs_1" : [ 0.433333, 0.545586, -0.399634, 0.315838, 0.187167, 0.025286, 0.057347, 0.389185 ],
			"coeffs_2" : [ -0.589903, 0.073201, 0.273697, 0.406786, -0.586993, 0.473829, -0.409931, -0.63566 ],
			"coeffs_3" : [ 0.728467, 0.644325, -0.118965, -0.575044, 0.006178, 0.64564, -0.540907, 0.314357 ],
			"intercepts" : [ 0.34997, 0.386822, 0.594793, -0.357124, 0.329742, 0.466522, 0.486723, -0.027883 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.612354, 0.295576, -0.017285, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.270193, 0.559094, 0.002911, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.187095, -0.230325, -0.278634, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.21516, 0.376506, 0.431074, 0.5573, 0.47569, 0.371699 ],
			"coeffs_4" : [ -0.309541, 0.030169, 0.158407, 0.443776, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.345852, 0.423576, 0.083467, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313578, 0.333493, -0.47647, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.091138, -0.295888, 0.274625, -0.618701, -0.588556, 0.48808 ],
			"intercepts" : [ 0.561978, -0.464744, -0.270356, -0.494865, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.277426 ],
			"coeffs_1" : [ -0.181321 ],
			"coeffs_2" : [ -0.586283 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.789899 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575965 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-0.73322767 -0.7133393  -0.7472637  -0.8228112  -0.760111   -0.7111187
 -0.7345894  -0.70436776 -0.72214156 -0.70948094 -0.74577415 -0.7510016
 -0.8223933  -0.72170955 -0.77536064 -0.79167897 -0.71367383 -0.73372895
 -0.7554665  -0.81977046 -0.8006145  -0.87248325 -0.712255   -0.71548176
 -0.7297165  -0.7741032  -0.71074784 -0.71669054 -0.715751   -0.7400184
 -0.73773885 -0.72060585 -0.73435783 -0.7592437  -0.8026787  -0.7133696
 -0.7123344  -0.71193016 -0.7149974  -0.71785    -0.7356306  -0.7402558
 -0.75343    -0.7238455  -0.7442298  -0.74206674 -0.7199505  -0.8141345
 -0.7092016  -0.71069086 -0.72503877 -0.800638   -0.72987986 -0.7654677
 -0.7484808  -0.75845915 -0.7227608  -0.7657201  -0.7322989  -0.7306648
 -0.79211533 -0.7261728  -0.75792456 -0.7387813 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-0.7332276  -0.7133393  -0.74726385 -0.8228111  -0.76011103 -0.7111188
 -0.7345893  -0.70436776 -0.7221417  -0.7094811  -0.74577415 -0.7510015
 -0.8223933  -0.7217097  -0.77536064 -0.79167897 -0.7136738  -0.7337291
 -0.75546646 -0.81977046 -0.8006145  -0.8724833  -0.7122552  -0.71548176
 -0.7297166  -0.77410334 -0.7107479  -0.71669066 -0.71575093 -0.7400185
 -0.7377389  -0.720606   -0.73435783 -0.7592438  -0.80267876 -0.7133698
 -0.7123345  -0.71193033 -0.7149976  -0.7178502  -0.7356306  -0.74025565
 -0.75343    -0.7238456  -0.7442298  -0.74206674 -0.7199505  -0.8141345
 -0.7092017  -0.710691   -0.725039   -0.8006379  -0.72987986 -0.7654678
 -0.7484808  -0.75845915 -0.722761   -0.76572    -0.732299   -0.7306648
 -0.79211533 -0.72617286 -0.7579246  -0.73878133]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman1_small', 'size': 64, 'mse': 268.16174, 'mae': 15.714383, 'mape': 1.0559306, 'r2': -11.743981601051237}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman1_small', 'training_time_in_sec': 0.016, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_small', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.500841 + -0.086587 * t."OUT_0"  + 0.089569 * t."OUT_1"  + 0.527469 * t."OUT_2"  + 0.620004 * t."OUT_3"  + 0.311347 * t."OUT_4"  + 0.253060 * t."OUT_5"  + -0.160480 
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_small', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_small', 'MLPRegressor', 'duckdb')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575965 + -0.277426 * t."OUT_0"  + -0.181321 * t."OUT_1"  + -0.586283 * t."OUT_2"  + -0.667527 * t."OUT_3"  + -0.789899 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_small', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
...         ...       ...       ...  ...       ...       ...       ...
59     0.652046  0.852315  0.661294  ...  0.609463  0.682591  0.243739
60     0.133169  0.898182  0.993566  ...  0.033415  0.014059  0.907372
61     0.771820  0.489723  0.677121  ...  0.565222  0.039136  0.218690
62     0.059807  0.098960  0.941488  ...  0.265461  0.196262  0.732540
63     0.672520  0.960422  0.271050  ...  0.514037  0.918325  0.297702

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0  -0.733228
1       1  -0.713339
2       2  -0.747264
3       3  -0.822811
4       4  -0.760111
..    ...        ...
59     59  -0.730665
60     60  -0.792115
61     61  -0.726173
62     62  -0.757925
63     63  -0.738781

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_small', 'MLPRegressor') Estimator 7.636845111846924e-08
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48      -0.709202     -0.709202 -1.192093e-07
49     49      -0.710691     -0.710691 -1.192093e-07
50     50      -0.725039     -0.725039 -2.384186e-07
51     51      -0.800638     -0.800638  1.192093e-07
52     52      -0.729880     -0.729880  0.000000e+00
53     53      -0.765468     -0.765468 -1.192093e-07
54     54      -0.748481     -0.748481  0.000000e+00
55     55      -0.758459     -0.758459  0.000000e+00
56     56      -0.722761     -0.722761 -1.788139e-07
57     57      -0.765720     -0.765720  1.192093e-07
58     58      -0.732299     -0.732299 -5.960464e-08
59     59      -0.730665     -0.730665  0.000000e+00
60     60      -0.792115     -0.792115  0.000000e+00
61     61      -0.726173     -0.726173 -5.960464e-08
62     62      -0.757925     -0.757925 -5.960464e-08
63     63      -0.738781     -0.738781 -5.960464e-08
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_small', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_small', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.500841 + -0.086587 * t."OUT_0"  + 0.089569 * t."OUT_1"  + 0.527469 * t."OUT_2"  + 0.620004 * t."OUT_3"  + 0.311347 * t."OUT_4"  + 0.253060 * t."OUT_5"  + -0.160480 
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_small', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_small', 'MLPRegressor', 'sqlite')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575965 + -0.277426 * t."OUT_0"  + -0.181321 * t."OUT_1"  + -0.586283 * t."OUT_2"  + -0.667527 * t."OUT_3"  + -0.789899 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_small', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
...         ...       ...       ...  ...       ...       ...       ...
59     0.652046  0.852315  0.661294  ...  0.609463  0.682591  0.243739
60     0.133169  0.898182  0.993566  ...  0.033415  0.014059  0.907372
61     0.771820  0.489723  0.677121  ...  0.565222  0.039136  0.218690
62     0.059807  0.098960  0.941488  ...  0.265461  0.196262  0.732540
63     0.672520  0.960422  0.271050  ...  0.514037  0.918325  0.297702

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0  -0.733228
1       1  -0.713339
2       2  -0.747264
3       3  -0.822811
4       4  -0.760111
..    ...        ...
59     59  -0.730665
60     60  -0.792115
61     61  -0.726173
62     62  -0.757925
63     63  -0.738781

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_small', 'MLPRegressor') Estimator 8.889123443919789e-08
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48      -0.709202     -0.709202 -1.584956e-07
49     49      -0.710691     -0.710691 -1.038295e-07
50     50      -0.725039     -0.725039 -2.392060e-07
51     51      -0.800638     -0.800638  8.818036e-08
52     52      -0.729880     -0.729880 -4.677171e-08
53     53      -0.765468     -0.765468 -1.398361e-07
54     54      -0.748481     -0.748481 -3.415785e-08
55     55      -0.758459     -0.758459  5.068447e-08
56     56      -0.722761     -0.722761 -1.833454e-07
57     57      -0.765720     -0.765720  1.146463e-07
58     58      -0.732299     -0.732299 -5.428762e-08
59     59      -0.730665     -0.730665 -5.342909e-08
60     60      -0.792115     -0.792115 -2.770452e-08
61     61      -0.726173     -0.726173 -9.066830e-08
62     62      -0.757925     -0.757925 -6.265737e-08
63     63      -0.738781     -0.738781 -5.360566e-08
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_small', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman1_small_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_small', 'MLPRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.500841 + -0.086587 * t."OUT_0"  + 0.089569 * t."OUT_1"  + 0.527469 * t."OUT_2"  + 0.620004 * t."OUT_3"  + 0.311347 * t."OUT_4"  + 0.253060 * t."OUT_5"  + -0.160480 
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_small', 'MLPRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_small', 'MLPRegressor', 'pgsql')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575965 + -0.277426 * t."OUT_0"  + -0.181321 * t."OUT_1"  + -0.586283 * t."OUT_2"  + -0.667527 * t."OUT_3"  + -0.789899 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_small', 'MLPRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
