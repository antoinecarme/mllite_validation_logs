         X_0       X_1       X_2  ...       X_8       X_9     target
0   0.544738  0.515912  0.990435  ...  0.898018  0.377159  15.807614
1   0.783459  0.095321  0.135945  ...  0.019766  0.833486  14.766437
2   0.652811  0.757719  0.306902  ...  0.894295  0.086598  22.842493
3   0.226051  0.939732  0.731124  ...  0.185038  0.248943  19.544314
4   0.764610  0.378970  0.823855  ...  0.814980  0.123688  21.897690
..       ...       ...       ...  ...       ...       ...        ...
59  0.652046  0.852315  0.661294  ...  0.682591  0.243739  18.364700
60  0.133169  0.898182  0.993566  ...  0.014059  0.907372  19.271183
61  0.771820  0.489723  0.677121  ...  0.039136  0.218690  15.917285
62  0.059807  0.098960  0.941488  ...  0.196262  0.732540  13.422214
63  0.672520  0.960422  0.271050  ...  0.918325  0.297702  12.990523

[64 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[0.54473835 0.51591223 0.99043506 0.25514543 0.14395337 0.33235115
  0.8686215  0.04108923 0.8980185  0.37715888]
 [0.78345853 0.09532096 0.1359447  0.858711   0.24078475 0.08367069
  0.05237448 0.42276597 0.01976581 0.8334865 ]
 [0.652811   0.75771934 0.3069025  0.8282855  0.7630638  0.85900337
  0.87337655 0.14607023 0.89429516 0.08659814]
 [0.22605109 0.9397324  0.7311243  0.8374556  0.7824477  0.3529266
  0.1832118  0.84345275 0.18503828 0.2489433 ]
 [0.76461023 0.37897    0.82385516 0.9136035  0.55340034 0.05504839
  0.58833206 0.36104986 0.81497955 0.12368783]] [15.807614 14.766437 22.842493 19.544313 21.89769 ]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.01, 'TRAINING')
{ "nu" : 0.1,  "max_iter" : 128  , }
{ "nu" : 0.1,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 1.117212, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 9,
	"SupportVectors" : {
		"SV_0" : [ 0.652811, 0.757719, 0.306902, 0.828286, 0.763064, 0.859003, 0.873377, 0.146070, 0.894295, 0.086598 ],
		"SV_1" : [ 0.764610, 0.378970, 0.823855, 0.913603, 0.553400, 0.055048, 0.588332, 0.361050, 0.814980, 0.123688 ],
		"SV_2" : [ 0.480054, 0.664308, 0.985340, 0.567078, 0.994149, 0.780890, 0.232756, 0.567089, 0.093123, 0.031981 ],
		"SV_3" : [ 0.010500, 0.200190, 0.192366, 0.175831, 0.507530, 0.721218, 0.719388, 0.114770, 0.417354, 0.783886 ],
		"SV_4" : [ 0.361047, 0.160106, 0.219158, 0.010201, 0.471566, 0.488280, 0.020705, 0.852158, 0.667965, 0.378921 ],
		"SV_5" : [ 0.734481, 0.482054, 0.789831, 0.806913, 0.681106, 0.602843, 0.333277, 0.147743, 0.020703, 0.509223 ],
		"SV_6" : [ 0.366207, 0.096199, 0.520676, 0.250113, 0.155164, 0.752654, 0.007439, 0.025310, 0.924844, 0.961402 ],
		"SV_7" : [ 0.663564, 0.399281, 0.158547, 0.930965, 0.846977, 0.986627, 0.132816, 0.426558, 0.999950, 0.674509 ],
		"SV_8" : [ 0.804101, 0.103050, 0.728795, 0.068628, 0.567613, 0.648562, 0.495718, 0.628355, 0.398738, 0.185100 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 1.000000, 0.027869, 1.000000, -1.000000, -1.000000, 0.172130, -1.000000, 1.000000, -0.199998 ]
	},
	"rho" : [ -14.503784 ],
	"nSV" : [ 9 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 9 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 1.117212, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 9,
	"SupportVectors" : {
		"SV_0" : [ 0.652811, 0.757719, 0.306902, 0.828286, 0.763064, 0.859003, 0.873377, 0.146070, 0.894295, 0.086598 ],
		"SV_1" : [ 0.764610, 0.378970, 0.823855, 0.913603, 0.553400, 0.055048, 0.588332, 0.361050, 0.814980, 0.123688 ],
		"SV_2" : [ 0.480054, 0.664308, 0.985340, 0.567078, 0.994149, 0.780890, 0.232756, 0.567089, 0.093123, 0.031981 ],
		"SV_3" : [ 0.010500, 0.200190, 0.192366, 0.175831, 0.507530, 0.721218, 0.719388, 0.114770, 0.417354, 0.783886 ],
		"SV_4" : [ 0.361047, 0.160106, 0.219158, 0.010201, 0.471566, 0.488280, 0.020705, 0.852158, 0.667965, 0.378921 ],
		"SV_5" : [ 0.734481, 0.482054, 0.789831, 0.806913, 0.681106, 0.602843, 0.333277, 0.147743, 0.020703, 0.509223 ],
		"SV_6" : [ 0.366207, 0.096199, 0.520676, 0.250113, 0.155164, 0.752654, 0.007439, 0.025310, 0.924844, 0.961402 ],
		"SV_7" : [ 0.663564, 0.399281, 0.158547, 0.930965, 0.846977, 0.986627, 0.132816, 0.426558, 0.999950, 0.674509 ],
		"SV_8" : [ 0.804101, 0.103050, 0.728795, 0.068628, 0.567613, 0.648562, 0.495718, 0.628355, 0.398738, 0.185100 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 1.000000, 0.027869, 1.000000, -1.000000, -1.000000, 0.172130, -1.000000, 1.000000, -0.199998 ]
	},
	"rho" : [ -14.503784 ],
	"nSV" : [ 9 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 9 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 64
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 1.117212, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.1, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 9,
		"SupportVectors" : 	{
			"SV_0" : [ 0.652811, 0.757719, 0.306902, 0.828286, 0.763064, 0.859003, 0.873377, 0.14607, 0.894295, 0.086598 ],
			"SV_1" : [ 0.76461, 0.37897, 0.823855, 0.913603, 0.5534, 0.055048, 0.588332, 0.36105, 0.81498, 0.123688 ],
			"SV_2" : [ 0.480054, 0.664308, 0.98534, 0.567078, 0.994149, 0.78089, 0.232756, 0.567089, 0.093123, 0.031981 ],
			"SV_3" : [ 0.0105, 0.20019, 0.192366, 0.175831, 0.50753, 0.721218, 0.719388, 0.11477, 0.417354, 0.783886 ],
			"SV_4" : [ 0.361047, 0.160106, 0.219158, 0.010201, 0.471566, 0.48828, 0.020705, 0.852158, 0.667965, 0.378921 ],
			"SV_5" : [ 0.734481, 0.482054, 0.789831, 0.806913, 0.681106, 0.602843, 0.333277, 0.147743, 0.020703, 0.509223 ],
			"SV_6" : [ 0.366207, 0.096199, 0.520676, 0.250113, 0.155164, 0.752654, 0.007439, 0.02531, 0.924844, 0.961402 ],
			"SV_7" : [ 0.663564, 0.399281, 0.158547, 0.930965, 0.846977, 0.986627, 0.132816, 0.426558, 0.99995, 0.674509 ],
			"SV_8" : [ 0.804101, 0.10305, 0.728795, 0.068628, 0.567613, 0.648562, 0.495718, 0.628355, 0.398738, 0.1851 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ 1.0, 0.027869, 1.0, -1.0, -1.0, 0.17213, -1.0, 1.0, -0.199998 ]
		},
		"classes" : 2,
		"nSV" : [ 9 ],
		"n_iter" : [ 9 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -14.503784 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[14.3916855 14.378316  15.710817  15.012583  14.847755  14.056957
 14.223912  14.2156    14.368926  14.485854  14.708759  14.177362
 15.003779  14.262463  14.881333  14.953269  14.456388  14.728776
 14.70307   14.860851  15.360164  15.5537815 13.988287  13.304693
 14.488045  15.125146  13.3252125 13.9567795 14.017994  14.314203
 14.771873  14.548054  15.178149  14.59942   15.071996  14.401916
 14.779092  14.592494  14.6415415 14.363774  14.505594  14.386824
 14.678374  14.324166  13.266337  14.542168  15.45199   14.735803
 14.348415  14.130349  14.680606  14.287196  14.206967  14.565205
 14.922987  14.698909  14.195139  14.64871   14.807903  15.157031
 14.610046  14.68281   14.312293  14.564979 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[14.3916855 14.378316  15.710817  15.012583  14.847756  14.056957
 14.223912  14.215601  14.368926  14.485854  14.708759  14.177362
 15.003779  14.262462  14.881333  14.953269  14.456388  14.728776
 14.70307   14.860851  15.360164  15.553782  13.988286  13.304693
 14.488045  15.125147  13.3252125 13.9567795 14.017994  14.314203
 14.771873  14.548054  15.178149  14.59942   15.071996  14.401916
 14.779092  14.592493  14.6415415 14.363774  14.505594  14.386824
 14.678374  14.324166  13.266336  14.542168  15.45199   14.735803
 14.348416  14.130349  14.680606  14.287197  14.206967  14.565205
 14.922987  14.698909  14.195138  14.64871   14.807903  15.157031
 14.610046  14.682811  14.312293  14.564978 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman1_small', 'size': 64, 'mse': 17.764404, 'mae': 3.505323, 'mape': 0.28558108, 'r2': 0.15577351662562877}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman1_small', 'training_time_in_sec': 0.01, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_small', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.000000 AS "coeff", 0.652811 AS "sv_0", 0.757719 AS "sv_1", 0.306902 AS "sv_2", 0.828286 AS "sv_3", 0.763064 AS "sv_4", 0.859
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_small', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_small', 'NuSVR', 'duckdb')

    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -14.503784 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -1.117212 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_small', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
...         ...       ...       ...  ...       ...       ...       ...
59     0.652046  0.852315  0.661294  ...  0.609463  0.682591  0.243739
60     0.133169  0.898182  0.993566  ...  0.033415  0.014059  0.907372
61     0.771820  0.489723  0.677121  ...  0.565222  0.039136  0.218690
62     0.059807  0.098960  0.941488  ...  0.265461  0.196262  0.732540
63     0.672520  0.960422  0.271050  ...  0.514037  0.918325  0.297702

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0  14.391686
1       1  14.378316
2       2  15.710817
3       3  15.012583
4       4  14.847756
..    ...        ...
59     59  15.157031
60     60  14.610046
61     61  14.682810
62     62  14.312293
63     63  14.564978

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_small', 'NuSVR') Estimator 3.5216377958224854e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48      14.348416     14.348415  5.383622e-07
49     49      14.130349     14.130349  2.264856e-07
50     50      14.680605     14.680606 -4.749168e-07
51     51      14.287197     14.287196  4.403405e-07
52     52      14.206967     14.206967 -4.912149e-07
53     53      14.565204     14.565205 -1.978483e-07
54     54      14.922987     14.922987  5.174616e-08
55     55      14.698909     14.698909 -7.258540e-08
56     56      14.195138     14.195139 -8.781794e-07
57     57      14.648710     14.648710  8.480811e-08
58     58      14.807903     14.807903 -1.065245e-08
59     59      15.157031     15.157031 -5.298648e-07
60     60      14.610046     14.610046 -3.940081e-07
61     61      14.682810     14.682810  4.331228e-07
62     62      14.312293     14.312293 -5.452316e-07
63     63      14.564978     14.564979 -8.018110e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_small', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_small', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.000000 AS "coeff", 0.652811 AS "sv_0", 0.757719 AS "sv_1", 0.306902 AS "sv_2", 0.828286 AS "sv_3", 0.763064 AS "sv_4", 0.859
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_small', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_small', 'NuSVR', 'sqlite')
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -14.503784 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -1.117212 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_small', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
...         ...       ...       ...  ...       ...       ...       ...
59     0.652046  0.852315  0.661294  ...  0.609463  0.682591  0.243739
60     0.133169  0.898182  0.993566  ...  0.033415  0.014059  0.907372
61     0.771820  0.489723  0.677121  ...  0.565222  0.039136  0.218690
62     0.059807  0.098960  0.941488  ...  0.265461  0.196262  0.732540
63     0.672520  0.960422  0.271050  ...  0.514037  0.918325  0.297702

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0  14.391686
1       1  14.378316
2       2  15.710817
3       3  15.012583
4       4  14.847756
..    ...        ...
59     59  15.157031
60     60  14.610046
61     61  14.682810
62     62  14.312293
63     63  14.564978

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_small', 'NuSVR') Estimator 3.502156169232773e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48      14.348416     14.348415  5.295822e-07
49     49      14.130349     14.130349  2.506204e-07
50     50      14.680605     14.680606 -4.421955e-07
51     51      14.287197     14.287196  4.506790e-07
52     52      14.206967     14.206967 -5.002478e-07
53     53      14.565204     14.565205 -2.066161e-07
54     54      14.922987     14.922987  4.201667e-08
55     55      14.698909     14.698909 -8.427224e-08
56     56      14.195138     14.195139 -9.136160e-07
57     57      14.648710     14.648710  1.027482e-07
58     58      14.807903     14.807903 -1.153759e-08
59     59      15.157031     15.157031 -5.405688e-07
60     60      14.610046     14.610046 -3.904093e-07
61     61      14.682810     14.682810  4.065557e-07
62     62      14.312293     14.312293 -5.408541e-07
63     63      14.564978     14.564979 -8.033119e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_small', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman1_small_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_small', 'NuSVR', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.000000 AS "coeff", 0.652811 AS "sv_0", 0.757719 AS "sv_1", 0.306902 AS "sv_2", 0.828286 AS "sv_3", 0.763064 AS "sv_4", 0.859
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_small', 'NuSVR', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_small', 'NuSVR', 'pgsql')

    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -14.503784 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -1.117212 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_small', 'NuSVR', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
