         X_0       X_1       X_2  ...       X_8       X_9     target
0   0.544738  0.515912  0.990435  ...  0.898018  0.377159  15.807614
1   0.783459  0.095321  0.135945  ...  0.019766  0.833486  14.766437
2   0.652811  0.757719  0.306902  ...  0.894295  0.086598  22.842493
3   0.226051  0.939732  0.731124  ...  0.185038  0.248943  19.544314
4   0.764610  0.378970  0.823855  ...  0.814980  0.123688  21.897690
..       ...       ...       ...  ...       ...       ...        ...
59  0.652046  0.852315  0.661294  ...  0.682591  0.243739  18.364700
60  0.133169  0.898182  0.993566  ...  0.014059  0.907372  19.271183
61  0.771820  0.489723  0.677121  ...  0.039136  0.218690  15.917285
62  0.059807  0.098960  0.941488  ...  0.196262  0.732540  13.422214
63  0.672520  0.960422  0.271050  ...  0.918325  0.297702  12.990523

[64 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[0.54473835 0.51591223 0.99043506 0.25514543 0.14395337 0.33235115
  0.8686215  0.04108923 0.8980185  0.37715888]
 [0.78345853 0.09532096 0.1359447  0.858711   0.24078475 0.08367069
  0.05237448 0.42276597 0.01976581 0.8334865 ]
 [0.652811   0.75771934 0.3069025  0.8282855  0.7630638  0.85900337
  0.87337655 0.14607023 0.89429516 0.08659814]
 [0.22605109 0.9397324  0.7311243  0.8374556  0.7824477  0.3529266
  0.1832118  0.84345275 0.18503828 0.2489433 ]
 [0.76461023 0.37897    0.82385516 0.9136035  0.55340034 0.05504839
  0.58833206 0.36104986 0.81497955 0.12368783]] [15.807614 14.766437 22.842493 19.544313 21.89769 ]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.01, 'TRAINING')
{ "alpha" : 0.0000001,   , }
{ "alpha" : 0.0000001,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"equations" : {
			"intercept" : -1.030058,
			"coeffs" : [ 6.909731, 7.129270, 2.563079, 9.977987, 4.739046, 0.685318, -0.092252, -0.337384, -0.674652, 0.604707 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"equations" : {
			"intercept" : -1.030058,
			"coeffs" : [ 6.909731, 7.129270, 2.563079, 9.977987, 4.739046, 0.685318, -0.092252, -0.337384, -0.674652, 0.604707 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 64
	},
	"equations" : 	{
		"coeffs" : [ 6.909731, 7.12927, 2.563079, 9.977987, 4.739046, 0.685318, -0.092252, -0.337384, -0.674652, 0.604707 ],
		"intercept" : -1.030058
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "alpha" : 0.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[11.93461   15.521288  21.457973  21.135706  20.191696  12.721286
 12.609998  12.346656  11.780819  12.593858  16.286493  13.116715
 18.085806  11.860622  19.855192  17.446154  16.90892   17.87832
 17.412254  15.724332  23.451738  20.197008   7.7942734  5.704032
 11.466191  18.670582   5.3281054  7.8115835  8.181801  12.671158
 18.273561  15.463192  20.21459   13.692866  21.41177   10.356747
 15.811895  13.207635  17.763031  13.522122  16.859928  12.321833
 16.3328    12.411875   7.215653  17.41462   20.364202  15.898946
 12.889158  11.878864  17.321703  11.426037  14.014771  13.734457
 20.888565  14.419343  10.53308   16.443747  17.414476  19.126177
 20.01419   15.385464  12.01742   13.840865 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[11.934608  15.521288  21.457973  21.135708  20.191696  12.721285
 12.609998  12.346655  11.780819  12.593857  16.286491  13.116716
 18.085808  11.860622  19.85519   17.446154  16.90892   17.87832
 17.412254  15.724332  23.45174   20.197008   7.794274   5.7040315
 11.466192  18.670582   5.328105   7.8115835  8.181801  12.671158
 18.273561  15.463192  20.21459   13.692866  21.411768  10.356746
 15.811894  13.207636  17.76303   13.522122  16.859928  12.321833
 16.3328    12.411875   7.2156534 17.41462   20.364204  15.898946
 12.889159  11.878864  17.321703  11.426038  14.014772  13.734457
 20.888563  14.419341  10.533079  16.443748  17.414476  19.126177
 20.01419   15.385463  12.017422  13.840864 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman1_small', 'size': 64, 'mse': 4.417184, 'mae': 1.6216431, 'mape': 0.12222232, 'r2': 0.790080028037303}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman1_small', 'training_time_in_sec': 0.01, 'prediction_time_in_sec': 0.002}
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_small', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.030058 + 6.909731 * t."X_0" + 7.129270 * t."X_1" + 2.563079 * t."X_2" + 9.977987 * t."X_3" + 4.739046 * t."X_4" + 0.685318 * t."X_5" + -0.092252 * t."X_6" + -0.337384 * t."X_7" + -0.674652 * t."X_8" + 0.604707 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman1_small', 'RidgeRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_small', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.030058 + 6.909731 * t."X_0" + 7.129270 * t."X_1" + 2.563079 * t."X_2" + 9.977987 * t."X_3" + 4.739046 * t."X_4" + 0.685318 * t."X_5" + -0.092252 * t."X_6" + -0.337384 * t."X_7" + -0.674652 * t."X_8" + 0.604707 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman1_small', 'RidgeRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
...         ...       ...       ...  ...       ...       ...       ...
59     0.652046  0.852315  0.661294  ...  0.609463  0.682591  0.243739
60     0.133169  0.898182  0.993566  ...  0.033415  0.014059  0.907372
61     0.771820  0.489723  0.677121  ...  0.565222  0.039136  0.218690
62     0.059807  0.098960  0.941488  ...  0.265461  0.196262  0.732540
63     0.672520  0.960422  0.271050  ...  0.514037  0.918325  0.297702

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0  11.934608
1       1  15.521288
2       2  21.457973
3       3  21.135708
4       4  20.191696
..    ...        ...
59     59  19.126177
60     60  20.014191
61     61  15.385463
62     62  12.017422
63     63  13.840864

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_small', 'RidgeRegressor') Estimator 6.258487701416016e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48      12.889159     12.889158  9.536743e-07
49     49      11.878864     11.878864  0.000000e+00
50     50      17.321703     17.321703  0.000000e+00
51     51      11.426038     11.426037  9.536743e-07
52     52      14.014772     14.014771  9.536743e-07
53     53      13.734457     13.734457  0.000000e+00
54     54      20.888563     20.888565 -1.907349e-06
55     55      14.419341     14.419343 -1.907349e-06
56     56      10.533079     10.533080 -9.536743e-07
57     57      16.443748     16.443747  1.907349e-06
58     58      17.414476     17.414476  0.000000e+00
59     59      19.126177     19.126177  0.000000e+00
60     60      20.014191     20.014191  0.000000e+00
61     61      15.385463     15.385464 -9.536743e-07
62     62      12.017422     12.017420  1.907349e-06
63     63      13.840864     13.840865 -9.536743e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_small', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_small', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.030058 + 6.909731 * t."X_0" + 7.129270 * t."X_1" + 2.563079 * t."X_2" + 9.977987 * t."X_3" + 4.739046 * t."X_4" + 0.685318 * t."X_5" + -0.092252 * t."X_6" + -0.337384 * t."X_7" + -0.674652 * t."X_8" + 0.604707 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman1_small', 'RidgeRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_small', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.030058 + 6.909731 * t."X_0" + 7.129270 * t."X_1" + 2.563079 * t."X_2" + 9.977987 * t."X_3" + 4.739046 * t."X_4" + 0.685318 * t."X_5" + -0.092252 * t."X_6" + -0.337384 * t."X_7" + -0.674652 * t."X_8" + 0.604707 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman1_small', 'RidgeRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
...         ...       ...       ...  ...       ...       ...       ...
59     0.652046  0.852315  0.661294  ...  0.609463  0.682591  0.243739
60     0.133169  0.898182  0.993566  ...  0.033415  0.014059  0.907372
61     0.771820  0.489723  0.677121  ...  0.565222  0.039136  0.218690
62     0.059807  0.098960  0.941488  ...  0.265461  0.196262  0.732540
63     0.672520  0.960422  0.271050  ...  0.514037  0.918325  0.297702

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0  11.934610
1       1  15.521288
2       2  21.457974
3       3  21.135705
4       4  20.191697
..    ...        ...
59     59  19.126179
60     60  20.014192
61     61  15.385463
62     62  12.017420
63     63  13.840863

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_small', 'RidgeRegressor') Estimator 1.0049113083748784e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48      12.889158     12.889158 -4.658961e-07
49     49      11.878863     11.878864 -1.679578e-06
50     50      17.321705     17.321703  2.390712e-06
51     51      11.426036     11.426037 -1.253056e-06
52     52      14.014771     14.014771 -2.482396e-07
53     53      13.734455     13.734457 -1.909564e-06
54     54      20.888563     20.888565 -1.818952e-06
55     55      14.419342     14.419343 -1.162009e-06
56     56      10.533080     10.533080 -3.750473e-07
57     57      16.443745     16.443747 -1.273437e-06
58     58      17.414476     17.414476 -4.640359e-07
59     59      19.126179     19.126177  2.104731e-06
60     60      20.014192     20.014191  8.841820e-07
61     61      15.385463     15.385464 -4.598016e-07
62     62      12.017420     12.017420  1.434198e-07
63     63      13.840863     13.840865 -1.668183e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_small', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_small_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_small', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.030058 + 6.909731 * t."X_0" + 7.129270 * t."X_1" + 2.563079 * t."X_2" + 9.977987 * t."X_3" + 4.739046 * t."X_4" + 0.685318 * t."X_5" + -0.092252 * t."X_6" + -0.337384 * t."X_7" + -0.674652 * t."X_8" + 0.604707 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman1_small', 'RidgeRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_small', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.030058 + 6.909731 * t."X_0" + 7.129270 * t."X_1" + 2.563079 * t."X_2" + 9.977987 * t."X_3" + 4.739046 * t."X_4" + 0.685318 * t."X_5" + -0.092252 * t."X_6" + -0.337384 * t."X_7" + -0.674652 * t."X_8" + 0.604707 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman1_small', 'RidgeRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
