         X_0       X_1       X_2  ...       X_8       X_9     target
0   0.456887  0.295923  0.591968  ...  0.761317  0.245544  15.370928
1   0.716619  0.420279  0.400670  ...  0.167246  0.133911  13.065349
2   0.140833  0.617769  0.186105  ...  0.648067  0.563459  15.524062
3   0.071195  0.704806  0.073220  ...  0.725143  0.940551  12.395770
4   0.710411  0.866302  0.056103  ...  0.666595  0.305953  19.010028
..       ...       ...       ...  ...       ...       ...        ...
95  0.759884  0.645603  0.858346  ...  0.340241  0.086284  20.439077
96  0.133898  0.993722  0.247951  ...  0.685693  0.539265  14.384506
97  0.907576  0.735434  0.379983  ...  0.264531  0.516615  14.885318
98  0.368356  0.189593  0.403483  ...  0.462841  0.813023  11.119547
99  0.268993  0.202785  0.253928  ...  0.743187  0.015995   4.502946

[100 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[0.4568872  0.2959234  0.59196806 0.6449268  0.92630494 0.9157275
  0.99709725 0.2905369  0.7613175  0.24554443]
 [0.7166186  0.420279   0.40067008 0.24398686 0.46325052 0.05229123
  0.34726295 0.39939457 0.16724615 0.13391146]
 [0.14083336 0.61776936 0.18610482 0.667265   0.83628976 0.8805156
  0.79894525 0.1980786  0.6480668  0.5634588 ]
 [0.07119486 0.70480555 0.07321981 0.22164722 0.9933174  0.43409562
  0.48198017 0.13922417 0.72514343 0.9405507 ]
 [0.71041054 0.8663024  0.05610295 0.50554484 0.13280703 0.3171181
  0.52081394 0.3842079  0.6665948  0.30595312]] [15.370928 13.06535  15.524062 12.39577  19.010029]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.01, 'TRAINING')
{ "alpha" : 0.0000001,   , }
{ "alpha" : 0.0000001,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"equations" : {
			"intercept" : -1.223080,
			"coeffs" : [ 6.445864, 7.511729, 1.895411, 10.427724, 4.543738, 0.864496, -0.338098, 0.253433, -0.671484, 0.922008 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_original_option_1.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"equations" : {
			"intercept" : -1.223080,
			"coeffs" : [ 6.445864, 7.511729, 1.895411, 10.427724, 4.543738, 0.864496, -0.338098, 0.253433, -0.671484, 0.922008 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 100
	},
	"equations" : 	{
		"coeffs" : [ 6.445864, 7.511729, 1.895411, 10.427724, 4.543738, 0.864496, -0.338098, 0.253433, -0.671484, 0.922008 ],
		"intercept" : -1.22308
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "alpha" : 0.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[16.244217  12.0019    16.061537  12.121447  15.874932  18.17361
 14.729351  10.008731  13.953176  14.716752  11.899164  16.90526
 12.573417  18.968552  21.03995   11.997742  12.033333  13.591228
 19.938038  17.213099  21.202164  12.530739  20.846148  18.03109
 17.178638   8.571031  19.662039  20.653072  17.106413   6.849564
  9.865462  11.347505  21.529     24.472397  14.854777   9.985209
  9.57241    7.885765  14.055733   7.0800605 11.849243  14.184406
 16.322607  15.035799  16.598938  17.126888  17.361431   9.312656
 17.643372  11.104364  16.548965  17.264578  20.776829  21.4597
 11.315972   9.822299  16.680286  11.223973  10.970653  17.678762
 17.76138    7.9111457 11.699931  13.04366   17.53777   13.892041
 19.866549  16.759628   9.4998255 11.6070795  4.967246  15.325233
 21.32631   13.751736  19.713758  15.157319  19.001768  14.534502
 18.440777  19.767305  12.229746   9.689283  12.9884815 17.644144
 16.592922  13.537699  11.557985  23.458376   5.503219  15.766125
  7.741136   5.704445  12.272219  24.072996  11.56503   17.959688
 17.063555  17.665932  13.145191   4.0600758]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[16.244217  12.0019    16.061537  12.121447  15.874932  18.17361
 14.729351  10.00873   13.953176  14.716752  11.899164  16.90526
 12.573418  18.968552  21.03995   11.997742  12.033333  13.591228
 19.938038  17.213099  21.202162  12.530739  20.846146  18.031088
 17.178638   8.571031  19.662039  20.653072  17.106415   6.8495646
  9.865462  11.3475065 21.529     24.472397  14.854777   9.985209
  9.57241    7.885766  14.055734   7.080061  11.849244  14.184405
 16.322607  15.035799  16.598938  17.126888  17.361433   9.312657
 17.643372  11.104364  16.548965  17.264578  20.77683   21.4597
 11.315972   9.822299  16.680288  11.223973  10.970653  17.67876
 17.76138    7.9111457 11.699931  13.043661  17.53777   13.892041
 19.866549  16.759628   9.4998255 11.6070795  4.967246  15.325233
 21.326311  13.751736  19.713757  15.157319  19.001768  14.534502
 18.440777  19.767305  12.229746   9.689283  12.988483  17.644146
 16.592922  13.5377    11.557985  23.458376   5.5032187 15.766125
  7.7411356  5.7044454 12.272221  24.072996  11.565029  17.959688
 17.063553  17.66593   13.145189   4.0600753]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman1_original', 'size': 100, 'mse': 4.083854, 'mae': 1.606156, 'mape': 0.12738995, 'r2': 0.8291405859724716}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_original_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman1_original', 'training_time_in_sec': 0.01, 'prediction_time_in_sec': 0.002}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -0.127926 ],
      "X_1" : [ 0.069165 ],
      "X_2" : [ -0.017417 ],
      "X_3" : [ -0.917787 ],
      "X_4" : [ 0.061533 ],
      "X_5" : [ -0.071207 ],
      "X_6" : [ -0.015732 ],
      "X_7" : [ -0.024512 ],
      "X_8" : [ -0.014782 ],
      "X_9" : [ 0.004916 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 3, 0, 5, 1, 4, 7, 2, 6, 8, 9 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_original_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_original_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_original', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.223080 + 6.445864 * t."X_0" + 7.511729 * t."X_1" + 1.895411 * t."X_2" + 10.427724 * t."X_3" + 4.543738 * t."X_4" + 0.864496 * t."X_5" + -0.338098 * t."X_6" + 0.253433 * t."X_7" + -0.671484 * t."X_8" + 0.922008 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman1_original', 'RidgeRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_original', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.223080 + 6.445864 * t."X_0" + 7.511729 * t."X_1" + 1.895411 * t."X_2" + 10.427724 * t."X_3" + 4.543738 * t."X_4" + 0.864496 * t."X_5" + -0.338098 * t."X_6" + 0.253433 * t."X_7" + -0.671484 * t."X_8" + 0.922008 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman1_original', 'RidgeRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.456887  0.295923  0.591968  ...  0.290537  0.761317  0.245544
1      0.716619  0.420279  0.400670  ...  0.399395  0.167246  0.133911
2      0.140833  0.617769  0.186105  ...  0.198079  0.648067  0.563459
3      0.071195  0.704806  0.073220  ...  0.139224  0.725143  0.940551
4      0.710411  0.866302  0.056103  ...  0.384208  0.666595  0.305953
...         ...       ...       ...  ...       ...       ...       ...
95     0.759884  0.645603  0.858346  ...  0.314409  0.340241  0.086284
96     0.133898  0.993722  0.247951  ...  0.342368  0.685693  0.539265
97     0.907576  0.735434  0.379983  ...  0.265155  0.264531  0.516615
98     0.368356  0.189593  0.403483  ...  0.840440  0.462841  0.813023
99     0.268993  0.202785  0.253928  ...  0.076708  0.743187  0.015995

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  16.244217
1       1  12.001900
2       2  16.061537
3       3  12.121447
4       4  15.874932
..    ...        ...
95     95  17.959688
96     96  17.063553
97     97  17.665930
98     98  13.145189
99     99   4.060075

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_original', 'RidgeRegressor') Estimator 4.482269287109375e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      16.592922     16.592922  0.000000e+00
85     85      13.537700     13.537699  9.536743e-07
86     86      11.557985     11.557985  0.000000e+00
87     87      23.458376     23.458376  0.000000e+00
88     88       5.503219      5.503219 -4.768372e-07
89     89      15.766125     15.766125  0.000000e+00
90     90       7.741136      7.741136 -4.768372e-07
91     91       5.704445      5.704445  4.768372e-07
92     92      12.272221     12.272219  1.907349e-06
93     93      24.072996     24.072996  0.000000e+00
94     94      11.565029     11.565030 -9.536743e-07
95     95      17.959688     17.959688  0.000000e+00
96     96      17.063553     17.063555 -1.907349e-06
97     97      17.665930     17.665932 -1.907349e-06
98     98      13.145189     13.145191 -1.907349e-06
99     99       4.060075      4.060076 -4.768372e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_original', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_original_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_original', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.223080 + 6.445864 * t."X_0" + 7.511729 * t."X_1" + 1.895411 * t."X_2" + 10.427724 * t."X_3" + 4.543738 * t."X_4" + 0.864496 * t."X_5" + -0.338098 * t."X_6" + 0.253433 * t."X_7" + -0.671484 * t."X_8" + 0.922008 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman1_original', 'RidgeRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_original', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.223080 + 6.445864 * t."X_0" + 7.511729 * t."X_1" + 1.895411 * t."X_2" + 10.427724 * t."X_3" + 4.543738 * t."X_4" + 0.864496 * t."X_5" + -0.338098 * t."X_6" + 0.253433 * t."X_7" + -0.671484 * t."X_8" + 0.922008 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman1_original', 'RidgeRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.456887  0.295923  0.591968  ...  0.290537  0.761317  0.245544
1      0.716619  0.420279  0.400670  ...  0.399395  0.167246  0.133911
2      0.140833  0.617769  0.186105  ...  0.198079  0.648067  0.563459
3      0.071195  0.704806  0.073220  ...  0.139224  0.725143  0.940551
4      0.710411  0.866302  0.056103  ...  0.384208  0.666595  0.305953
...         ...       ...       ...  ...       ...       ...       ...
95     0.759884  0.645603  0.858346  ...  0.314409  0.340241  0.086284
96     0.133898  0.993722  0.247951  ...  0.342368  0.685693  0.539265
97     0.907576  0.735434  0.379983  ...  0.265155  0.264531  0.516615
98     0.368356  0.189593  0.403483  ...  0.840440  0.462841  0.813023
99     0.268993  0.202785  0.253928  ...  0.076708  0.743187  0.015995

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  16.244217
1       1  12.001900
2       2  16.061538
3       3  12.121447
4       4  15.874935
..    ...        ...
95     95  17.959687
96     96  17.063554
97     97  17.665929
98     98  13.145191
99     99   4.060075

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_original', 'RidgeRegressor') Estimator 9.52720442910504e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      16.592922     16.592922  3.330788e-08
85     85      13.537700     13.537699  1.582755e-06
86     86      11.557985     11.557985 -6.774487e-07
87     87      23.458377     23.458376  1.534522e-06
88     88       5.503219      5.503219  2.115890e-08
89     89      15.766125     15.766125 -1.999555e-07
90     90       7.741135      7.741136 -6.528970e-07
91     91       5.704445      5.704445  5.398620e-07
92     92      12.272220     12.272219  1.528409e-06
93     93      24.072998     24.072996  1.843279e-06
94     94      11.565030     11.565030 -4.199744e-07
95     95      17.959687     17.959688 -1.548835e-06
96     96      17.063554     17.063555 -5.049316e-07
97     97      17.665929     17.665932 -2.616677e-06
98     98      13.145191     13.145191 -3.156940e-07
99     99       4.060075      4.060076 -4.250676e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_original', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
