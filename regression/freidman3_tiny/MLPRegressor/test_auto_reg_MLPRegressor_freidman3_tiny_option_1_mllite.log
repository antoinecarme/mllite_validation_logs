          X_0          X_1       X_2        X_3    target
0   17.761710   423.498320  0.135270  10.148129  1.270144
1   45.437614   168.841197  0.343817   3.279963  0.906663
2   69.792322   473.447926  0.233546   3.411073  1.007753
3   67.667095   938.672588  0.652046   9.523154  1.460687
4   55.118421  1002.086076  0.726658   4.570617  1.495246
5   52.067586   534.256140  0.155164   8.526538  1.009971
6   50.992903   814.561313  0.257439   5.994628  1.332255
7   34.347892   205.928122  0.720020   9.414677  1.343157
8   63.010204   221.354390  0.814630   5.897069  1.234627
9   22.605109  1660.837003  0.731124   9.374556  1.552182
10  13.280703   643.716771  0.520814   4.842079  1.531203
11   7.606344  1112.226604  0.732761   6.140375  1.561464
12  51.401745  1161.331552  0.618557   2.218271  1.499363
13  94.566439   663.266399  0.852323   6.919084  1.405051
14  14.282172  1575.160409  0.428596   4.169882  1.549644
15  38.088467  1321.297507  0.052941  10.429984  1.072180
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[1.77617092e+01 4.23498322e+02 1.35270208e-01 1.01481285e+01]
 [4.54376144e+01 1.68841202e+02 3.43817413e-01 3.27996254e+00]
 [6.97923203e+01 4.73447937e+02 2.33546272e-01 3.41107249e+00]
 [6.76670914e+01 9.38672607e+02 6.52046204e-01 9.52315426e+00]
 [5.51184196e+01 1.00208606e+03 7.26658285e-01 4.57061768e+00]] [1.2701445 0.9066629 1.0077531 1.4606868 1.4952464]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.006, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.104507, 0.418424, -0.370526, -0.036198 ],
			"coeffs_1" : [ 0.132473, -0.576469, 0.230699, 0.054327 ],
			"coeffs_2" : [ 0.710678, 0.156986, 0.700311, -0.108680 ],
			"coeffs_3" : [ 0.832354, -0.734452, -0.381087, 0.349324 ],
			"intercepts" : [ 0.424454, -0.414892, -0.459743, -0.644920 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.276058, -0.722911, -0.112743, 0.015901, -0.140474, -0.616713, -0.334724, 0.553856 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601970, 0.040321, -0.186417, 0.230930, -0.142278, 0.269144 ],
			"coeffs_2" : [ -0.439695, 0.594182, -0.486733, 0.362936, -0.476964, 0.414826, 0.191208, 0.617576 ],
			"coeffs_3" : [ -0.413093, -0.572262, 0.206758, 0.235853, 0.444683, 0.634936, 0.561397, -0.486430 ],
			"intercepts" : [ 0.422772, 0.551472, -0.426981, 0.297626, 0.209398, 0.080052, 0.115496, 0.378715 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530362, 0.082615, 0.238108, 0.346003, -0.527715, 0.422926 ],
			"coeffs_1" : [ -0.341273, -0.584206, 0.667342, 0.603868, -0.107175, -0.553373 ],
			"coeffs_2" : [ -0.023593, 0.594791, -0.441472, 0.228110, 0.264562, 0.356072 ],
			"coeffs_3" : [ 0.603641, -0.305247, 0.301219, 0.435689, 0.454635, -0.083776 ],
			"coeffs_4" : [ -0.550089, 0.296743, 0.007260, -0.124039, -0.449854, -0.588194 ],
			"coeffs_5" : [ -0.208563, 0.621515, 0.058722, -0.164483, -0.182560, -0.617460 ],
			"coeffs_6" : [ 0.241831, -0.168850, -0.223617, -0.160691, 0.239324, -0.487470 ],
			"coeffs_7" : [ -0.188704, 0.401488, 0.456393, 0.532664, 0.451116, 0.346987 ],
			"intercepts" : [ -0.250886, 0.087754, 0.209281, 0.418099, 0.296180, -0.027362 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.564705 ],
			"coeffs_1" : [ 0.669408 ],
			"coeffs_2" : [ 0.177416 ],
			"coeffs_3" : [ -0.293792 ],
			"coeffs_4" : [ -0.228249 ],
			"coeffs_5" : [ -0.435661 ],
			"intercepts" : [ 0.512988 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_tiny_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.104507, 0.418424, -0.370526, -0.036198 ],
			"coeffs_1" : [ 0.132473, -0.576469, 0.230699, 0.054327 ],
			"coeffs_2" : [ 0.710678, 0.156986, 0.700311, -0.108680 ],
			"coeffs_3" : [ 0.832354, -0.734452, -0.381087, 0.349324 ],
			"intercepts" : [ 0.424454, -0.414892, -0.459743, -0.644920 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.276058, -0.722911, -0.112743, 0.015901, -0.140474, -0.616713, -0.334724, 0.553856 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601970, 0.040321, -0.186417, 0.230930, -0.142278, 0.269144 ],
			"coeffs_2" : [ -0.439695, 0.594182, -0.486733, 0.362936, -0.476964, 0.414826, 0.191208, 0.617576 ],
			"coeffs_3" : [ -0.413093, -0.572262, 0.206758, 0.235853, 0.444683, 0.634936, 0.561397, -0.486430 ],
			"intercepts" : [ 0.422772, 0.551472, -0.426981, 0.297626, 0.209398, 0.080052, 0.115496, 0.378715 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530362, 0.082615, 0.238108, 0.346003, -0.527715, 0.422926 ],
			"coeffs_1" : [ -0.341273, -0.584206, 0.667342, 0.603868, -0.107175, -0.553373 ],
			"coeffs_2" : [ -0.023593, 0.594791, -0.441472, 0.228110, 0.264562, 0.356072 ],
			"coeffs_3" : [ 0.603641, -0.305247, 0.301219, 0.435689, 0.454635, -0.083776 ],
			"coeffs_4" : [ -0.550089, 0.296743, 0.007260, -0.124039, -0.449854, -0.588194 ],
			"coeffs_5" : [ -0.208563, 0.621515, 0.058722, -0.164483, -0.182560, -0.617460 ],
			"coeffs_6" : [ 0.241831, -0.168850, -0.223617, -0.160691, 0.239324, -0.487470 ],
			"coeffs_7" : [ -0.188704, 0.401488, 0.456393, 0.532664, 0.451116, 0.346987 ],
			"intercepts" : [ -0.250886, 0.087754, 0.209281, 0.418099, 0.296180, -0.027362 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.564705 ],
			"coeffs_1" : [ 0.669408 ],
			"coeffs_2" : [ 0.177416 ],
			"coeffs_3" : [ -0.293792 ],
			"coeffs_4" : [ -0.228249 ],
			"coeffs_5" : [ -0.435661 ],
			"intercepts" : [ 0.512988 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 16
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.104507, 0.418424, -0.370526, -0.036198 ],
			"coeffs_1" : [ 0.132473, -0.576469, 0.230699, 0.054327 ],
			"coeffs_2" : [ 0.710678, 0.156986, 0.700311, -0.10868 ],
			"coeffs_3" : [ 0.832354, -0.734452, -0.381087, 0.349324 ],
			"intercepts" : [ 0.424454, -0.414892, -0.459743, -0.64492 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.276058, -0.722911, -0.112743, 0.015901, -0.140474, -0.616713, -0.334724, 0.553856 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.60197, 0.040321, -0.186417, 0.23093, -0.142278, 0.269144 ],
			"coeffs_2" : [ -0.439695, 0.594182, -0.486733, 0.362936, -0.476964, 0.414826, 0.191208, 0.617576 ],
			"coeffs_3" : [ -0.413093, -0.572262, 0.206758, 0.235853, 0.444683, 0.634936, 0.561397, -0.48643 ],
			"intercepts" : [ 0.422772, 0.551472, -0.426981, 0.297626, 0.209398, 0.080052, 0.115496, 0.378715 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.530362, 0.082615, 0.238108, 0.346003, -0.527715, 0.422926 ],
			"coeffs_1" : [ -0.341273, -0.584206, 0.667342, 0.603868, -0.107175, -0.553373 ],
			"coeffs_2" : [ -0.023593, 0.594791, -0.441472, 0.22811, 0.264562, 0.356072 ],
			"coeffs_3" : [ 0.603641, -0.305247, 0.301219, 0.435689, 0.454635, -0.083776 ],
			"coeffs_4" : [ -0.550089, 0.296743, 0.00726, -0.124039, -0.449854, -0.588194 ],
			"coeffs_5" : [ -0.208563, 0.621515, 0.058722, -0.164483, -0.18256, -0.61746 ],
			"coeffs_6" : [ 0.241831, -0.16885, -0.223617, -0.160691, 0.239324, -0.48747 ],
			"coeffs_7" : [ -0.188704, 0.401488, 0.456393, 0.532664, 0.451116, 0.346987 ],
			"intercepts" : [ -0.250886, 0.087754, 0.209281, 0.418099, 0.29618, -0.027362 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.564705 ],
			"coeffs_1" : [ 0.669408 ],
			"coeffs_2" : [ 0.177416 ],
			"coeffs_3" : [ -0.293792 ],
			"coeffs_4" : [ -0.228249 ],
			"coeffs_5" : [ -0.435661 ],
			"intercepts" : [ 0.512988 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-2.1380644  -2.4697664  -1.6627469  -1.0606999   1.4618545  -2.3096685
  0.19801664 -4.011692   -3.899321    3.1499052   0.89555883  1.7893414
  2.0374413  -2.9243202   2.7583528   2.2410498 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-2.1379318  -2.4696999  -1.6625757  -1.0603771   1.4621768  -2.3094897
  0.198277   -4.011616   -3.899235    3.1506834   0.89585257  1.7898426
  2.0379963  -2.9240766   2.759076    2.2414951 ]
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman3_tiny', 'size': 16, 'mse': 8.044592, 'mae': 2.291179, 'mape': 1.8743644, 'r2': -174.11422983642538}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman3_tiny', 'training_time_in_sec': 0.006, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_tiny', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.424454 + -0.104507 * t."OUT_0"  + 0.132473 * t."OUT_1"  + 0.710678 * t."OUT_2"  + 0.832354 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418424 * t."OUT_0"  + -0.576469 * t."OUT_1"  + 0.156986 * t."OUT_2"  + -0.734452 * t."OUT_3" AS "OUT_1",
    -0.459743 + -0.370526 * t."OUT_0"  + 0.230699 * t."OUT_1"  + 0.700311 * t."OUT_2"  + -0.381087 * t."OUT_3" AS "OUT_2",
    -0.644920 + -0.036198 * t."OUT_0"  + 0.054327 * t."OUT_1"  + -0.108680 * t."OUT_2"  + 0.349324 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_tiny', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_tiny', 'MLPRegressor', 'duckdb')
0.588194 * t."OUT_4"  + -0.617460 * t."OUT_5"  + -0.487470 * t."OUT_6"  + 0.346987 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.512988 + 0.564705 * t."OUT_0"  + 0.669408 * t."OUT_1"  + 0.177416 * t."OUT_2"  + -0.293792 * t."OUT_3"  + -0.228249 * t."OUT_4"  + -0.435661 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_tiny', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
dtypes: float32(4)
memory usage: 384.0 bytes
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
5      52.067585   534.256165  0.155164   8.526538
6      50.992905   814.561340  0.257439   5.994627
7      34.347893   205.928116  0.720020   9.414678
8      63.010204   221.354385  0.814630   5.897069
9      22.605108  1660.837036  0.731124   9.374556
10     13.280704   643.716797  0.520814   4.842079
11      7.606344  1112.226562  0.732761   6.140375
12     51.401745  1161.331543  0.618557   2.218271
13     94.566437   663.266418  0.852323   6.919084
14     14.282172  1575.160400  0.428596   4.169882
15     38.088467  1321.297485  0.052941  10.429984
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  -2.137932
1       1  -2.469700
2       2  -1.662576
3       3  -1.060377
4       4   1.462177
5       5  -2.309490
6       6   0.198277
7       7  -4.011616
8       8  -3.899235
9       9   3.150683
10     10   0.895853
11     11   1.789843
12     12   2.037996
13     13  -2.924077
14     14   2.759076
15     15   2.241495
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_tiny', 'MLPRegressor') Estimator 0.0003223121166229248
    index  SQL_Estimator  Py_Estimator  SQL_Error
0       0      -2.137932     -2.138064   0.000133
1       1      -2.469700     -2.469766   0.000067
2       2      -1.662576     -1.662747   0.000171
3       3      -1.060377     -1.060700   0.000323
4       4       1.462177      1.461854   0.000322
5       5      -2.309490     -2.309669   0.000179
6       6       0.198277      0.198017   0.000260
7       7      -4.011616     -4.011692   0.000076
8       8      -3.899235     -3.899321   0.000086
9       9       3.150683      3.149905   0.000778
10     10       0.895853      0.895559   0.000294
11     11       1.789843      1.789341   0.000501
12     12       2.037996      2.037441   0.000555
13     13      -2.924077     -2.924320   0.000244
14     14       2.759076      2.758353   0.000723
15     15       2.241495      2.241050   0.000445
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_tiny', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_tiny', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.424454 + -0.104507 * t."OUT_0"  + 0.132473 * t."OUT_1"  + 0.710678 * t."OUT_2"  + 0.832354 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418424 * t."OUT_0"  + -0.576469 * t."OUT_1"  + 0.156986 * t."OUT_2"  + -0.734452 * t."OUT_3" AS "OUT_1",
    -0.459743 + -0.370526 * t."OUT_0"  + 0.230699 * t."OUT_1"  + 0.700311 * t."OUT_2"  + -0.381087 * t."OUT_3" AS "OUT_2",
    -0.644920 + -0.036198 * t."OUT_0"  + 0.054327 * t."OUT_1"  + -0.108680 * t."OUT_2"  + 0.349324 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_tiny', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_tiny', 'MLPRegressor', 'sqlite')
0.588194 * t."OUT_4"  + -0.617460 * t."OUT_5"  + -0.487470 * t."OUT_6"  + 0.346987 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.512988 + 0.564705 * t."OUT_0"  + 0.669408 * t."OUT_1"  + 0.177416 * t."OUT_2"  + -0.293792 * t."OUT_3"  + -0.228249 * t."OUT_4"  + -0.435661 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_tiny', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
dtypes: float32(4)
memory usage: 384.0 bytes
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
5      52.067585   534.256165  0.155164   8.526538
6      50.992905   814.561340  0.257439   5.994627
7      34.347893   205.928116  0.720020   9.414678
8      63.010204   221.354385  0.814630   5.897069
9      22.605108  1660.837036  0.731124   9.374556
10     13.280704   643.716797  0.520814   4.842079
11      7.606344  1112.226562  0.732761   6.140375
12     51.401745  1161.331543  0.618557   2.218271
13     94.566437   663.266418  0.852323   6.919084
14     14.282172  1575.160400  0.428596   4.169882
15     38.088467  1321.297485  0.052941  10.429984
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  -2.137929
1       1  -2.469701
2       2  -1.662573
3       3  -1.060376
4       4   1.462184
5       5  -2.309487
6       6   0.198281
7       7  -4.011616
8       8  -3.899234
9       9   3.150687
10     10   0.895854
11     11   1.789849
12     12   2.037998
13     13  -2.924077
14     14   2.759091
15     15   2.241497
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_tiny', 'MLPRegressor') Estimator 0.0003253484738783008
    index  SQL_Estimator  Py_Estimator  SQL_Error
0       0      -2.137929     -2.138064   0.000136
1       1      -2.469701     -2.469766   0.000066
2       2      -1.662573     -1.662747   0.000174
3       3      -1.060376     -1.060700   0.000324
4       4       1.462184      1.461854   0.000329
5       5      -2.309487     -2.309669   0.000182
6       6       0.198281      0.198017   0.000264
7       7      -4.011616     -4.011692   0.000076
8       8      -3.899234     -3.899321   0.000087
9       9       3.150687      3.149905   0.000782
10     10       0.895854      0.895559   0.000295
11     11       1.789849      1.789341   0.000507
12     12       2.037998      2.037441   0.000556
13     13      -2.924077     -2.924320   0.000243
14     14       2.759091      2.758353   0.000738
15     15       2.241497      2.241050   0.000448
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_tiny', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_tiny_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_tiny', 'MLPRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.424454 + -0.104507 * t."OUT_0"  + 0.132473 * t."OUT_1"  + 0.710678 * t."OUT_2"  + 0.832354 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418424 * t."OUT_0"  + -0.576469 * t."OUT_1"  + 0.156986 * t."OUT_2"  + -0.734452 * t."OUT_3" AS "OUT_1",
    -0.459743 + -0.370526 * t."OUT_0"  + 0.230699 * t."OUT_1"  + 0.700311 * t."OUT_2"  + -0.381087 * t."OUT_3" AS "OUT_2",
    -0.644920 + -0.036198 * t."OUT_0"  + 0.054327 * t."OUT_1"  + -0.108680 * t."OUT_2"  + 0.349324 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_tiny', 'MLPRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_tiny', 'MLPRegressor', 'pgsql')
0.588194 * t."OUT_4"  + -0.617460 * t."OUT_5"  + -0.487470 * t."OUT_6"  + 0.346987 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.512988 + 0.564705 * t."OUT_0"  + 0.669408 * t."OUT_1"  + 0.177416 * t."OUT_2"  + -0.293792 * t."OUT_3"  + -0.228249 * t."OUT_4"  + -0.435661 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_tiny', 'MLPRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
