    X_0  X_1  X_2  X_3    target
0     4    3    5    6  1.444753
1     9    9   10    3  1.513570
2     7    2    7    4  1.371797
3     3    2    4    0  1.407287
4     3    4    1    1  1.310030
..  ...  ...  ...  ...       ...
95    2    6    6    4  1.542656
96    5    8    7    4  1.519563
97    7    9    3    0  1.454661
98    5    3    1    7  1.009971
99    0    0    9    9  1.565980

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.]
 [ 9.  9. 10.  3.]
 [ 7.  2.  7.  4.]
 [ 3.  2.  4.  0.]
 [ 3.  4.  1.  1.]] [1.4447532 1.5135704 1.3717965 1.4072871 1.3100302]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 24 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 36 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 48 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 60 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 72 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 84 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 96 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 108 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 120 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 128 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.038, 'TRAINING')
{ "nu" : 0.1,  "max_iter" : 128  , }
{ "nu" : 0.1,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.030193, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 29,
	"SupportVectors" : {
		"SV_00" : [ 9.000000, 9.000000, 10.000000, 3.000000 ],
		"SV_01" : [ 1.000000, 6.000000, 1.000000, 7.000000 ],
		"SV_02" : [ 6.000000, 6.000000, 0.000000, 7.000000 ],
		"SV_03" : [ 0.000000, 4.000000, 1.000000, 0.000000 ],
		"SV_04" : [ 6.000000, 1.000000, 8.000000, 4.000000 ],
		"SV_05" : [ 9.000000, 6.000000, 0.000000, 2.000000 ],
		"SV_06" : [ 2.000000, 1.000000, 6.000000, 4.000000 ],
		"SV_07" : [ 9.000000, 4.000000, 4.000000, 4.000000 ],
		"SV_08" : [ 0.000000, 1.000000, 2.000000, 1.000000 ],
		"SV_09" : [ 1.000000, 8.000000, 9.000000, 7.000000 ],
		"SV_10" : [ 7.000000, 2.000000, 0.000000, 0.000000 ],
		"SV_11" : [ 0.000000, 9.000000, 4.000000, 8.000000 ],
		"SV_12" : [ 2.000000, 7.000000, 2.000000, 10.000000 ],
		"SV_13" : [ 8.000000, 2.000000, 2.000000, 0.000000 ],
		"SV_14" : [ 1.000000, 9.000000, 2.000000, 3.000000 ],
		"SV_15" : [ 1.000000, 2.000000, 6.000000, 1.000000 ],
		"SV_16" : [ 0.000000, 2.000000, 1.000000, 7.000000 ],
		"SV_17" : [ 7.000000, 4.000000, 8.000000, 9.000000 ],
		"SV_18" : [ 8.000000, 1.000000, 8.000000, 9.000000 ],
		"SV_19" : [ 8.000000, 7.000000, 1.000000, 7.000000 ],
		"SV_20" : [ 7.000000, 2.000000, 1.000000, 2.000000 ],
		"SV_21" : [ 4.000000, 4.000000, 1.000000, 2.000000 ],
		"SV_22" : [ 10.000000, 0.000000, 3.000000, 5.000000 ],
		"SV_23" : [ 4.000000, 0.000000, 3.000000, 2.000000 ],
		"SV_24" : [ 9.000000, 5.000000, 0.000000, 0.000000 ],
		"SV_25" : [ 5.000000, 4.000000, 2.000000, 5.000000 ],
		"SV_26" : [ 0.000000, 4.000000, 9.000000, 0.000000 ],
		"SV_27" : [ 7.000000, 9.000000, 3.000000, 0.000000 ],
		"SV_28" : [ 0.000000, 0.000000, 9.000000, 9.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 0.080026, 0.153222, -0.984672, 0.005449, 0.056944, -0.349892, 0.039915, 0.340474, 0.260571, 0.112009, -1.000000, 0.012326, 0.209801, 0.840363, 0.027704, 0.002920, 0.015207, 0.025501, 0.011956, 0.655558, 1.000000, 0.155725, -0.979328, -0.686109, -1.000000, 0.175382, 0.175622, 0.419123, 0.224202 ]
	},
	"rho" : [ -1.165098 ],
	"nSV" : [ 29 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 128 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.030193, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 29,
	"SupportVectors" : {
		"SV_00" : [ 9.000000, 9.000000, 10.000000, 3.000000 ],
		"SV_01" : [ 1.000000, 6.000000, 1.000000, 7.000000 ],
		"SV_02" : [ 6.000000, 6.000000, 0.000000, 7.000000 ],
		"SV_03" : [ 0.000000, 4.000000, 1.000000, 0.000000 ],
		"SV_04" : [ 6.000000, 1.000000, 8.000000, 4.000000 ],
		"SV_05" : [ 9.000000, 6.000000, 0.000000, 2.000000 ],
		"SV_06" : [ 2.000000, 1.000000, 6.000000, 4.000000 ],
		"SV_07" : [ 9.000000, 4.000000, 4.000000, 4.000000 ],
		"SV_08" : [ 0.000000, 1.000000, 2.000000, 1.000000 ],
		"SV_09" : [ 1.000000, 8.000000, 9.000000, 7.000000 ],
		"SV_10" : [ 7.000000, 2.000000, 0.000000, 0.000000 ],
		"SV_11" : [ 0.000000, 9.000000, 4.000000, 8.000000 ],
		"SV_12" : [ 2.000000, 7.000000, 2.000000, 10.000000 ],
		"SV_13" : [ 8.000000, 2.000000, 2.000000, 0.000000 ],
		"SV_14" : [ 1.000000, 9.000000, 2.000000, 3.000000 ],
		"SV_15" : [ 1.000000, 2.000000, 6.000000, 1.000000 ],
		"SV_16" : [ 0.000000, 2.000000, 1.000000, 7.000000 ],
		"SV_17" : [ 7.000000, 4.000000, 8.000000, 9.000000 ],
		"SV_18" : [ 8.000000, 1.000000, 8.000000, 9.000000 ],
		"SV_19" : [ 8.000000, 7.000000, 1.000000, 7.000000 ],
		"SV_20" : [ 7.000000, 2.000000, 1.000000, 2.000000 ],
		"SV_21" : [ 4.000000, 4.000000, 1.000000, 2.000000 ],
		"SV_22" : [ 10.000000, 0.000000, 3.000000, 5.000000 ],
		"SV_23" : [ 4.000000, 0.000000, 3.000000, 2.000000 ],
		"SV_24" : [ 9.000000, 5.000000, 0.000000, 0.000000 ],
		"SV_25" : [ 5.000000, 4.000000, 2.000000, 5.000000 ],
		"SV_26" : [ 0.000000, 4.000000, 9.000000, 0.000000 ],
		"SV_27" : [ 7.000000, 9.000000, 3.000000, 0.000000 ],
		"SV_28" : [ 0.000000, 0.000000, 9.000000, 9.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 0.080026, 0.153222, -0.984672, 0.005449, 0.056944, -0.349892, 0.039915, 0.340474, 0.260571, 0.112009, -1.000000, 0.012326, 0.209801, 0.840363, 0.027704, 0.002920, 0.015207, 0.025501, 0.011956, 0.655558, 1.000000, 0.155725, -0.979328, -0.686109, -1.000000, 0.175382, 0.175622, 0.419123, 0.224202 ]
	},
	"rho" : [ -1.165098 ],
	"nSV" : [ 29 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 128 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 0.030193, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.1, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 29,
		"SupportVectors" : 	{
			"SV_00" : [ 9.0, 9.0, 10.0, 3.0 ],
			"SV_01" : [ 1.0, 6.0, 1.0, 7.0 ],
			"SV_02" : [ 6.0, 6.0, 0.0, 7.0 ],
			"SV_03" : [ 0.0, 4.0, 1.0, 0.0 ],
			"SV_04" : [ 6.0, 1.0, 8.0, 4.0 ],
			"SV_05" : [ 9.0, 6.0, 0.0, 2.0 ],
			"SV_06" : [ 2.0, 1.0, 6.0, 4.0 ],
			"SV_07" : [ 9.0, 4.0, 4.0, 4.0 ],
			"SV_08" : [ 0.0, 1.0, 2.0, 1.0 ],
			"SV_09" : [ 1.0, 8.0, 9.0, 7.0 ],
			"SV_10" : [ 7.0, 2.0, 0.0, 0.0 ],
			"SV_11" : [ 0.0, 9.0, 4.0, 8.0 ],
			"SV_12" : [ 2.0, 7.0, 2.0, 10.0 ],
			"SV_13" : [ 8.0, 2.0, 2.0, 0.0 ],
			"SV_14" : [ 1.0, 9.0, 2.0, 3.0 ],
			"SV_15" : [ 1.0, 2.0, 6.0, 1.0 ],
			"SV_16" : [ 0.0, 2.0, 1.0, 7.0 ],
			"SV_17" : [ 7.0, 4.0, 8.0, 9.0 ],
			"SV_18" : [ 8.0, 1.0, 8.0, 9.0 ],
			"SV_19" : [ 8.0, 7.0, 1.0, 7.0 ],
			"SV_20" : [ 7.0, 2.0, 1.0, 2.0 ],
			"SV_21" : [ 4.0, 4.0, 1.0, 2.0 ],
			"SV_22" : [ 10.0, 0.0, 3.0, 5.0 ],
			"SV_23" : [ 4.0, 0.0, 3.0, 2.0 ],
			"SV_24" : [ 9.0, 5.0, 0.0, 0.0 ],
			"SV_25" : [ 5.0, 4.0, 2.0, 5.0 ],
			"SV_26" : [ 0.0, 4.0, 9.0, 0.0 ],
			"SV_27" : [ 7.0, 9.0, 3.0, 0.0 ],
			"SV_28" : [ 0.0, 0.0, 9.0, 9.0 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ 0.080026, 0.153222, -0.984672, 0.005449, 0.056944, -0.349892, 0.039915, 0.340474, 0.260571, 0.112009, -1.0, 0.012326, 0.209801, 0.840363, 0.027704, 0.00292, 0.015207, 0.025501, 0.011956, 0.655558, 1.0, 0.155725, -0.979328, -0.686109, -1.0, 0.175382, 0.175622, 0.419123, 0.224202 ]
		},
		"classes" : 2,
		"nSV" : [ 29 ],
		"n_iter" : [ 128 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -1.165098 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[1.3886827  1.3845438  1.269346   1.2834917  1.2097245  1.3753818
 1.5158201  0.9837852  1.4498475  1.3163794  1.0022774  1.4746335
 1.4128668  1.2648201  1.5632222  0.773756   1.1792921  1.3414515
 1.534757   1.1914515  1.3159817  1.5201328  1.2627985  1.2415476
 0.57808554 1.396892   1.596236   1.3769606  1.1970268  1.3935182
 1.5721672  1.1542337  1.4152437  1.3782964  1.4832125  1.3854632
 1.3184196  1.4885002  1.4765562  1.5638387  1.3214144  1.324807
 1.1820238  1.3929065  1.288529   1.4334035  0.68247604 1.4398133
 1.4953132  1.2101332  1.3731678  1.2016877  1.496657   0.89386785
 1.4088441  1.3889834  1.3046323  1.3820302  1.402369   1.5372365
 1.5188875  1.4567256  1.38963    1.318822   1.267318   1.3184866
 1.0464697  1.1318136  1.4424812  1.3231214  1.4715742  1.1194423
 0.82638216 1.0633204  1.5027747  1.261363   1.4932538  1.0791687
 1.5599278  1.1955907  1.4459293  0.9459747  1.4771025  1.4774338
 1.1521437  0.58245945 1.3155679  1.2273306  1.5287904  1.0349473
 1.2752117  0.4501511  1.2038003  1.2286708  1.4302291  1.5832456
 1.5787265  1.3264896  1.0304153  1.437418  ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[1.3886843  1.3845457  1.269346   1.2834922  1.2097235  1.3753835
 1.515822   0.9837862  1.44985    1.3163809  1.0022775  1.474636
 1.4128675  1.264819   1.5632226  0.7737539  1.1792926  1.3414516
 1.5347598  1.1914532  1.315982   1.520136   1.2627988  1.2415485
 0.5780861  1.396894   1.5962381  1.3769623  1.1970286  1.3935181
 1.5721685  1.1542344  1.4152453  1.378298   1.4832115  1.3854651
 1.3184181  1.4885025  1.4765584  1.5638399  1.3214157  1.3248094
 1.1820204  1.3929086  1.2885294  1.4334059  0.6824739  1.4398154
 1.4953157  1.2101341  1.3731692  1.2016847  1.4966598  0.8938638
 1.408846   1.3889855  1.3046316  1.3820286  1.4023712  1.5372392
 1.5188906  1.4567275  1.3896317  1.3188235  1.2673186  1.3184881
 1.0464705  1.131814   1.4424832  1.3231218  1.4715766  1.1194412
 0.82637775 1.0633198  1.5027777  1.2613618  1.4932554  1.079168
 1.559928   1.1955907  1.4459318  0.9459734  1.4771051  1.477437
 1.1521417  0.58245957 1.3155683  1.2273299  1.5287931  1.0349474
 1.2752116  0.45015222 1.2037991  1.2286714  1.4302304  1.5832486
 1.5787294  1.3264892  1.030415   1.4374195 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman3_quantized', 'size': 100, 'mse': 0.012608306, 'mae': 0.09021971, 'mape': 0.2889449, 'r2': 0.8402239990643878}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman3_quantized', 'training_time_in_sec': 0.038, 'prediction_time_in_sec': 0.002}
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_quantized', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 0.080026 AS "coeff", 9.000000 AS "sv_0", 9.000000 AS "sv_1", 10.000000 AS "sv_2", 3.000000 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", 0.153222 AS "coeff", 1.000000 AS "sv_0", 6.000000 AS "sv_1", 1.000000 AS "sv_2", 7.000000 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", -0.984672 AS "coeff", 6.000000 AS "sv_0", 6.000000 AS "sv_1", 0.000000 AS "sv_2", 7.000000 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", 0.005449 AS "coeff", 0.000000 AS "sv_0", 4.000000 AS "sv_1", 1.000000 AS "sv_2", 0.000000 AS "sv_3"

SQL_OUT_PUT_FIRST_LINES_END ('freidman3_quantized', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_quantized', 'NuSVR', 'duckdb')
0.000000 AS "sv_3"
     UNION ALL
     SELECT 28 AS "sv_idx", 0.224202 AS "coeff", 0.000000 AS "sv_0", 0.000000 AS "sv_1", 9.000000 AS "sv_2", 9.000000 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -1.165098 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.030193 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_quantized', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   1.388684
1       1   1.384546
2       2   1.269346
3       3   1.283492
4       4   1.209724
..    ...        ...
95     95   1.583249
96     96   1.578729
97     97   1.326489
98     98   1.030415
99     99   1.437420

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_quantized', 'NuSVR') Estimator 1.5485585581753726e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84       1.152142      1.152144 -1.905804e-06
85     85       0.582460      0.582459  1.601534e-07
86     86       1.315568      1.315568  4.888194e-07
87     87       1.227330      1.227331 -6.348359e-07
88     88       1.528793      1.528790  2.817719e-06
89     89       1.034947      1.034947  1.562608e-07
90     90       1.275212      1.275212 -9.513809e-08
91     91       0.450152      0.450151  1.239433e-06
92     92       1.203799      1.203800 -1.240141e-06
93     93       1.228671      1.228671  6.591459e-07
94     94       1.430230      1.430229  1.426134e-06
95     95       1.583249      1.583246  3.074618e-06
96     96       1.578729      1.578727  2.903371e-06
97     97       1.326489      1.326490 -3.809377e-07
98     98       1.030415      1.030415 -4.819361e-08
99     99       1.437420      1.437418  1.648563e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_quantized', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_quantized', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 0.080026 AS "coeff", 9.000000 AS "sv_0", 9.000000 AS "sv_1", 10.000000 AS "sv_2", 3.000000 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", 0.153222 AS "coeff", 1.000000 AS "sv_0", 6.000000 AS "sv_1", 1.000000 AS "sv_2", 7.000000 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", -0.984672 AS "coeff", 6.000000 AS "sv_0", 6.000000 AS "sv_1", 0.000000 AS "sv_2", 7.000000 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", 0.005449 AS "coeff", 0.000000 AS "sv_0", 4.000000 AS "sv_1", 1.000000 AS "sv_2", 0.000000 AS "sv_3"

SQL_OUT_PUT_FIRST_LINES_END ('freidman3_quantized', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_quantized', 'NuSVR', 'sqlite')
sv_2", 0.000000 AS "sv_3"
     UNION ALL
     SELECT 28 AS "sv_idx", 0.224202 AS "coeff", 0.000000 AS "sv_0", 0.000000 AS "sv_1", 9.000000 AS "sv_2", 9.000000 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -1.165098 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.030193 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_quantized', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   1.388684
1       1   1.384546
2       2   1.269346
3       3   1.283492
4       4   1.209724
..    ...        ...
95     95   1.583249
96     96   1.578729
97     97   1.326489
98     98   1.030415
99     99   1.437420

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_quantized', 'NuSVR') Estimator 1.5470185482113763e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84       1.152142      1.152144 -1.920858e-06
85     85       0.582460      0.582459  1.489305e-07
86     86       1.315568      1.315568  4.966334e-07
87     87       1.227330      1.227331 -6.390026e-07
88     88       1.528793      1.528790  2.813456e-06
89     89       1.034947      1.034947  1.796721e-07
90     90       1.275212      1.275212 -9.845736e-08
91     91       0.450152      0.450151  1.243501e-06
92     92       1.203799      1.203800 -1.167644e-06
93     93       1.228671      1.228671  6.495872e-07
94     94       1.430230      1.430229  1.426245e-06
95     95       1.583249      1.583246  3.077702e-06
96     96       1.578729      1.578727  2.915231e-06
97     97       1.326489      1.326490 -3.635084e-07
98     98       1.030415      1.030415 -6.453195e-08
99     99       1.437420      1.437418  1.642394e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_quantized', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_quantized_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_quantized', 'NuSVR', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 0.080026 AS "coeff", 9.000000 AS "sv_0", 9.000000 AS "sv_1", 10.000000 AS "sv_2", 3.000000 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", 0.153222 AS "coeff", 1.000000 AS "sv_0", 6.000000 AS "sv_1", 1.000000 AS "sv_2", 7.000000 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", -0.984672 AS "coeff", 6.000000 AS "sv_0", 6.000000 AS "sv_1", 0.000000 AS "sv_2", 7.000000 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", 0.005449 AS "coeff", 0.000000 AS "sv_0", 4.000000 AS "sv_1", 1.000000 AS "sv_2", 0.000000 AS "sv_3"

SQL_OUT_PUT_FIRST_LINES_END ('freidman3_quantized', 'NuSVR', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_quantized', 'NuSVR', 'pgsql')
0.000000 AS "sv_3"
     UNION ALL
     SELECT 28 AS "sv_idx", 0.224202 AS "coeff", 0.000000 AS "sv_0", 0.000000 AS "sv_1", 9.000000 AS "sv_2", 9.000000 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -1.165098 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.030193 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_quantized', 'NuSVR', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
