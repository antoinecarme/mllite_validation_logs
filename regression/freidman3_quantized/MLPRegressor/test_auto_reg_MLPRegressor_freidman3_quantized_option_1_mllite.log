    X_0  X_1  X_2  X_3    target
0     4    3    5    6  1.444753
1     9    9   10    3  1.513570
2     7    2    7    4  1.371797
3     3    2    4    0  1.407287
4     3    4    1    1  1.310030
..  ...  ...  ...  ...       ...
95    2    6    6    4  1.542656
96    5    8    7    4  1.519563
97    7    9    3    0  1.454661
98    5    3    1    7  1.009971
99    0    0    9    9  1.565980

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.]
 [ 9.  9. 10.  3.]
 [ 7.  2.  7.  4.]
 [ 3.  2.  4.  0.]
 [ 3.  4.  1.  1.]] [1.4447532 1.5135704 1.3717965 1.4072871 1.3100302]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.019, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.101622, 0.425030, -0.381430, -0.029081 ],
			"coeffs_1" : [ 0.132152, -0.630355, 0.222804, 0.062310 ],
			"coeffs_2" : [ 0.711914, 0.159207, 0.691864, -0.133786 ],
			"coeffs_3" : [ 0.833686, -0.789425, -0.390437, 0.356735 ],
			"intercepts" : [ 0.425580, -0.439304, -0.468880, -0.637475 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.280225, -0.727700, -0.112743, 0.003801, -0.105261, -0.639964, -0.362057, 0.552007 ],
			"coeffs_1" : [ -0.077295, 0.019266, -0.633156, 0.012338, -0.231791, 0.253950, -0.142278, 0.273984 ],
			"coeffs_2" : [ -0.496010, 0.589561, -0.517727, 0.351256, -0.507938, 0.389044, 0.166551, 0.616309 ],
			"coeffs_3" : [ -0.471728, -0.544968, 0.236548, 0.224184, 0.510812, 0.606558, 0.538130, -0.487388 ],
			"intercepts" : [ 0.396412, 0.548828, -0.426981, 0.286408, 0.244656, 0.045264, 0.089744, 0.377225 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.112051, 0.298033, 0.347642, -0.587670, 0.424705 ],
			"coeffs_1" : [ -0.364449, -0.596949, 0.653867, 0.615912, -0.095220, -0.547846 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.576816, -0.301534, 0.305038, 0.432091, 0.451057, -0.087399 ],
			"coeffs_4" : [ -0.581198, 0.362931, 0.043023, -0.159850, -0.516582, -0.655171 ],
			"coeffs_5" : [ -0.239449, 0.578540, 0.015232, -0.122162, -0.140344, -0.595345 ],
			"coeffs_6" : [ 0.218124, -0.199137, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_7" : [ -0.215160, 0.406177, 0.461186, 0.528095, 0.446569, 0.342393 ],
			"intercepts" : [ -0.278179, 0.091946, 0.213553, 0.414000, 0.292098, -0.031483 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.532454 ],
			"coeffs_1" : [ 0.672854 ],
			"coeffs_2" : [ 0.182337 ],
			"coeffs_3" : [ -0.289019 ],
			"coeffs_4" : [ -0.223957 ],
			"coeffs_5" : [ -0.429667 ],
			"intercepts" : [ 0.517155 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.101622, 0.425030, -0.381430, -0.029081 ],
			"coeffs_1" : [ 0.132152, -0.630355, 0.222804, 0.062310 ],
			"coeffs_2" : [ 0.711914, 0.159207, 0.691864, -0.133786 ],
			"coeffs_3" : [ 0.833686, -0.789425, -0.390437, 0.356735 ],
			"intercepts" : [ 0.425580, -0.439304, -0.468880, -0.637475 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.280225, -0.727700, -0.112743, 0.003801, -0.105261, -0.639964, -0.362057, 0.552007 ],
			"coeffs_1" : [ -0.077295, 0.019266, -0.633156, 0.012338, -0.231791, 0.253950, -0.142278, 0.273984 ],
			"coeffs_2" : [ -0.496010, 0.589561, -0.517727, 0.351256, -0.507938, 0.389044, 0.166551, 0.616309 ],
			"coeffs_3" : [ -0.471728, -0.544968, 0.236548, 0.224184, 0.510812, 0.606558, 0.538130, -0.487388 ],
			"intercepts" : [ 0.396412, 0.548828, -0.426981, 0.286408, 0.244656, 0.045264, 0.089744, 0.377225 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.112051, 0.298033, 0.347642, -0.587670, 0.424705 ],
			"coeffs_1" : [ -0.364449, -0.596949, 0.653867, 0.615912, -0.095220, -0.547846 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.576816, -0.301534, 0.305038, 0.432091, 0.451057, -0.087399 ],
			"coeffs_4" : [ -0.581198, 0.362931, 0.043023, -0.159850, -0.516582, -0.655171 ],
			"coeffs_5" : [ -0.239449, 0.578540, 0.015232, -0.122162, -0.140344, -0.595345 ],
			"coeffs_6" : [ 0.218124, -0.199137, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_7" : [ -0.215160, 0.406177, 0.461186, 0.528095, 0.446569, 0.342393 ],
			"intercepts" : [ -0.278179, 0.091946, 0.213553, 0.414000, 0.292098, -0.031483 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.532454 ],
			"coeffs_1" : [ 0.672854 ],
			"coeffs_2" : [ 0.182337 ],
			"coeffs_3" : [ -0.289019 ],
			"coeffs_4" : [ -0.223957 ],
			"coeffs_5" : [ -0.429667 ],
			"intercepts" : [ 0.517155 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.101622, 0.42503, -0.38143, -0.029081 ],
			"coeffs_1" : [ 0.132152, -0.630355, 0.222804, 0.06231 ],
			"coeffs_2" : [ 0.711914, 0.159207, 0.691864, -0.133786 ],
			"coeffs_3" : [ 0.833686, -0.789425, -0.390437, 0.356735 ],
			"intercepts" : [ 0.42558, -0.439304, -0.46888, -0.637475 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.280225, -0.7277, -0.112743, 0.003801, -0.105261, -0.639964, -0.362057, 0.552007 ],
			"coeffs_1" : [ -0.077295, 0.019266, -0.633156, 0.012338, -0.231791, 0.25395, -0.142278, 0.273984 ],
			"coeffs_2" : [ -0.49601, 0.589561, -0.517727, 0.351256, -0.507938, 0.389044, 0.166551, 0.616309 ],
			"coeffs_3" : [ -0.471728, -0.544968, 0.236548, 0.224184, 0.510812, 0.606558, 0.53813, -0.487388 ],
			"intercepts" : [ 0.396412, 0.548828, -0.426981, 0.286408, 0.244656, 0.045264, 0.089744, 0.377225 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.561438, 0.112051, 0.298033, 0.347642, -0.58767, 0.424705 ],
			"coeffs_1" : [ -0.364449, -0.596949, 0.653867, 0.615912, -0.09522, -0.547846 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.576816, -0.301534, 0.305038, 0.432091, 0.451057, -0.087399 ],
			"coeffs_4" : [ -0.581198, 0.362931, 0.043023, -0.15985, -0.516582, -0.655171 ],
			"coeffs_5" : [ -0.239449, 0.57854, 0.015232, -0.122162, -0.140344, -0.595345 ],
			"coeffs_6" : [ 0.218124, -0.199137, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_7" : [ -0.21516, 0.406177, 0.461186, 0.528095, 0.446569, 0.342393 ],
			"intercepts" : [ -0.278179, 0.091946, 0.213553, 0.414, 0.292098, -0.031483 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.532454 ],
			"coeffs_1" : [ 0.672854 ],
			"coeffs_2" : [ 0.182337 ],
			"coeffs_3" : [ -0.289019 ],
			"coeffs_4" : [ -0.223957 ],
			"coeffs_5" : [ -0.429667 ],
			"intercepts" : [ 0.517155 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 9.82201099e-03 -5.04518330e-01 -7.48181343e-03  1.02263689e-02
  2.67790794e-01  3.43025506e-01 -3.22990298e-01  4.66199100e-01
 -5.89888632e-01 -1.32725120e-01  4.30488676e-01 -1.49187624e-01
 -9.51952934e-02  2.25121915e-01 -2.94446945e-04  2.99725115e-01
 -2.17094541e-01  1.26064956e-01 -1.29429579e-01  4.85697269e-01
  1.54963017e-01 -5.19692004e-01 -2.10198164e-02 -1.41766071e-01
  3.49508286e-01 -4.45252776e-01 -2.54032850e-01  2.77478576e-01
  5.15772581e-01  3.26785743e-02 -1.89257801e-01 -8.15824270e-02
 -9.38272476e-02 -1.35274410e-01  5.30682802e-02 -1.72790289e-01
  1.80575907e-01 -5.70013642e-01  1.06251955e-01 -1.82542562e-01
 -1.03043079e-01 -1.29440069e-01  1.23883009e-01  1.63430274e-01
  1.39678061e-01 -7.32585311e-01  3.61713350e-01 -2.73061991e-01
  1.49329901e-02  4.78920937e-01  3.07364285e-01  1.42419279e-01
 -6.05599523e-01  2.57369876e-01  1.23401880e-02  1.46335542e-01
  2.80779362e-01  2.29241848e-02 -5.44835329e-02 -1.44863129e-01
 -2.47224808e-01 -3.83540094e-01 -2.96439946e-01  3.18964422e-01
  1.89342201e-01 -1.55892968e-01  1.16502523e-01 -1.31002665e-01
 -1.56727850e-01 -2.05777287e-02 -3.67952585e-01  3.59306693e-01
  2.53318340e-01  1.52144611e-01 -2.34243929e-01 -7.39842653e-02
  2.86018848e-03  3.08990836e-01 -1.01543665e-01  8.98203254e-02
 -4.86984253e-01  3.66652369e-01 -3.12515974e-01 -6.52905703e-01
  2.32499540e-01  1.25272989e-01 -4.69503403e-02  3.48118901e-01
 -1.88099027e-01  2.06088901e-01  9.35971737e-02  3.32671821e-01
  1.73768461e-01  2.97755420e-01 -8.04702520e-01 -3.11642110e-01
 -3.27075660e-01  1.06841207e-01  3.32204103e-01 -4.74483371e-01]
('OPERATION_END_ELAPSED', 0.003, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 9.82105732e-03 -5.04521430e-01 -7.48300552e-03  1.02250576e-02
  2.67791003e-01  3.43029320e-01 -3.22992444e-01  4.66203630e-01
 -5.89892507e-01 -1.32726550e-01  4.30492699e-01 -1.49189711e-01
 -9.51969624e-02  2.25127101e-01 -2.95877457e-04  2.99728096e-01
 -2.17096329e-01  1.26064122e-01 -1.29431486e-01  4.85702574e-01
  1.54966772e-01 -5.19695461e-01 -2.10213661e-02 -1.41767979e-01
  3.49511117e-01 -4.45256352e-01 -2.54035711e-01  2.77483523e-01
  5.15777826e-01  3.26774418e-02 -1.89259470e-01 -8.15843344e-02
 -9.38283205e-02 -1.35275364e-01  5.30669689e-02 -1.72792554e-01
  1.80575252e-01 -5.70017636e-01  1.06256127e-01 -1.82544589e-01
 -1.03044868e-01 -1.29441977e-01  1.23881996e-01  1.63435638e-01
  1.39676929e-01 -7.32588887e-01  3.61713797e-01 -2.73064554e-01
  1.49381161e-02  4.78924334e-01  3.07369888e-01  1.42418504e-01
 -6.05603456e-01  2.57369369e-01  1.23449564e-02  1.46340728e-01
  2.80785382e-01  2.29229927e-02 -5.44854999e-02 -1.44864917e-01
 -2.47227252e-01 -3.83542717e-01 -2.96442568e-01  3.18967223e-01
  1.89345360e-01 -1.55894518e-01  1.16501451e-01 -1.31004453e-01
 -1.56730115e-01 -2.05794573e-02 -3.67955804e-01  3.59311819e-01
  2.53317803e-01  1.52143717e-01 -2.34246314e-01 -7.39859343e-02
  2.85923481e-03  3.08991045e-01 -1.01545751e-01  8.98191333e-02
 -4.86987710e-01  3.66657078e-01 -3.12518597e-01 -6.52909279e-01
  2.32498795e-01  1.25271499e-01 -4.69518900e-02  3.48119050e-01
 -1.88101530e-01  2.06088006e-01  9.35963392e-02  3.32671642e-01
  1.73771620e-01  2.97758341e-01 -8.04706693e-01 -3.11645091e-01
 -3.27078462e-01  1.06840521e-01  3.32207501e-01 -4.74486828e-01]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman3_quantized', 'size': 100, 'mse': 2.0974047, 'mae': 1.365564, 'mape': 1.1230874, 'r2': -25.57890067775674}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman3_quantized', 'training_time_in_sec': 0.019, 'prediction_time_in_sec': 0.002}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ 0.018695 ],
      "X_1" : [ -0.007510 ],
      "X_2" : [ 0.019069 ],
      "X_3" : [ 0.003255 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 2, 0, 1, 3 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_quantized_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_quantized', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman3_quantized" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.425580 + -0.101622 * t."OUT_0"  + 0.132152 * t."OUT_1"  + 0.711914 * t."OUT_2"  + 0.833686 * t."OUT_3" AS "OUT_0",
    -0.439304 + 0.425030 * t."OUT_0"  + -0.630355 * t."OUT_1"  + 0.159207 * t."OUT_2"  + -0.789425 * t."OUT_3" AS "OUT_1",
    -0.468880 + -0.381430 * t."OUT_0"  + 0.222804 * t."OUT_1"  + 0.691864 * t."OUT_2"  + -0.390437 * t."OUT_3" AS "OUT_2",
    -0.637475 + -0.029081 * t."OUT_0"  + 0.062310 * t."OUT_1"  + -0.133786 * t."OUT_2"  + 0.356735 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_quantized', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_quantized', 'MLPRegressor', 'duckdb')
0.655171 * t."OUT_4"  + -0.595345 * t."OUT_5"  + -0.462554 * t."OUT_6"  + 0.342393 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.517155 + 0.532454 * t."OUT_0"  + 0.672854 * t."OUT_1"  + 0.182337 * t."OUT_2"  + -0.289019 * t."OUT_3"  + -0.223957 * t."OUT_4"  + -0.429667 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_quantized', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   0.009821
1       1  -0.504521
2       2  -0.007483
3       3   0.010225
4       4   0.267791
..    ...        ...
95     95  -0.311645
96     96  -0.327078
97     97   0.106841
98     98   0.332208
99     99  -0.474487

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_quantized', 'MLPRegressor') Estimator 2.4572014808654786e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84       0.232499      0.232500 -7.450581e-07
85     85       0.125271      0.125273 -1.490116e-06
86     86      -0.046952     -0.046950 -1.549721e-06
87     87       0.348119      0.348119  1.490116e-07
88     88      -0.188102     -0.188099 -2.503395e-06
89     89       0.206088      0.206089 -8.940697e-07
90     90       0.093596      0.093597 -8.344650e-07
91     91       0.332672      0.332672 -1.788139e-07
92     92       0.173772      0.173768  3.159046e-06
93     93       0.297758      0.297755  2.920628e-06
94     94      -0.804707     -0.804703 -4.172325e-06
95     95      -0.311645     -0.311642 -2.980232e-06
96     96      -0.327078     -0.327076 -2.801418e-06
97     97       0.106841      0.106841 -6.854534e-07
98     98       0.332208      0.332204  3.397465e-06
99     99      -0.474487     -0.474483 -3.457069e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_quantized', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_quantized', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman3_quantized" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.425580 + -0.101622 * t."OUT_0"  + 0.132152 * t."OUT_1"  + 0.711914 * t."OUT_2"  + 0.833686 * t."OUT_3" AS "OUT_0",
    -0.439304 + 0.425030 * t."OUT_0"  + -0.630355 * t."OUT_1"  + 0.159207 * t."OUT_2"  + -0.789425 * t."OUT_3" AS "OUT_1",
    -0.468880 + -0.381430 * t."OUT_0"  + 0.222804 * t."OUT_1"  + 0.691864 * t."OUT_2"  + -0.390437 * t."OUT_3" AS "OUT_2",
    -0.637475 + -0.029081 * t."OUT_0"  + 0.062310 * t."OUT_1"  + -0.133786 * t."OUT_2"  + 0.356735 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_quantized', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_quantized', 'MLPRegressor', 'sqlite')
0.655171 * t."OUT_4"  + -0.595345 * t."OUT_5"  + -0.462554 * t."OUT_6"  + 0.342393 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.517155 + 0.532454 * t."OUT_0"  + 0.672854 * t."OUT_1"  + 0.182337 * t."OUT_2"  + -0.289019 * t."OUT_3"  + -0.223957 * t."OUT_4"  + -0.429667 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_quantized', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   0.009821
1       1  -0.504521
2       2  -0.007483
3       3   0.010225
4       4   0.267791
..    ...        ...
95     95  -0.311645
96     96  -0.327079
97     97   0.106840
98     98   0.332208
99     99  -0.474487

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_quantized', 'MLPRegressor') Estimator 2.48632369143853e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84       0.232499      0.232500 -7.575992e-07
85     85       0.125272      0.125273 -1.298907e-06
86     86      -0.046952     -0.046950 -1.890856e-06
87     87       0.348119      0.348119  1.072659e-07
88     88      -0.188101     -0.188099 -2.442136e-06
89     89       0.206088      0.206089 -8.317110e-07
90     90       0.093596      0.093597 -9.521493e-07
91     91       0.332672      0.332672 -2.087796e-07
92     92       0.173772      0.173768  3.208878e-06
93     93       0.297758      0.297755  2.787999e-06
94     94      -0.804707     -0.804703 -4.271248e-06
95     95      -0.311645     -0.311642 -2.976881e-06
96     96      -0.327079     -0.327076 -2.940194e-06
97     97       0.106840      0.106841 -7.562670e-07
98     98       0.332208      0.332204  3.548498e-06
99     99      -0.474487     -0.474483 -3.633933e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_quantized', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
