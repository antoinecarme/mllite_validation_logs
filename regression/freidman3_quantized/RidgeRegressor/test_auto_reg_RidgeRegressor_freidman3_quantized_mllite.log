    X_0  X_1  X_2  X_3    target
0     4    3    5    6  1.444753
1     9    9   10    3  1.513570
2     7    2    7    4  1.371797
3     3    2    4    0  1.407287
4     3    4    1    1  1.310030
..  ...  ...  ...  ...       ...
95    2    6    6    4  1.542656
96    5    8    7    4  1.519563
97    7    9    3    0  1.454661
98    5    3    1    7  1.009971
99    0    0    9    9  1.565980

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.]
 [ 9.  9. 10.  3.]
 [ 7.  2.  7.  4.]
 [ 3.  2.  4.  0.]
 [ 3.  4.  1.  1.]] [1.4447532 1.5135704 1.3717965 1.4072871 1.3100302]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.006, 'TRAINING')
{ ,   , }
{ ,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : 1.121561,
			"coeffs" : [ -0.047107, 0.035733, 0.051738, 0.007961 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_quantized.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : 1.121561,
			"coeffs" : [ -0.047107, 0.035733, 0.051738, 0.007961 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"equations" : 	{
		"coeffs" : [ -0.047107, 0.035733, 0.051738, 0.007961 ],
		"intercept" : 1.121561
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[1.3467867  1.5604548  1.2572857  1.2586566  1.1828703  1.396317
 1.4603924  1.1090434  1.6984726  1.4026794  1.1174802  1.4721861
 1.3401259  1.1818097  1.3682082  0.9270479  1.2813343  1.3162308
 1.5435694  1.3461899  1.2878737  1.737929   1.2585032  1.3203976
 0.9279166  1.5685252  1.4944321  1.4168699  1.3020201  1.3271027
 1.4499134  1.2926257  1.3916982  1.3996593  1.2463045  1.4480668
 1.2164904  1.6703517  1.4640597  1.4397569  1.4060926  1.4053507
 1.0793239  1.4215006  1.2687305  1.8816856  0.8632767  1.7137978
 1.5237585  1.1818362  1.460564   1.0873677  1.6404669  0.9196452
 1.3938112  1.4021653  1.1863576  1.2138193  1.5234096  1.5254518
 1.6003308  1.4713734  1.4643077  1.3004923  1.2386805  1.4202948
 1.1765584  1.2659886  1.5234923  1.2712483  1.5230285  1.1022999
 0.93093663 1.1135291  1.5911523  1.1426013  1.3908739  1.0756712
 1.3670732  1.1963693  1.774797   1.0030619  1.6154671  1.7005588
 1.1437243  0.845508   1.3021973  1.1538808  1.5250587  1.1042678
 1.2195106  0.8762615  1.172238   1.1983168  1.7301333  1.5840158
 1.5658981  1.2686213  1.1006894  1.6588508 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[1.346788   1.5604581  1.2572881  1.258658   1.1828711  1.3963171
 1.460395   1.1090441  1.698474   1.402681   1.1174811  1.472187
 1.3401281  1.1818111  1.3682101  0.92704904 1.281337   1.316231
 1.54357    1.3461901  1.287875   1.7379302  1.2585062  1.3204001
 0.927918   1.5685271  1.4944341  1.4168701  1.30202    1.3271041
 1.449915   1.2926282  1.3917001  1.3996611  1.246307   1.4480691
 1.2164922  1.6703532  1.4640601  1.439759   1.4060941  1.4053521
 1.079326   1.421501   1.2687311  1.881687   0.86327803 1.713798
 1.5237591  1.181836   1.4605641  1.08737    1.640469   0.91964704
 1.3938121  1.4021661  1.1863592  1.213821   1.5234101  1.525453
 1.600332   1.4713761  1.4643091  1.300492   1.2386811  1.420297
 1.17656    1.2659911  1.523493   1.2712501  1.5230311  1.1023011
 0.93093807 1.113531   1.591153   1.1426041  1.390875   1.0756721
 1.3670751  1.196371   1.7747982  1.0030631  1.615468   1.7005609
 1.143725   0.84551007 1.3022001  1.1538811  1.52506    1.104269
 1.2195121  0.876263   1.1722392  1.198317   1.730135   1.5840172
 1.5659001  1.2686231  1.10069    1.658852  ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'freidman3_quantized', 'size': 100, 'mse': 0.029940872, 'mae': 0.12137056, 'mape': 0.52665776, 'r2': 0.6205808830074219}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_quantized.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'freidman3_quantized', 'training_time_in_sec': 0.005, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_quantized_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_quantized', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.121561 + -0.047107 * t."X_0" + 0.035733 * t."X_1" + 0.051738 * t."X_2" + 0.007961 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman3_quantized', 'RidgeRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_quantized', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.121561 + -0.047107 * t."X_0" + 0.035733 * t."X_1" + 0.051738 * t."X_2" + 0.007961 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman3_quantized', 'RidgeRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   1.346788
1       1   1.560458
2       2   1.257288
3       3   1.258658
4       4   1.182871
..    ...        ...
95     95   1.584017
96     96   1.565900
97     97   1.268623
98     98   1.100690
99     99   1.658852

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_quantized', 'RidgeRegressor') Estimator 1.4263391494750976e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84       1.143725      1.143724  7.152557e-07
85     85       0.845510      0.845508  2.086163e-06
86     86       1.302200      1.302197  2.741814e-06
87     87       1.153881      1.153881  2.384186e-07
88     88       1.525060      1.525059  1.311302e-06
89     89       1.104269      1.104268  1.192093e-06
90     90       1.219512      1.219511  1.549721e-06
91     91       0.876263      0.876261  1.549721e-06
92     92       1.172239      1.172238  1.192093e-06
93     93       1.198317      1.198317  2.384186e-07
94     94       1.730135      1.730133  1.668930e-06
95     95       1.584017      1.584016  1.311302e-06
96     96       1.565900      1.565898  2.026558e-06
97     97       1.268623      1.268621  1.788139e-06
98     98       1.100690      1.100689  5.960464e-07
99     99       1.658852      1.658851  1.192093e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_quantized', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_quantized_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_quantized', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.121561 + -0.047107 * t."X_0" + 0.035733 * t."X_1" + 0.051738 * t."X_2" + 0.007961 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman3_quantized', 'RidgeRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_quantized', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.121561 + -0.047107 * t."X_0" + 0.035733 * t."X_1" + 0.051738 * t."X_2" + 0.007961 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman3_quantized', 'RidgeRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   1.346788
1       1   1.560458
2       2   1.257288
3       3   1.258658
4       4   1.182871
..    ...        ...
95     95   1.584017
96     96   1.565900
97     97   1.268623
98     98   1.100690
99     99   1.658852

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_quantized', 'RidgeRegressor') Estimator 1.3586810684296235e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84       1.143725      1.143724  6.776810e-07
85     85       0.845510      0.845508  2.020607e-06
86     86       1.302200      1.302197  2.662849e-06
87     87       1.153881      1.153881  1.654205e-07
88     88       1.525060      1.525059  1.253662e-06
89     89       1.104269      1.104268  1.164383e-06
90     90       1.219512      1.219511  1.444733e-06
91     91       0.876263      0.876261  1.527298e-06
92     92       1.172239      1.172238  1.007713e-06
93     93       1.198317      1.198317  1.874847e-07
94     94       1.730135      1.730133  1.704941e-06
95     95       1.584017      1.584016  1.153748e-06
96     96       1.565900      1.565898  1.939201e-06
97     97       1.268623      1.268621  1.674507e-06
98     98       1.100690      1.100689  5.888367e-07
99     99       1.658852      1.658851  1.210930e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_quantized', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_quantized_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_quantized', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.121561 + -0.047107 * t."X_0" + 0.035733 * t."X_1" + 0.051738 * t."X_2" + 0.007961 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman3_quantized', 'RidgeRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_quantized', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.121561 + -0.047107 * t."X_0" + 0.035733 * t."X_1" + 0.051738 * t."X_2" + 0.007961 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman3_quantized', 'RidgeRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
