          X_0          X_1       X_2        X_3      target
0   17.761710   423.498320  0.135270  10.148129   59.976816
1   45.437614   168.841197  0.343817   3.279963   73.717247
2   69.792322   473.447926  0.233546   3.411073  130.755488
3   67.667095   938.672588  0.652046   9.523154  615.786950
4   55.118421  1002.086076  0.726658   4.570617  730.257013
..        ...          ...       ...        ...         ...
59  82.923828  1535.997616  0.287537   7.396835  449.374075
60  17.167281  1104.656206  0.421381   6.591000  465.797999
61  48.198019   353.104245  0.725143  10.405507  260.547767
62  17.373148   483.680246  0.685229   2.728044  331.885863
63   7.321981   487.752848  0.993317   5.340956  484.548354

[64 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS SVR {"C" : 2}
MLLITE_MODEL_OPTIONS_DEFAULT SVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING SVR { "C" : 2,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING SVR None
('OPERATION_START', 'TRAINING')
[[1.77617092e+01 4.23498322e+02 1.35270208e-01 1.01481285e+01]
 [4.54376144e+01 1.68841202e+02 3.43817413e-01 3.27996254e+00]
 [6.97923203e+01 4.73447937e+02 2.33546272e-01 3.41107249e+00]
 [6.76670914e+01 9.38672607e+02 6.52046204e-01 9.52315426e+00]
 [5.51184196e+01 1.00208606e+03 7.26658285e-01 4.57061768e+00]] [ 59.976818  73.71725  130.7555   615.7869   730.257   ]
MLLITE_FIT_USING_MODEL mllite_svm_reg.SVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 24 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 36 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.015, 'TRAINING')
{ "C" : 2,  "max_iter" : 128  , }
{ "C" : 2,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_SVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "epsilon_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.000001, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.100000, "shrinking" : 0, "probability" : 0, "C" : 2.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 64,
	"SupportVectors" : {
		"SV_00" : [ 17.761709, 423.498322, 0.135270, 10.148129 ],
		"SV_01" : [ 45.437614, 168.841202, 0.343817, 3.279963 ],
		"SV_02" : [ 69.792320, 473.447937, 0.233546, 3.411072 ],
		"SV_03" : [ 67.667091, 938.672607, 0.652046, 9.523154 ],
		"SV_04" : [ 55.118420, 1002.086060, 0.726658, 4.570618 ],
		"SV_05" : [ 52.067585, 534.256165, 0.155164, 8.526538 ],
		"SV_06" : [ 50.992905, 814.561340, 0.257439, 5.994627 ],
		"SV_07" : [ 34.347893, 205.928116, 0.720020, 9.414678 ],
		"SV_08" : [ 63.010204, 221.354385, 0.814630, 5.897069 ],
		"SV_09" : [ 22.605108, 1660.837036, 0.731124, 9.374556 ],
		"SV_10" : [ 13.280704, 643.716797, 0.520814, 4.842079 ],
		"SV_11" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
		"SV_12" : [ 51.401745, 1161.331543, 0.618557, 2.218271 ],
		"SV_13" : [ 94.566437, 663.266418, 0.852323, 6.919084 ],
		"SV_14" : [ 14.282172, 1575.160400, 0.428596, 4.169882 ],
		"SV_15" : [ 38.088467, 1321.297485, 0.052941, 10.429984 ],
		"SV_16" : [ 97.111717, 715.890503, 0.509773, 4.410513 ],
		"SV_17" : [ 74.947220, 1754.316162, 0.366207, 1.961987 ],
		"SV_18" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
		"SV_19" : [ 80.410118, 294.009796, 0.728795, 1.686282 ],
		"SV_20" : [ 15.123654, 486.957489, 0.123542, 2.365677 ],
		"SV_21" : [ 55.340031, 215.592316, 0.588332, 4.610499 ],
		"SV_22" : [ 2.070305, 957.545105, 0.737876, 2.535709 ],
		"SV_23" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
		"SV_24" : [ 7.737632, 682.638123, 0.943330, 1.569080 ],
		"SV_25" : [ 22.116344, 1162.774048, 0.675740, 4.934592 ],
		"SV_26" : [ 35.417500, 933.556885, 0.674758, 8.628964 ],
		"SV_27" : [ 65.455681, 755.864746, 0.990681, 3.455762 ],
		"SV_28" : [ 42.679214, 472.756287, 0.481987, 2.150893 ],
		"SV_29" : [ 11.179132, 444.204834, 0.202220, 7.809537 ],
		"SV_30" : [ 14.083336, 1134.869141, 0.186105, 7.672650 ],
		"SV_31" : [ 95.999474, 1121.298950, 0.682591, 3.437388 ],
		"SV_32" : [ 91.832474, 611.998413, 0.771820, 5.897234 ],
		"SV_33" : [ 76.461021, 744.759766, 0.823855, 10.136035 ],
		"SV_34" : [ 74.577126, 1412.240356, 0.582418, 4.633062 ],
		"SV_35" : [ 78.244774, 702.214600, 0.183212, 9.434527 ],
		"SV_36" : [ 76.131752, 526.791992, 0.716619, 5.202790 ],
		"SV_37" : [ 18.503828, 532.344482, 0.721851, 10.655538 ],
		"SV_38" : [ 38.291386, 635.121277, 0.271890, 7.067709 ],
		"SV_39" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
		"SV_40" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
		"SV_41" : [ 72.844986, 208.134521, 0.953115, 4.121809 ],
		"SV_42" : [ 44.357746, 674.885315, 0.220269, 3.032311 ],
		"SV_43" : [ 92.630493, 1621.621948, 0.997097, 3.905369 ],
		"SV_44" : [ 76.371201, 1620.264648, 0.622375, 3.062019 ],
		"SV_45" : [ 88.010742, 553.589050, 0.595422, 4.068089 ],
		"SV_46" : [ 39.016674, 895.294678, 0.992031, 3.333866 ],
		"SV_47" : [ 81.412109, 1254.374390, 0.194226, 8.164762 ],
		"SV_48" : [ 66.659485, 625.477356, 0.705919, 4.356689 ],
		"SV_49" : [ 40.067005, 524.247498, 0.463251, 1.522912 ],
		"SV_50" : [ 24.641842, 1358.054199, 0.264436, 10.968261 ],
		"SV_51" : [ 35.366142, 784.952942, 0.461541, 9.951669 ],
		"SV_52" : [ 15.098896, 889.292297, 0.382693, 8.700624 ],
		"SV_53" : [ 11.772216, 671.264099, 0.172757, 1.573729 ],
		"SV_54" : [ 67.252014, 1694.635620, 0.271050, 3.594086 ],
		"SV_55" : [ 39.873802, 428.048248, 0.235384, 2.176043 ],
		"SV_56" : [ 44.762737, 1255.201538, 0.591546, 2.754247 ],
		"SV_57" : [ 81.497955, 327.723633, 0.774569, 10.248817 ],
		"SV_58" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
		"SV_59" : [ 82.923828, 1535.997559, 0.287537, 7.396835 ],
		"SV_60" : [ 17.167280, 1104.656250, 0.421381, 6.591000 ],
		"SV_61" : [ 48.198017, 353.104248, 0.725143, 10.405507 ],
		"SV_62" : [ 17.373148, 483.680237, 0.685229, 2.728044 ],
		"SV_63" : [ 7.321981, 487.752838, 0.993317, 5.340956 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef
	},
	"rho" : [ -351.164032 ],
	"nSV" : [ 64 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 39 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS SVR {"C" : 2}
MLLITE_MODEL_OPTIONS_DEFAULT SVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING SVR { "C" : 2,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING SVR None
MLLITE_RELOADING_MODEL mllite_svm_reg.SVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_SVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "epsilon_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.000001, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.100000, "shrinking" : 0, "probability" : 0, "C" : 2.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 64,
	"SupportVectors" : {
		"SV_00" : [ 17.761709, 423.498322, 0.135270, 10.148129 ],
		"SV_01" : [ 45.437614, 168.841202, 0.343817, 3.279963 ],
		"SV_02" : [ 69.792320, 473.447937, 0.233546, 3.411072 ],
		"SV_03" : [ 67.667091, 938.672607, 0.652046, 9.523154 ],
		"SV_04" : [ 55.118420, 1002.086060, 0.726658, 4.570618 ],
		"SV_05" : [ 52.067585, 534.256165, 0.155164, 8.526538 ],
		"SV_06" : [ 50.992905, 814.561340, 0.257439, 5.994627 ],
		"SV_07" : [ 34.347893, 205.928116, 0.720020, 9.414678 ],
		"SV_08" : [ 63.010204, 221.354385, 0.814630, 5.897069 ],
		"SV_09" : [ 22.605108, 1660.837036, 0.731124, 9.374556 ],
		"SV_10" : [ 13.280704, 643.716797, 0.520814, 4.842079 ],
		"SV_11" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
		"SV_12" : [ 51.401745, 1161.331543, 0.618557, 2.218271 ],
		"SV_13" : [ 94.566437, 663.266418, 0.852323, 6.919084 ],
		"SV_14" : [ 14.282172, 1575.160400, 0.428596, 4.169882 ],
		"SV_15" : [ 38.088467, 1321.297485, 0.052941, 10.429984 ],
		"SV_16" : [ 97.111717, 715.890503, 0.509773, 4.410513 ],
		"SV_17" : [ 74.947220, 1754.316162, 0.366207, 1.961987 ],
		"SV_18" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
		"SV_19" : [ 80.410118, 294.009796, 0.728795, 1.686282 ],
		"SV_20" : [ 15.123654, 486.957489, 0.123542, 2.365677 ],
		"SV_21" : [ 55.340031, 215.592316, 0.588332, 4.610499 ],
		"SV_22" : [ 2.070305, 957.545105, 0.737876, 2.535709 ],
		"SV_23" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
		"SV_24" : [ 7.737632, 682.638123, 0.943330, 1.569080 ],
		"SV_25" : [ 22.116344, 1162.774048, 0.675740, 4.934592 ],
		"SV_26" : [ 35.417500, 933.556885, 0.674758, 8.628964 ],
		"SV_27" : [ 65.455681, 755.864746, 0.990681, 3.455762 ],
		"SV_28" : [ 42.679214, 472.756287, 0.481987, 2.150893 ],
		"SV_29" : [ 11.179132, 444.204834, 0.202220, 7.809537 ],
		"SV_30" : [ 14.083336, 1134.869141, 0.186105, 7.672650 ],
		"SV_31" : [ 95.999474, 1121.298950, 0.682591, 3.437388 ],
		"SV_32" : [ 91.832474, 611.998413, 0.771820, 5.897234 ],
		"SV_33" : [ 76.461021, 744.759766, 0.823855, 10.136035 ],
		"SV_34" : [ 74.577126, 1412.240356, 0.582418, 4.633062 ],
		"SV_35" : [ 78.244774, 702.214600, 0.183212, 9.434527 ],
		"SV_36" : [ 76.131752, 526.791992, 0.716619, 5.202790 ],
		"SV_37" : [ 18.503828, 532.344482, 0.721851, 10.655538 ],
		"SV_38" : [ 38.291386, 635.121277, 0.271890, 7.067709 ],
		"SV_39" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
		"SV_40" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
		"SV_41" : [ 72.844986, 208.134521, 0.953115, 4.121809 ],
		"SV_42" : [ 44.357746, 674.885315, 0.220269, 3.032311 ],
		"SV_43" : [ 92.630493, 1621.621948, 0.997097, 3.905369 ],
		"SV_44" : [ 76.371201, 1620.264648, 0.622375, 3.062019 ],
		"SV_45" : [ 88.010742, 553.589050, 0.595422, 4.068089 ],
		"SV_46" : [ 39.016674, 895.294678, 0.992031, 3.333866 ],
		"SV_47" : [ 81.412109, 1254.374390, 0.194226, 8.164762 ],
		"SV_48" : [ 66.659485, 625.477356, 0.705919, 4.356689 ],
		"SV_49" : [ 40.067005, 524.247498, 0.463251, 1.522912 ],
		"SV_50" : [ 24.641842, 1358.054199, 0.264436, 10.968261 ],
		"SV_51" : [ 35.366142, 784.952942, 0.461541, 9.951669 ],
		"SV_52" : [ 15.098896, 889.292297, 0.382693, 8.700624 ],
		"SV_53" : [ 11.772216, 671.264099, 0.172757, 1.573729 ],
		"SV_54" : [ 67.252014, 1694.635620, 0.271050, 3.594086 ],
		"SV_55" : [ 39.873802, 428.048248, 0.235384, 2.176043 ],
		"SV_56" : [ 44.762737, 1255.201538, 0.591546, 2.754247 ],
		"SV_57" : [ 81.497955, 327.723633, 0.774569, 10.248817 ],
		"SV_58" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
		"SV_59" : [ 82.923828, 1535.997559, 0.287537, 7.396835 ],
		"SV_60" : [ 17.167280, 1104.656250, 0.421381, 6.591000 ],
		"SV_61" : [ 48.198017, 353.104248, 0.725143, 10.405507 ],
		"SV_62" : [ 17.373148, 483.680237, 0.685229, 2.728044 ],
		"SV_63" : [ 7.321981, 487.752838, 0.993317, 5.340956 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef
	},
	"rho" : [ -351.164032 ],
	"nSV" : [ 64 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 39 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 64
	},
	"metadata" :  { "model" : "Vapnik_SVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "C" : 2.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.1, "gamma" : 1e-06, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.5, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "epsilon_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 64,
		"SupportVectors" : 	{
			"SV_00" : [ 17.761709, 423.498322, 0.13527, 10.148129 ],
			"SV_01" : [ 45.437614, 168.841202, 0.343817, 3.279963 ],
			"SV_02" : [ 69.79232, 473.447937, 0.233546, 3.411072 ],
			"SV_03" : [ 67.667091, 938.672607, 0.652046, 9.523154 ],
			"SV_04" : [ 55.11842, 1002.08606, 0.726658, 4.570618 ],
			"SV_05" : [ 52.067585, 534.256165, 0.155164, 8.526538 ],
			"SV_06" : [ 50.992905, 814.56134, 0.257439, 5.994627 ],
			"SV_07" : [ 34.347893, 205.928116, 0.72002, 9.414678 ],
			"SV_08" : [ 63.010204, 221.354385, 0.81463, 5.897069 ],
			"SV_09" : [ 22.605108, 1660.837036, 0.731124, 9.374556 ],
			"SV_10" : [ 13.280704, 643.716797, 0.520814, 4.842079 ],
			"SV_11" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
			"SV_12" : [ 51.401745, 1161.331543, 0.618557, 2.218271 ],
			"SV_13" : [ 94.566437, 663.266418, 0.852323, 6.919084 ],
			"SV_14" : [ 14.282172, 1575.1604, 0.428596, 4.169882 ],
			"SV_15" : [ 38.088467, 1321.297485, 0.052941, 10.429984 ],
			"SV_16" : [ 97.111717, 715.890503, 0.509773, 4.410513 ],
			"SV_17" : [ 74.94722, 1754.316162, 0.366207, 1.961987 ],
			"SV_18" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
			"SV_19" : [ 80.410118, 294.009796, 0.728795, 1.686282 ],
			"SV_20" : [ 15.123654, 486.957489, 0.123542, 2.365677 ],
			"SV_21" : [ 55.340031, 215.592316, 0.588332, 4.610499 ],
			"SV_22" : [ 2.070305, 957.545105, 0.737876, 2.535709 ],
			"SV_23" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
			"SV_24" : [ 7.737632, 682.638123, 0.94333, 1.56908 ],
			"SV_25" : [ 22.116344, 1162.774048, 0.67574, 4.934592 ],
			"SV_26" : [ 35.4175, 933.556885, 0.674758, 8.628964 ],
			"SV_27" : [ 65.455681, 755.864746, 0.990681, 3.455762 ],
			"SV_28" : [ 42.679214, 472.756287, 0.481987, 2.150893 ],
			"SV_29" : [ 11.179132, 444.204834, 0.20222, 7.809537 ],
			"SV_30" : [ 14.083336, 1134.869141, 0.186105, 7.67265 ],
			"SV_31" : [ 95.999474, 1121.29895, 0.682591, 3.437388 ],
			"SV_32" : [ 91.832474, 611.998413, 0.77182, 5.897234 ],
			"SV_33" : [ 76.461021, 744.759766, 0.823855, 10.136035 ],
			"SV_34" : [ 74.577126, 1412.240356, 0.582418, 4.633062 ],
			"SV_35" : [ 78.244774, 702.2146, 0.183212, 9.434527 ],
			"SV_36" : [ 76.131752, 526.791992, 0.716619, 5.20279 ],
			"SV_37" : [ 18.503828, 532.344482, 0.721851, 10.655538 ],
			"SV_38" : [ 38.291386, 635.121277, 0.27189, 7.067709 ],
			"SV_39" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
			"SV_40" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
			"SV_41" : [ 72.844986, 208.134521, 0.953115, 4.121809 ],
			"SV_42" : [ 44.357746, 674.885315, 0.220269, 3.032311 ],
			"SV_43" : [ 92.630493, 1621.621948, 0.997097, 3.905369 ],
			"SV_44" : [ 76.371201, 1620.264648, 0.622375, 3.062019 ],
			"SV_45" : [ 88.010742, 553.58905, 0.595422, 4.068089 ],
			"SV_46" : [ 39.016674, 895.294678, 0.992031, 3.333866 ],
			"SV_47" : [ 81.412109, 1254.37439, 0.194226, 8.164762 ],
			"SV_48" : [ 66.659485, 625.477356, 0.705919, 4.356689 ],
			"SV_49" : [ 40.067005, 524.247498, 0.463251, 1.522912 ],
			"SV_50" : [ 24.641842, 1358.054199, 0.264436, 10.968261 ],
			"SV_51" : [ 35.366142, 784.952942, 0.461541, 9.951669 ],
			"SV_52" : [ 15.098896, 889.292297, 0.382693, 8.700624 ],
			"SV_53" : [ 11.772216, 671.264099, 0.172757, 1.573729 ],
			"SV_54" : [ 67.252014, 1694.63562, 0.27105, 3.594086 ],
			"SV_55" : [ 39.873802, 428.048248, 0.235384, 2.176043 ],
			"SV_56" : [ 44.762737, 1255.201538, 0.591546, 2.754247 ],
			"SV_57" : [ 81.497955, 327.723633, 0.774569, 10.248817 ],
			"SV_58" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
			"SV_59" : [ 82.923828, 1535.997559, 0.287537, 7.396835 ],
			"SV_60" : [ 17.16728, 1104.65625, 0.421381, 6.591 ],
			"SV_61" : [ 48.198017, 353.104248, 0.725143, 10.405507 ],
			"SV_62" : [ 17.373148, 483.680237, 0.685229, 2.728044 ],
			"SV_63" : [ 7.321981, 487.752838, 0.993317, 5.340956 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ -2.0, -2.0, -2.0, 2.0, 2.0, -2.0, -2.0, -2.0, -2.0, 2.0, -2.0, 2.0, 2.0, 2.0, 2.0, -2.0, 2.0, 2.0, -2.0, -2.0, -2.0, -2.0, 2.0, -2.0, 2.0, 2.0, 2.0, 2.0, -2.0, -2.0, -2.0, 2.0, 2.0, 2.0, 2.0, -2.0, 2.0, 2.0, -2.0, -2.0, 2.0, -2.0, -2.0, 2.0, 2.0, 2.0, 2.0, -2.0, 2.0, -2.0, -2.0, 2.0, -2.0, -2.0, 2.0, -2.0, 2.0, -2.0, -2.0, 2.0, 2.0, -2.0, -2.0, 2.0 ]
		},
		"classes" : 2,
		"nSV" : [ 64 ],
		"n_iter" : [ 39 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -351.164032 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[333.3076  329.12967 334.8818  355.66412 358.5298  337.03934 349.70282
 329.332   329.46564 371.461   341.59335 362.9716  364.78598 342.54587
 371.71613 369.1856  344.99426 370.64648 333.90326 330.40732 335.32123
 329.40848 356.47305 352.21252 343.36526 364.80148 355.403   346.86493
 334.83197 333.9321  363.81396 363.35843 340.2676  346.34216 370.73538
 344.32175 336.788   336.9633  341.21262 329.15707 371.6992  329.37384
 343.01486 371.64685 371.67874 337.84518 353.59863 367.60077 340.81107
 336.6542  369.87476 348.2506  353.2903  342.84076 371.2491  333.4294
 367.6257  331.01535 360.53894 371.6981  362.70477 331.4977  335.20688
 335.3572 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[336.11237 331.6969  337.48303 354.468   356.8665  339.30884 349.59073
 332.06403 332.25266 370.40298 343.04193 360.71512 362.33002 343.80283
 370.1034  366.58405 345.7805  370.2608  336.63297 333.34583 337.86002
 332.1779  355.15067 351.62875 344.4755  362.35187 354.25397 347.29605
 337.44608 336.6602  361.4628  361.0544  341.9535  346.87256 368.3357
 345.2426  339.09253 339.24393 342.73428 331.47498 370.1973  332.10696
 344.19315 370.3301  370.34164 339.96622 352.76624 364.98474 342.40445
 338.98837 367.33752 348.41745 352.51672 344.05197 370.42294 336.22534
 365.00293 333.96857 358.58267 369.85245 360.47427 334.45587 337.76324
 337.88766]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.SVR', 'model_name': 'SVR', 'options': '{"C" : 2}', 'dataset': 'freidman2_small', 'size': 64, 'mse': 118752.05, 'mae': 251.20647, 'mape': 0.9687326, 'r2': -0.009931984848275066}
WRITING_PERF_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.SVR', 'model_name': 'SVR', 'options': '{"C" : 2}', 'dataset': 'freidman2_small', 'training_time_in_sec': 0.015, 'prediction_time_in_sec': 0.001}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ 0.005908 ],
      "X_1" : [ -4.424517 ],
      "X_2" : [ 0.000001 ],
      "X_3" : [ -0.000039 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 1, 0, 3, 2 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_small_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_small', 'SVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_small" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", -2.000000 AS "coeff", 17.761709 AS "sv_0", 423.498322 AS "sv_1", 0.135270 AS "sv_2", 10.148129 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", -2.000000 AS "coeff", 45.437614 AS "sv_0", 168.841202 AS "sv_1", 0.343817 AS "sv_2", 3.279963 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", -2.000000 AS "coeff", 69.792320 AS "sv_0", 473.447937 AS "sv_1", 0.233546 AS "sv_2", 3.411072 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", 2.000000 AS "coeff", 67.667091 AS "sv_0", 938.672607 AS "sv_1", 0.652046 AS "sv_2", 9.523154
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_small', 'SVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_small', 'SVR', 'duckdb')
8044 AS "sv_3"
     UNION ALL
     SELECT 63 AS "sv_idx", 2.000000 AS "coeff", 7.321981 AS "sv_0", 487.752838 AS "sv_1", 0.993317 AS "sv_2", 5.340956 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -351.164032 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.000001 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_small', 'SVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
...          ...          ...       ...        ...
59     82.923828  1535.997559  0.287537   7.396835
60     17.167280  1104.656250  0.421381   6.591000
61     48.198017   353.104248  0.725143  10.405507
62     17.373148   483.680237  0.685229   2.728044
63      7.321981   487.752838  0.993317   5.340956

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index   Estimator
0       0  336.112350
1       1  331.696915
2       2  337.483029
3       3  354.467987
4       4  356.866480
..    ...         ...
59     59  369.852450
60     60  360.474270
61     61  334.455876
62     62  337.763242
63     63  337.887676

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_small', 'SVR') Estimator 1.8766490480483498
    index  SQL_Estimator  Py_Estimator  SQL_Error
48     48     342.404445    340.811066   1.593379
49     49     338.988367    336.654205   2.334162
50     50     367.337538    369.874756  -2.537218
51     51     348.417444    348.250610   0.166833
52     52     352.516732    353.290314  -0.773582
53     53     344.051963    342.840759   1.211204
54     54     370.422937    371.249115  -0.826178
55     55     336.225337    333.429413   2.795924
56     56     365.002925    367.625702  -2.622777
57     57     333.968556    331.015350   2.953205
58     58     358.582683    360.538940  -1.956257
59     59     369.852450    371.698090  -1.845640
60     60     360.474270    362.704773  -2.230503
61     61     334.455876    331.497711   2.958165
62     62     337.763242    335.206879   2.556363
63     63     337.887676    335.357208   2.530468
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_small', 'SVR', 'Failure')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_small', 'SVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_small" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", -2.000000 AS "coeff", 17.761709 AS "sv_0", 423.498322 AS "sv_1", 0.135270 AS "sv_2", 10.148129 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", -2.000000 AS "coeff", 45.437614 AS "sv_0", 168.841202 AS "sv_1", 0.343817 AS "sv_2", 3.279963 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", -2.000000 AS "coeff", 69.792320 AS "sv_0", 473.447937 AS "sv_1", 0.233546 AS "sv_2", 3.411072 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", 2.000000 AS "coeff", 67.667091 AS "sv_0", 938.672607 AS "sv_1", 0.652046 AS "sv_2", 9.523154
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_small', 'SVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_small', 'SVR', 'sqlite')
", 2.728044 AS "sv_3"
     UNION ALL
     SELECT 63 AS "sv_idx", 2.000000 AS "coeff", 7.321981 AS "sv_0", 487.752838 AS "sv_1", 0.993317 AS "sv_2", 5.340956 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -351.164032 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.000001 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_small', 'SVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
...          ...          ...       ...        ...
59     82.923828  1535.997559  0.287537   7.396835
60     17.167280  1104.656250  0.421381   6.591000
61     48.198017   353.104248  0.725143  10.405507
62     17.373148   483.680237  0.685229   2.728044
63      7.321981   487.752838  0.993317   5.340956

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index   Estimator
0       0  336.112351
1       1  331.696915
2       2  337.483029
3       3  354.467987
4       4  356.866480
..    ...         ...
59     59  369.852450
60     60  360.474270
61     61  334.455877
62     62  337.763241
63     63  337.887677

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_small', 'SVR') Estimator 1.8766489540547893
    index  SQL_Estimator  Py_Estimator  SQL_Error
48     48     342.404445    340.811066   1.593379
49     49     338.988367    336.654205   2.334162
50     50     367.337538    369.874756  -2.537217
51     51     348.417444    348.250610   0.166833
52     52     352.516732    353.290314  -0.773582
53     53     344.051963    342.840759   1.211204
54     54     370.422937    371.249115  -0.826178
55     55     336.225337    333.429413   2.795924
56     56     365.002925    367.625702  -2.622777
57     57     333.968555    331.015350   2.953205
58     58     358.582683    360.538940  -1.956257
59     59     369.852450    371.698090  -1.845640
60     60     360.474270    362.704773  -2.230503
61     61     334.455877    331.497711   2.958165
62     62     337.763241    335.206879   2.556363
63     63     337.887677    335.357208   2.530468
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_small', 'SVR', 'Failure')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
