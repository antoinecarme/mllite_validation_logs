          X_0          X_1       X_2        X_3      target
0   17.761710   423.498320  0.135270  10.148129   59.976816
1   45.437614   168.841197  0.343817   3.279963   73.717247
2   69.792322   473.447926  0.233546   3.411073  130.755488
3   67.667095   938.672588  0.652046   9.523154  615.786950
4   55.118421  1002.086076  0.726658   4.570617  730.257013
..        ...          ...       ...        ...         ...
59  82.923828  1535.997616  0.287537   7.396835  449.374075
60  17.167281  1104.656206  0.421381   6.591000  465.797999
61  48.198019   353.104245  0.725143  10.405507  260.547767
62  17.373148   483.680246  0.685229   2.728044  331.885863
63   7.321981   487.752848  0.993317   5.340956  484.548354

[64 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[1.77617092e+01 4.23498322e+02 1.35270208e-01 1.01481285e+01]
 [4.54376144e+01 1.68841202e+02 3.43817413e-01 3.27996254e+00]
 [6.97923203e+01 4.73447937e+02 2.33546272e-01 3.41107249e+00]
 [6.76670914e+01 9.38672607e+02 6.52046204e-01 9.52315426e+00]
 [5.51184196e+01 1.00208606e+03 7.26658285e-01 4.57061768e+00]] [ 59.976818  73.71725  130.7555   615.7869   730.257   ]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.016, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.108960, 0.449260, -0.369845, -0.031000 ],
			"coeffs_1" : [ 0.126334, -0.607619, 0.230262, 0.059963 ],
			"coeffs_2" : [ 0.704729, 0.183749, 0.701045, -0.103046 ],
			"coeffs_3" : [ 0.827064, -0.736250, -0.379920, 0.354753 ],
			"intercepts" : [ 0.418935, -0.414892, -0.459291, -0.639478 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.279461, -0.727849, -0.112743, 0.013230, -0.130846, -0.610796, -0.334180, 0.548888 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.633156, 0.040321, -0.216003, 0.260923, -0.142278, 0.299391 ],
			"coeffs_2" : [ -0.470585, 0.589103, -0.517727, 0.360207, -0.507938, 0.420873, 0.194565, 0.612457 ],
			"coeffs_3" : [ -0.469418, -0.577691, 0.236548, 0.232115, 0.485431, 0.640769, 0.567058, -0.491995 ],
			"intercepts" : [ 0.394415, 0.546498, -0.426981, 0.294768, 0.219105, 0.085762, 0.118170, 0.373684 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.110681, 0.296616, 0.348966, -0.586352, 0.426035 ],
			"coeffs_1" : [ -0.338408, -0.581019, 0.670638, 0.600797, -0.110224, -0.556471 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.609014, -0.299328, 0.307205, 0.429869, 0.448837, -0.089624 ],
			"coeffs_4" : [ -0.581198, 0.336357, 0.016470, -0.133269, -0.490000, -0.628587 ],
			"coeffs_5" : [ -0.204487, 0.625890, 0.062956, -0.169001, -0.187103, -0.621949 ],
			"coeffs_6" : [ 0.246892, -0.170334, -0.225271, -0.161825, 0.240809, -0.491360 ],
			"coeffs_7" : [ -0.183472, 0.407223, 0.462214, 0.527046, 0.445525, 0.341338 ],
			"intercepts" : [ -0.245636, 0.093400, 0.214969, 0.412525, 0.290624, -0.032957 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.567939 ],
			"coeffs_1" : [ 0.675395 ],
			"coeffs_2" : [ 0.183125 ],
			"coeffs_3" : [ -0.288232 ],
			"coeffs_4" : [ -0.222534 ],
			"coeffs_5" : [ -0.431560 ],
			"intercepts" : [ 0.518614 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.108960, 0.449260, -0.369845, -0.031000 ],
			"coeffs_1" : [ 0.126334, -0.607619, 0.230262, 0.059963 ],
			"coeffs_2" : [ 0.704729, 0.183749, 0.701045, -0.103046 ],
			"coeffs_3" : [ 0.827064, -0.736250, -0.379920, 0.354753 ],
			"intercepts" : [ 0.418935, -0.414892, -0.459291, -0.639478 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.279461, -0.727849, -0.112743, 0.013230, -0.130846, -0.610796, -0.334180, 0.548888 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.633156, 0.040321, -0.216003, 0.260923, -0.142278, 0.299391 ],
			"coeffs_2" : [ -0.470585, 0.589103, -0.517727, 0.360207, -0.507938, 0.420873, 0.194565, 0.612457 ],
			"coeffs_3" : [ -0.469418, -0.577691, 0.236548, 0.232115, 0.485431, 0.640769, 0.567058, -0.491995 ],
			"intercepts" : [ 0.394415, 0.546498, -0.426981, 0.294768, 0.219105, 0.085762, 0.118170, 0.373684 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.110681, 0.296616, 0.348966, -0.586352, 0.426035 ],
			"coeffs_1" : [ -0.338408, -0.581019, 0.670638, 0.600797, -0.110224, -0.556471 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.609014, -0.299328, 0.307205, 0.429869, 0.448837, -0.089624 ],
			"coeffs_4" : [ -0.581198, 0.336357, 0.016470, -0.133269, -0.490000, -0.628587 ],
			"coeffs_5" : [ -0.204487, 0.625890, 0.062956, -0.169001, -0.187103, -0.621949 ],
			"coeffs_6" : [ 0.246892, -0.170334, -0.225271, -0.161825, 0.240809, -0.491360 ],
			"coeffs_7" : [ -0.183472, 0.407223, 0.462214, 0.527046, 0.445525, 0.341338 ],
			"intercepts" : [ -0.245636, 0.093400, 0.214969, 0.412525, 0.290624, -0.032957 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.567939 ],
			"coeffs_1" : [ 0.675395 ],
			"coeffs_2" : [ 0.183125 ],
			"coeffs_3" : [ -0.288232 ],
			"coeffs_4" : [ -0.222534 ],
			"coeffs_5" : [ -0.431560 ],
			"intercepts" : [ 0.518614 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 64
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.10896, 0.44926, -0.369845, -0.031 ],
			"coeffs_1" : [ 0.126334, -0.607619, 0.230262, 0.059963 ],
			"coeffs_2" : [ 0.704729, 0.183749, 0.701045, -0.103046 ],
			"coeffs_3" : [ 0.827064, -0.73625, -0.37992, 0.354753 ],
			"intercepts" : [ 0.418935, -0.414892, -0.459291, -0.639478 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.279461, -0.727849, -0.112743, 0.01323, -0.130846, -0.610796, -0.33418, 0.548888 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.633156, 0.040321, -0.216003, 0.260923, -0.142278, 0.299391 ],
			"coeffs_2" : [ -0.470585, 0.589103, -0.517727, 0.360207, -0.507938, 0.420873, 0.194565, 0.612457 ],
			"coeffs_3" : [ -0.469418, -0.577691, 0.236548, 0.232115, 0.485431, 0.640769, 0.567058, -0.491995 ],
			"intercepts" : [ 0.394415, 0.546498, -0.426981, 0.294768, 0.219105, 0.085762, 0.11817, 0.373684 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.561438, 0.110681, 0.296616, 0.348966, -0.586352, 0.426035 ],
			"coeffs_1" : [ -0.338408, -0.581019, 0.670638, 0.600797, -0.110224, -0.556471 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.609014, -0.299328, 0.307205, 0.429869, 0.448837, -0.089624 ],
			"coeffs_4" : [ -0.581198, 0.336357, 0.01647, -0.133269, -0.49, -0.628587 ],
			"coeffs_5" : [ -0.204487, 0.62589, 0.062956, -0.169001, -0.187103, -0.621949 ],
			"coeffs_6" : [ 0.246892, -0.170334, -0.225271, -0.161825, 0.240809, -0.49136 ],
			"coeffs_7" : [ -0.183472, 0.407223, 0.462214, 0.527046, 0.445525, 0.341338 ],
			"intercepts" : [ -0.245636, 0.0934, 0.214969, 0.412525, 0.290624, -0.032957 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.567939 ],
			"coeffs_1" : [ 0.675395 ],
			"coeffs_2" : [ 0.183125 ],
			"coeffs_3" : [ -0.288232 ],
			"coeffs_4" : [ -0.222534 ],
			"coeffs_5" : [ -0.43156 ],
			"intercepts" : [ 0.518614 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 4.6432099e+00 -2.2978187e-02  5.4902830e+00  1.3636020e+01
  1.7239473e+01  5.9839039e+00  1.2987169e+01 -8.3056808e-01
 -7.0468318e-01  3.0515375e+01  1.1330012e+01  2.0210333e+01
  2.0836355e+01  7.1392927e+00  2.7083561e+01  2.3285837e+01
  9.1027756e+00  3.0895351e+01  5.2832308e+00  1.4881769e+00
  8.5653419e+00  2.2660136e-02  1.6139725e+01  1.3997417e+01
  1.1517277e+01  2.1067493e+01  1.5335610e+01  1.1651174e+01
  7.1012688e+00  6.1642809e+00  2.0839108e+01  1.8311495e+01
  6.5070829e+00  8.7197685e+00  2.5328890e+01  8.1196918e+00
  5.6271191e+00  6.6567144e+00  9.2945080e+00  8.0313545e-01
  2.9021366e+01 -9.0892947e-01  1.1233393e+01  2.9187551e+01
  2.9304081e+01  6.0650654e+00  1.5895860e+01  2.0486744e+01
  8.5201035e+00  8.5664768e+00  2.4486422e+01  1.1704179e+01
  1.5384211e+01  1.1513483e+01  3.0447330e+01  6.3163257e+00
  2.2352940e+01 -6.7878699e-01  1.7508389e+01  2.6814108e+01
  2.0152958e+01  1.4105177e+00  8.2847910e+00  7.8929443e+00]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 4.64313650e+00 -2.30070353e-02  5.49020147e+00  1.36358442e+01
  1.72392845e+01  5.98379898e+00  1.29870119e+01 -8.30600262e-01
 -7.04723120e-01  3.05150928e+01  1.13298883e+01  2.02101536e+01
  2.08361893e+01  7.13917065e+00  2.70832863e+01  2.32855797e+01
  9.10263157e+00  3.08951035e+01  5.28315163e+00  1.48811960e+00
  8.56526566e+00  2.26224661e-02  1.61395702e+01  1.39972477e+01
  1.15171585e+01  2.10672932e+01  1.53354359e+01  1.16510258e+01
  7.10117197e+00  6.16419649e+00  2.08389378e+01  1.83112736e+01
  6.50696468e+00  8.71962547e+00  2.53286076e+01  8.11955357e+00
  5.62701845e+00  6.65661907e+00  9.29438305e+00  8.03126752e-01
  2.90211067e+01 -9.08965826e-01  1.12332640e+01  2.91872272e+01
  2.93038712e+01  6.06495714e+00  1.58957119e+01  2.04865036e+01
  8.51997566e+00  8.56637192e+00  2.44861183e+01  1.17040281e+01
  1.53840504e+01  1.15133934e+01  3.04470940e+01  6.31624222e+00
  2.23527527e+01 -6.78847075e-01  1.75081978e+01  2.68137856e+01
  2.01527863e+01  1.41046000e+00  8.28469181e+00  7.89285326e+00]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman2_small', 'size': 64, 'mse': 292006.7, 'mae': 422.42682, 'mape': 0.9570491, 'r2': -1.483383920857102}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman2_small', 'training_time_in_sec': 0.016, 'prediction_time_in_sec': 0.001}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ -0.444338 ],
      "X_1" : [ -2.364676 ],
      "X_2" : [ -0.006375 ],
      "X_3" : [ 0.062715 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 1, 0, 3, 2 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_small_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_small', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_small" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.418935 + -0.108960 * t."OUT_0"  + 0.126334 * t."OUT_1"  + 0.704729 * t."OUT_2"  + 0.827064 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.449260 * t."OUT_0"  + -0.607619 * t."OUT_1"  + 0.183749 * t."OUT_2"  + -0.736250 * t."OUT_3" AS "OUT_1",
    -0.459291 + -0.369845 * t."OUT_0"  + 0.230262 * t."OUT_1"  + 0.701045 * t."OUT_2"  + -0.379920 * t."OUT_3" AS "OUT_2",
    -0.639478 + -0.031000 * t."OUT_0"  + 0.059963 * t."OUT_1"  + -0.103046 * t."OUT_2"  + 0.354753 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_1_A
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_small', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_small', 'MLPRegressor', 'duckdb')
0.628587 * t."OUT_4"  + -0.621949 * t."OUT_5"  + -0.491360 * t."OUT_6"  + 0.341338 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518614 + 0.567939 * t."OUT_0"  + 0.675395 * t."OUT_1"  + 0.183125 * t."OUT_2"  + -0.288232 * t."OUT_3"  + -0.222534 * t."OUT_4"  + -0.431560 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_small', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
...          ...          ...       ...        ...
59     82.923828  1535.997559  0.287537   7.396835
60     17.167280  1104.656250  0.421381   6.591000
61     48.198017   353.104248  0.725143  10.405507
62     17.373148   483.680237  0.685229   2.728044
63      7.321981   487.752838  0.993317   5.340956

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0   4.643137
1       1  -0.023007
2       2   5.490201
3       3  13.635844
4       4  17.239285
..    ...        ...
59     59  26.813786
60     60  20.152786
61     61   1.410460
62     62   8.284692
63     63   7.892853

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_small', 'MLPRegressor') Estimator 0.0001464150846004486
    index  SQL_Estimator  Py_Estimator  SQL_Error
48     48       8.519976      8.520103  -0.000128
49     49       8.566372      8.566477  -0.000105
50     50      24.486118     24.486422  -0.000303
51     51      11.704028     11.704179  -0.000151
52     52      15.384050     15.384211  -0.000160
53     53      11.513393     11.513483  -0.000090
54     54      30.447094     30.447330  -0.000237
55     55       6.316242      6.316326  -0.000083
56     56      22.352753     22.352940  -0.000187
57     57      -0.678847     -0.678787  -0.000060
58     58      17.508198     17.508389  -0.000191
59     59      26.813786     26.814108  -0.000322
60     60      20.152786     20.152958  -0.000172
61     61       1.410460      1.410518  -0.000058
62     62       8.284692      8.284791  -0.000099
63     63       7.892853      7.892944  -0.000091
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_small', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_small', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_small" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.418935 + -0.108960 * t."OUT_0"  + 0.126334 * t."OUT_1"  + 0.704729 * t."OUT_2"  + 0.827064 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.449260 * t."OUT_0"  + -0.607619 * t."OUT_1"  + 0.183749 * t."OUT_2"  + -0.736250 * t."OUT_3" AS "OUT_1",
    -0.459291 + -0.369845 * t."OUT_0"  + 0.230262 * t."OUT_1"  + 0.701045 * t."OUT_2"  + -0.379920 * t."OUT_3" AS "OUT_2",
    -0.639478 + -0.031000 * t."OUT_0"  + 0.059963 * t."OUT_1"  + -0.103046 * t."OUT_2"  + 0.354753 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_1_A
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_small', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_small', 'MLPRegressor', 'sqlite')
0.628587 * t."OUT_4"  + -0.621949 * t."OUT_5"  + -0.491360 * t."OUT_6"  + 0.341338 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518614 + 0.567939 * t."OUT_0"  + 0.675395 * t."OUT_1"  + 0.183125 * t."OUT_2"  + -0.288232 * t."OUT_3"  + -0.222534 * t."OUT_4"  + -0.431560 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_small', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
...          ...          ...       ...        ...
59     82.923828  1535.997559  0.287537   7.396835
60     17.167280  1104.656250  0.421381   6.591000
61     48.198017   353.104248  0.725143  10.405507
62     17.373148   483.680237  0.685229   2.728044
63      7.321981   487.752838  0.993317   5.340956

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0   4.643133
1       1  -0.023008
2       2   5.490196
3       3  13.635846
4       4  17.239281
..    ...        ...
59     59  26.813809
60     60  20.152777
61     61   1.410455
62     62   8.284694
63     63   7.892855

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_small', 'MLPRegressor') Estimator 0.0001451833817291935
    index  SQL_Estimator  Py_Estimator  SQL_Error
48     48       8.519978      8.520103  -0.000125
49     49       8.566366      8.566477  -0.000110
50     50      24.486136     24.486422  -0.000286
51     51      11.704027     11.704179  -0.000152
52     52      15.384049     15.384211  -0.000161
53     53      11.513390     11.513483  -0.000093
54     54      30.447094     30.447330  -0.000236
55     55       6.316242      6.316326  -0.000084
56     56      22.352765     22.352940  -0.000174
57     57      -0.678846     -0.678787  -0.000059
58     58      17.508194     17.508389  -0.000195
59     59      26.813809     26.814108  -0.000299
60     60      20.152777     20.152958  -0.000181
61     61       1.410455      1.410518  -0.000063
62     62       8.284694      8.284791  -0.000097
63     63       7.892855      7.892944  -0.000089
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_small', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
