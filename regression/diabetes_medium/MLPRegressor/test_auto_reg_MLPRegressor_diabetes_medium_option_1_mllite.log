          age       sex       bmi  ...        s5        s6  target
0    0.038076  0.050680  0.061696  ...  0.019907 -0.017646   151.0
1   -0.001882 -0.044642 -0.051474  ... -0.068332 -0.092204    75.0
2    0.085299  0.050680  0.044451  ...  0.002861 -0.025930   141.0
3   -0.089063 -0.044642 -0.011595  ...  0.022688 -0.009362   206.0
4    0.005383 -0.044642 -0.036385  ... -0.031988 -0.046641   135.0
..        ...       ...       ...  ...       ...       ...     ...
437  0.041708  0.050680  0.019662  ...  0.031193  0.007207   178.0
438 -0.005515  0.050680 -0.015906  ... -0.018114  0.044485   104.0
439  0.041708  0.050680 -0.015906  ... -0.046883  0.015491   132.0
440 -0.045472 -0.044642  0.039062  ...  0.044529 -0.025930   220.0
441 -0.045472 -0.044642 -0.073030  ... -0.004222  0.003064    57.0

[442 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[ 0.03807591  0.05068012  0.06169621  0.02187239 -0.0442235  -0.03482076
  -0.04340085 -0.00259226  0.01990749 -0.01764612]
 [-0.00188202 -0.04464164 -0.05147406 -0.02632753 -0.00844872 -0.01916334
   0.07441156 -0.03949338 -0.06833155 -0.09220405]
 [ 0.0852989   0.05068012  0.04445121 -0.00567042 -0.04559945 -0.03419447
  -0.03235593 -0.00259226  0.00286131 -0.02593034]
 [-0.08906294 -0.04464164 -0.01159501 -0.03665608  0.01219057  0.02499059
  -0.03603757  0.03430886  0.02268774 -0.00936191]
 [ 0.00538306 -0.04464164 -0.03638469  0.02187239  0.00393485  0.01559614
   0.00814208 -0.00259226 -0.03198764 -0.04664087]] [151.  75. 141. 206. 135.]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.046, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 442, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.056448, 0.286565, -0.240963, -0.106609 ],
			"coeffs_1" : [ 0.120414, -0.438545, 0.182563, 0.044279 ],
			"coeffs_2" : [ 0.488230, 0.128452, 0.497764, -0.139212 ],
			"coeffs_3" : [ 0.579988, -0.598252, -0.308516, 0.202168 ],
			"coeffs_4" : [ 0.342145, -0.310843, -0.362992, -0.523239 ],
			"coeffs_5" : [ 0.283620, -0.616116, -0.146537, 0.041642 ],
			"coeffs_6" : [ -0.130053, -0.574828, -0.299550, 0.577400 ],
			"coeffs_7" : [ -0.048116, -0.015387, -0.614535, -0.004498 ],
			"coeffs_8" : [ -0.199980, 0.215246, -0.153726, 0.232340 ],
			"coeffs_9" : [ -0.435677, 0.532842, -0.473371, 0.296914 ],
			"intercepts" : [ -0.470260, 0.373068, 0.095671, 0.574531 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.443915, -0.475190, 0.236548, 0.254996, 0.475586, 0.536104, 0.468437, -0.459344 ],
			"coeffs_1" : [ 0.459532, 0.471176, -0.395340, 0.315838, 0.269720, -0.018836, 0.019184, 0.517052 ],
			"coeffs_2" : [ -0.560196, -0.003644, 0.306910, 0.406786, -0.542942, 0.425312, -0.457573, -0.548344 ],
			"coeffs_3" : [ 0.736809, 0.571166, -0.063404, -0.504920, 0.035706, 0.604825, -0.580280, 0.391130 ],
			"intercepts" : [ 0.357830, 0.314021, 0.652875, -0.357124, 0.358827, 0.426647, 0.448267, 0.049449 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.639267, 0.235693, 0.007260, -0.124039, -0.480768, -0.548783 ],
			"coeffs_1" : [ -0.294728, 0.505099, 0.027252, -0.133482, -0.151607, -0.516155 ],
			"coeffs_2" : [ 0.161972, -0.286213, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.215160, 0.376506, 0.431074, 0.487376, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.338749, -0.035122, 0.182889, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.320980, 0.369448, 0.107910, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.295966, 0.292427, -0.452853, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.058625, -0.368407, 0.299111, -0.548128, -0.518286, 0.488080 ],
			"intercepts" : [ 0.536392, -0.521516, -0.245913, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.270376 ],
			"coeffs_1" : [ -0.136085 ],
			"coeffs_2" : [ -0.535488 ],
			"coeffs_3" : [ -0.596520 ],
			"coeffs_4" : [ -0.747540 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.511999 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_medium_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 442, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.056448, 0.286565, -0.240963, -0.106609 ],
			"coeffs_1" : [ 0.120414, -0.438545, 0.182563, 0.044279 ],
			"coeffs_2" : [ 0.488230, 0.128452, 0.497764, -0.139212 ],
			"coeffs_3" : [ 0.579988, -0.598252, -0.308516, 0.202168 ],
			"coeffs_4" : [ 0.342145, -0.310843, -0.362992, -0.523239 ],
			"coeffs_5" : [ 0.283620, -0.616116, -0.146537, 0.041642 ],
			"coeffs_6" : [ -0.130053, -0.574828, -0.299550, 0.577400 ],
			"coeffs_7" : [ -0.048116, -0.015387, -0.614535, -0.004498 ],
			"coeffs_8" : [ -0.199980, 0.215246, -0.153726, 0.232340 ],
			"coeffs_9" : [ -0.435677, 0.532842, -0.473371, 0.296914 ],
			"intercepts" : [ -0.470260, 0.373068, 0.095671, 0.574531 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.443915, -0.475190, 0.236548, 0.254996, 0.475586, 0.536104, 0.468437, -0.459344 ],
			"coeffs_1" : [ 0.459532, 0.471176, -0.395340, 0.315838, 0.269720, -0.018836, 0.019184, 0.517052 ],
			"coeffs_2" : [ -0.560196, -0.003644, 0.306910, 0.406786, -0.542942, 0.425312, -0.457573, -0.548344 ],
			"coeffs_3" : [ 0.736809, 0.571166, -0.063404, -0.504920, 0.035706, 0.604825, -0.580280, 0.391130 ],
			"intercepts" : [ 0.357830, 0.314021, 0.652875, -0.357124, 0.358827, 0.426647, 0.448267, 0.049449 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.639267, 0.235693, 0.007260, -0.124039, -0.480768, -0.548783 ],
			"coeffs_1" : [ -0.294728, 0.505099, 0.027252, -0.133482, -0.151607, -0.516155 ],
			"coeffs_2" : [ 0.161972, -0.286213, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.215160, 0.376506, 0.431074, 0.487376, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.338749, -0.035122, 0.182889, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.320980, 0.369448, 0.107910, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.295966, 0.292427, -0.452853, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.058625, -0.368407, 0.299111, -0.548128, -0.518286, 0.488080 ],
			"intercepts" : [ 0.536392, -0.521516, -0.245913, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.270376 ],
			"coeffs_1" : [ -0.136085 ],
			"coeffs_2" : [ -0.535488 ],
			"coeffs_3" : [ -0.596520 ],
			"coeffs_4" : [ -0.747540 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.511999 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 442
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.056448, 0.286565, -0.240963, -0.106609 ],
			"coeffs_1" : [ 0.120414, -0.438545, 0.182563, 0.044279 ],
			"coeffs_2" : [ 0.48823, 0.128452, 0.497764, -0.139212 ],
			"coeffs_3" : [ 0.579988, -0.598252, -0.308516, 0.202168 ],
			"coeffs_4" : [ 0.342145, -0.310843, -0.362992, -0.523239 ],
			"coeffs_5" : [ 0.28362, -0.616116, -0.146537, 0.041642 ],
			"coeffs_6" : [ -0.130053, -0.574828, -0.29955, 0.5774 ],
			"coeffs_7" : [ -0.048116, -0.015387, -0.614535, -0.004498 ],
			"coeffs_8" : [ -0.19998, 0.215246, -0.153726, 0.23234 ],
			"coeffs_9" : [ -0.435677, 0.532842, -0.473371, 0.296914 ],
			"intercepts" : [ -0.47026, 0.373068, 0.095671, 0.574531 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.443915, -0.47519, 0.236548, 0.254996, 0.475586, 0.536104, 0.468437, -0.459344 ],
			"coeffs_1" : [ 0.459532, 0.471176, -0.39534, 0.315838, 0.26972, -0.018836, 0.019184, 0.517052 ],
			"coeffs_2" : [ -0.560196, -0.003644, 0.30691, 0.406786, -0.542942, 0.425312, -0.457573, -0.548344 ],
			"coeffs_3" : [ 0.736809, 0.571166, -0.063404, -0.50492, 0.035706, 0.604825, -0.58028, 0.39113 ],
			"intercepts" : [ 0.35783, 0.314021, 0.652875, -0.357124, 0.358827, 0.426647, 0.448267, 0.049449 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.639267, 0.235693, 0.00726, -0.124039, -0.480768, -0.548783 ],
			"coeffs_1" : [ -0.294728, 0.505099, 0.027252, -0.133482, -0.151607, -0.516155 ],
			"coeffs_2" : [ 0.161972, -0.286213, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.21516, 0.376506, 0.431074, 0.487376, 0.47569, 0.371699 ],
			"coeffs_4" : [ -0.338749, -0.035122, 0.182889, 0.443776, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.32098, 0.369448, 0.10791, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.295966, 0.292427, -0.452853, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.058625, -0.368407, 0.299111, -0.548128, -0.518286, 0.48808 ],
			"intercepts" : [ 0.536392, -0.521516, -0.245913, -0.494865, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.270376 ],
			"coeffs_1" : [ -0.136085 ],
			"coeffs_2" : [ -0.535488 ],
			"coeffs_3" : [ -0.59652 ],
			"coeffs_4" : [ -0.74754 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.511999 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-0.52857953 -0.53023654 -0.5286296  -0.52692604 -0.5253883  -0.53495306
 -0.53252625 -0.525216   -0.52769214 -0.52999413 -0.5314055  -0.5365099
 -0.52720666 -0.5276096  -0.52551144 -0.5280145  -0.52971315 -0.52421266
 -0.52906847 -0.5273013  -0.5315573  -0.5333336  -0.52871424 -0.5328133
 -0.530587   -0.5277465  -0.5330423  -0.5321999  -0.529732   -0.5336567
 -0.528075   -0.53027517 -0.5286214  -0.53293    -0.52898276 -0.528275
 -0.52844137 -0.53110003 -0.5225007  -0.52785385 -0.5260858  -0.5324387
 -0.5287681  -0.5313208  -0.526608   -0.52698994 -0.5317319  -0.53013355
 -0.52549326 -0.5265478  -0.53047514 -0.52799034 -0.52498364 -0.52749103
 -0.52667475 -0.5290223  -0.5297889  -0.5316836  -0.5288395  -0.5252109
 -0.5310731  -0.53007334 -0.5329144  -0.5314502  -0.531442   -0.5262256
 -0.5276413  -0.5270854  -0.52910876 -0.5321529  -0.5294063  -0.5275873
 -0.52382517 -0.5238716  -0.52788645 -0.5285311  -0.53266585 -0.52950853
 -0.53006494 -0.5276529  -0.5247944  -0.52588624 -0.532431   -0.530193
 -0.53840554 -0.5349227  -0.53208923 -0.52590543 -0.5316154  -0.5294534
 -0.5306648  -0.52619886 -0.5284486  -0.5278543  -0.53606105 -0.5306738
 -0.5287024  -0.5286788  -0.5347868  -0.5244178  -0.5260998  -0.5272009
 -0.5264424  -0.5301225  -0.53712577 -0.5295039  -0.53265125 -0.52618307
 -0.53162414 -0.52861273 -0.5286012  -0.52608776 -0.52708244 -0.5285977
 -0.52986914 -0.5243117  -0.52633446 -0.5305995  -0.5265282  -0.53175765
 -0.5279935  -0.52765113 -0.5252536  -0.52532417 -0.5296779  -0.5309832
 -0.53175116 -0.5373549  -0.5287818  -0.531798   -0.52839506 -0.53329694
 -0.52534384 -0.52974284 -0.5332735  -0.5332731  -0.5309411  -0.5277249
 -0.5307386  -0.5304889  -0.5272716  -0.5301208  -0.5244482  -0.52815646
 -0.52494776 -0.5368514  -0.5261287  -0.5284337  -0.5315086  -0.52758473
 -0.5284993  -0.5289737  -0.5251814  -0.52584434 -0.5261136  -0.52329594
 -0.5289164  -0.52599096 -0.5262745  -0.52647924 -0.52811164 -0.5217509
 -0.5292238  -0.5277367  -0.52818567 -0.52994555 -0.54127806 -0.5315269
 -0.5279087  -0.52821547 -0.5284245  -0.5308167  -0.5290414  -0.5288688
 -0.5334684  -0.53024906 -0.52595526 -0.52890766 -0.526114   -0.52601266
 -0.52643985 -0.52390015 -0.5215336  -0.5287087  -0.53138375 -0.52785355
 -0.52957743 -0.53648573 -0.52331686 -0.52710056 -0.5283972  -0.5318241
 -0.5316316  -0.52408016 -0.5314208  -0.52528834 -0.52652097 -0.5272169
 -0.53783876 -0.528875   -0.52693737 -0.5279434  -0.5217855  -0.52441674
 -0.5302977  -0.52975136 -0.5252407  -0.52999073 -0.5293911  -0.52720094
 -0.53200483 -0.52843446 -0.5267743  -0.52870435 -0.5306044  -0.53162473
 -0.52428067 -0.5268878  -0.5276225  -0.53137535 -0.5356771  -0.52733856
 -0.5300442  -0.5301863  -0.53127056 -0.52946734 -0.5363323  -0.5272042
 -0.5271415  -0.5274398  -0.52118766 -0.5280471  -0.5253733  -0.5292947
 -0.5311528  -0.5304522  -0.52445465 -0.5287597  -0.5265441  -0.5276994
 -0.52748036 -0.52724963 -0.5416412  -0.5262015  -0.53183335 -0.5362866
 -0.52430534 -0.52887726 -0.521793   -0.5262351  -0.5311488  -0.52437043
 -0.5250362  -0.52778035 -0.52916217 -0.5296005  -0.53017527 -0.52748555
 -0.52668476 -0.5271377  -0.52872014 -0.5284011  -0.52816373 -0.5283291
 -0.5300858  -0.5287609  -0.52751434 -0.5260297  -0.52700555 -0.5272088
 -0.5293054  -0.5282045  -0.52967423 -0.52593493 -0.5288299  -0.5302742
 -0.5216191  -0.53266776 -0.5285314  -0.52769345 -0.5254926  -0.52944815
 -0.5237095  -0.528942   -0.5279732  -0.5268857  -0.5329438  -0.52159727
 -0.52683526 -0.5310436  -0.52780926 -0.52360195 -0.5303144  -0.53255767
 -0.5307507  -0.52823937 -0.5278105  -0.52864856 -0.53145856 -0.52845746
 -0.53114533 -0.5257336  -0.527472   -0.5255168  -0.52428937 -0.5256342
 -0.52756333 -0.5282523  -0.52986825 -0.5258886  -0.5279367  -0.5267812
 -0.5275519  -0.525621   -0.52700377 -0.527502   -0.5297069  -0.52620107
 -0.52871525 -0.53273046 -0.5233269  -0.52762645 -0.53002983 -0.5280457
 -0.52475744 -0.5273678  -0.5287596  -0.5264373  -0.5307093  -0.5300709
 -0.5250572  -0.5300443  -0.52954596 -0.5283805  -0.53383297 -0.52617705
 -0.5252632  -0.5262578  -0.5296195  -0.52634007 -0.5256437  -0.52985454
 -0.52640784 -0.52623415 -0.5264732  -0.5245213  -0.5226232  -0.52781516
 -0.5296647  -0.5289129  -0.53119457 -0.5324564  -0.5312135  -0.52756953
 -0.5237554  -0.5280044  -0.5345701  -0.5340168  -0.5279444  -0.5280447
 -0.5302432  -0.5306923  -0.5291938  -0.5292468  -0.53050375 -0.5317375
 -0.5268618  -0.52768624 -0.53004223 -0.5299123  -0.5263442  -0.5264392
 -0.5257619  -0.5308944  -0.52998537 -0.5254564  -0.52112824 -0.5296468
 -0.525651   -0.5348248  -0.5288727  -0.5277873  -0.5336583  -0.5289843
 -0.5278418  -0.5294079  -0.52920425 -0.53771716 -0.52594835 -0.5401563
 -0.529832   -0.52908295 -0.52670133 -0.5287641  -0.5300916  -0.5278565
 -0.5349047  -0.5331008  -0.52618897 -0.52695435 -0.52815545 -0.53273004
 -0.5283881  -0.5310017  -0.52840877 -0.53123116 -0.5379405  -0.52695316
 -0.5278976  -0.5226184  -0.523699   -0.5314202  -0.52980787 -0.52815664
 -0.52139205 -0.5264623  -0.5269912  -0.5285864  -0.52316505 -0.5310943
 -0.5283712  -0.52519023 -0.53536844 -0.522392   -0.52858067 -0.5335303
 -0.5260954  -0.53121656 -0.5294398  -0.52601206 -0.5258122  -0.52948946
 -0.52945846 -0.5261269  -0.5282137  -0.52694565 -0.5288492  -0.52722603
 -0.5248977  -0.52805024 -0.5265894  -0.5268376 ]
('OPERATION_END_ELAPSED', 0.008, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-0.5285792  -0.53023624 -0.52862924 -0.5269257  -0.52538794 -0.5349527
 -0.5325259  -0.5252156  -0.5276918  -0.5299938  -0.53140515 -0.5365095
 -0.5272063  -0.52760917 -0.525511   -0.52801406 -0.5297128  -0.5242123
 -0.5290681  -0.5273009  -0.53155696 -0.53333324 -0.5287139  -0.53281295
 -0.53058666 -0.52774614 -0.53304195 -0.53219956 -0.52973163 -0.53365636
 -0.5280746  -0.5302748  -0.528621   -0.53292966 -0.5289824  -0.52827466
 -0.528441   -0.5310997  -0.52250034 -0.5278535  -0.52608544 -0.5324383
 -0.52876776 -0.53132045 -0.52660763 -0.5269896  -0.53173155 -0.5301332
 -0.5254929  -0.52654743 -0.53047484 -0.5279899  -0.5249833  -0.5274907
 -0.5266744  -0.5290219  -0.52978855 -0.53168327 -0.5288392  -0.52521056
 -0.53107274 -0.530073   -0.53291404 -0.53144985 -0.5314416  -0.52622527
 -0.5276409  -0.52708507 -0.5291084  -0.53215253 -0.52940595 -0.52758694
 -0.5238248  -0.52387124 -0.5278861  -0.5285307  -0.5326655  -0.52950823
 -0.5300646  -0.5276526  -0.52479404 -0.5258859  -0.53243065 -0.5301926
 -0.53840524 -0.53492236 -0.5320889  -0.5259051  -0.531615   -0.52945304
 -0.53066444 -0.5261985  -0.5284482  -0.52785397 -0.5360607  -0.53067344
 -0.528702   -0.5286784  -0.5347865  -0.52441746 -0.52609944 -0.5272005
 -0.52644205 -0.5301221  -0.5371254  -0.5295035  -0.5326509  -0.5261827
 -0.5316238  -0.5286124  -0.5286009  -0.5260874  -0.5270821  -0.52859735
 -0.5298688  -0.52431136 -0.5263341  -0.5305991  -0.5265278  -0.5317573
 -0.52799314 -0.5276508  -0.52525324 -0.5253238  -0.5296775  -0.53098285
 -0.53175086 -0.53735447 -0.5287814  -0.53179765 -0.5283947  -0.5332966
 -0.5253435  -0.5297425  -0.5332732  -0.5332727  -0.5309407  -0.52772456
 -0.53073823 -0.53048855 -0.5272713  -0.53012043 -0.52444786 -0.5281561
 -0.5249474  -0.53685105 -0.52612835 -0.52843326 -0.53150827 -0.5275844
 -0.52849895 -0.52897334 -0.52518106 -0.525844   -0.5261133  -0.5232956
 -0.52891606 -0.5259906  -0.52627414 -0.5264789  -0.5281113  -0.52175057
 -0.52922344 -0.52773637 -0.5281853  -0.5299452  -0.5412777  -0.53152657
 -0.5279083  -0.5282151  -0.52842414 -0.5308163  -0.52904105 -0.52886844
 -0.53346807 -0.5302487  -0.5259549  -0.5289073  -0.5261136  -0.5260123
 -0.5264395  -0.52389985 -0.52153325 -0.52870834 -0.5313834  -0.5278532
 -0.5295771  -0.5364854  -0.5233165  -0.5271002  -0.5283969  -0.53182375
 -0.5316313  -0.5240798  -0.53142047 -0.525288   -0.5265206  -0.52721655
 -0.53783846 -0.52887464 -0.526937   -0.527943   -0.52178514 -0.5244164
 -0.53029734 -0.529751   -0.52524036 -0.5299904  -0.52939075 -0.5272006
 -0.5320045  -0.5284341  -0.5267739  -0.528704   -0.53060406 -0.5316243
 -0.5242803  -0.5268874  -0.52762216 -0.531375   -0.5356767  -0.5273382
 -0.53004384 -0.53018594 -0.5312702  -0.529467   -0.53633195 -0.52720386
 -0.52714115 -0.5274394  -0.5211873  -0.5280467  -0.5253729  -0.5292944
 -0.5311524  -0.53045183 -0.5244543  -0.52875936 -0.52654374 -0.52769905
 -0.52748    -0.5272493  -0.5416409  -0.5262011  -0.53183305 -0.5362863
 -0.524305   -0.52887696 -0.52179265 -0.52623475 -0.53114843 -0.52437013
 -0.52503586 -0.52778    -0.5291618  -0.52960014 -0.53017485 -0.5274852
 -0.5266844  -0.52713734 -0.5287198  -0.5284007  -0.5281634  -0.5283287
 -0.53008544 -0.52876055 -0.52751404 -0.52602935 -0.5270052  -0.52720845
 -0.52930504 -0.52820414 -0.5296739  -0.5259346  -0.5288295  -0.53027385
 -0.5216187  -0.5326674  -0.528531   -0.5276931  -0.5254923  -0.5294478
 -0.5237091  -0.52894163 -0.5279728  -0.52688533 -0.5329434  -0.52159685
 -0.5268349  -0.53104323 -0.5278089  -0.5236016  -0.530314   -0.5325573
 -0.53075033 -0.528239   -0.52781016 -0.5286482  -0.5314582  -0.52845716
 -0.531145   -0.52573323 -0.5274716  -0.5255165  -0.524289   -0.5256339
 -0.527563   -0.52825195 -0.5298679  -0.52588826 -0.52793634 -0.52678084
 -0.5275515  -0.52562064 -0.5270034  -0.5275016  -0.52970654 -0.5262007
 -0.5287149  -0.5327301  -0.5233265  -0.5276261  -0.5300295  -0.52804536
 -0.52475715 -0.5273674  -0.52875924 -0.5264369  -0.53070897 -0.53007054
 -0.52505684 -0.53004396 -0.5295456  -0.52838016 -0.5338326  -0.5261767
 -0.52526283 -0.52625746 -0.52961916 -0.5263397  -0.5256433  -0.5298542
 -0.5264075  -0.5262338  -0.5264729  -0.52452093 -0.52262276 -0.5278148
 -0.52966434 -0.52891254 -0.5311942  -0.53245604 -0.53121316 -0.5275692
 -0.523755   -0.52800405 -0.53456974 -0.5340165  -0.527944   -0.52804434
 -0.53024286 -0.5306919  -0.52919346 -0.52924645 -0.5305034  -0.53173715
 -0.5268614  -0.5276859  -0.5300419  -0.52991194 -0.5263438  -0.52643883
 -0.52576154 -0.53089404 -0.5299851  -0.5254561  -0.5211279  -0.52964646
 -0.5256506  -0.53482443 -0.5288724  -0.52778697 -0.53365797 -0.52898395
 -0.52784145 -0.52940756 -0.5292039  -0.5377168  -0.525948   -0.540156
 -0.52983165 -0.5290826  -0.526701   -0.5287638  -0.5300912  -0.5278562
 -0.53490436 -0.5331004  -0.5261886  -0.526954   -0.5281551  -0.5327297
 -0.5283878  -0.5310013  -0.5284084  -0.53123075 -0.53794014 -0.5269528
 -0.52789724 -0.52261806 -0.5236986  -0.5314198  -0.5298075  -0.5281563
 -0.5213917  -0.52646196 -0.52699083 -0.52858603 -0.5231647  -0.53109396
 -0.52837086 -0.5251899  -0.5353681  -0.52239156 -0.5285803  -0.53352994
 -0.52609503 -0.53121614 -0.52943945 -0.5260117  -0.5258118  -0.52948916
 -0.5294581  -0.52612656 -0.52821326 -0.5269453  -0.5288488  -0.5272257
 -0.52489734 -0.5280499  -0.52658904 -0.5268372 ]
('OPERATION_END_ELAPSED', 0.008, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'diabetes_medium', 'size': 442, 'mse': 29235.553, 'mae': 152.66216, 'mape': 1.0047172, 'r2': -3.9302055533247033}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_medium_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'diabetes_medium', 'training_time_in_sec': 0.046, 'prediction_time_in_sec': 0.008}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ 0.000023 ],
      "X_1" : [ -0.000078 ],
      "X_2" : [ -0.000005 ],
      "X_3" : [ -0.000018 ],
      "X_4" : [ 0.000054 ],
      "X_5" : [ 0.000002 ],
      "X_6" : [ -0.000067 ],
      "X_7" : [ -0.000206 ],
      "X_8" : [ 0.000017 ],
      "X_9" : [ 0.000123 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 7, 9, 1, 6, 4, 0, 3, 8, 2, 5 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_medium_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_medium_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_medium', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "diabetes_medium" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.470260 + -0.056448 * t."OUT_0"  + 0.120414 * t."OUT_1"  + 0.488230 * t."OUT_2"  + 0.579988 * t."OUT_3"  + 0.342145 * t."OUT_4"  + 0.283620 * t."OUT_5"  + -0.130053 * t
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_medium', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_medium', 'MLPRegressor', 'duckdb')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.511999 + -0.270376 * t."OUT_0"  + -0.136085 * t."OUT_1"  + -0.535488 * t."OUT_2"  + -0.596520 * t."OUT_3"  + -0.747540 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_medium', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 442 entries, 0 to 441
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     442 non-null    float32
 1   X_1     442 non-null    float32
 2   X_2     442 non-null    float32
 3   X_3     442 non-null    float32
 4   X_4     442 non-null    float32
 5   X_5     442 non-null    float32
 6   X_6     442 non-null    float32
 7   X_7     442 non-null    float32
 8   X_8     442 non-null    float32
 9   X_9     442 non-null    float32
dtypes: float32(10)
memory usage: 20.7 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.038076  0.050680  0.061696  ... -0.002592  0.019907 -0.017646
1     -0.001882 -0.044642 -0.051474  ... -0.039493 -0.068332 -0.092204
2      0.085299  0.050680  0.044451  ... -0.002592  0.002861 -0.025930
3     -0.089063 -0.044642 -0.011595  ...  0.034309  0.022688 -0.009362
4      0.005383 -0.044642 -0.036385  ... -0.002592 -0.031988 -0.046641
...         ...       ...       ...  ...       ...       ...       ...
437    0.041708  0.050680  0.019662  ... -0.002592  0.031193  0.007207
438   -0.005515  0.050680 -0.015906  ...  0.034309 -0.018114  0.044485
439    0.041708  0.050680 -0.015906  ... -0.011080 -0.046883  0.015491
440   -0.045472 -0.044642  0.039062  ...  0.026560  0.044529 -0.025930
441   -0.045472 -0.044642 -0.073030  ... -0.039493 -0.004222  0.003064

[442 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 442 entries, 0 to 441
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      442 non-null    int64  
 1   Estimator  442 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 7.0 KB
     index  Estimator
0        0  -0.528579
1        1  -0.530236
2        2  -0.528629
3        3  -0.526926
4        4  -0.525388
..     ...        ...
437    437  -0.527226
438    438  -0.524897
439    439  -0.528050
440    440  -0.526589
441    441  -0.526837

[442 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_medium', 'MLPRegressor') Estimator 3.57358164377342e-07
     index  SQL_Estimator  Py_Estimator     SQL_Error
426    426      -0.526095     -0.526095  3.576279e-07
427    427      -0.531216     -0.531217  4.172325e-07
428    428      -0.529439     -0.529440  3.576279e-07
429    429      -0.526012     -0.526012  3.576279e-07
430    430      -0.525812     -0.525812  4.172325e-07
431    431      -0.529489     -0.529489  2.980232e-07
432    432      -0.529458     -0.529458  3.576279e-07
433    433      -0.526127     -0.526127  3.576279e-07
434    434      -0.528213     -0.528214  4.172325e-07
435    435      -0.526945     -0.526946  3.576279e-07
436    436      -0.528849     -0.528849  3.576279e-07
437    437      -0.527226     -0.527226  3.576279e-07
438    438      -0.524897     -0.524898  3.576279e-07
439    439      -0.528050     -0.528050  3.576279e-07
440    440      -0.526589     -0.526589  3.576279e-07
441    441      -0.526837     -0.526838  3.576279e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_medium', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_medium_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_medium', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "diabetes_medium" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.470260 + -0.056448 * t."OUT_0"  + 0.120414 * t."OUT_1"  + 0.488230 * t."OUT_2"  + 0.579988 * t."OUT_3"  + 0.342145 * t."OUT_4"  + 0.283620 * t."OUT_5"  + -0.130053 * t
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_medium', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_medium', 'MLPRegressor', 'sqlite')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.511999 + -0.270376 * t."OUT_0"  + -0.136085 * t."OUT_1"  + -0.535488 * t."OUT_2"  + -0.596520 * t."OUT_3"  + -0.747540 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_medium', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 442 entries, 0 to 441
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     442 non-null    float32
 1   X_1     442 non-null    float32
 2   X_2     442 non-null    float32
 3   X_3     442 non-null    float32
 4   X_4     442 non-null    float32
 5   X_5     442 non-null    float32
 6   X_6     442 non-null    float32
 7   X_7     442 non-null    float32
 8   X_8     442 non-null    float32
 9   X_9     442 non-null    float32
dtypes: float32(10)
memory usage: 20.7 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.038076  0.050680  0.061696  ... -0.002592  0.019907 -0.017646
1     -0.001882 -0.044642 -0.051474  ... -0.039493 -0.068332 -0.092204
2      0.085299  0.050680  0.044451  ... -0.002592  0.002861 -0.025930
3     -0.089063 -0.044642 -0.011595  ...  0.034309  0.022688 -0.009362
4      0.005383 -0.044642 -0.036385  ... -0.002592 -0.031988 -0.046641
...         ...       ...       ...  ...       ...       ...       ...
437    0.041708  0.050680  0.019662  ... -0.002592  0.031193  0.007207
438   -0.005515  0.050680 -0.015906  ...  0.034309 -0.018114  0.044485
439    0.041708  0.050680 -0.015906  ... -0.011080 -0.046883  0.015491
440   -0.045472 -0.044642  0.039062  ...  0.026560  0.044529 -0.025930
441   -0.045472 -0.044642 -0.073030  ... -0.039493 -0.004222  0.003064

[442 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 442 entries, 0 to 441
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      442 non-null    int64  
 1   Estimator  442 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 7.0 KB
     index  Estimator
0        0  -0.528579
1        1  -0.530236
2        2  -0.528629
3        3  -0.526926
4        4  -0.525388
..     ...        ...
437    437  -0.527226
438    438  -0.524897
439    439  -0.528050
440    440  -0.526589
441    441  -0.526837

[442 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_medium', 'MLPRegressor') Estimator 3.622697562262611e-07
     index  SQL_Estimator  Py_Estimator     SQL_Error
426    426      -0.526095     -0.526095  3.538005e-07
427    427      -0.531216     -0.531217  3.974741e-07
428    428      -0.529439     -0.529440  3.547078e-07
429    429      -0.526012     -0.526012  3.782004e-07
430    430      -0.525812     -0.525812  4.018053e-07
431    431      -0.529489     -0.529489  3.255461e-07
432    432      -0.529458     -0.529458  3.599850e-07
433    433      -0.526127     -0.526127  3.726655e-07
434    434      -0.528213     -0.528214  3.859753e-07
435    435      -0.526945     -0.526946  3.795247e-07
436    436      -0.528849     -0.528849  3.711152e-07
437    437      -0.527226     -0.527226  3.847898e-07
438    438      -0.524897     -0.524898  3.520323e-07
439    439      -0.528050     -0.528050  3.722386e-07
440    440      -0.526589     -0.526589  3.868243e-07
441    441      -0.526837     -0.526838  3.473663e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_medium', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
