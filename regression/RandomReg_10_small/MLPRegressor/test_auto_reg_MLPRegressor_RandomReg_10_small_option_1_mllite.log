         X_0       X_1       X_2  ...       X_8       X_9      target
0  -0.478793  2.502870 -0.103623  ... -1.647981  0.327583   49.318079
1   1.195055 -1.450382 -0.468737  ...  0.311669  0.685749   -0.276592
2  -0.648732 -0.880620  0.202193  ... -0.548644 -0.541692 -185.910228
3  -0.612877  0.045409  0.558935  ... -0.258238 -0.097936   33.841240
4  -0.749045 -0.067925  0.967609  ...  0.132868 -0.324339   65.232160
..       ...       ...       ...  ...       ...       ...         ...
59 -0.949038 -0.622020 -0.116107  ...  0.638942  0.178647 -251.819075
60 -0.233714  0.812617 -0.449537  ... -1.645225 -0.349997  -45.346786
61 -0.849231  0.565608 -0.688562  ...  0.889139 -1.334005   48.277956
62  1.326070  0.524081  0.079805  ...  1.179245  1.232050  175.389262
63  0.429757 -0.344502  1.222327  ... -2.102686  1.227033   59.013234

[64 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[-0.4787931   2.50287    -0.10362324 -1.0679785   0.85598224 -2.105926
   1.3220862  -0.73586607 -1.6479812   0.3275829 ]
 [ 1.1950554  -1.4503824  -0.46873727  0.28645465  0.7561831   0.4906449
  -0.91751045  0.852386    0.31166935  0.68574876]
 [-0.648732   -0.8806197   0.20219254  0.52595264  0.65514773 -0.64766103
   0.27212194 -2.4372282  -0.5486439  -0.54169184]
 [-0.6128774   0.04540905  0.55893517 -1.3404816   1.2081138  -0.7919418
   0.9230405   0.22838217 -0.25823826 -0.09793584]
 [-0.7490448  -0.06792526  0.9676091  -0.24765345 -0.7222614   0.46284628
   0.12873757  1.3984412   0.13286762 -0.324339  ]] [  49.318077     -0.27659237 -185.91023      33.84124      65.23216   ]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.016, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.087231, 0.309490, -0.300907, -0.078034 ],
			"coeffs_1" : [ 0.089556, -0.490943, 0.155163, -0.010833 ],
			"coeffs_2" : [ 0.527149, 0.115587, 0.515792, -0.133485 ],
			"coeffs_3" : [ 0.619882, -0.546989, -0.305505, 0.275529 ],
			"coeffs_4" : [ 0.369944, -0.283447, -0.354348, -0.477467 ],
			"coeffs_5" : [ 0.314811, -0.671851, -0.137187, 0.011785 ],
			"coeffs_6" : [ -0.160765, -0.625894, -0.368473, 0.506499 ],
			"coeffs_7" : [ -0.035666, -0.026516, -0.619437, 0.006608 ],
			"coeffs_8" : [ -0.232900, 0.211493, -0.100278, 0.247311 ],
			"coeffs_9" : [ -0.458276, 0.541475, -0.448385, 0.320602 ],
			"intercepts" : [ -0.461225, 0.329462, 0.186950, 0.565006 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.417472, -0.530845, 0.217129, 0.289478, 0.507686, 0.574565, 0.505098, -0.461292 ],
			"coeffs_1" : [ 0.392156, 0.545791, -0.441788, 0.349487, 0.178115, 0.084230, 0.090665, 0.374634 ],
			"coeffs_2" : [ -0.638061, 0.114815, 0.264171, 0.440833, -0.572981, 0.520750, -0.428126, -0.645207 ],
			"coeffs_3" : [ 0.670744, 0.644931, -0.063793, -0.540291, -0.052462, 0.645542, -0.541982, 0.251485 ],
			"intercepts" : [ 0.291295, 0.386540, 0.653837, -0.323638, 0.272461, 0.465659, 0.483749, -0.089856 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.607816, 0.296088, -0.022154, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.210052, 0.559693, -0.001649, -0.133482, -0.134456, -0.586402 ],
			"coeffs_2" : [ 0.184359, -0.231765, -0.220155, -0.133022, 0.286685, -0.462554 ],
			"coeffs_3" : [ -0.183397, 0.409478, 0.463663, 0.557300, 0.492882, 0.371699 ],
			"coeffs_4" : [ -0.310823, 0.030772, 0.153409, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.387957, 0.424036, 0.082594, -0.225065, -0.161857, -0.324393 ],
			"coeffs_6" : [ 0.313308, 0.333065, -0.423606, 0.212193, -0.401108, -0.001729 ],
			"coeffs_7" : [ 0.088923, -0.294183, 0.269331, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.620374, -0.464761, -0.273013, -0.494865, -0.483427, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.299920 ],
			"coeffs_1" : [ -0.181703 ],
			"coeffs_2" : [ -0.583248 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.823020 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575952 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.087231, 0.309490, -0.300907, -0.078034 ],
			"coeffs_1" : [ 0.089556, -0.490943, 0.155163, -0.010833 ],
			"coeffs_2" : [ 0.527149, 0.115587, 0.515792, -0.133485 ],
			"coeffs_3" : [ 0.619882, -0.546989, -0.305505, 0.275529 ],
			"coeffs_4" : [ 0.369944, -0.283447, -0.354348, -0.477467 ],
			"coeffs_5" : [ 0.314811, -0.671851, -0.137187, 0.011785 ],
			"coeffs_6" : [ -0.160765, -0.625894, -0.368473, 0.506499 ],
			"coeffs_7" : [ -0.035666, -0.026516, -0.619437, 0.006608 ],
			"coeffs_8" : [ -0.232900, 0.211493, -0.100278, 0.247311 ],
			"coeffs_9" : [ -0.458276, 0.541475, -0.448385, 0.320602 ],
			"intercepts" : [ -0.461225, 0.329462, 0.186950, 0.565006 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.417472, -0.530845, 0.217129, 0.289478, 0.507686, 0.574565, 0.505098, -0.461292 ],
			"coeffs_1" : [ 0.392156, 0.545791, -0.441788, 0.349487, 0.178115, 0.084230, 0.090665, 0.374634 ],
			"coeffs_2" : [ -0.638061, 0.114815, 0.264171, 0.440833, -0.572981, 0.520750, -0.428126, -0.645207 ],
			"coeffs_3" : [ 0.670744, 0.644931, -0.063793, -0.540291, -0.052462, 0.645542, -0.541982, 0.251485 ],
			"intercepts" : [ 0.291295, 0.386540, 0.653837, -0.323638, 0.272461, 0.465659, 0.483749, -0.089856 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.607816, 0.296088, -0.022154, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.210052, 0.559693, -0.001649, -0.133482, -0.134456, -0.586402 ],
			"coeffs_2" : [ 0.184359, -0.231765, -0.220155, -0.133022, 0.286685, -0.462554 ],
			"coeffs_3" : [ -0.183397, 0.409478, 0.463663, 0.557300, 0.492882, 0.371699 ],
			"coeffs_4" : [ -0.310823, 0.030772, 0.153409, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.387957, 0.424036, 0.082594, -0.225065, -0.161857, -0.324393 ],
			"coeffs_6" : [ 0.313308, 0.333065, -0.423606, 0.212193, -0.401108, -0.001729 ],
			"coeffs_7" : [ 0.088923, -0.294183, 0.269331, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.620374, -0.464761, -0.273013, -0.494865, -0.483427, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.299920 ],
			"coeffs_1" : [ -0.181703 ],
			"coeffs_2" : [ -0.583248 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.823020 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575952 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 64
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.087231, 0.30949, -0.300907, -0.078034 ],
			"coeffs_1" : [ 0.089556, -0.490943, 0.155163, -0.010833 ],
			"coeffs_2" : [ 0.527149, 0.115587, 0.515792, -0.133485 ],
			"coeffs_3" : [ 0.619882, -0.546989, -0.305505, 0.275529 ],
			"coeffs_4" : [ 0.369944, -0.283447, -0.354348, -0.477467 ],
			"coeffs_5" : [ 0.314811, -0.671851, -0.137187, 0.011785 ],
			"coeffs_6" : [ -0.160765, -0.625894, -0.368473, 0.506499 ],
			"coeffs_7" : [ -0.035666, -0.026516, -0.619437, 0.006608 ],
			"coeffs_8" : [ -0.2329, 0.211493, -0.100278, 0.247311 ],
			"coeffs_9" : [ -0.458276, 0.541475, -0.448385, 0.320602 ],
			"intercepts" : [ -0.461225, 0.329462, 0.18695, 0.565006 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.417472, -0.530845, 0.217129, 0.289478, 0.507686, 0.574565, 0.505098, -0.461292 ],
			"coeffs_1" : [ 0.392156, 0.545791, -0.441788, 0.349487, 0.178115, 0.08423, 0.090665, 0.374634 ],
			"coeffs_2" : [ -0.638061, 0.114815, 0.264171, 0.440833, -0.572981, 0.52075, -0.428126, -0.645207 ],
			"coeffs_3" : [ 0.670744, 0.644931, -0.063793, -0.540291, -0.052462, 0.645542, -0.541982, 0.251485 ],
			"intercepts" : [ 0.291295, 0.38654, 0.653837, -0.323638, 0.272461, 0.465659, 0.483749, -0.089856 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.607816, 0.296088, -0.022154, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.210052, 0.559693, -0.001649, -0.133482, -0.134456, -0.586402 ],
			"coeffs_2" : [ 0.184359, -0.231765, -0.220155, -0.133022, 0.286685, -0.462554 ],
			"coeffs_3" : [ -0.183397, 0.409478, 0.463663, 0.5573, 0.492882, 0.371699 ],
			"coeffs_4" : [ -0.310823, 0.030772, 0.153409, 0.443776, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.387957, 0.424036, 0.082594, -0.225065, -0.161857, -0.324393 ],
			"coeffs_6" : [ 0.313308, 0.333065, -0.423606, 0.212193, -0.401108, -0.001729 ],
			"coeffs_7" : [ 0.088923, -0.294183, 0.269331, -0.618701, -0.588556, 0.48808 ],
			"intercepts" : [ 0.620374, -0.464761, -0.273013, -0.494865, -0.483427, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.29992 ],
			"coeffs_1" : [ -0.181703 ],
			"coeffs_2" : [ -0.583248 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.82302 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575952 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-0.9293233  -0.759144   -1.0644192  -0.85646546 -0.8755462  -0.86098444
 -0.9797605  -0.7707601  -0.78403854 -0.9388883  -1.4380809  -1.1443237
 -1.5213764  -0.79660994 -0.91384906 -0.9495426  -0.85789514 -1.0111245
 -0.8326256  -0.86197656 -0.89461935 -0.8447436  -1.3841314  -0.9887849
 -0.91743505 -0.94648105 -0.83578396 -0.82685256 -0.94859976 -0.9470015
 -0.9922147  -1.838344   -0.80348086 -1.1235682  -0.8412002  -0.87515634
 -1.065376   -0.81648374 -0.85358757 -1.1959627  -1.0172157  -0.89306176
 -1.3582758  -0.99464166 -1.0944213  -0.8046296  -0.7855297  -0.8808163
 -0.81850606 -1.1807904  -0.7920748  -1.0297687  -1.10139    -1.0589095
 -0.8511839  -1.1172863  -0.78988504 -1.1627576  -0.76307464 -1.3973589
 -0.92952895 -0.85987455 -1.0455883  -0.86736715]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-0.92932355 -0.7591442  -1.0644197  -0.8564656  -0.8755467  -0.8609848
 -0.97976065 -0.7707604  -0.7840389  -0.9388885  -1.4380811  -1.1443243
 -1.5213771  -0.79661036 -0.91384906 -0.9495428  -0.85789573 -1.0111248
 -0.832626   -0.8619759  -0.8946195  -0.84474427 -1.3841321  -0.9887851
 -0.9174346  -0.9464813  -0.8357844  -0.82685256 -0.9486002  -0.9470018
 -0.9922148  -1.8383468  -0.8034811  -1.1235685  -0.8412004  -0.875157
 -1.0653764  -0.81648386 -0.85358757 -1.1959633  -1.017216   -0.893062
 -1.3582757  -0.9946421  -1.0944216  -0.80462974 -0.78553    -0.88081694
 -0.81850654 -1.1807911  -0.7920751  -1.0297691  -1.1013906  -1.0589093
 -0.851184   -1.1172866  -0.7898852  -1.1627578  -0.7630747  -1.3973593
 -0.929529   -0.85987514 -1.045588   -0.8673672 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'RandomReg_10_small', 'size': 64, 'mse': 21939.424, 'mae': 121.08766, 'mape': 1.0111542, 'r2': -0.01363120984660493}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'RandomReg_10_small', 'training_time_in_sec': 0.016, 'prediction_time_in_sec': 0.002}
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_small', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.461225 + -0.087231 * t."OUT_0"  + 0.089556 * t."OUT_1"  + 0.527149 * t."OUT_2"  + 0.619882 * t."OUT_3"  + 0.369944 * t."OUT_4"  + 0.314811 * t."OUT_5"  + -0.160765 
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_small', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_small', 'MLPRegressor', 'duckdb')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575952 + -0.299920 * t."OUT_0"  + -0.181703 * t."OUT_1"  + -0.583248 * t."OUT_2"  + -0.667527 * t."OUT_3"  + -0.823020 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_small', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
...         ...       ...       ...  ...       ...       ...       ...
59    -0.949039 -0.622020 -0.116107  ... -1.144583  0.638942  0.178647
60    -0.233714  0.812617 -0.449537  ... -0.442987 -1.645225 -0.349997
61    -0.849231  0.565608 -0.688562  ...  1.692641  0.889139 -1.334005
62     1.326070  0.524081  0.079805  ... -0.813953  1.179245  1.232050
63     0.429757 -0.344502  1.222327  ... -1.042908 -2.102686  1.227033

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0  -0.929324
1       1  -0.759144
2       2  -1.064420
3       3  -0.856466
4       4  -0.875547
..    ...        ...
59     59  -1.397359
60     60  -0.929529
61     61  -0.859875
62     62  -1.045588
63     63  -0.867367

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_small', 'MLPRegressor') Estimator 3.650784492492676e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48      -0.818507     -0.818506 -4.768372e-07
49     49      -1.180791     -1.180790 -7.152557e-07
50     50      -0.792075     -0.792075 -2.980232e-07
51     51      -1.029769     -1.029769 -3.576279e-07
52     52      -1.101391     -1.101390 -5.960464e-07
53     53      -1.058909     -1.058910  2.384186e-07
54     54      -0.851184     -0.851184 -1.192093e-07
55     55      -1.117287     -1.117286 -2.384186e-07
56     56      -0.789885     -0.789885 -1.788139e-07
57     57      -1.162758     -1.162758 -1.192093e-07
58     58      -0.763075     -0.763075 -5.960464e-08
59     59      -1.397359     -1.397359 -3.576279e-07
60     60      -0.929529     -0.929529 -5.960464e-08
61     61      -0.859875     -0.859875 -5.960464e-07
62     62      -1.045588     -1.045588  2.384186e-07
63     63      -0.867367     -0.867367 -5.960464e-08
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_small', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_small', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.461225 + -0.087231 * t."OUT_0"  + 0.089556 * t."OUT_1"  + 0.527149 * t."OUT_2"  + 0.619882 * t."OUT_3"  + 0.369944 * t."OUT_4"  + 0.314811 * t."OUT_5"  + -0.160765 
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_small', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_small', 'MLPRegressor', 'sqlite')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575952 + -0.299920 * t."OUT_0"  + -0.181703 * t."OUT_1"  + -0.583248 * t."OUT_2"  + -0.667527 * t."OUT_3"  + -0.823020 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_small', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
...         ...       ...       ...  ...       ...       ...       ...
59    -0.949039 -0.622020 -0.116107  ... -1.144583  0.638942  0.178647
60    -0.233714  0.812617 -0.449537  ... -0.442987 -1.645225 -0.349997
61    -0.849231  0.565608 -0.688562  ...  1.692641  0.889139 -1.334005
62     1.326070  0.524081  0.079805  ... -0.813953  1.179245  1.232050
63     0.429757 -0.344502  1.222327  ... -1.042908 -2.102686  1.227033

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0  -0.929324
1       1  -0.759144
2       2  -1.064420
3       3  -0.856466
4       4  -0.875547
..    ...        ...
59     59  -1.397359
60     60  -0.929529
61     61  -0.859875
62     62  -1.045588
63     63  -0.867367

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_small', 'MLPRegressor') Estimator 3.585152602569863e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
48     48      -0.818507     -0.818506 -4.705659e-07
49     49      -1.180791     -1.180790 -6.440831e-07
50     50      -0.792075     -0.792075 -3.076728e-07
51     51      -1.029769     -1.029769 -3.308021e-07
52     52      -1.101391     -1.101390 -5.967799e-07
53     53      -1.058909     -1.058910  2.510263e-07
54     54      -0.851184     -0.851184 -7.106630e-08
55     55      -1.117286     -1.117286 -1.680807e-07
56     56      -0.789885     -0.789885 -1.950318e-07
57     57      -1.162758     -1.162758 -9.741787e-08
58     58      -0.763075     -0.763075 -1.062376e-07
59     59      -1.397359     -1.397359 -3.608761e-07
60     60      -0.929529     -0.929529 -5.524048e-08
61     61      -0.859875     -0.859875 -5.344996e-07
62     62      -1.045588     -1.045588  1.483384e-07
63     63      -0.867367     -0.867367 -2.283572e-08
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_small', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_small_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_small', 'MLPRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.461225 + -0.087231 * t."OUT_0"  + 0.089556 * t."OUT_1"  + 0.527149 * t."OUT_2"  + 0.619882 * t."OUT_3"  + 0.369944 * t."OUT_4"  + 0.314811 * t."OUT_5"  + -0.160765 
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_small', 'MLPRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_small', 'MLPRegressor', 'pgsql')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575952 + -0.299920 * t."OUT_0"  + -0.181703 * t."OUT_1"  + -0.583248 * t."OUT_2"  + -0.667527 * t."OUT_3"  + -0.823020 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_small', 'MLPRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
