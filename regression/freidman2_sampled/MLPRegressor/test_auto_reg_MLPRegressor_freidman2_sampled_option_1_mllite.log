          X_0          X_1       X_2        X_3       target
0   17.761710   423.498320  0.135270  10.148129    59.976816
1   45.437614   168.841197  0.343817   3.279963    73.717247
2   69.792322   473.447926  0.233546   3.411073   130.755488
3   67.667095   938.672588  0.652046   9.523154   615.786950
4   55.118421  1002.086076  0.726658   4.570617   730.257013
5   52.067586   534.256140  0.155164   8.526538    97.892577
6   50.992903   814.561313  0.257439   5.994628   215.810735
7   34.347892   205.928122  0.720020   9.414677   152.198309
8   63.010204   221.354390  0.814630   5.897069   191.013194
9   22.605109  1660.837003  0.731124   9.374556  1214.488603
10  13.280703   643.716771  0.520814   4.842079   335.519300
11   7.606344  1112.226604  0.732761   6.140375   815.031479
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[1.77617092e+01 4.23498322e+02 1.35270208e-01 1.01481285e+01]
 [4.54376144e+01 1.68841202e+02 3.43817413e-01 3.27996254e+00]
 [6.97923203e+01 4.73447937e+02 2.33546272e-01 3.41107249e+00]
 [6.76670914e+01 9.38672607e+02 6.52046204e-01 9.52315426e+00]
 [5.51184196e+01 1.00208606e+03 7.26658285e-01 4.57061768e+00]] [ 59.976818  73.71725  130.7555   615.7869   730.257   ]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.01, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 12, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.109065, 0.418140, -0.369564, -0.031295 ],
			"coeffs_1" : [ 0.126179, -0.576250, 0.229978, 0.059917 ],
			"coeffs_2" : [ 0.705071, 0.153970, 0.698960, -0.103307 ],
			"coeffs_3" : [ 0.827314, -0.734272, -0.382029, 0.354675 ],
			"intercepts" : [ 0.418948, -0.414892, -0.460387, -0.639570 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.275665, -0.727724, -0.112743, 0.012712, -0.113751, -0.610685, -0.330232, 0.548908 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601759, 0.040321, -0.185891, 0.230481, -0.115525, 0.268744 ],
			"coeffs_2" : [ -0.439422, 0.589233, -0.486482, 0.359664, -0.476709, 0.421002, 0.189412, 0.612496 ],
			"coeffs_3" : [ -0.412807, -0.577530, 0.206271, 0.231588, 0.444413, 0.640757, 0.561433, -0.491875 ],
			"intercepts" : [ 0.422772, 0.546556, -0.426981, 0.294269, 0.209398, 0.085709, 0.117463, 0.373679 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530127, 0.082615, 0.237669, 0.345674, -0.527480, 0.422645 ],
			"coeffs_1" : [ -0.339181, -0.580870, 0.670786, 0.600647, -0.110375, -0.556621 ],
			"coeffs_2" : [ -0.023593, 0.594577, -0.441200, 0.227656, 0.264156, 0.355750 ],
			"coeffs_3" : [ 0.608672, -0.299172, 0.307354, 0.429706, 0.448673, -0.089785 ],
			"coeffs_4" : [ -0.549861, 0.296371, 0.007260, -0.124039, -0.449586, -0.587979 ],
			"coeffs_5" : [ -0.204525, 0.625867, 0.062937, -0.168973, -0.187074, -0.621922 ],
			"coeffs_6" : [ 0.241409, -0.166849, -0.221682, -0.158279, 0.237198, -0.485597 ],
			"coeffs_7" : [ -0.183801, 0.407412, 0.462395, 0.526851, 0.445328, 0.341145 ],
			"intercepts" : [ -0.245781, 0.093515, 0.215078, 0.412404, 0.290502, -0.033076 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.567920 ],
			"coeffs_1" : [ 0.675540 ],
			"coeffs_2" : [ 0.183325 ],
			"coeffs_3" : [ -0.288031 ],
			"coeffs_4" : [ -0.222359 ],
			"coeffs_5" : [ -0.431270 ],
			"intercepts" : [ 0.518730 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_sampled_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 12, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.109065, 0.418140, -0.369564, -0.031295 ],
			"coeffs_1" : [ 0.126179, -0.576250, 0.229978, 0.059917 ],
			"coeffs_2" : [ 0.705071, 0.153970, 0.698960, -0.103307 ],
			"coeffs_3" : [ 0.827314, -0.734272, -0.382029, 0.354675 ],
			"intercepts" : [ 0.418948, -0.414892, -0.460387, -0.639570 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.275665, -0.727724, -0.112743, 0.012712, -0.113751, -0.610685, -0.330232, 0.548908 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601759, 0.040321, -0.185891, 0.230481, -0.115525, 0.268744 ],
			"coeffs_2" : [ -0.439422, 0.589233, -0.486482, 0.359664, -0.476709, 0.421002, 0.189412, 0.612496 ],
			"coeffs_3" : [ -0.412807, -0.577530, 0.206271, 0.231588, 0.444413, 0.640757, 0.561433, -0.491875 ],
			"intercepts" : [ 0.422772, 0.546556, -0.426981, 0.294269, 0.209398, 0.085709, 0.117463, 0.373679 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530127, 0.082615, 0.237669, 0.345674, -0.527480, 0.422645 ],
			"coeffs_1" : [ -0.339181, -0.580870, 0.670786, 0.600647, -0.110375, -0.556621 ],
			"coeffs_2" : [ -0.023593, 0.594577, -0.441200, 0.227656, 0.264156, 0.355750 ],
			"coeffs_3" : [ 0.608672, -0.299172, 0.307354, 0.429706, 0.448673, -0.089785 ],
			"coeffs_4" : [ -0.549861, 0.296371, 0.007260, -0.124039, -0.449586, -0.587979 ],
			"coeffs_5" : [ -0.204525, 0.625867, 0.062937, -0.168973, -0.187074, -0.621922 ],
			"coeffs_6" : [ 0.241409, -0.166849, -0.221682, -0.158279, 0.237198, -0.485597 ],
			"coeffs_7" : [ -0.183801, 0.407412, 0.462395, 0.526851, 0.445328, 0.341145 ],
			"intercepts" : [ -0.245781, 0.093515, 0.215078, 0.412404, 0.290502, -0.033076 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.567920 ],
			"coeffs_1" : [ 0.675540 ],
			"coeffs_2" : [ 0.183325 ],
			"coeffs_3" : [ -0.288031 ],
			"coeffs_4" : [ -0.222359 ],
			"coeffs_5" : [ -0.431270 ],
			"intercepts" : [ 0.518730 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 12
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.109065, 0.41814, -0.369564, -0.031295 ],
			"coeffs_1" : [ 0.126179, -0.57625, 0.229978, 0.059917 ],
			"coeffs_2" : [ 0.705071, 0.15397, 0.69896, -0.103307 ],
			"coeffs_3" : [ 0.827314, -0.734272, -0.382029, 0.354675 ],
			"intercepts" : [ 0.418948, -0.414892, -0.460387, -0.63957 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.275665, -0.727724, -0.112743, 0.012712, -0.113751, -0.610685, -0.330232, 0.548908 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601759, 0.040321, -0.185891, 0.230481, -0.115525, 0.268744 ],
			"coeffs_2" : [ -0.439422, 0.589233, -0.486482, 0.359664, -0.476709, 0.421002, 0.189412, 0.612496 ],
			"coeffs_3" : [ -0.412807, -0.57753, 0.206271, 0.231588, 0.444413, 0.640757, 0.561433, -0.491875 ],
			"intercepts" : [ 0.422772, 0.546556, -0.426981, 0.294269, 0.209398, 0.085709, 0.117463, 0.373679 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.530127, 0.082615, 0.237669, 0.345674, -0.52748, 0.422645 ],
			"coeffs_1" : [ -0.339181, -0.58087, 0.670786, 0.600647, -0.110375, -0.556621 ],
			"coeffs_2" : [ -0.023593, 0.594577, -0.4412, 0.227656, 0.264156, 0.35575 ],
			"coeffs_3" : [ 0.608672, -0.299172, 0.307354, 0.429706, 0.448673, -0.089785 ],
			"coeffs_4" : [ -0.549861, 0.296371, 0.00726, -0.124039, -0.449586, -0.587979 ],
			"coeffs_5" : [ -0.204525, 0.625867, 0.062937, -0.168973, -0.187074, -0.621922 ],
			"coeffs_6" : [ 0.241409, -0.166849, -0.221682, -0.158279, 0.237198, -0.485597 ],
			"coeffs_7" : [ -0.183801, 0.407412, 0.462395, 0.526851, 0.445328, 0.341145 ],
			"intercepts" : [ -0.245781, 0.093515, 0.215078, 0.412404, 0.290502, -0.033076 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.56792 ],
			"coeffs_1" : [ 0.67554 ],
			"coeffs_2" : [ 0.183325 ],
			"coeffs_3" : [ -0.288031 ],
			"coeffs_4" : [ -0.222359 ],
			"coeffs_5" : [ -0.43127 ],
			"intercepts" : [ 0.51873 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 4.5835333 -0.037135   5.4296746 13.499383  17.08716    5.9117966
 12.866269  -0.8502135 -0.7226927 30.232132  11.229731  20.02108  ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 4.583458   -0.03717971  5.429576   13.499201   17.086975    5.9116945
 12.866104   -0.85025716 -0.72274745 30.231752   11.229619   20.020836  ]
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman2_sampled', 'size': 12, 'mse': 262089.88, 'mae': 376.09973, 'mape': 0.9703057, 'r2': -1.0719393403618338}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman2_sampled', 'training_time_in_sec': 0.01, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_sampled_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_sampled', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.418948 + -0.109065 * t."OUT_0"  + 0.126179 * t."OUT_1"  + 0.705071 * t."OUT_2"  + 0.827314 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418140 * t."OUT_0"  + -0.576250 * t."OUT_1"  + 0.153970 * t."OUT_2"  + -0.734272 * t."OUT_3" AS "OUT_1",
    -0.460387 + -0.369564 * t."OUT_0"  + 0.229978 * t."OUT_1"  + 0.698960 * t."OUT_2"  + -0.382029 * t."OUT_3" AS "OUT_2",
    -0.639570 + -0.031295 * t."OUT_0"  + 0.059917 * t."OUT_1"  + -0.103307 * t."OUT_2"  + 0.354675 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_sampled', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_sampled', 'MLPRegressor', 'duckdb')
0.587979 * t."OUT_4"  + -0.621922 * t."OUT_5"  + -0.485597 * t."OUT_6"  + 0.341145 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518730 + 0.567920 * t."OUT_0"  + 0.675540 * t."OUT_1"  + 0.183325 * t."OUT_2"  + -0.288031 * t."OUT_3"  + -0.222359 * t."OUT_4"  + -0.431270 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_sampled', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 12 entries, 0 to 11
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     12 non-null     float32
 1   X_1     12 non-null     float32
 2   X_2     12 non-null     float32
 3   X_3     12 non-null     float32
dtypes: float32(4)
memory usage: 288.0 bytes
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
5      52.067585   534.256165  0.155164   8.526538
6      50.992905   814.561340  0.257439   5.994627
7      34.347893   205.928116  0.720020   9.414678
8      63.010204   221.354385  0.814630   5.897069
9      22.605108  1660.837036  0.731124   9.374556
10     13.280704   643.716797  0.520814   4.842079
11      7.606344  1112.226562  0.732761   6.140375
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12 entries, 0 to 11
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      12 non-null     int64  
 1   Estimator  12 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 324.0 bytes
    index  Estimator
0       0   4.583458
1       1  -0.037180
2       2   5.429576
3       3  13.499201
4       4  17.086975
5       5   5.911695
6       6  12.866104
7       7  -0.850257
8       8  -0.722747
9       9  30.231752
10     10  11.229619
11     11  20.020836
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_sampled', 'MLPRegressor') Estimator 0.0001405477523803711
    index  SQL_Estimator  Py_Estimator  SQL_Error
0       0       4.583458      4.583533  -0.000075
1       1      -0.037180     -0.037135  -0.000045
2       2       5.429576      5.429675  -0.000099
3       3      13.499201     13.499383  -0.000182
4       4      17.086975     17.087160  -0.000185
5       5       5.911695      5.911797  -0.000102
6       6      12.866104     12.866269  -0.000165
7       7      -0.850257     -0.850214  -0.000044
8       8      -0.722747     -0.722693  -0.000055
9       9      30.231752     30.232132  -0.000380
10     10      11.229619     11.229731  -0.000112
11     11      20.020836     20.021080  -0.000244
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_sampled', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_sampled_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_sampled', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.418948 + -0.109065 * t."OUT_0"  + 0.126179 * t."OUT_1"  + 0.705071 * t."OUT_2"  + 0.827314 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418140 * t."OUT_0"  + -0.576250 * t."OUT_1"  + 0.153970 * t."OUT_2"  + -0.734272 * t."OUT_3" AS "OUT_1",
    -0.460387 + -0.369564 * t."OUT_0"  + 0.229978 * t."OUT_1"  + 0.698960 * t."OUT_2"  + -0.382029 * t."OUT_3" AS "OUT_2",
    -0.639570 + -0.031295 * t."OUT_0"  + 0.059917 * t."OUT_1"  + -0.103307 * t."OUT_2"  + 0.354675 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_sampled', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_sampled', 'MLPRegressor', 'sqlite')
0.587979 * t."OUT_4"  + -0.621922 * t."OUT_5"  + -0.485597 * t."OUT_6"  + 0.341145 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518730 + 0.567920 * t."OUT_0"  + 0.675540 * t."OUT_1"  + 0.183325 * t."OUT_2"  + -0.288031 * t."OUT_3"  + -0.222359 * t."OUT_4"  + -0.431270 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_sampled', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 12 entries, 0 to 11
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     12 non-null     float32
 1   X_1     12 non-null     float32
 2   X_2     12 non-null     float32
 3   X_3     12 non-null     float32
dtypes: float32(4)
memory usage: 288.0 bytes
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
5      52.067585   534.256165  0.155164   8.526538
6      50.992905   814.561340  0.257439   5.994627
7      34.347893   205.928116  0.720020   9.414678
8      63.010204   221.354385  0.814630   5.897069
9      22.605108  1660.837036  0.731124   9.374556
10     13.280704   643.716797  0.520814   4.842079
11      7.606344  1112.226562  0.732761   6.140375
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12 entries, 0 to 11
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      12 non-null     int64  
 1   Estimator  12 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 324.0 bytes
    index  Estimator
0       0   4.583459
1       1  -0.037180
2       2   5.429574
3       3  13.499208
4       4  17.086968
5       5   5.911692
6       6  12.866104
7       7  -0.850257
8       8  -0.722750
9       9  30.231732
10     10  11.229614
11     11  20.020823
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_sampled', 'MLPRegressor') Estimator 0.0001442088081116307
    index  SQL_Estimator  Py_Estimator  SQL_Error
0       0       4.583459      4.583533  -0.000075
1       1      -0.037180     -0.037135  -0.000045
2       2       5.429574      5.429675  -0.000100
3       3      13.499208     13.499383  -0.000175
4       4      17.086968     17.087160  -0.000192
5       5       5.911692      5.911797  -0.000105
6       6      12.866104     12.866269  -0.000165
7       7      -0.850257     -0.850214  -0.000043
8       8      -0.722750     -0.722693  -0.000058
9       9      30.231732     30.232132  -0.000400
10     10      11.229614     11.229731  -0.000117
11     11      20.020823     20.021080  -0.000257
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_sampled', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_sampled_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_sampled', 'MLPRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.418948 + -0.109065 * t."OUT_0"  + 0.126179 * t."OUT_1"  + 0.705071 * t."OUT_2"  + 0.827314 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418140 * t."OUT_0"  + -0.576250 * t."OUT_1"  + 0.153970 * t."OUT_2"  + -0.734272 * t."OUT_3" AS "OUT_1",
    -0.460387 + -0.369564 * t."OUT_0"  + 0.229978 * t."OUT_1"  + 0.698960 * t."OUT_2"  + -0.382029 * t."OUT_3" AS "OUT_2",
    -0.639570 + -0.031295 * t."OUT_0"  + 0.059917 * t."OUT_1"  + -0.103307 * t."OUT_2"  + 0.354675 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_sampled', 'MLPRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_sampled', 'MLPRegressor', 'pgsql')
0.587979 * t."OUT_4"  + -0.621922 * t."OUT_5"  + -0.485597 * t."OUT_6"  + 0.341145 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518730 + 0.567920 * t."OUT_0"  + 0.675540 * t."OUT_1"  + 0.183325 * t."OUT_2"  + -0.288031 * t."OUT_3"  + -0.222359 * t."OUT_4"  + -0.431270 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_sampled', 'MLPRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
