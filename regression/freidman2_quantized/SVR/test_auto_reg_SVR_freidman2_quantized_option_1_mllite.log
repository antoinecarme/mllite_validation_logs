    X_0  X_1  X_2  X_3       target
0     4    3    5    6   363.446298
1     9    9   10    3  1619.565758
2     7    2    7    4   385.108775
3     3    2    4    0   246.139654
4     3    4    1    1   134.691570
..  ...  ...  ...  ...          ...
95    2    6    6    4   786.044214
96    5    8    7    4  1158.447272
97    7    9    3    0   646.799393
98    5    3    1    7    97.892577
99    0    0    9    9   154.460077

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS SVR {"C" : 2}
MLLITE_MODEL_OPTIONS_DEFAULT SVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING SVR { "C" : 2,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING SVR None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.]
 [ 9.  9. 10.  3.]
 [ 7.  2.  7.  4.]
 [ 3.  2.  4.  0.]
 [ 3.  4.  1.  1.]] [ 363.4463  1619.5658   385.10876  246.13965  134.69157]
MLLITE_FIT_USING_MODEL mllite_svm_reg.SVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 24 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 36 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 48 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.015, 'TRAINING')
{ "C" : 2,  "max_iter" : 128  , }
{ "C" : 2,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_SVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "epsilon_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.030193, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.100000, "shrinking" : 0, "probability" : 0, "C" : 2.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 100,
	"SupportVectors" : {
		"SV_00" : [ 4.000000, 3.000000, 5.000000, 6.000000 ],
		"SV_01" : [ 9.000000, 9.000000, 10.000000, 3.000000 ],
		"SV_02" : [ 7.000000, 2.000000, 7.000000, 4.000000 ],
		"SV_03" : [ 3.000000, 2.000000, 4.000000, 0.000000 ],
		"SV_04" : [ 3.000000, 4.000000, 1.000000, 1.000000 ],
		"SV_05" : [ 1.000000, 6.000000, 1.000000, 7.000000 ],
		"SV_06" : [ 8.000000, 8.000000, 8.000000, 2.000000 ],
		"SV_07" : [ 6.000000, 6.000000, 0.000000, 7.000000 ],
		"SV_08" : [ 0.000000, 2.000000, 9.000000, 5.000000 ],
		"SV_09" : [ 4.000000, 1.000000, 7.000000, 9.000000 ],
		"SV_10" : [ 7.000000, 8.000000, 0.000000, 5.000000 ],
		"SV_11" : [ 1.000000, 3.000000, 5.000000, 4.000000 ],
		"SV_12" : [ 6.000000, 3.000000, 7.000000, 4.000000 ],
		"SV_13" : [ 8.000000, 8.000000, 2.000000, 6.000000 ],
		"SV_14" : [ 7.000000, 8.000000, 5.000000, 4.000000 ],
		"SV_15" : [ 7.000000, 1.000000, 1.000000, 6.000000 ],
		"SV_16" : [ 7.000000, 0.000000, 9.000000, 3.000000 ],
		"SV_17" : [ 0.000000, 4.000000, 1.000000, 0.000000 ],
		"SV_18" : [ 1.000000, 6.000000, 4.000000, 6.000000 ],
		"SV_19" : [ 4.000000, 10.000000, 0.000000, 7.000000 ],
		"SV_20" : [ 6.000000, 9.000000, 2.000000, 3.000000 ],
		"SV_21" : [ 0.000000, 6.000000, 7.000000, 5.000000 ],
		"SV_22" : [ 9.000000, 3.000000, 8.000000, 5.000000 ],
		"SV_23" : [ 6.000000, 1.000000, 8.000000, 4.000000 ],
		"SV_24" : [ 9.000000, 6.000000, 0.000000, 2.000000 ],
		"SV_25" : [ 2.000000, 1.000000, 9.000000, 5.000000 ],
		"SV_26" : [ 5.000000, 6.000000, 7.000000, 4.000000 ],
		"SV_27" : [ 2.000000, 6.000000, 2.000000, 9.000000 ],
		"SV_28" : [ 3.000000, 7.000000, 0.000000, 9.000000 ],
		"SV_29" : [ 5.000000, 8.000000, 3.000000, 0.000000 ],
		"SV_30" : [ 4.000000, 7.000000, 5.000000, 1.000000 ],
		"SV_31" : [ 6.000000, 0.000000, 8.000000, 5.000000 ],
		"SV_32" : [ 6.000000, 5.000000, 6.000000, 8.000000 ],
		"SV_33" : [ 6.000000, 5.000000, 6.000000, 9.000000 ],
		"SV_34" : [ 9.000000, 6.000000, 6.000000, 3.000000 ],
		"SV_35" : [ 7.000000, 5.000000, 8.000000, 8.000000 ],
		"SV_36" : [ 6.000000, 6.000000, 3.000000, 1.000000 ],
		"SV_37" : [ 0.000000, 5.000000, 7.000000, 1.000000 ],
		"SV_38" : [ 1.000000, 5.000000, 3.000000, 7.000000 ],
		"SV_39" : [ 7.000000, 9.000000, 6.000000, 2.000000 ],
		"SV_40" : [ 3.000000, 0.000000, 7.000000, 8.000000 ],
		"SV_41" : [ 2.000000, 1.000000, 6.000000, 4.000000 ],
		"SV_42" : [ 9.000000, 4.000000, 4.000000, 4.000000 ],
		"SV_43" : [ 3.000000, 6.000000, 3.000000, 9.000000 ],
		"SV_44" : [ 0.000000, 1.000000, 2.000000, 1.000000 ],
		"SV_45" : [ 1.000000, 8.000000, 9.000000, 7.000000 ],
		"SV_46" : [ 7.000000, 2.000000, 0.000000, 0.000000 ],
		"SV_47" : [ 0.000000, 9.000000, 4.000000, 8.000000 ],
		"SV_48" : [ 1.000000, 5.000000, 4.000000, 8.000000 ],
		"SV_49" : [ 1.000000, 1.000000, 0.000000, 9.000000 ],
		"SV_50" : [ 2.000000, 7.000000, 2.000000, 10.000000 ],
		"SV_51" : [ 9.000000, 3.000000, 5.000000, 3.000000 ],
		"SV_52" : [ 3.000000, 5.000000, 9.000000, 2.000000 ],
		"SV_53" : [ 8.000000, 2.000000, 2.000000, 0.000000 ],
		"SV_54" : [ 3.000000, 4.000000, 4.000000, 8.000000 ],
		"SV_55" : [ 4.000000, 7.000000, 3.000000, 8.000000 ],
		"SV_56" : [ 9.000000, 9.000000, 2.000000, 8.000000 ],
		"SV_57" : [ 8.000000, 6.000000, 4.000000, 6.000000 ],
		"SV_58" : [ 1.000000, 9.000000, 2.000000, 3.000000 ],
		"SV_59" : [ 4.000000, 8.000000, 5.000000, 6.000000 ],
		"SV_60" : [ 3.000000, 9.000000, 5.000000, 5.000000 ],
		"SV_61" : [ 6.000000, 4.000000, 9.000000, 3.000000 ],
		"SV_62" : [ 1.000000, 2.000000, 6.000000, 1.000000 ],
		"SV_63" : [ 0.000000, 2.000000, 1.000000, 7.000000 ],
		"SV_64" : [ 3.000000, 3.000000, 2.000000, 6.000000 ],
		"SV_65" : [ 7.000000, 4.000000, 8.000000, 9.000000 ],
		"SV_66" : [ 5.000000, 0.000000, 5.000000, 4.000000 ],
		"SV_67" : [ 8.000000, 1.000000, 8.000000, 9.000000 ],
		"SV_68" : [ 1.000000, 8.000000, 3.000000, 1.000000 ],
		"SV_69" : [ 4.000000, 2.000000, 5.000000, 1.000000 ],
		"SV_70" : [ 6.000000, 5.000000, 9.000000, 5.000000 ],
		"SV_71" : [ 8.000000, 7.000000, 1.000000, 7.000000 ],
		"SV_72" : [ 7.000000, 2.000000, 1.000000, 2.000000 ],
		"SV_73" : [ 6.000000, 0.000000, 5.000000, 2.000000 ],
		"SV_74" : [ 1.000000, 8.000000, 4.000000, 3.000000 ],
		"SV_75" : [ 8.000000, 1.000000, 7.000000, 0.000000 ],
		"SV_76" : [ 5.000000, 7.000000, 4.000000, 6.000000 ],
		"SV_77" : [ 3.000000, 1.000000, 1.000000, 1.000000 ],
		"SV_78" : [ 5.000000, 6.000000, 5.000000, 1.000000 ],
		"SV_79" : [ 5.000000, 1.000000, 5.000000, 2.000000 ],
		"SV_80" : [ 2.000000, 9.000000, 7.000000, 8.000000 ],
		"SV_81" : [ 8.000000, 4.000000, 1.000000, 8.000000 ],
		"SV_82" : [ 1.000000, 3.000000, 7.000000, 9.000000 ],
		"SV_83" : [ 4.000000, 8.000000, 9.000000, 2.000000 ],
		"SV_84" : [ 4.000000, 4.000000, 1.000000, 2.000000 ],
		"SV_85" : [ 10.000000, 0.000000, 3.000000, 5.000000 ],
		"SV_86" : [ 9.000000, 4.000000, 8.000000, 6.000000 ],
		"SV_87" : [ 1.000000, 2.000000, 0.000000, 1.000000 ],
		"SV_88" : [ 3.000000, 5.000000, 6.000000, 7.000000 ],
		"SV_89" : [ 4.000000, 0.000000, 3.000000, 2.000000 ],
		"SV_90" : [ 4.000000, 2.000000, 4.000000, 1.000000 ],
		"SV_91" : [ 9.000000, 5.000000, 0.000000, 0.000000 ],
		"SV_92" : [ 5.000000, 4.000000, 2.000000, 5.000000 ],
		"SV_93" : [ 2.000000, 2.000000, 1.000000, 6.000000 ],
		"SV_94" : [ 0.000000, 4.000000, 9.000000, 0.000000 ],
		"SV_95" : [ 2.000000, 6.000000, 6.000000, 4.000000 ],
		"SV_96" : [ 5.000000, 8.000000, 7.000000, 4.000000 ],
		"SV_97" : [ 7.000000, 9.000000, 3.000000, 0.000000 ],
		"SV_98" : [ 5.000000, 3.000000, 1.000000, 7.000000 ],
		"SV_99" : [ 0.000000, 0.000000, 9.000000, 9.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, -2.000000, 2.000000, 2.000000, -2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, -2.000000, 2.000000, -2.000000, -2.000000, 2.000000, 1.116108, -2.000000, 2.000000, -2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, -1.116108, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, 2.000000, 2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, -2.000000, -2.000000, -2.000000, -2.000000, 2.000000, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000 ]
	},
	"rho" : [ -362.851837 ],
	"nSV" : [ 100 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 53 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS SVR {"C" : 2}
MLLITE_MODEL_OPTIONS_DEFAULT SVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING SVR { "C" : 2,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING SVR None
MLLITE_RELOADING_MODEL mllite_svm_reg.SVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_SVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "epsilon_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.030193, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.100000, "shrinking" : 0, "probability" : 0, "C" : 2.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 100,
	"SupportVectors" : {
		"SV_00" : [ 4.000000, 3.000000, 5.000000, 6.000000 ],
		"SV_01" : [ 9.000000, 9.000000, 10.000000, 3.000000 ],
		"SV_02" : [ 7.000000, 2.000000, 7.000000, 4.000000 ],
		"SV_03" : [ 3.000000, 2.000000, 4.000000, 0.000000 ],
		"SV_04" : [ 3.000000, 4.000000, 1.000000, 1.000000 ],
		"SV_05" : [ 1.000000, 6.000000, 1.000000, 7.000000 ],
		"SV_06" : [ 8.000000, 8.000000, 8.000000, 2.000000 ],
		"SV_07" : [ 6.000000, 6.000000, 0.000000, 7.000000 ],
		"SV_08" : [ 0.000000, 2.000000, 9.000000, 5.000000 ],
		"SV_09" : [ 4.000000, 1.000000, 7.000000, 9.000000 ],
		"SV_10" : [ 7.000000, 8.000000, 0.000000, 5.000000 ],
		"SV_11" : [ 1.000000, 3.000000, 5.000000, 4.000000 ],
		"SV_12" : [ 6.000000, 3.000000, 7.000000, 4.000000 ],
		"SV_13" : [ 8.000000, 8.000000, 2.000000, 6.000000 ],
		"SV_14" : [ 7.000000, 8.000000, 5.000000, 4.000000 ],
		"SV_15" : [ 7.000000, 1.000000, 1.000000, 6.000000 ],
		"SV_16" : [ 7.000000, 0.000000, 9.000000, 3.000000 ],
		"SV_17" : [ 0.000000, 4.000000, 1.000000, 0.000000 ],
		"SV_18" : [ 1.000000, 6.000000, 4.000000, 6.000000 ],
		"SV_19" : [ 4.000000, 10.000000, 0.000000, 7.000000 ],
		"SV_20" : [ 6.000000, 9.000000, 2.000000, 3.000000 ],
		"SV_21" : [ 0.000000, 6.000000, 7.000000, 5.000000 ],
		"SV_22" : [ 9.000000, 3.000000, 8.000000, 5.000000 ],
		"SV_23" : [ 6.000000, 1.000000, 8.000000, 4.000000 ],
		"SV_24" : [ 9.000000, 6.000000, 0.000000, 2.000000 ],
		"SV_25" : [ 2.000000, 1.000000, 9.000000, 5.000000 ],
		"SV_26" : [ 5.000000, 6.000000, 7.000000, 4.000000 ],
		"SV_27" : [ 2.000000, 6.000000, 2.000000, 9.000000 ],
		"SV_28" : [ 3.000000, 7.000000, 0.000000, 9.000000 ],
		"SV_29" : [ 5.000000, 8.000000, 3.000000, 0.000000 ],
		"SV_30" : [ 4.000000, 7.000000, 5.000000, 1.000000 ],
		"SV_31" : [ 6.000000, 0.000000, 8.000000, 5.000000 ],
		"SV_32" : [ 6.000000, 5.000000, 6.000000, 8.000000 ],
		"SV_33" : [ 6.000000, 5.000000, 6.000000, 9.000000 ],
		"SV_34" : [ 9.000000, 6.000000, 6.000000, 3.000000 ],
		"SV_35" : [ 7.000000, 5.000000, 8.000000, 8.000000 ],
		"SV_36" : [ 6.000000, 6.000000, 3.000000, 1.000000 ],
		"SV_37" : [ 0.000000, 5.000000, 7.000000, 1.000000 ],
		"SV_38" : [ 1.000000, 5.000000, 3.000000, 7.000000 ],
		"SV_39" : [ 7.000000, 9.000000, 6.000000, 2.000000 ],
		"SV_40" : [ 3.000000, 0.000000, 7.000000, 8.000000 ],
		"SV_41" : [ 2.000000, 1.000000, 6.000000, 4.000000 ],
		"SV_42" : [ 9.000000, 4.000000, 4.000000, 4.000000 ],
		"SV_43" : [ 3.000000, 6.000000, 3.000000, 9.000000 ],
		"SV_44" : [ 0.000000, 1.000000, 2.000000, 1.000000 ],
		"SV_45" : [ 1.000000, 8.000000, 9.000000, 7.000000 ],
		"SV_46" : [ 7.000000, 2.000000, 0.000000, 0.000000 ],
		"SV_47" : [ 0.000000, 9.000000, 4.000000, 8.000000 ],
		"SV_48" : [ 1.000000, 5.000000, 4.000000, 8.000000 ],
		"SV_49" : [ 1.000000, 1.000000, 0.000000, 9.000000 ],
		"SV_50" : [ 2.000000, 7.000000, 2.000000, 10.000000 ],
		"SV_51" : [ 9.000000, 3.000000, 5.000000, 3.000000 ],
		"SV_52" : [ 3.000000, 5.000000, 9.000000, 2.000000 ],
		"SV_53" : [ 8.000000, 2.000000, 2.000000, 0.000000 ],
		"SV_54" : [ 3.000000, 4.000000, 4.000000, 8.000000 ],
		"SV_55" : [ 4.000000, 7.000000, 3.000000, 8.000000 ],
		"SV_56" : [ 9.000000, 9.000000, 2.000000, 8.000000 ],
		"SV_57" : [ 8.000000, 6.000000, 4.000000, 6.000000 ],
		"SV_58" : [ 1.000000, 9.000000, 2.000000, 3.000000 ],
		"SV_59" : [ 4.000000, 8.000000, 5.000000, 6.000000 ],
		"SV_60" : [ 3.000000, 9.000000, 5.000000, 5.000000 ],
		"SV_61" : [ 6.000000, 4.000000, 9.000000, 3.000000 ],
		"SV_62" : [ 1.000000, 2.000000, 6.000000, 1.000000 ],
		"SV_63" : [ 0.000000, 2.000000, 1.000000, 7.000000 ],
		"SV_64" : [ 3.000000, 3.000000, 2.000000, 6.000000 ],
		"SV_65" : [ 7.000000, 4.000000, 8.000000, 9.000000 ],
		"SV_66" : [ 5.000000, 0.000000, 5.000000, 4.000000 ],
		"SV_67" : [ 8.000000, 1.000000, 8.000000, 9.000000 ],
		"SV_68" : [ 1.000000, 8.000000, 3.000000, 1.000000 ],
		"SV_69" : [ 4.000000, 2.000000, 5.000000, 1.000000 ],
		"SV_70" : [ 6.000000, 5.000000, 9.000000, 5.000000 ],
		"SV_71" : [ 8.000000, 7.000000, 1.000000, 7.000000 ],
		"SV_72" : [ 7.000000, 2.000000, 1.000000, 2.000000 ],
		"SV_73" : [ 6.000000, 0.000000, 5.000000, 2.000000 ],
		"SV_74" : [ 1.000000, 8.000000, 4.000000, 3.000000 ],
		"SV_75" : [ 8.000000, 1.000000, 7.000000, 0.000000 ],
		"SV_76" : [ 5.000000, 7.000000, 4.000000, 6.000000 ],
		"SV_77" : [ 3.000000, 1.000000, 1.000000, 1.000000 ],
		"SV_78" : [ 5.000000, 6.000000, 5.000000, 1.000000 ],
		"SV_79" : [ 5.000000, 1.000000, 5.000000, 2.000000 ],
		"SV_80" : [ 2.000000, 9.000000, 7.000000, 8.000000 ],
		"SV_81" : [ 8.000000, 4.000000, 1.000000, 8.000000 ],
		"SV_82" : [ 1.000000, 3.000000, 7.000000, 9.000000 ],
		"SV_83" : [ 4.000000, 8.000000, 9.000000, 2.000000 ],
		"SV_84" : [ 4.000000, 4.000000, 1.000000, 2.000000 ],
		"SV_85" : [ 10.000000, 0.000000, 3.000000, 5.000000 ],
		"SV_86" : [ 9.000000, 4.000000, 8.000000, 6.000000 ],
		"SV_87" : [ 1.000000, 2.000000, 0.000000, 1.000000 ],
		"SV_88" : [ 3.000000, 5.000000, 6.000000, 7.000000 ],
		"SV_89" : [ 4.000000, 0.000000, 3.000000, 2.000000 ],
		"SV_90" : [ 4.000000, 2.000000, 4.000000, 1.000000 ],
		"SV_91" : [ 9.000000, 5.000000, 0.000000, 0.000000 ],
		"SV_92" : [ 5.000000, 4.000000, 2.000000, 5.000000 ],
		"SV_93" : [ 2.000000, 2.000000, 1.000000, 6.000000 ],
		"SV_94" : [ 0.000000, 4.000000, 9.000000, 0.000000 ],
		"SV_95" : [ 2.000000, 6.000000, 6.000000, 4.000000 ],
		"SV_96" : [ 5.000000, 8.000000, 7.000000, 4.000000 ],
		"SV_97" : [ 7.000000, 9.000000, 3.000000, 0.000000 ],
		"SV_98" : [ 5.000000, 3.000000, 1.000000, 7.000000 ],
		"SV_99" : [ 0.000000, 0.000000, 9.000000, 9.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, -2.000000, 2.000000, 2.000000, -2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, -2.000000, 2.000000, -2.000000, -2.000000, 2.000000, 1.116108, -2.000000, 2.000000, -2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, -1.116108, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, 2.000000, 2.000000, -2.000000, -2.000000, 2.000000, -2.000000, 2.000000, -2.000000, -2.000000, -2.000000, -2.000000, -2.000000, 2.000000, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000 ]
	},
	"rho" : [ -362.851837 ],
	"nSV" : [ 100 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 53 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"metadata" :  { "model" : "Vapnik_SVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "C" : 2.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.1, "gamma" : 0.030193, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.5, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "epsilon_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 100,
		"SupportVectors" : 	{
			"SV_00" : [ 4.0, 3.0, 5.0, 6.0 ],
			"SV_01" : [ 9.0, 9.0, 10.0, 3.0 ],
			"SV_02" : [ 7.0, 2.0, 7.0, 4.0 ],
			"SV_03" : [ 3.0, 2.0, 4.0, 0.0 ],
			"SV_04" : [ 3.0, 4.0, 1.0, 1.0 ],
			"SV_05" : [ 1.0, 6.0, 1.0, 7.0 ],
			"SV_06" : [ 8.0, 8.0, 8.0, 2.0 ],
			"SV_07" : [ 6.0, 6.0, 0.0, 7.0 ],
			"SV_08" : [ 0.0, 2.0, 9.0, 5.0 ],
			"SV_09" : [ 4.0, 1.0, 7.0, 9.0 ],
			"SV_10" : [ 7.0, 8.0, 0.0, 5.0 ],
			"SV_11" : [ 1.0, 3.0, 5.0, 4.0 ],
			"SV_12" : [ 6.0, 3.0, 7.0, 4.0 ],
			"SV_13" : [ 8.0, 8.0, 2.0, 6.0 ],
			"SV_14" : [ 7.0, 8.0, 5.0, 4.0 ],
			"SV_15" : [ 7.0, 1.0, 1.0, 6.0 ],
			"SV_16" : [ 7.0, 0.0, 9.0, 3.0 ],
			"SV_17" : [ 0.0, 4.0, 1.0, 0.0 ],
			"SV_18" : [ 1.0, 6.0, 4.0, 6.0 ],
			"SV_19" : [ 4.0, 10.0, 0.0, 7.0 ],
			"SV_20" : [ 6.0, 9.0, 2.0, 3.0 ],
			"SV_21" : [ 0.0, 6.0, 7.0, 5.0 ],
			"SV_22" : [ 9.0, 3.0, 8.0, 5.0 ],
			"SV_23" : [ 6.0, 1.0, 8.0, 4.0 ],
			"SV_24" : [ 9.0, 6.0, 0.0, 2.0 ],
			"SV_25" : [ 2.0, 1.0, 9.0, 5.0 ],
			"SV_26" : [ 5.0, 6.0, 7.0, 4.0 ],
			"SV_27" : [ 2.0, 6.0, 2.0, 9.0 ],
			"SV_28" : [ 3.0, 7.0, 0.0, 9.0 ],
			"SV_29" : [ 5.0, 8.0, 3.0, 0.0 ],
			"SV_30" : [ 4.0, 7.0, 5.0, 1.0 ],
			"SV_31" : [ 6.0, 0.0, 8.0, 5.0 ],
			"SV_32" : [ 6.0, 5.0, 6.0, 8.0 ],
			"SV_33" : [ 6.0, 5.0, 6.0, 9.0 ],
			"SV_34" : [ 9.0, 6.0, 6.0, 3.0 ],
			"SV_35" : [ 7.0, 5.0, 8.0, 8.0 ],
			"SV_36" : [ 6.0, 6.0, 3.0, 1.0 ],
			"SV_37" : [ 0.0, 5.0, 7.0, 1.0 ],
			"SV_38" : [ 1.0, 5.0, 3.0, 7.0 ],
			"SV_39" : [ 7.0, 9.0, 6.0, 2.0 ],
			"SV_40" : [ 3.0, 0.0, 7.0, 8.0 ],
			"SV_41" : [ 2.0, 1.0, 6.0, 4.0 ],
			"SV_42" : [ 9.0, 4.0, 4.0, 4.0 ],
			"SV_43" : [ 3.0, 6.0, 3.0, 9.0 ],
			"SV_44" : [ 0.0, 1.0, 2.0, 1.0 ],
			"SV_45" : [ 1.0, 8.0, 9.0, 7.0 ],
			"SV_46" : [ 7.0, 2.0, 0.0, 0.0 ],
			"SV_47" : [ 0.0, 9.0, 4.0, 8.0 ],
			"SV_48" : [ 1.0, 5.0, 4.0, 8.0 ],
			"SV_49" : [ 1.0, 1.0, 0.0, 9.0 ],
			"SV_50" : [ 2.0, 7.0, 2.0, 10.0 ],
			"SV_51" : [ 9.0, 3.0, 5.0, 3.0 ],
			"SV_52" : [ 3.0, 5.0, 9.0, 2.0 ],
			"SV_53" : [ 8.0, 2.0, 2.0, 0.0 ],
			"SV_54" : [ 3.0, 4.0, 4.0, 8.0 ],
			"SV_55" : [ 4.0, 7.0, 3.0, 8.0 ],
			"SV_56" : [ 9.0, 9.0, 2.0, 8.0 ],
			"SV_57" : [ 8.0, 6.0, 4.0, 6.0 ],
			"SV_58" : [ 1.0, 9.0, 2.0, 3.0 ],
			"SV_59" : [ 4.0, 8.0, 5.0, 6.0 ],
			"SV_60" : [ 3.0, 9.0, 5.0, 5.0 ],
			"SV_61" : [ 6.0, 4.0, 9.0, 3.0 ],
			"SV_62" : [ 1.0, 2.0, 6.0, 1.0 ],
			"SV_63" : [ 0.0, 2.0, 1.0, 7.0 ],
			"SV_64" : [ 3.0, 3.0, 2.0, 6.0 ],
			"SV_65" : [ 7.0, 4.0, 8.0, 9.0 ],
			"SV_66" : [ 5.0, 0.0, 5.0, 4.0 ],
			"SV_67" : [ 8.0, 1.0, 8.0, 9.0 ],
			"SV_68" : [ 1.0, 8.0, 3.0, 1.0 ],
			"SV_69" : [ 4.0, 2.0, 5.0, 1.0 ],
			"SV_70" : [ 6.0, 5.0, 9.0, 5.0 ],
			"SV_71" : [ 8.0, 7.0, 1.0, 7.0 ],
			"SV_72" : [ 7.0, 2.0, 1.0, 2.0 ],
			"SV_73" : [ 6.0, 0.0, 5.0, 2.0 ],
			"SV_74" : [ 1.0, 8.0, 4.0, 3.0 ],
			"SV_75" : [ 8.0, 1.0, 7.0, 0.0 ],
			"SV_76" : [ 5.0, 7.0, 4.0, 6.0 ],
			"SV_77" : [ 3.0, 1.0, 1.0, 1.0 ],
			"SV_78" : [ 5.0, 6.0, 5.0, 1.0 ],
			"SV_79" : [ 5.0, 1.0, 5.0, 2.0 ],
			"SV_80" : [ 2.0, 9.0, 7.0, 8.0 ],
			"SV_81" : [ 8.0, 4.0, 1.0, 8.0 ],
			"SV_82" : [ 1.0, 3.0, 7.0, 9.0 ],
			"SV_83" : [ 4.0, 8.0, 9.0, 2.0 ],
			"SV_84" : [ 4.0, 4.0, 1.0, 2.0 ],
			"SV_85" : [ 10.0, 0.0, 3.0, 5.0 ],
			"SV_86" : [ 9.0, 4.0, 8.0, 6.0 ],
			"SV_87" : [ 1.0, 2.0, 0.0, 1.0 ],
			"SV_88" : [ 3.0, 5.0, 6.0, 7.0 ],
			"SV_89" : [ 4.0, 0.0, 3.0, 2.0 ],
			"SV_90" : [ 4.0, 2.0, 4.0, 1.0 ],
			"SV_91" : [ 9.0, 5.0, 0.0, 0.0 ],
			"SV_92" : [ 5.0, 4.0, 2.0, 5.0 ],
			"SV_93" : [ 2.0, 2.0, 1.0, 6.0 ],
			"SV_94" : [ 0.0, 4.0, 9.0, 0.0 ],
			"SV_95" : [ 2.0, 6.0, 6.0, 4.0 ],
			"SV_96" : [ 5.0, 8.0, 7.0, 4.0 ],
			"SV_97" : [ 7.0, 9.0, 3.0, 0.0 ],
			"SV_98" : [ 5.0, 3.0, 1.0, 7.0 ],
			"SV_99" : [ 0.0, 0.0, 9.0, 9.0 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ 2.0, 2.0, 2.0, -2.0, -2.0, -2.0, 2.0, -2.0, 2.0, -2.0, -2.0, -2.0, 2.0, 2.0, 2.0, -2.0, -2.0, -2.0, 2.0, -2.0, 2.0, 2.0, 2.0, -2.0, -2.0, -2.0, 2.0, -2.0, -2.0, 2.0, 2.0, -2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, -2.0, 2.0, -2.0, -2.0, 2.0, 1.116108, -2.0, 2.0, -2.0, 2.0, 2.0, -2.0, -2.0, -2.0, 2.0, -2.0, -1.116108, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, -2.0, -2.0, -2.0, 2.0, -2.0, -2.0, 2.0, -2.0, 2.0, -2.0, -2.0, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0, -2.0, 2.0, 2.0, -2.0, -2.0, 2.0, -2.0, 2.0, -2.0, -2.0, -2.0, -2.0, -2.0, 2.0, 2.0, 2.0, 2.0, -2.0, -2.0 ]
		},
		"classes" : 2,
		"nSV" : [ 100 ],
		"n_iter" : [ 53 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -362.851837 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[363.14993 379.24982 364.2318  347.4228  348.89987 358.38528 386.03467
 356.688   365.07623 361.06012 363.87964 359.12885 370.49255 371.86594
 389.05182 346.60776 358.20102 352.84802 372.71933 364.59195 376.69897
 379.86496 372.9554  360.11328 358.63327 361.27676 390.3853  361.34644
 357.51608 375.78018 382.10287 356.99948 379.90894 377.43628 381.14413
 381.6966  369.02325 371.79483 362.70743 388.1573  356.6151  352.18625
 366.20618 366.42484 345.8425  381.6275  346.2007  373.47675 366.6498
 350.71063 362.84674 363.33865 379.67252 348.2998  364.1102  371.91223
 369.3079  377.2005  373.78415 388.6645  388.69568 378.12314 355.51248
 348.98193 348.70007 375.8726  345.7315  364.86313 373.90982 350.20328
 385.46277 364.5222  343.8635  345.2227  380.00217 356.20578 382.38388
 339.99835 377.75464 346.55844 382.71097 356.98514 366.59232 387.44672
 348.33966 353.47418 377.71774 344.96527 378.94452 339.0332  346.4984
 355.94482 354.04477 344.19138 368.92838 383.37195 394.8636  375.97195
 348.69083 360.21082]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[363.14993 379.24994 364.2318  347.4228  348.89984 358.38528 386.03476
 356.688   365.07626 361.06012 363.87967 359.12885 370.49255 371.86597
 389.05188 346.6077  358.20105 352.848   372.71936 364.592   376.699
 379.86502 372.9554  360.11328 358.63324 361.2768  390.3853  361.34647
 357.5161  375.78018 382.10287 356.99948 379.90894 377.43628 381.14417
 381.69666 369.02325 371.79486 362.70743 388.15735 356.6151  352.18625
 366.20618 366.42487 345.84244 381.62762 346.20068 373.4768  366.64984
 350.71057 362.84677 363.33865 379.67258 348.29977 364.1102  371.91226
 369.30795 377.2005  373.78418 388.66452 388.6957  378.12317 355.51248
 348.98187 348.70007 375.87262 345.7315  364.86316 373.90985 350.2033
 385.4628  364.52222 343.86346 345.22266 380.0022  356.20578 382.3839
 339.9983  377.75464 346.55847 382.71106 356.9851  366.59235 387.4468
 348.33966 353.47412 377.71777 344.9652  378.94452 339.03317 346.49844
 355.9448  354.04477 344.19135 368.9284  383.37195 394.86362 375.972
 348.69083 360.21082]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.SVR', 'model_name': 'SVR', 'options': '{"C" : 2}', 'dataset': 'freidman2_quantized', 'size': 100, 'mse': 116792.81, 'mae': 248.6316, 'mape': 0.95269513, 'r2': 0.018288207905289622}
WRITING_PERF_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.SVR', 'model_name': 'SVR', 'options': '{"C" : 2}', 'dataset': 'freidman2_quantized', 'training_time_in_sec': 0.015, 'prediction_time_in_sec': 0.002}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ 0.003665 ],
      "X_1" : [ 0.850405 ],
      "X_2" : [ -0.126383 ],
      "X_3" : [ 0.019456 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 1, 2, 3, 0 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_quantized_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'SVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_quantized" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 2.000000 AS "coeff", 4.000000 AS "sv_0", 3.000000 AS "sv_1", 5.000000 AS "sv_2", 6.000000 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", 2.000000 AS "coeff", 9.000000 AS "sv_0", 9.000000 AS "sv_1", 10.000000 AS "sv_2", 3.000000 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", 2.000000 AS "coeff", 7.000000 AS "sv_0", 2.000000 AS "sv_1", 7.000000 AS "sv_2", 4.000000 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", -2.000000 AS "coeff", 3.000000 AS "sv_0", 2.000000 AS "sv_1", 4.000000 AS "sv_2", 0.000000 AS "sv_3"
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'SVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'SVR', 'duckdb')
00000 AS "sv_3"
     UNION ALL
     SELECT 99 AS "sv_idx", -2.000000 AS "coeff", 0.000000 AS "sv_0", 0.000000 AS "sv_1", 9.000000 AS "sv_2", 9.000000 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -362.851837 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.030193 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'SVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index   Estimator
0       0  363.149924
1       1  379.249943
2       2  364.231809
3       3  347.422781
4       4  348.899858
..    ...         ...
95     95  383.371951
96     96  394.863631
97     97  375.971993
98     98  348.690819
99     99  360.210819

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_quantized', 'SVR') Estimator 2.8798177264661718e-05
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     348.339668    348.339661   0.000007
85     85     353.474130    353.474182  -0.000052
86     86     377.717774    377.717743   0.000031
87     87     344.965206    344.965271  -0.000065
88     88     378.944516    378.944519  -0.000003
89     89     339.033181    339.033203  -0.000022
90     90     346.498431    346.498413   0.000018
91     91     355.944806    355.944824  -0.000019
92     92     354.044772    354.044769   0.000003
93     93     344.191334    344.191376  -0.000041
94     94     368.928396    368.928375   0.000020
95     95     383.371951    383.371948   0.000003
96     96     394.863631    394.863586   0.000045
97     97     375.971993    375.971954   0.000039
98     98     348.690819    348.690826  -0.000007
99     99     360.210819    360.210815   0.000003
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_quantized', 'SVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman2_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'SVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_quantized" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 2.000000 AS "coeff", 4.000000 AS "sv_0", 3.000000 AS "sv_1", 5.000000 AS "sv_2", 6.000000 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", 2.000000 AS "coeff", 9.000000 AS "sv_0", 9.000000 AS "sv_1", 10.000000 AS "sv_2", 3.000000 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", 2.000000 AS "coeff", 7.000000 AS "sv_0", 2.000000 AS "sv_1", 7.000000 AS "sv_2", 4.000000 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", -2.000000 AS "coeff", 3.000000 AS "sv_0", 2.000000 AS "sv_1", 4.000000 AS "sv_2", 0.000000 AS "sv_3"
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'SVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'SVR', 'sqlite')
2", 7.000000 AS "sv_3"
     UNION ALL
     SELECT 99 AS "sv_idx", -2.000000 AS "coeff", 0.000000 AS "sv_0", 0.000000 AS "sv_1", 9.000000 AS "sv_2", 9.000000 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -362.851837 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.030193 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'SVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index   Estimator
0       0  363.149924
1       1  379.249943
2       2  364.231809
3       3  347.422781
4       4  348.899858
..    ...         ...
95     95  383.371951
96     96  394.863631
97     97  375.971994
98     98  348.690819
99     99  360.210819

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_quantized', 'SVR') Estimator 2.8822331582887273e-05
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     348.339668    348.339661   0.000007
85     85     353.474130    353.474182  -0.000052
86     86     377.717774    377.717743   0.000031
87     87     344.965207    344.965271  -0.000064
88     88     378.944516    378.944519  -0.000003
89     89     339.033181    339.033203  -0.000022
90     90     346.498431    346.498413   0.000018
91     91     355.944805    355.944824  -0.000019
92     92     354.044772    354.044769   0.000003
93     93     344.191334    344.191376  -0.000042
94     94     368.928396    368.928375   0.000021
95     95     383.371951    383.371948   0.000003
96     96     394.863631    394.863586   0.000045
97     97     375.971994    375.971954   0.000039
98     98     348.690819    348.690826  -0.000007
99     99     360.210819    360.210815   0.000003
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_quantized', 'SVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
