    X_0  X_1  X_2  X_3       target
0     4    3    5    6   363.446298
1     9    9   10    3  1619.565758
2     7    2    7    4   385.108775
3     3    2    4    0   246.139654
4     3    4    1    1   134.691570
..  ...  ...  ...  ...          ...
95    2    6    6    4   786.044214
96    5    8    7    4  1158.447272
97    7    9    3    0   646.799393
98    5    3    1    7    97.892577
99    0    0    9    9   154.460077

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.]
 [ 9.  9. 10.  3.]
 [ 7.  2.  7.  4.]
 [ 3.  2.  4.  0.]
 [ 3.  4.  1.  1.]] [ 363.4463  1619.5658   385.10876  246.13965  134.69157]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.006, 'TRAINING')
{ "alpha" : 0.0000001,   , }
{ "alpha" : 0.0000001,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : -251.078293,
			"coeffs" : [ -1.606758, 84.504333, 81.099670, -10.064092 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : -251.078293,
			"coeffs" : [ -1.606758, 84.504333, 81.099670, -10.064092 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"equations" : 	{
		"coeffs" : [ -1.606758, 84.504333, 81.09967, -10.064092 ],
		"intercept" : -251.078293
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "alpha" : 0.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 341.1215   1275.8043    434.1244    237.50879   153.15436   264.99197
 1040.7715    175.85852   597.50696   304.11987   363.3886    366.06992
  520.2355    513.9171    778.95105  -157.10614   437.37915   168.03871
  518.3551    517.08936   631.8273    773.32495   586.4508    432.32648
  221.35869   509.7891    775.3552    324.3567    245.05495   660.22156
  729.4593    337.75806   567.8881    557.82404   697.89264   728.48065
  479.54208   729.07697   342.68698   964.6832    231.2864    276.55417
  356.6205    403.8496    -14.43871  1082.798     -93.316925  753.3466
  413.72256  -258.75754   398.79694   363.27997   876.39197    67.275665
  326.00473   496.8113    576.68646   507.10776   639.861     763.6432
  859.81836   777.0033    392.85754   -71.418594   99.42923   633.9123
  106.1299    378.79254   656.58453   306.93762   841.3794    338.24902
  -32.345436  124.65133   717.556     388.26968   596.4324   -100.35865
  643.34814   210.7624    993.43207    74.67193   477.9488   1128.2982
  141.4835    -74.16732   660.891     -93.74047   582.77246   -34.33448
  225.83795   156.98254   190.78412   -64.56802   816.83606   699.07587
  944.3639    741.51245     5.051941  388.24188 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 341.1215   1275.8043    434.1244    237.50879   153.15436   264.99197
 1040.7715    175.85852   597.50696   304.11987   363.3886    366.06992
  520.2355    513.9171    778.95105  -157.10614   437.37915   168.03871
  518.3551    517.08936   631.8273    773.32495   586.4508    432.32648
  221.35869   509.7891    775.3552    324.3567    245.05495   660.22156
  729.4593    337.75806   567.8881    557.82404   697.89264   728.48065
  479.54208   729.07697   342.68698   964.6832    231.2864    276.55417
  356.6205    403.8496    -14.43871  1082.798     -93.316925  753.3466
  413.72256  -258.75754   398.79694   363.27997   876.39197    67.275665
  326.00473   496.8113    576.68646   507.10776   639.861     763.6432
  859.81836   777.0033    392.85754   -71.418594   99.42923   633.9123
  106.1299    378.79254   656.58453   306.93762   841.3794    338.24902
  -32.345436  124.65133   717.556     388.26968   596.4324   -100.35865
  643.34814   210.7624    993.43207    74.67193   477.9488   1128.2982
  141.4835    -74.16732   660.891     -93.74047   582.77246   -34.33448
  225.83795   156.98254   190.78412   -64.56802   816.83606   699.07587
  944.3639    741.51245     5.051941  388.24188 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman2_quantized', 'size': 100, 'mse': 19029.814, 'mae': 104.284485, 'mape': 0.5312832, 'r2': 0.8400433282273119}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman2_quantized', 'training_time_in_sec': 0.006, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -251.078293 + -1.606758 * t."X_0" + 84.504333 * t."X_1" + 81.099670 * t."X_2" + -10.064092 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -251.078293 + -1.606758 * t."X_0" + 84.504333 * t."X_1" + 81.099670 * t."X_2" + -10.064092 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index    Estimator
0       0   341.121490
1       1  1275.804321
2       2   434.124390
3       3   237.508789
4       4   153.154358
..    ...          ...
95     95   699.075867
96     96   944.363892
97     97   741.512451
98     98     5.051941
99     99   388.241882

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_quantized', 'RidgeRegressor') Estimator 0.0
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     141.483505    141.483505        0.0
85     85     -74.167320    -74.167320        0.0
86     86     660.890991    660.890991        0.0
87     87     -93.740471    -93.740471        0.0
88     88     582.772461    582.772461        0.0
89     89     -34.334480    -34.334480        0.0
90     90     225.837952    225.837952        0.0
91     91     156.982544    156.982544        0.0
92     92     190.784119    190.784119        0.0
93     93     -64.568024    -64.568024        0.0
94     94     816.836060    816.836060        0.0
95     95     699.075867    699.075867        0.0
96     96     944.363892    944.363892        0.0
97     97     741.512451    741.512451        0.0
98     98       5.051941      5.051941        0.0
99     99     388.241882    388.241882        0.0
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_quantized', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -251.078293 + -1.606758 * t."X_0" + 84.504333 * t."X_1" + 81.099670 * t."X_2" + -10.064092 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -251.078293 + -1.606758 * t."X_0" + 84.504333 * t."X_1" + 81.099670 * t."X_2" + -10.064092 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index    Estimator
0       0   341.121472
1       1  1275.804306
2       2   434.124389
3       3   237.508779
4       4   153.154343
..    ...          ...
95     95   699.075841
96     96   944.363903
97     97   741.512408
98     98     5.051942
99     99   388.241909

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_quantized', 'RidgeRegressor') Estimator 1.527417663025332e-05
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     141.483493    141.483505  -0.000012
85     85     -74.167323    -74.167320  -0.000003
86     86     660.891025    660.890991   0.000034
87     87     -93.740477    -93.740471  -0.000006
88     88     582.772474    582.772461   0.000013
89     89     -34.334499    -34.334480  -0.000019
90     90     225.837929    225.837952  -0.000023
91     91     156.982550    156.982544   0.000006
92     92     190.784129    190.784119   0.000010
93     93     -64.568025    -64.568024  -0.000001
94     94     816.836069    816.836060   0.000009
95     95     699.075841    699.075867  -0.000026
96     96     944.363903    944.363892   0.000011
97     97     741.512408    741.512451  -0.000043
98     98       5.051942      5.051941   0.000001
99     99     388.241909    388.241882   0.000027
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_quantized', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -251.078293 + -1.606758 * t."X_0" + 84.504333 * t."X_1" + 81.099670 * t."X_2" + -10.064092 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -251.078293 + -1.606758 * t."X_0" + 84.504333 * t."X_1" + 81.099670 * t."X_2" + -10.064092 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
