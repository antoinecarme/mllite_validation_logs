    X_0  X_1  X_2  X_3       target
0     4    3    5    6   363.446298
1     9    9   10    3  1619.565758
2     7    2    7    4   385.108775
3     3    2    4    0   246.139654
4     3    4    1    1   134.691570
..  ...  ...  ...  ...          ...
95    2    6    6    4   786.044214
96    5    8    7    4  1158.447272
97    7    9    3    0   646.799393
98    5    3    1    7    97.892577
99    0    0    9    9   154.460077

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.]
 [ 9.  9. 10.  3.]
 [ 7.  2.  7.  4.]
 [ 3.  2.  4.  0.]
 [ 3.  4.  1.  1.]] [ 363.4463  1619.5658   385.10876  246.13965  134.69157]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.005, 'TRAINING')
{ ,   , }
{ ,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : -244.010178,
			"coeffs" : [ -1.526850, 83.550667, 80.191017, -9.853034 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : -244.010178,
			"coeffs" : [ -1.526850, 83.550667, 80.191017, -9.853034 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"equations" : 	{
		"coeffs" : [ -1.52685, 83.550667, 80.191017, -9.853034 ],
		"intercept" : -244.010178
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 342.3713   1266.5552    434.32816   239.27467   155.94992   266.98676
 1034.0024    179.1615    595.5451    306.09286   364.44205   366.65793
  519.4057    513.44415   775.2502   -150.07465   437.46194   170.38351
  517.41284   516.4178    629.60767   769.3657    585.16315   432.4954
  223.84612   508.94077   771.5846    325.9449    247.58664   657.334
  725.8391    339.0917    566.9039    557.05084   695.1392    725.75903
  478.85278   725.22723   343.8181    958.69794   233.92209   278.22076
  357.80276   404.60904    -9.930503 1075.6162    -87.5968    749.88556
  414.15607  -250.66367   399.64252   364.29614   871.1757     71.25839
  327.55173   496.4859    575.7619    506.72495   637.2419    760.1246
  855.0551    773.19147   392.8574    -65.689064  103.32511   632.35535
  109.89851   380.1765    653.5883    308.08582   837.036     339.8495
  -27.111853  128.07773   714.07324   388.66278   594.85614   -94.70209
  640.76166   213.15526   987.40497    79.34443   477.77478  1120.3009
  144.57002   -67.970795  658.8608    -88.288734  581.33746   -29.250593
  227.89479   160.0015    193.67511   -58.889725  811.9117    695.9741
  938.6859    737.83093    10.227364  389.03168 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 342.3713   1266.5552    434.32816   239.27467   155.94992   266.98676
 1034.0024    179.1615    595.5451    306.09286   364.44205   366.65793
  519.4057    513.44415   775.2502   -150.07465   437.46194   170.38351
  517.41284   516.4178    629.60767   769.3657    585.16315   432.4954
  223.84612   508.94077   771.5846    325.9449    247.58664   657.334
  725.8391    339.0917    566.9039    557.05084   695.1392    725.7591
  478.85278   725.22723   343.8181    958.69794   233.92209   278.22076
  357.80276   404.60904    -9.930503 1075.6162    -87.59679   749.88556
  414.15607  -250.66367   399.64252   364.29614   871.1757     71.25839
  327.55173   496.4859    575.7619    506.72495   637.2419    760.1246
  855.0551    773.19147   392.8574    -65.689064  103.32511   632.3554
  109.89851   380.1765    653.5883    308.08582   837.036     339.8495
  -27.111837  128.07773   714.07324   388.66278   594.85614   -94.70209
  640.76166   213.15526   987.40497    79.34443   477.77478  1120.3009
  144.57002   -67.970795  658.8608    -88.288734  581.33746   -29.250593
  227.89479   160.0015    193.67511   -58.889725  811.9117    695.9741
  938.6859    737.83093    10.227364  389.03168 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'freidman2_quantized', 'size': 100, 'mse': 19042.557, 'mae': 103.97527, 'mape': 0.52366996, 'r2': 0.8399362221613591}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'freidman2_quantized', 'training_time_in_sec': 0.005, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -244.010178 + -1.526850 * t."X_0" + 83.550667 * t."X_1" + 80.191017 * t."X_2" + -9.853034 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -244.010178 + -1.526850 * t."X_0" + 83.550667 * t."X_1" + 80.191017 * t."X_2" + -9.853034 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index    Estimator
0       0   342.371307
1       1  1266.555176
2       2   434.328156
3       3   239.274673
4       4   155.949921
..    ...          ...
95     95   695.974121
96     96   938.685913
97     97   737.830933
98     98    10.227364
99     99   389.031677

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_quantized', 'RidgeRegressor') Estimator 1.52587890625e-06
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     144.570023    144.570023        0.0
85     85     -67.970795    -67.970795        0.0
86     86     658.860779    658.860779        0.0
87     87     -88.288734    -88.288734        0.0
88     88     581.337463    581.337463        0.0
89     89     -29.250593    -29.250593        0.0
90     90     227.894791    227.894791        0.0
91     91     160.001495    160.001495        0.0
92     92     193.675110    193.675110        0.0
93     93     -58.889725    -58.889725        0.0
94     94     811.911682    811.911682        0.0
95     95     695.974121    695.974121        0.0
96     96     938.685913    938.685913        0.0
97     97     737.830933    737.830933        0.0
98     98      10.227364     10.227364        0.0
99     99     389.031677    389.031677        0.0
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_quantized', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -244.010178 + -1.526850 * t."X_0" + 83.550667 * t."X_1" + 80.191017 * t."X_2" + -9.853034 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -244.010178 + -1.526850 * t."X_0" + 83.550667 * t."X_1" + 80.191017 * t."X_2" + -9.853034 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index    Estimator
0       0   342.371304
1       1  1266.555243
2       2   434.328189
3       3   239.274674
4       4   155.949923
..    ...          ...
95     95   695.974090
96     96   938.685891
97     97   737.830926
98     98    10.227352
99     99   389.031669

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_quantized', 'RidgeRegressor') Estimator 1.9613067012524964e-05
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84     144.570039    144.570023  1.641699e-05
85     85     -67.970797    -67.970795 -2.322266e-06
86     86     658.860772    658.860779 -6.808594e-06
87     87     -88.288728    -88.288734  6.436035e-06
88     88     581.337471    581.337463  7.621094e-06
89     89     -29.250595    -29.250593 -1.814575e-06
90     90     227.894790    227.894791 -6.494141e-07
91     91     160.001507    160.001495  1.163867e-05
92     92     193.675104    193.675110 -5.863281e-06
93     93     -58.889731    -58.889725 -6.268555e-06
94     94     811.911643    811.911682 -3.912891e-05
95     95     695.974090    695.974121 -3.109375e-05
96     96     938.685891    938.685913 -2.208594e-05
97     97     737.830926    737.830933 -6.617187e-06
98     98      10.227352     10.227364 -1.158643e-05
99     99     389.031669    389.031677 -8.246094e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_quantized', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman2_quantized_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -244.010178 + -1.526850 * t."X_0" + 83.550667 * t."X_1" + 80.191017 * t."X_2" + -9.853034 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -244.010178 + -1.526850 * t."X_0" + 83.550667 * t."X_1" + 80.191017 * t."X_2" + -9.853034 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'RidgeRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
