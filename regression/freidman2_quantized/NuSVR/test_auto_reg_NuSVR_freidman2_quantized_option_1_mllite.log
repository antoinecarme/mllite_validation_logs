    X_0  X_1  X_2  X_3       target
0     4    3    5    6   363.446298
1     9    9   10    3  1619.565758
2     7    2    7    4   385.108775
3     3    2    4    0   246.139654
4     3    4    1    1   134.691570
..  ...  ...  ...  ...          ...
95    2    6    6    4   786.044214
96    5    8    7    4  1158.447272
97    7    9    3    0   646.799393
98    5    3    1    7    97.892577
99    0    0    9    9   154.460077

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[ 4.  3.  5.  6.]
 [ 9.  9. 10.  3.]
 [ 7.  2.  7.  4.]
 [ 3.  2.  4.  0.]
 [ 3.  4.  1.  1.]] [ 363.4463  1619.5658   385.10876  246.13965  134.69157]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.014, 'TRAINING')
{ "nu" : 0.1,  "max_iter" : 128  , }
{ "nu" : 0.1,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.030193, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 12,
	"SupportVectors" : {
		"SV_00" : [ 9.000000, 9.000000, 10.000000, 3.000000 ],
		"SV_01" : [ 8.000000, 8.000000, 8.000000, 2.000000 ],
		"SV_02" : [ 3.000000, 7.000000, 0.000000, 9.000000 ],
		"SV_03" : [ 0.000000, 1.000000, 2.000000, 1.000000 ],
		"SV_04" : [ 1.000000, 8.000000, 9.000000, 7.000000 ],
		"SV_05" : [ 7.000000, 2.000000, 0.000000, 0.000000 ],
		"SV_06" : [ 1.000000, 1.000000, 0.000000, 9.000000 ],
		"SV_07" : [ 2.000000, 9.000000, 7.000000, 8.000000 ],
		"SV_08" : [ 4.000000, 8.000000, 9.000000, 2.000000 ],
		"SV_09" : [ 1.000000, 2.000000, 0.000000, 1.000000 ],
		"SV_10" : [ 4.000000, 0.000000, 3.000000, 2.000000 ],
		"SV_11" : [ 5.000000, 8.000000, 7.000000, 4.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 1.000000, 1.000000, -0.000001, -1.000000, 1.000000, -1.000000, -1.000000, 1.000000, 1.000000, -1.000000, -1.000000, 0.000001 ]
	},
	"rho" : [ -617.865967 ],
	"nSV" : [ 12 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 18 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.030193, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 12,
	"SupportVectors" : {
		"SV_00" : [ 9.000000, 9.000000, 10.000000, 3.000000 ],
		"SV_01" : [ 8.000000, 8.000000, 8.000000, 2.000000 ],
		"SV_02" : [ 3.000000, 7.000000, 0.000000, 9.000000 ],
		"SV_03" : [ 0.000000, 1.000000, 2.000000, 1.000000 ],
		"SV_04" : [ 1.000000, 8.000000, 9.000000, 7.000000 ],
		"SV_05" : [ 7.000000, 2.000000, 0.000000, 0.000000 ],
		"SV_06" : [ 1.000000, 1.000000, 0.000000, 9.000000 ],
		"SV_07" : [ 2.000000, 9.000000, 7.000000, 8.000000 ],
		"SV_08" : [ 4.000000, 8.000000, 9.000000, 2.000000 ],
		"SV_09" : [ 1.000000, 2.000000, 0.000000, 1.000000 ],
		"SV_10" : [ 4.000000, 0.000000, 3.000000, 2.000000 ],
		"SV_11" : [ 5.000000, 8.000000, 7.000000, 4.000000 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 1.000000, 1.000000, -0.000001, -1.000000, 1.000000, -1.000000, -1.000000, 1.000000, 1.000000, -1.000000, -1.000000, 0.000001 ]
	},
	"rho" : [ -617.865967 ],
	"nSV" : [ 12 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 18 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 0.030193, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.1, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 12,
		"SupportVectors" : 	{
			"SV_00" : [ 9.0, 9.0, 10.0, 3.0 ],
			"SV_01" : [ 8.0, 8.0, 8.0, 2.0 ],
			"SV_02" : [ 3.0, 7.0, 0.0, 9.0 ],
			"SV_03" : [ 0.0, 1.0, 2.0, 1.0 ],
			"SV_04" : [ 1.0, 8.0, 9.0, 7.0 ],
			"SV_05" : [ 7.0, 2.0, 0.0, 0.0 ],
			"SV_06" : [ 1.0, 1.0, 0.0, 9.0 ],
			"SV_07" : [ 2.0, 9.0, 7.0, 8.0 ],
			"SV_08" : [ 4.0, 8.0, 9.0, 2.0 ],
			"SV_09" : [ 1.0, 2.0, 0.0, 1.0 ],
			"SV_10" : [ 4.0, 0.0, 3.0, 2.0 ],
			"SV_11" : [ 5.0, 8.0, 7.0, 4.0 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ 1.0, 1.0, -1e-06, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1e-06 ]
		},
		"classes" : 2,
		"nSV" : [ 12 ],
		"n_iter" : [ 18 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -617.865967 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[617.5521  620.2506  617.95886 615.83295 615.63837 617.40137 620.3777
 617.52454 618.1156  617.83044 617.7971  616.96246 618.2867  618.2174
 619.46564 616.72797 617.8419  615.89185 618.28357 618.04724 618.2788
 619.16736 618.5303  617.8346  617.33875 617.9323  619.76514 617.8296
 617.7049  618.0746  618.6715  617.6865  618.717   618.58966 619.20856
 618.9351  617.58014 618.0656  617.60284 619.8982  617.60535 616.8094
 617.865   618.1459  615.22784 620.1576  615.9393  618.9421  618.0747
 616.4983  618.06934 617.8051  619.28375 616.3632  617.7668  618.42773
 618.14746 618.4489  618.01263 619.5421  619.60376 619.22833 616.7005
 616.2773  616.3894  618.5042  616.537   617.9609  617.80585 616.38617
 619.6576  617.91    615.9584  616.4843  618.4618  617.6103  618.82306
 614.8739  618.40906 616.3699  620.04535 617.55676 618.28076 620.38446
 615.80585 617.3482  618.74854 615.11975 618.89984 615.35205 615.8951
 617.0328  616.7864  615.9121  618.12244 619.00635 620.39026 618.37695
 616.7723  617.9107 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[617.5521  620.2506  617.95886 615.83295 615.6383  617.40137 620.3777
 617.5245  618.1156  617.83044 617.7971  616.96246 618.2867  618.2174
 619.46564 616.72797 617.8419  615.89185 618.28357 618.04724 618.2788
 619.16736 618.5303  617.8346  617.33875 617.9323  619.76514 617.8296
 617.7049  618.0746  618.6715  617.6865  618.717   618.58966 619.20856
 618.9351  617.58014 618.0656  617.60284 619.8982  617.60535 616.8094
 617.865   618.1459  615.22784 620.1576  615.9393  618.9421  618.0747
 616.4983  618.06934 617.8051  619.28375 616.3632  617.7668  618.42773
 618.14746 618.4489  618.01263 619.5422  619.60376 619.22833 616.7005
 616.2773  616.38934 618.5042  616.537   617.9609  617.80585 616.3861
 619.6576  617.91    615.9584  616.4843  618.4618  617.6103  618.82306
 614.8739  618.40906 616.3699  620.04535 617.55676 618.28076 620.38446
 615.80585 617.3482  618.74854 615.11975 618.89984 615.352   615.8951
 617.0328  616.7864  615.9121  618.12244 619.00635 620.39026 618.37695
 616.7723  617.9107 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman2_quantized', 'size': 100, 'mse': 149335.88, 'mae': 330.82495, 'mape': 1.8711069, 'r2': -0.25525521328664547}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman2_quantized', 'training_time_in_sec': 0.014, 'prediction_time_in_sec': 0.002}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ -0.000196 ],
      "X_1" : [ 0.038374 ],
      "X_2" : [ -0.048452 ],
      "X_3" : [ -0.006459 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 2, 1, 3, 0 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_quantized_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_quantized" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.000000 AS "coeff", 9.000000 AS "sv_0", 9.000000 AS "sv_1", 10.000000 AS "sv_2", 3.000000 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", 1.000000 AS "coeff", 8.000000 AS "sv_0", 8.000000 AS "sv_1", 8.000000 AS "sv_2", 2.000000 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", -0.000001 AS "coeff", 3.000000 AS "sv_0", 7.000000 AS "sv_1", 0.000000 AS "sv_2", 9.000000 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", -1.000000 AS "coeff", 0.000000 AS "sv_0", 1.000000 AS "sv_1", 2.000000 AS "sv_2", 1.000000 AS "sv_3
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'NuSVR', 'duckdb')
000000 AS "sv_3"
     UNION ALL
     SELECT 11 AS "sv_idx", 0.000001 AS "coeff", 5.000000 AS "sv_0", 8.000000 AS "sv_1", 7.000000 AS "sv_2", 4.000000 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -617.865967 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.030193 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index   Estimator
0       0  617.552112
1       1  620.250628
2       2  617.958835
3       3  615.832966
4       4  615.638333
..    ...         ...
95     95  619.006342
96     96  620.390256
97     97  618.376933
98     98  616.772257
99     99  617.910685

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_quantized', 'NuSVR') Estimator 1.4752905399291193e-05
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     615.805845    615.805847  -0.000003
85     85     617.348179    617.348206  -0.000026
86     86     618.748559    618.748535   0.000024
87     87     615.119747    615.119751  -0.000004
88     88     618.899864    618.899841   0.000023
89     89     615.352018    615.352051  -0.000033
90     90     615.895089    615.895081   0.000009
91     91     617.032750    617.032776  -0.000026
92     92     616.786401    616.786377   0.000024
93     93     615.912104    615.912109  -0.000005
94     94     618.122438    618.122437   0.000001
95     95     619.006342    619.006348  -0.000006
96     96     620.390256    620.390259  -0.000003
97     97     618.376933    618.376953  -0.000020
98     98     616.772257    616.772278  -0.000021
99     99     617.910685    617.910706  -0.000021
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_quantized', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman2_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_quantized', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_quantized" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.000000 AS "coeff", 9.000000 AS "sv_0", 9.000000 AS "sv_1", 10.000000 AS "sv_2", 3.000000 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", 1.000000 AS "coeff", 8.000000 AS "sv_0", 8.000000 AS "sv_1", 8.000000 AS "sv_2", 2.000000 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", -0.000001 AS "coeff", 3.000000 AS "sv_0", 7.000000 AS "sv_1", 0.000000 AS "sv_2", 9.000000 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", -1.000000 AS "coeff", 0.000000 AS "sv_0", 1.000000 AS "sv_1", 2.000000 AS "sv_2", 1.000000 AS "sv_3
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_quantized', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_quantized', 'NuSVR', 'sqlite')
_2", 2.000000 AS "sv_3"
     UNION ALL
     SELECT 11 AS "sv_idx", 0.000001 AS "coeff", 5.000000 AS "sv_0", 8.000000 AS "sv_1", 7.000000 AS "sv_2", 4.000000 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -617.865967 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.030193 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_quantized', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
       X_0  X_1   X_2  X_3
index                     
0      4.0  3.0   5.0  6.0
1      9.0  9.0  10.0  3.0
2      7.0  2.0   7.0  4.0
3      3.0  2.0   4.0  0.0
4      3.0  4.0   1.0  1.0
...    ...  ...   ...  ...
95     2.0  6.0   6.0  4.0
96     5.0  8.0   7.0  4.0
97     7.0  9.0   3.0  0.0
98     5.0  3.0   1.0  7.0
99     0.0  0.0   9.0  9.0

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index   Estimator
0       0  617.552112
1       1  620.250628
2       2  617.958835
3       3  615.832966
4       4  615.638333
..    ...         ...
95     95  619.006342
96     96  620.390256
97     97  618.376933
98     98  616.772257
99     99  617.910685

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_quantized', 'NuSVR') Estimator 1.4751762822697856e-05
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84     615.805845    615.805847  -0.000003
85     85     617.348179    617.348206  -0.000026
86     86     618.748559    618.748535   0.000024
87     87     615.119747    615.119751  -0.000004
88     88     618.899864    618.899841   0.000023
89     89     615.352018    615.352051  -0.000033
90     90     615.895089    615.895081   0.000009
91     91     617.032750    617.032776  -0.000026
92     92     616.786401    616.786377   0.000024
93     93     615.912104    615.912109  -0.000005
94     94     618.122438    618.122437   0.000001
95     95     619.006342    619.006348  -0.000006
96     96     620.390256    620.390259  -0.000003
97     97     618.376933    618.376953  -0.000020
98     98     616.772257    616.772278  -0.000021
99     99     617.910685    617.910706  -0.000021
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_quantized', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
