     age  sex  bmi  bp  s1  s2  s3  s4  s5  s6  target
0      7   10    8   6   1   2   1   5   6   3   151.0
1      4    0    1   3   4   3   9   2   0   0    75.0
2      9   10    8   5   1   2   2   5   5   2   141.0
3      0    0    4   2   6   7   2   7   6   4   206.0
4      5    0    2   6   5   6   6   5   2   1   135.0
..   ...  ...  ...  ..  ..  ..  ..  ..  ..  ..     ...
437    7   10    6   8   4   5   3   5   7   5   178.0
438    4   10    4   0   8   9   3   7   3   8   104.0
439    7   10    4   6   2   4   3   4   1   6   132.0
440    2    0    7   5   6   6   3   7   8   2   220.0
441    2    0    0   0   9   7   9   2   4   5    57.0

[442 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[ 7. 10.  8.  6.  1.  2.  1.  5.  6.  3.]
 [ 4.  0.  1.  3.  4.  3.  9.  2.  0.  0.]
 [ 9. 10.  8.  5.  1.  2.  2.  5.  5.  2.]
 [ 0.  0.  4.  2.  6.  7.  2.  7.  6.  4.]
 [ 5.  0.  2.  6.  5.  6.  6.  5.  2.  1.]] [151.  75. 141. 206. 135.]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.031, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 442, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.131032, 0.286392, -0.267199, -0.108202 ],
			"coeffs_1" : [ 0.045594, -0.477790, 0.168843, -0.021016 ],
			"coeffs_2" : [ 0.482559, 0.081330, 0.523404, -0.154364 ],
			"coeffs_3" : [ 0.574768, -0.628393, -0.295162, 0.190465 ],
			"coeffs_4" : [ 0.268511, -0.367336, -0.333161, -0.560068 ],
			"coeffs_5" : [ 0.209777, -0.700635, -0.104379, -0.012267 ],
			"coeffs_6" : [ -0.203756, -0.648117, -0.356110, 0.469555 ],
			"coeffs_7" : [ -0.122383, -0.051880, -0.607098, -0.015242 ],
			"coeffs_8" : [ -0.274237, 0.183840, -0.131723, 0.216712 ],
			"coeffs_9" : [ -0.509022, 0.516443, -0.479322, 0.286191 ],
			"intercepts" : [ -0.544459, 0.304366, 0.133286, 0.529506 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.367724, -0.605683, 0.283791, 0.202714, 0.536176, 0.537462, 0.461947, -0.477982 ],
			"coeffs_1" : [ 0.386581, 0.521886, -0.378421, 0.302178, 0.149630, 0.000585, 0.081375, 0.347268 ],
			"coeffs_2" : [ -0.589907, 0.074877, 0.292219, 0.406786, -0.592709, 0.475076, -0.403862, -0.583005 ],
			"coeffs_3" : [ 0.761143, 0.596182, -0.034089, -0.605652, 0.008822, 0.610148, -0.588846, 0.254856 ],
			"intercepts" : [ 0.400537, 0.330500, 0.688683, -0.413064, 0.352652, 0.417735, 0.429392, -0.075709 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.653271, 0.238752, -0.044147, -0.124039, -0.480768, -0.548783 ],
			"coeffs_1" : [ -0.293026, 0.507294, -0.024485, -0.133482, -0.151607, -0.516155 ],
			"coeffs_2" : [ 0.135592, -0.283773, -0.292087, -0.192420, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.298674, 0.295654, 0.431074, 0.485064, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.354698, -0.015218, 0.148272, 0.388307, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.306837, 0.380636, 0.066880, -0.273517, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.268226, 0.290985, -0.476109, 0.154683, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.104388, -0.346620, 0.241036, -0.548128, -0.518286, 0.488080 ],
			"intercepts" : [ 0.509935, -0.521098, -0.291202, -0.555359, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.237038 ],
			"coeffs_1" : [ -0.137331 ],
			"coeffs_2" : [ -0.572166 ],
			"coeffs_3" : [ -0.612542 ],
			"coeffs_4" : [ -0.747540 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.512131 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 442, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.131032, 0.286392, -0.267199, -0.108202 ],
			"coeffs_1" : [ 0.045594, -0.477790, 0.168843, -0.021016 ],
			"coeffs_2" : [ 0.482559, 0.081330, 0.523404, -0.154364 ],
			"coeffs_3" : [ 0.574768, -0.628393, -0.295162, 0.190465 ],
			"coeffs_4" : [ 0.268511, -0.367336, -0.333161, -0.560068 ],
			"coeffs_5" : [ 0.209777, -0.700635, -0.104379, -0.012267 ],
			"coeffs_6" : [ -0.203756, -0.648117, -0.356110, 0.469555 ],
			"coeffs_7" : [ -0.122383, -0.051880, -0.607098, -0.015242 ],
			"coeffs_8" : [ -0.274237, 0.183840, -0.131723, 0.216712 ],
			"coeffs_9" : [ -0.509022, 0.516443, -0.479322, 0.286191 ],
			"intercepts" : [ -0.544459, 0.304366, 0.133286, 0.529506 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.367724, -0.605683, 0.283791, 0.202714, 0.536176, 0.537462, 0.461947, -0.477982 ],
			"coeffs_1" : [ 0.386581, 0.521886, -0.378421, 0.302178, 0.149630, 0.000585, 0.081375, 0.347268 ],
			"coeffs_2" : [ -0.589907, 0.074877, 0.292219, 0.406786, -0.592709, 0.475076, -0.403862, -0.583005 ],
			"coeffs_3" : [ 0.761143, 0.596182, -0.034089, -0.605652, 0.008822, 0.610148, -0.588846, 0.254856 ],
			"intercepts" : [ 0.400537, 0.330500, 0.688683, -0.413064, 0.352652, 0.417735, 0.429392, -0.075709 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.653271, 0.238752, -0.044147, -0.124039, -0.480768, -0.548783 ],
			"coeffs_1" : [ -0.293026, 0.507294, -0.024485, -0.133482, -0.151607, -0.516155 ],
			"coeffs_2" : [ 0.135592, -0.283773, -0.292087, -0.192420, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.298674, 0.295654, 0.431074, 0.485064, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.354698, -0.015218, 0.148272, 0.388307, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.306837, 0.380636, 0.066880, -0.273517, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.268226, 0.290985, -0.476109, 0.154683, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.104388, -0.346620, 0.241036, -0.548128, -0.518286, 0.488080 ],
			"intercepts" : [ 0.509935, -0.521098, -0.291202, -0.555359, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.237038 ],
			"coeffs_1" : [ -0.137331 ],
			"coeffs_2" : [ -0.572166 ],
			"coeffs_3" : [ -0.612542 ],
			"coeffs_4" : [ -0.747540 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.512131 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 442
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.131032, 0.286392, -0.267199, -0.108202 ],
			"coeffs_1" : [ 0.045594, -0.47779, 0.168843, -0.021016 ],
			"coeffs_2" : [ 0.482559, 0.08133, 0.523404, -0.154364 ],
			"coeffs_3" : [ 0.574768, -0.628393, -0.295162, 0.190465 ],
			"coeffs_4" : [ 0.268511, -0.367336, -0.333161, -0.560068 ],
			"coeffs_5" : [ 0.209777, -0.700635, -0.104379, -0.012267 ],
			"coeffs_6" : [ -0.203756, -0.648117, -0.35611, 0.469555 ],
			"coeffs_7" : [ -0.122383, -0.05188, -0.607098, -0.015242 ],
			"coeffs_8" : [ -0.274237, 0.18384, -0.131723, 0.216712 ],
			"coeffs_9" : [ -0.509022, 0.516443, -0.479322, 0.286191 ],
			"intercepts" : [ -0.544459, 0.304366, 0.133286, 0.529506 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.367724, -0.605683, 0.283791, 0.202714, 0.536176, 0.537462, 0.461947, -0.477982 ],
			"coeffs_1" : [ 0.386581, 0.521886, -0.378421, 0.302178, 0.14963, 0.000585, 0.081375, 0.347268 ],
			"coeffs_2" : [ -0.589907, 0.074877, 0.292219, 0.406786, -0.592709, 0.475076, -0.403862, -0.583005 ],
			"coeffs_3" : [ 0.761143, 0.596182, -0.034089, -0.605652, 0.008822, 0.610148, -0.588846, 0.254856 ],
			"intercepts" : [ 0.400537, 0.3305, 0.688683, -0.413064, 0.352652, 0.417735, 0.429392, -0.075709 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.653271, 0.238752, -0.044147, -0.124039, -0.480768, -0.548783 ],
			"coeffs_1" : [ -0.293026, 0.507294, -0.024485, -0.133482, -0.151607, -0.516155 ],
			"coeffs_2" : [ 0.135592, -0.283773, -0.292087, -0.19242, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.298674, 0.295654, 0.431074, 0.485064, 0.47569, 0.371699 ],
			"coeffs_4" : [ -0.354698, -0.015218, 0.148272, 0.388307, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.306837, 0.380636, 0.06688, -0.273517, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.268226, 0.290985, -0.476109, 0.154683, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.104388, -0.34662, 0.241036, -0.548128, -0.518286, 0.48808 ],
			"intercepts" : [ 0.509935, -0.521098, -0.291202, -0.555359, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.237038 ],
			"coeffs_1" : [ -0.137331 ],
			"coeffs_2" : [ -0.572166 ],
			"coeffs_3" : [ -0.612542 ],
			"coeffs_4" : [ -0.74754 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.512131 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-0.7974812  -0.6756658  -0.8031168  -0.66699886 -0.79074717 -0.9108336
 -0.69126534 -0.94303507 -0.6474492  -0.5967443  -0.83444196 -0.90491694
 -0.6857741  -0.6490855  -0.7271544  -1.2883799  -0.84531367 -0.88183993
 -0.6287722  -0.6205768  -0.8936992  -0.7167489  -0.7636438  -0.56180227
 -0.7147653  -0.6562459  -0.97801435 -0.9051372  -0.62722826 -1.1276822
 -0.6344864  -0.7853132  -0.70172954 -1.0277338  -0.7031467  -0.6529575
 -0.8088381  -0.76967376 -0.9990038  -0.5322128  -0.6137601  -0.88419604
 -0.6583019  -0.73957044 -0.8193609  -0.8268734  -0.7113313  -0.71523947
 -0.6447888  -0.82748514 -0.8345813  -0.63741314 -0.8748255  -0.6984544
 -0.7714255  -0.8151293  -0.62851036 -0.86658627 -0.79990983 -0.6407352
 -0.8832605  -0.6540234  -0.6232167  -0.7598849  -0.819211   -0.6195896
 -0.53845435 -0.6020086  -0.70024216 -0.874584   -0.8459767  -0.7731695
 -0.67221135 -0.77267796 -0.79336214 -0.6730925  -0.8029418  -0.76301575
 -0.7196318  -0.6895445  -0.828617   -0.6443223  -0.8209419  -0.64280605
 -0.68471944 -1.0698903  -0.6062048  -0.68581694 -0.91444606 -0.82256377
 -0.8876326  -0.6012631  -0.88520837 -0.65391576 -0.7379645  -0.7184327
 -0.6010784  -0.6818935  -0.78878385 -0.7405129  -0.5658045  -0.7993454
 -0.73126936 -1.2172594  -0.96075255 -0.7347765  -0.749445   -0.795426
 -0.7946893  -0.5297444  -0.8446164  -0.8112918  -0.6325419  -0.64126545
 -0.66623724 -0.78398544 -0.9128644  -0.6066812  -0.65461874 -0.988649
 -0.6794365  -0.7362029  -0.83639365 -0.7917672  -0.78341675 -0.76753664
 -0.8748592  -0.8624177  -0.67257416 -0.64755476 -0.7144238  -0.63253635
 -0.57547903 -0.7564724  -0.89865273 -1.0404242  -0.89269745 -0.82465523
 -0.8123342  -0.7019171  -0.81440675 -0.5981941  -0.8605905  -0.88302433
 -0.83866924 -0.9933552  -0.89142376 -0.5884065  -0.8322075  -0.58481216
 -0.8629053  -0.7546437  -0.8596233  -0.6743674  -0.74586403 -0.94604313
 -0.7490835  -0.5611925  -0.5476555  -1.012184   -0.5975585  -0.9297009
 -0.6276009  -0.82709444 -0.70147884 -0.83993965 -0.66921365 -0.60599494
 -0.73496383 -0.61712646 -0.6358429  -0.683771   -0.5893177  -0.81615394
 -0.70947653 -0.7847067  -0.71205616 -0.5981941  -0.7714019  -0.7460233
 -0.7908538  -0.5981941  -1.044767   -0.8037349  -0.7228825  -0.5865958
 -0.9105225  -0.8769237  -0.9438799  -0.6548103  -0.6200723  -0.7424983
 -0.8226318  -0.5981941  -0.996686   -0.83667064 -0.6310108  -0.71832645
 -0.9117588  -0.7397896  -0.6607832  -0.8158727  -0.87291145 -0.90091616
 -0.6932658  -0.67808986 -0.81947905 -0.7694241  -0.7312282  -0.7202821
 -1.1437078  -0.7660388  -0.63864607 -0.74988174 -0.8616464  -0.71615064
 -0.8725089  -0.6970755  -0.53562164 -0.94649714 -0.63804674 -0.5879477
 -0.8632213  -0.7563033  -0.792992   -0.6604287  -0.7240237  -0.78330797
 -0.6287662  -0.7625376  -0.6465103  -0.6911424  -0.72215486 -0.64177865
 -0.8125012  -0.7131192  -0.80703676 -0.6637795  -0.77679724 -0.67536855
 -0.8964435  -0.6350779  -0.62262505 -0.68852687 -0.7578158  -0.77252614
 -0.56266606 -0.7080428  -0.90007657 -0.93676907 -0.6709544  -0.97363675
 -0.84788215 -0.53844    -0.79557127 -0.9134946  -0.6780342  -0.7698835
 -0.5981941  -0.66283554 -0.5660703  -0.8223905  -1.035842   -0.7461305
 -0.7576103  -0.81487894 -0.8848152  -0.5981941  -0.8869069  -0.587789
 -0.85418296 -0.6640907  -0.58034545 -0.6811159  -0.76607156 -0.8153037
 -0.98826134 -1.0590503  -0.5715702  -0.6849077  -0.8963929  -0.8080195
 -0.7033391  -0.75532633 -0.6842492  -0.6743207  -0.91761625 -0.7283122
 -0.8718145  -0.8999764  -0.7778413  -0.9539435  -0.8564848  -1.0298787
 -0.8172227  -0.7057586  -0.64787114 -0.57463145 -0.6280448  -0.68758845
 -0.69490373 -0.6602599  -0.67559797 -0.91429204 -1.0111843  -0.7225088
 -0.7000251  -0.5762297  -0.8507985  -0.66642296 -0.8380857  -0.5981941
 -0.68671054 -0.90395546 -0.82125336 -0.6274368  -0.6531927  -0.64830744
 -0.69102156 -1.0246391  -0.8396395  -0.8350507  -0.6886807  -0.6351728
 -0.79551274 -0.5981941  -0.58565044 -0.939331   -0.71227515 -0.94520307
 -0.9245831  -0.62276417 -0.77714014 -0.6687968  -0.7731245  -0.62554115
 -0.72275645 -0.78693336 -0.7382729  -0.560059   -0.99257445 -1.0121746
 -0.8432222  -0.8993441  -0.7752836  -0.66826904 -0.85673326 -0.55264217
 -0.867735   -0.5950506  -0.8213608  -0.755821   -0.89990675 -0.6180125
 -0.7814104  -0.77110636 -0.8288285  -0.86711967 -0.7963203  -0.6181256
 -0.80532837 -0.9715413  -0.7131137  -0.7396009  -0.6578532  -0.7519694
 -0.7682499  -0.8920728  -0.7183962  -0.553733   -0.60411507 -0.79661685
 -0.6047251  -0.89036447 -0.83282757 -0.65607274 -0.84927917 -1.1417452
 -0.82699156 -1.038296   -0.9145531  -0.6268119  -0.9021635  -0.8208802
 -0.7879888  -0.8493165  -0.7939065  -0.74277717 -0.7429023  -0.61702615
 -0.65863115 -0.7115017  -0.7417048  -0.77996844 -0.75123316 -0.6784007
 -0.8135536  -1.0479141  -0.79572946 -0.82675725 -0.78279006 -0.9670837
 -0.5336261  -0.71615386 -0.7803589  -0.97248894 -0.71536714 -0.74811286
 -0.739416   -0.98878336 -0.82716006 -0.68668395 -0.6476381  -0.6988409
 -0.790918   -0.6735627  -1.0386401  -0.6244519  -0.5935292  -0.8388836
 -0.538077   -0.8015903  -1.0972317  -0.94885564 -0.6021426  -0.8637204
 -0.5549444  -0.8782466  -0.8310209  -0.71058726 -0.5981941  -0.87750363
 -0.61042535 -0.6198177  -0.69888544 -0.56956565 -0.79403824 -0.7337236
 -0.5981941  -0.6396686  -0.8682222  -0.62169135]
('OPERATION_END_ELAPSED', 0.005, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-0.7974815  -0.6756665  -0.80311686 -0.6669985  -0.7907469  -0.9108353
 -0.6912658  -0.94303775 -0.6474496  -0.59674466 -0.8344431  -0.9049163
 -0.6857747  -0.64908576 -0.72715396 -1.2883806  -0.84531456 -0.8818393
 -0.6287726  -0.62057716 -0.89370066 -0.7167495  -0.7636437  -0.56180197
 -0.7147653  -0.65624577 -0.97801614 -0.9051386  -0.6272286  -1.1276871
 -0.63448685 -0.78531426 -0.70173013 -1.0277355  -0.7031475  -0.6529575
 -0.8088383  -0.76967484 -0.9990071  -0.53221273 -0.6137605  -0.8841976
 -0.65830195 -0.7395711  -0.8193604  -0.82687336 -0.7113322  -0.7152403
 -0.6447888  -0.8274844  -0.83458227 -0.63741374 -0.87482476 -0.6984545
 -0.77142566 -0.8151305  -0.6285107  -0.8665879  -0.79991066 -0.6407351
 -0.88326204 -0.6540239  -0.62321675 -0.75988406 -0.81921184 -0.6195901
 -0.5384541  -0.6020085  -0.70024264 -0.87458515 -0.8459778  -0.7731699
 -0.67221117 -0.7726776  -0.7933625  -0.6730926  -0.8029429  -0.7630168
 -0.7196324  -0.689544   -0.8286168  -0.6443224  -0.8209412  -0.64280665
 -0.6847202  -1.0698924  -0.6062051  -0.6858169  -0.91444755 -0.8225647
 -0.88763404 -0.60126245 -0.88520926 -0.65391636 -0.7379643  -0.7184336
 -0.60107815 -0.6818936  -0.78878385 -0.74051225 -0.56580454 -0.79934585
 -0.7312693  -1.2172604  -0.96075237 -0.73477703 -0.74944603 -0.7954254
 -0.7946899  -0.5297449  -0.8446175  -0.8112911  -0.632542   -0.64126617
 -0.6662377  -0.78398466 -0.9128639  -0.6066807  -0.6546189  -0.98865044
 -0.6794369  -0.7362027  -0.83639306 -0.7917665  -0.7834177  -0.76753724
 -0.87486064 -0.8624169  -0.6725748  -0.6475548  -0.7144239  -0.63253695
 -0.5754788  -0.75647336 -0.8986522  -1.040427   -0.892699   -0.82465583
 -0.81233466 -0.70191747 -0.8144072  -0.5981938  -0.86058986 -0.8830239
 -0.8386687  -0.9933555  -0.89142317 -0.58840674 -0.83220685 -0.584812
 -0.8629054  -0.75464445 -0.8596224  -0.67436737 -0.745864   -0.9460425
 -0.74908423 -0.5611923  -0.5476556  -1.0121835  -0.5975588  -0.9297001
 -0.6276015  -0.82709527 -0.7014792  -0.839941   -0.6692143  -0.60599464
 -0.7349633  -0.6171266  -0.63584316 -0.6837717  -0.5893174  -0.81615496
 -0.70947707 -0.7847074  -0.7120566  -0.5981938  -0.77140117 -0.74602264
 -0.7908541  -0.5981938  -1.0447675  -0.80373526 -0.72288305 -0.58659583
 -0.91052186 -0.8769253  -0.94387925 -0.65481067 -0.6200727  -0.74249893
 -0.82263094 -0.5981938  -0.9966874  -0.83667004 -0.63101107 -0.71832705
 -0.91175854 -0.73978984 -0.6607832  -0.8158736  -0.87291056 -0.90091527
 -0.6932658  -0.67809045 -0.8194784  -0.76942456 -0.7312287  -0.72028255
 -1.14371    -0.766039   -0.6386465  -0.7498824  -0.86164767 -0.7161507
 -0.8725083  -0.69707596 -0.5356216  -0.9464989  -0.638047   -0.58794785
 -0.8632221  -0.75630444 -0.79299307 -0.6604295  -0.7240244  -0.7833084
 -0.62876564 -0.76253825 -0.64650965 -0.6911426  -0.7221543  -0.6417791
 -0.8125018  -0.7131193  -0.8070365  -0.6637799  -0.77679753 -0.67536867
 -0.896443   -0.63507783 -0.6226253  -0.688527   -0.75781673 -0.7725272
 -0.5626666  -0.7080436  -0.9000758  -0.93676853 -0.67095435 -0.973636
 -0.84788144 -0.5384404  -0.79557174 -0.9134958  -0.6780348  -0.7698842
 -0.5981938  -0.66283566 -0.5660705  -0.82239103 -1.0358412  -0.7461314
 -0.75760996 -0.81487966 -0.8848164  -0.5981938  -0.8869064  -0.58778906
 -0.8541836  -0.66409135 -0.5803457  -0.68111527 -0.7660721  -0.8153043
 -0.98826057 -1.0590522  -0.57157093 -0.684908   -0.89639294 -0.8080206
 -0.7033392  -0.7553272  -0.6842496  -0.6743199  -0.917618   -0.7283116
 -0.8718137  -0.8999756  -0.7778408  -0.9539424  -0.85648614 -1.029878
 -0.817222   -0.7057591  -0.6478715  -0.57463175 -0.6280451  -0.6875888
 -0.6949042  -0.66025996 -0.67559826 -0.91429216 -1.0111847  -0.7225082
 -0.7000257  -0.5762292  -0.8507999  -0.66642296 -0.8380859  -0.5981938
 -0.6867111  -0.90395474 -0.8212532  -0.627437   -0.65319276 -0.6483072
 -0.6910218  -1.0246406  -0.8396387  -0.8350501  -0.688681   -0.6351738
 -0.79551196 -0.5981938  -0.5856503  -0.9393301  -0.7122759  -0.94520426
 -0.92458385 -0.6227644  -0.77714074 -0.6687968  -0.7731255  -0.6255415
 -0.7227559  -0.7869338  -0.73827225 -0.56005883 -0.9925749  -1.012174
 -0.84322256 -0.89934456 -0.7752828  -0.6682683  -0.8567325  -0.5526421
 -0.86773616 -0.5950503  -0.8213614  -0.75582194 -0.8999082  -0.6180127
 -0.7814105  -0.7711071  -0.8288276  -0.8671198  -0.79632133 -0.6181253
 -0.8053291  -0.9715427  -0.7131138  -0.73960143 -0.65785336 -0.75196975
 -0.76824933 -0.8920722  -0.7183964  -0.553733   -0.60411537 -0.7966162
 -0.6047252  -0.8903659  -0.832829   -0.6560726  -0.84927845 -1.1417459
 -0.8269909  -1.0382977  -0.9145535  -0.62681234 -0.90216523 -0.82088107
 -0.78798777 -0.84931743 -0.7939074  -0.74277675 -0.7429025  -0.61702585
 -0.65863174 -0.7115026  -0.74170524 -0.77996945 -0.7512325  -0.67840135
 -0.81355476 -1.0479174  -0.7957287  -0.82675755 -0.7827909  -0.96708536
 -0.5336257  -0.71615434 -0.78035957 -0.97248876 -0.7153681  -0.74811226
 -0.7394162  -0.988786   -0.8271593  -0.68668467 -0.64763784 -0.6988415
 -0.7909172  -0.6735621  -1.0386398  -0.62445194 -0.59352905 -0.83888495
 -0.53807676 -0.8015896  -1.097231   -0.9488556  -0.6021426  -0.8637219
 -0.55494374 -0.8782478  -0.83102125 -0.71058667 -0.5981938  -0.8775046
 -0.61042523 -0.619818   -0.6988858  -0.5695659  -0.7940395  -0.7337242
 -0.5981938  -0.63966846 -0.86822146 -0.6216915 ]
('OPERATION_END_ELAPSED', 0.005, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'diabetes_quantized', 'size': 442, 'mse': 29308.818, 'mae': 152.89429, 'mape': 1.0067301, 'r2': -3.9425616058446957}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'diabetes_quantized', 'training_time_in_sec': 0.031, 'prediction_time_in_sec': 0.005}
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_quantized', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.544459 + -0.131032 * t."OUT_0"  + 0.045594 * t."OUT_1"  + 0.482559 * t."OUT_2"  + 0.574768 * t."OUT_3"  + 0.268511 * t."OUT_4"  + 0.209777 * t."OUT_5"  + -0.203756 
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_quantized', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_quantized', 'MLPRegressor', 'duckdb')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.512131 + -0.237038 * t."OUT_0"  + -0.137331 * t."OUT_1"  + -0.572166 * t."OUT_2"  + -0.612542 * t."OUT_3"  + -0.747540 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_quantized', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 442 entries, 0 to 441
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     442 non-null    float32
 1   X_1     442 non-null    float32
 2   X_2     442 non-null    float32
 3   X_3     442 non-null    float32
 4   X_4     442 non-null    float32
 5   X_5     442 non-null    float32
 6   X_6     442 non-null    float32
 7   X_7     442 non-null    float32
 8   X_8     442 non-null    float32
 9   X_9     442 non-null    float32
dtypes: float32(10)
memory usage: 20.7 KB
       X_0   X_1  X_2  X_3  X_4  X_5  X_6  X_7  X_8  X_9
index                                                   
0      7.0  10.0  8.0  6.0  1.0  2.0  1.0  5.0  6.0  3.0
1      4.0   0.0  1.0  3.0  4.0  3.0  9.0  2.0  0.0  0.0
2      9.0  10.0  8.0  5.0  1.0  2.0  2.0  5.0  5.0  2.0
3      0.0   0.0  4.0  2.0  6.0  7.0  2.0  7.0  6.0  4.0
4      5.0   0.0  2.0  6.0  5.0  6.0  6.0  5.0  2.0  1.0
...    ...   ...  ...  ...  ...  ...  ...  ...  ...  ...
437    7.0  10.0  6.0  8.0  4.0  5.0  3.0  5.0  7.0  5.0
438    4.0  10.0  4.0  0.0  8.0  9.0  3.0  7.0  3.0  8.0
439    7.0  10.0  4.0  6.0  2.0  4.0  3.0  4.0  1.0  6.0
440    2.0   0.0  7.0  5.0  6.0  6.0  3.0  7.0  8.0  2.0
441    2.0   0.0  0.0  0.0  9.0  7.0  9.0  2.0  4.0  5.0

[442 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 442 entries, 0 to 441
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      442 non-null    int64  
 1   Estimator  442 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 7.0 KB
     index  Estimator
0        0  -0.797481
1        1  -0.675667
2        2  -0.803117
3        3  -0.666999
4        4  -0.790747
..     ...        ...
437    437  -0.733724
438    438  -0.598194
439    439  -0.639668
440    440  -0.868221
441    441  -0.621692

[442 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_quantized', 'MLPRegressor') Estimator 6.215335017415733e-07
     index  SQL_Estimator  Py_Estimator     SQL_Error
426    426      -0.554944     -0.554944  6.556511e-07
427    427      -0.878248     -0.878247 -1.192093e-06
428    428      -0.831021     -0.831021 -3.576279e-07
429    429      -0.710587     -0.710587  5.960464e-07
430    430      -0.598194     -0.598194  2.980232e-07
431    431      -0.877505     -0.877504 -9.536743e-07
432    432      -0.610425     -0.610425  1.192093e-07
433    433      -0.619818     -0.619818 -2.980232e-07
434    434      -0.698886     -0.698885 -3.576279e-07
435    435      -0.569566     -0.569566 -2.384186e-07
436    436      -0.794039     -0.794038 -1.251698e-06
437    437      -0.733724     -0.733724 -5.960464e-07
438    438      -0.598194     -0.598194  2.980232e-07
439    439      -0.639668     -0.639669  1.192093e-07
440    440      -0.868221     -0.868222  7.152557e-07
441    441      -0.621692     -0.621691 -1.788139e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_quantized', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_quantized', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.544459 + -0.131032 * t."OUT_0"  + 0.045594 * t."OUT_1"  + 0.482559 * t."OUT_2"  + 0.574768 * t."OUT_3"  + 0.268511 * t."OUT_4"  + 0.209777 * t."OUT_5"  + -0.203756 
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_quantized', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_quantized', 'MLPRegressor', 'sqlite')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.512131 + -0.237038 * t."OUT_0"  + -0.137331 * t."OUT_1"  + -0.572166 * t."OUT_2"  + -0.612542 * t."OUT_3"  + -0.747540 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_quantized', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 442 entries, 0 to 441
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     442 non-null    float32
 1   X_1     442 non-null    float32
 2   X_2     442 non-null    float32
 3   X_3     442 non-null    float32
 4   X_4     442 non-null    float32
 5   X_5     442 non-null    float32
 6   X_6     442 non-null    float32
 7   X_7     442 non-null    float32
 8   X_8     442 non-null    float32
 9   X_9     442 non-null    float32
dtypes: float32(10)
memory usage: 20.7 KB
       X_0   X_1  X_2  X_3  X_4  X_5  X_6  X_7  X_8  X_9
index                                                   
0      7.0  10.0  8.0  6.0  1.0  2.0  1.0  5.0  6.0  3.0
1      4.0   0.0  1.0  3.0  4.0  3.0  9.0  2.0  0.0  0.0
2      9.0  10.0  8.0  5.0  1.0  2.0  2.0  5.0  5.0  2.0
3      0.0   0.0  4.0  2.0  6.0  7.0  2.0  7.0  6.0  4.0
4      5.0   0.0  2.0  6.0  5.0  6.0  6.0  5.0  2.0  1.0
...    ...   ...  ...  ...  ...  ...  ...  ...  ...  ...
437    7.0  10.0  6.0  8.0  4.0  5.0  3.0  5.0  7.0  5.0
438    4.0  10.0  4.0  0.0  8.0  9.0  3.0  7.0  3.0  8.0
439    7.0  10.0  4.0  6.0  2.0  4.0  3.0  4.0  1.0  6.0
440    2.0   0.0  7.0  5.0  6.0  6.0  3.0  7.0  8.0  2.0
441    2.0   0.0  0.0  0.0  9.0  7.0  9.0  2.0  4.0  5.0

[442 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 442 entries, 0 to 441
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      442 non-null    int64  
 1   Estimator  442 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 7.0 KB
     index  Estimator
0        0  -0.797482
1        1  -0.675666
2        2  -0.803117
3        3  -0.666999
4        4  -0.790747
..     ...        ...
437    437  -0.733724
438    438  -0.598194
439    439  -0.639669
440    440  -0.868222
441    441  -0.621692

[442 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_quantized', 'MLPRegressor') Estimator 6.337439421163156e-07
     index  SQL_Estimator  Py_Estimator     SQL_Error
426    426      -0.554944     -0.554944  6.403909e-07
427    427      -0.878248     -0.878247 -1.235071e-06
428    428      -0.831021     -0.831021 -4.123452e-07
429    429      -0.710587     -0.710587  5.582696e-07
430    430      -0.598194     -0.598194  2.424336e-07
431    431      -0.877505     -0.877504 -9.645733e-07
432    432      -0.610425     -0.610425  4.721348e-08
433    433      -0.619818     -0.619818 -3.193160e-07
434    434      -0.698886     -0.698885 -4.043639e-07
435    435      -0.569566     -0.569566 -2.495486e-07
436    436      -0.794039     -0.794038 -1.242368e-06
437    437      -0.733724     -0.733724 -5.494208e-07
438    438      -0.598194     -0.598194  2.424336e-07
439    439      -0.639669     -0.639669  5.396722e-08
440    440      -0.868222     -0.868222  6.480168e-07
441    441      -0.621692     -0.621691 -2.500121e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_quantized', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_quantized_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_quantized', 'MLPRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.544459 + -0.131032 * t."OUT_0"  + 0.045594 * t."OUT_1"  + 0.482559 * t."OUT_2"  + 0.574768 * t."OUT_3"  + 0.268511 * t."OUT_4"  + 0.209777 * t."OUT_5"  + -0.203756 
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_quantized', 'MLPRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_quantized', 'MLPRegressor', 'pgsql')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.512131 + -0.237038 * t."OUT_0"  + -0.137331 * t."OUT_1"  + -0.572166 * t."OUT_2"  + -0.612542 * t."OUT_3"  + -0.747540 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_quantized', 'MLPRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
