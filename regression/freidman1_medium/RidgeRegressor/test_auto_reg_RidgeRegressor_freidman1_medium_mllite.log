         X_0       X_1       X_2  ...       X_8       X_9     target
0   0.456887  0.295923  0.591968  ...  0.761317  0.245544  15.370928
1   0.716619  0.420279  0.400670  ...  0.167246  0.133911  13.065349
2   0.140833  0.617769  0.186105  ...  0.648067  0.563459  15.524062
3   0.071195  0.704806  0.073220  ...  0.725143  0.940551  12.395770
4   0.710411  0.866302  0.056103  ...  0.666595  0.305953  19.010028
..       ...       ...       ...  ...       ...       ...        ...
95  0.759884  0.645603  0.858346  ...  0.340241  0.086284  20.439077
96  0.133898  0.993722  0.247951  ...  0.685693  0.539265  14.384506
97  0.907576  0.735434  0.379983  ...  0.264531  0.516615  14.885318
98  0.368356  0.189593  0.403483  ...  0.462841  0.813023  11.119547
99  0.268993  0.202785  0.253928  ...  0.743187  0.015995   4.502946

[100 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[0.4568872  0.2959234  0.59196806 0.6449268  0.92630494 0.9157275
  0.99709725 0.2905369  0.7613175  0.24554443]
 [0.7166186  0.420279   0.40067008 0.24398686 0.46325052 0.05229123
  0.34726295 0.39939457 0.16724615 0.13391146]
 [0.14083336 0.61776936 0.18610482 0.667265   0.83628976 0.8805156
  0.79894525 0.1980786  0.6480668  0.5634588 ]
 [0.07119486 0.70480555 0.07321981 0.22164722 0.9933174  0.43409562
  0.48198017 0.13922417 0.72514343 0.9405507 ]
 [0.71041054 0.8663024  0.05610295 0.50554484 0.13280703 0.3171181
  0.52081394 0.3842079  0.6665948  0.30595312]] [15.370928 13.06535  15.524062 12.39577  19.010029]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.006, 'TRAINING')
{ ,   , }
{ ,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"equations" : {
			"intercept" : -1.052393,
			"coeffs" : [ 6.345413, 7.447799, 1.872425, 10.319371, 4.512089, 0.862391, -0.339141, 0.239347, -0.654346, 0.905860 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_medium.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 10 },
	"equations" : {
			"intercept" : -1.052393,
			"coeffs" : [ 6.345413, 7.447799, 1.872425, 10.319371, 4.512089, 0.862391, -0.339141, 0.239347, -0.654346, 0.905860 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 100
	},
	"equations" : 	{
		"coeffs" : [ 6.345413, 7.447799, 1.872425, 10.319371, 4.512089, 0.862391, -0.339141, 0.239347, -0.654346, 0.90586 ],
		"intercept" : -1.052393
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[16.23931   12.01803   16.072067  12.176648  15.858469  18.12112
 14.713088  10.050347  13.959816  14.705837  11.924613  16.888884
 12.598078  18.92888   20.96733   12.01029   12.057324  13.606574
 19.900549  17.195639  21.15151   12.522821  20.793118  17.99106
 17.165564   8.620377  19.602407  20.589567  17.083126   6.9314713
  9.899747  11.390421  21.47093   24.375256  14.83099   10.051433
  9.636109   7.9708443 14.0762615  7.1622076 11.858088  14.179319
 16.296024  15.041727  16.592772  17.081732  17.35248    9.348887
 17.641422  11.139497  16.524796  17.222902  20.72203   21.383863
 11.332257   9.846342  16.673471  11.268307  11.007547  17.631865
 17.742205   7.9675393 11.738978  13.048882  17.495697  13.90982
 19.822195  16.74912    9.5212    11.645431   5.0562806 15.326905
 21.271181  13.761703  19.675299  15.167563  18.934603  14.53164
 18.42836   19.706959  12.230296   9.720068  13.021149  17.602516
 16.593058  13.529529  11.578797  23.382967   5.5986104 15.728923
  7.8062015  5.812352  12.27866   23.986006  11.603569  17.922775
 17.068588  17.635248  13.153525   4.181925 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[16.239311  12.018031  16.072067  12.17665   15.858469  18.121122
 14.713088  10.050348  13.959818  14.705838  11.924614  16.888885
 12.598079  18.928879  20.96733   12.010292  12.057325  13.606575
 19.900549  17.19564   21.151512  12.522822  20.79312   17.99106
 17.165565   8.620378  19.602407  20.589567  17.083126   6.931472
  9.899747  11.390422  21.47093   24.375257  14.83099   10.051434
  9.63611    7.9708447 14.0762615  7.1622086 11.858089  14.179319
 16.296024  15.041727  16.592773  17.081732  17.35248    9.348888
 17.641424  11.139497  16.524796  17.222904  20.722034  21.383865
 11.332258   9.846343  16.673473  11.268308  11.007549  17.631865
 17.742205   7.9675407 11.738979  13.048882  17.495699  13.909821
 19.822195  16.74912    9.5212    11.6454315  5.0562816 15.326907
 21.271183  13.7617035 19.675299  15.167564  18.9346    14.53164
 18.428362  19.706959  12.230296   9.720069  13.02115   17.602514
 16.593058  13.529529  11.578798  23.382967   5.598612  15.728923
  7.806202   5.812352  12.278661  23.986008  11.60357   17.922775
 17.068588  17.635248  13.153525   4.181926 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'freidman1_medium', 'size': 100, 'mse': 4.0858703, 'mae': 1.6037705, 'mape': 0.12733637, 'r2': 0.8290562147809749}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_medium.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'freidman1_medium', 'training_time_in_sec': 0.006, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_medium_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_medium', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.052393 + 6.345413 * t."X_0" + 7.447799 * t."X_1" + 1.872425 * t."X_2" + 10.319371 * t."X_3" + 4.512089 * t."X_4" + 0.862391 * t."X_5" + -0.339141 * t."X_6" + 0.239347 * t."X_7" + -0.654346 * t."X_8" + 0.905860 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman1_medium', 'RidgeRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_medium', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.052393 + 6.345413 * t."X_0" + 7.447799 * t."X_1" + 1.872425 * t."X_2" + 10.319371 * t."X_3" + 4.512089 * t."X_4" + 0.862391 * t."X_5" + -0.339141 * t."X_6" + 0.239347 * t."X_7" + -0.654346 * t."X_8" + 0.905860 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman1_medium', 'RidgeRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.456887  0.295923  0.591968  ...  0.290537  0.761317  0.245544
1      0.716619  0.420279  0.400670  ...  0.399395  0.167246  0.133911
2      0.140833  0.617769  0.186105  ...  0.198079  0.648067  0.563459
3      0.071195  0.704806  0.073220  ...  0.139224  0.725143  0.940551
4      0.710411  0.866302  0.056103  ...  0.384208  0.666595  0.305953
...         ...       ...       ...  ...       ...       ...       ...
95     0.759884  0.645603  0.858346  ...  0.314409  0.340241  0.086284
96     0.133898  0.993722  0.247951  ...  0.342368  0.685693  0.539265
97     0.907576  0.735434  0.379983  ...  0.265155  0.264531  0.516615
98     0.368356  0.189593  0.403483  ...  0.840440  0.462841  0.813023
99     0.268993  0.202785  0.253928  ...  0.076708  0.743187  0.015995

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  16.239311
1       1  12.018031
2       2  16.072067
3       3  12.176650
4       4  15.858469
..    ...        ...
95     95  17.922775
96     96  17.068588
97     97  17.635248
98     98  13.153525
99     99   4.181926

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_medium', 'RidgeRegressor') Estimator 8.535385131835938e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      16.593058     16.593058  0.000000e+00
85     85      13.529529     13.529529  0.000000e+00
86     86      11.578798     11.578797  9.536743e-07
87     87      23.382967     23.382967  0.000000e+00
88     88       5.598612      5.598610  1.430511e-06
89     89      15.728923     15.728923  0.000000e+00
90     90       7.806202      7.806201  4.768372e-07
91     91       5.812352      5.812352  0.000000e+00
92     92      12.278661     12.278660  9.536743e-07
93     93      23.986008     23.986006  1.907349e-06
94     94      11.603570     11.603569  9.536743e-07
95     95      17.922775     17.922775  0.000000e+00
96     96      17.068588     17.068588  0.000000e+00
97     97      17.635248     17.635248  0.000000e+00
98     98      13.153525     13.153525  0.000000e+00
99     99       4.181926      4.181925  9.536743e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_medium', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_medium_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_medium', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.052393 + 6.345413 * t."X_0" + 7.447799 * t."X_1" + 1.872425 * t."X_2" + 10.319371 * t."X_3" + 4.512089 * t."X_4" + 0.862391 * t."X_5" + -0.339141 * t."X_6" + 0.239347 * t."X_7" + -0.654346 * t."X_8" + 0.905860 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman1_medium', 'RidgeRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_medium', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.052393 + 6.345413 * t."X_0" + 7.447799 * t."X_1" + 1.872425 * t."X_2" + 10.319371 * t."X_3" + 4.512089 * t."X_4" + 0.862391 * t."X_5" + -0.339141 * t."X_6" + 0.239347 * t."X_7" + -0.654346 * t."X_8" + 0.905860 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman1_medium', 'RidgeRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
 4   X_4     100 non-null    float32
 5   X_5     100 non-null    float32
 6   X_6     100 non-null    float32
 7   X_7     100 non-null    float32
 8   X_8     100 non-null    float32
 9   X_9     100 non-null    float32
dtypes: float32(10)
memory usage: 4.7 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.456887  0.295923  0.591968  ...  0.290537  0.761317  0.245544
1      0.716619  0.420279  0.400670  ...  0.399395  0.167246  0.133911
2      0.140833  0.617769  0.186105  ...  0.198079  0.648067  0.563459
3      0.071195  0.704806  0.073220  ...  0.139224  0.725143  0.940551
4      0.710411  0.866302  0.056103  ...  0.384208  0.666595  0.305953
...         ...       ...       ...  ...       ...       ...       ...
95     0.759884  0.645603  0.858346  ...  0.314409  0.340241  0.086284
96     0.133898  0.993722  0.247951  ...  0.342368  0.685693  0.539265
97     0.907576  0.735434  0.379983  ...  0.265155  0.264531  0.516615
98     0.368356  0.189593  0.403483  ...  0.840440  0.462841  0.813023
99     0.268993  0.202785  0.253928  ...  0.076708  0.743187  0.015995

[100 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0  16.239309
1       1  12.018031
2       2  16.072069
3       3  12.176649
4       4  15.858468
..    ...        ...
95     95  17.922774
96     96  17.068588
97     97  17.635248
98     98  13.153526
99     99   4.181926

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_medium', 'RidgeRegressor') Estimator 9.44485194018796e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
84     84      16.593057     16.593058 -6.521831e-07
85     85      13.529528     13.529529 -4.497108e-07
86     86      11.578797     11.578797  5.757472e-08
87     87      23.382968     23.382967  5.355099e-07
88     88       5.598611      5.598610  9.752086e-07
89     89      15.728923     15.728923  5.629313e-08
90     90       7.806202      7.806201  1.618223e-07
91     91       5.812352      5.812352  2.787998e-07
92     92      12.278661     12.278660  1.176930e-06
93     93      23.986006     23.986006  6.815632e-08
94     94      11.603568     11.603569 -8.900055e-07
95     95      17.922774     17.922775 -1.756990e-06
96     96      17.068588     17.068588  4.575293e-08
97     97      17.635248     17.635248 -5.227043e-07
98     98      13.153526     13.153525  1.113780e-06
99     99       4.181926      4.181925  9.997672e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_medium', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman1_medium_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_medium', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.052393 + 6.345413 * t."X_0" + 7.447799 * t."X_1" + 1.872425 * t."X_2" + 10.319371 * t."X_3" + 4.512089 * t."X_4" + 0.862391 * t."X_5" + -0.339141 * t."X_6" + 0.239347 * t."X_7" + -0.654346 * t."X_8" + 0.905860 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman1_medium', 'RidgeRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_medium', 'RidgeRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   -1.052393 + 6.345413 * t."X_0" + 7.447799 * t."X_1" + 1.872425 * t."X_2" + 10.319371 * t."X_3" + 4.512089 * t."X_4" + 0.862391 * t."X_5" + -0.339141 * t."X_6" + 0.239347 * t."X_7" + -0.654346 * t."X_8" + 0.905860 * t."X_9" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman1_medium', 'RidgeRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
