          X_0          X_1       X_2        X_3    target
0   45.688718   609.092549  0.591968   7.449268  1.444753
1   92.630496  1621.621954  0.997097   3.905369  1.513570
2   76.131749   526.792001  0.716619   5.202790  1.371797
3   40.067007   524.247515  0.463251   1.522912  1.407287
4   34.726296   778.125942  0.167246   2.339115  1.310030
..        ...          ...       ...        ...       ...
95  22.116345  1162.774063  0.675740   4.934592  1.542656
96  59.325419  1558.844569  0.742170   4.222862  1.519563
97  74.947222  1754.316103  0.366207   1.961987  1.454661
98  52.067586   534.256140  0.155164   8.526538  1.009971
99   0.743929   167.010742  0.924844  10.614025  1.565980

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[4.5688717e+01 6.0909253e+02 5.9196806e-01 7.4492683e+00]
 [9.2630493e+01 1.6216219e+03 9.9709725e-01 3.9053690e+00]
 [7.6131752e+01 5.2679199e+02 7.1661860e-01 5.2027898e+00]
 [4.0067005e+01 5.2424750e+02 4.6325052e-01 1.5229123e+00]
 [3.4726295e+01 7.7812592e+02 1.6724615e-01 2.3391147e+00]] [1.4447532 1.5135704 1.3717965 1.4072871 1.3100302]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.009, 'TRAINING')
{ "alpha" : 0.0000001,   , }
{ "alpha" : 0.0000001,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : 1.042949,
			"coeffs" : [ -0.004623, 0.000215, 0.567229, 0.008383 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_original_option_1.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { "alpha" : 0.0000001,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"equations" : {
			"intercept" : 1.042949,
			"coeffs" : [ -0.004623, 0.000215, 0.567229, 0.008383 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"equations" : 	{
		"coeffs" : [ -0.004623, 0.000215, 0.567229, 0.008383 ],
		"intercept" : 1.042949
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "alpha" : 0.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[1.361088   1.562158   1.2545068  1.2461207  1.164407   1.3920473
 1.4712397  1.0764203  1.7223171  1.3946979  1.128846   1.4561477
 1.3063809  1.2153819  1.3714222  0.9324975  1.3261844  1.2442272
 1.4956747  1.3381732  1.2807564  1.7143505  1.2373998  1.3617754
 0.92417425 1.5673339  1.4543716  1.4385666  1.268787   1.3074183
 1.4648734  1.3108251  1.3819001  1.4041946  1.2565498  1.4240316
 1.1769627  1.6793275  1.4546102  1.4174093  1.4158295  1.4068524
 1.0742581  1.3695805  1.2176404  1.9545251  0.81961375 1.6937673
 1.4996451  1.2138081  1.4633423  1.1271017  1.6459787  0.945436
 1.3936641  1.3487083  1.2463515  1.190351   1.5161759  1.6005673
 1.6533184  1.4939904  1.4783144  1.2670697  1.2161334  1.4020914
 1.2058957  1.2620114  1.4926394  1.2672923  1.543571   1.1152486
 0.98329747 1.1305076  1.5941039  1.1620423  1.3779385  1.1025255
 1.4248005  1.1606463  1.7893035  1.0154135  1.5707899  1.7156982
 1.1335412  0.872491   1.2900277  1.1677768  1.535275   1.0917602
 1.2388507  0.84957546 1.1788539  1.181007   1.70238    1.6157022
 1.56067    1.298325   1.0767494  1.6890367 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
('OPERATION_START', 'PREDICT')
[1.3609135  1.561688   1.254354   1.2459681  1.1641821  1.3917223
 1.4707863  1.0761197  1.722178   1.3945986  1.1284014  1.4559633
 1.3061996  1.2149388  1.3710138  0.93238866 1.3261229  1.2440333
 1.4953578  1.3376682  1.2802663  1.7140316  1.2372221  1.3616686
 0.9238697  1.5672561  1.4540821  1.4382331  1.268409   1.3069973
 1.4645102  1.3107611  1.3816307  1.4039445  1.2562239  1.4237691
 1.1766406  1.6790515  1.4543568  1.41694    1.4157727  1.4067765
 1.0740496  1.3692801  1.2175641  1.954068   0.81948376 1.6933073
 1.499368   1.2136897  1.4629543  1.1269401  1.6457199  0.9452868
 1.3934405  1.3483515  1.2458745  1.1900463  1.5156771  1.600109
 1.6528127  1.493771   1.4781749  1.2669444  1.2159514  1.4018779
 1.2058331  1.2619181  1.4922282  1.2671574  1.5433048  1.1148872
 0.9831596  1.1304438  1.5936505  1.1619546  1.3775975  1.1024011
 1.4244641  1.1605657  1.7888273  1.0152122  1.5706401  1.7152754
 1.133346   0.872452   1.2898355  1.1676364  1.5350077  1.0917109
 1.2387131  0.84932315 1.1786193  1.1808596  1.7021825  1.6153675
 1.5602196  1.2978165  1.0765971  1.6889925 ]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman3_original', 'size': 100, 'mse': 0.030001692, 'mae': 0.12543087, 'mape': 0.5150569, 'r2': 0.6198100984349626}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_original_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': '{"alpha" : 0.0000001}', 'dataset': 'freidman3_original', 'training_time_in_sec': 0.009, 'prediction_time_in_sec': 0.002}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ -0.021189 ],
      "X_1" : [ 0.001132 ],
      "X_2" : [ -0.002312 ],
      "X_3" : [ 0.004519 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 0, 3, 2, 1 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_original_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_original_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_original', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman3_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.042949 + -0.004623 * t."X_0" + 0.000215 * t."X_1" + 0.567229 * t."X_2" + 0.008383 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman3_original', 'RidgeRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_original', 'RidgeRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman3_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.042949 + -0.004623 * t."X_0" + 0.000215 * t."X_1" + 0.567229 * t."X_2" + 0.008383 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman3_original', 'RidgeRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   1.360914
1       1   1.561688
2       2   1.254354
3       3   1.245968
4       4   1.164182
..    ...        ...
95     95   1.615368
96     96   1.560220
97     97   1.297817
98     98   1.076597
99     99   1.688993

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_original', 'RidgeRegressor') Estimator 0.0002546459436416626
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84       1.133346      1.133541  -0.000195
85     85       0.872452      0.872491  -0.000039
86     86       1.289835      1.290028  -0.000192
87     87       1.167636      1.167777  -0.000140
88     88       1.535008      1.535275  -0.000267
89     89       1.091711      1.091760  -0.000049
90     90       1.238713      1.238851  -0.000138
91     91       0.849323      0.849575  -0.000252
92     92       1.178619      1.178854  -0.000235
93     93       1.180860      1.181007  -0.000147
94     94       1.702183      1.702380  -0.000197
95     95       1.615368      1.615702  -0.000335
96     96       1.560220      1.560670  -0.000450
97     97       1.297817      1.298325  -0.000508
98     98       1.076597      1.076749  -0.000152
99     99       1.688993      1.689037  -0.000044
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_original', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_freidman3_original_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_original', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman3_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.042949 + -0.004623 * t."X_0" + 0.000215 * t."X_1" + 0.567229 * t."X_2" + 0.008383 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END ('freidman3_original', 'RidgeRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_original', 'RidgeRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman3_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  t."index" AS "index",
   1.042949 + -0.004623 * t."X_0" + 0.000215 * t."X_1" + 0.567229 * t."X_2" + 0.008383 * t."X_3" AS "Estimator"
  FROM model_input AS t
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END ('freidman3_original', 'RidgeRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   1.360914
1       1   1.561688
2       2   1.254354
3       3   1.245968
4       4   1.164182
..    ...        ...
95     95   1.615368
96     96   1.560220
97     97   1.297817
98     98   1.076597
99     99   1.688993

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_original', 'RidgeRegressor') Estimator 0.0002545736998291737
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84       1.133346      1.133541  -0.000195
85     85       0.872452      0.872491  -0.000039
86     86       1.289836      1.290028  -0.000192
87     87       1.167637      1.167777  -0.000140
88     88       1.535008      1.535275  -0.000267
89     89       1.091711      1.091760  -0.000049
90     90       1.238713      1.238851  -0.000137
91     91       0.849323      0.849575  -0.000252
92     92       1.178619      1.178854  -0.000234
93     93       1.180860      1.181007  -0.000147
94     94       1.702183      1.702380  -0.000197
95     95       1.615368      1.615702  -0.000334
96     96       1.560220      1.560670  -0.000450
97     97       1.297817      1.298325  -0.000508
98     98       1.076597      1.076749  -0.000152
99     99       1.688993      1.689037  -0.000044
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_original', 'RidgeRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
