          X_0          X_1       X_2        X_3    target
0   17.761710   423.498320  0.135270  10.148129  1.270144
1   45.437614   168.841197  0.343817   3.279963  0.906663
2   69.792322   473.447926  0.233546   3.411073  1.007753
3   67.667095   938.672588  0.652046   9.523154  1.460687
4   55.118421  1002.086076  0.726658   4.570617  1.495246
5   52.067586   534.256140  0.155164   8.526538  1.009971
6   50.992903   814.561313  0.257439   5.994628  1.332255
7   34.347892   205.928122  0.720020   9.414677  1.343157
8   63.010204   221.354390  0.814630   5.897069  1.234627
9   22.605109  1660.837003  0.731124   9.374556  1.552182
10  13.280703   643.716771  0.520814   4.842079  1.531203
11   7.606344  1112.226604  0.732761   6.140375  1.561464
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[1.77617092e+01 4.23498322e+02 1.35270208e-01 1.01481285e+01]
 [4.54376144e+01 1.68841202e+02 3.43817413e-01 3.27996254e+00]
 [6.97923203e+01 4.73447937e+02 2.33546272e-01 3.41107249e+00]
 [6.76670914e+01 9.38672607e+02 6.52046204e-01 9.52315426e+00]
 [5.51184196e+01 1.00208606e+03 7.26658285e-01 4.57061768e+00]] [1.2701445 0.9066629 1.0077531 1.4606868 1.4952464]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.01, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 12, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.104909, 0.418140, -0.369996, -0.036295 ],
			"coeffs_1" : [ 0.131317, -0.576250, 0.231650, 0.054364 ],
			"coeffs_2" : [ 0.710432, 0.153970, 0.700104, -0.108911 ],
			"coeffs_3" : [ 0.831653, -0.734272, -0.380510, 0.349487 ],
			"intercepts" : [ 0.423405, -0.414892, -0.458924, -0.644804 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.275665, -0.722299, -0.112743, 0.015322, -0.113751, -0.616148, -0.333935, 0.554062 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601759, 0.040321, -0.185891, 0.230481, -0.115525, 0.268744 ],
			"coeffs_2" : [ -0.439422, 0.594769, -0.486482, 0.362370, -0.476709, 0.415400, 0.185624, 0.617784 ],
			"coeffs_3" : [ -0.412807, -0.571705, 0.206271, 0.235034, 0.444413, 0.635370, 0.557955, -0.486289 ],
			"intercepts" : [ 0.422772, 0.552140, -0.426981, 0.296650, 0.209398, 0.080670, 0.114351, 0.378766 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530127, 0.082615, 0.237669, 0.345674, -0.527480, 0.422645 ],
			"coeffs_1" : [ -0.342336, -0.584245, 0.667306, 0.603910, -0.107134, -0.553332 ],
			"coeffs_2" : [ -0.023593, 0.594577, -0.441200, 0.227656, 0.264156, 0.355750 ],
			"coeffs_3" : [ 0.603053, -0.305116, 0.301352, 0.435560, 0.454506, -0.083906 ],
			"coeffs_4" : [ -0.549861, 0.296371, 0.007260, -0.124039, -0.449586, -0.587979 ],
			"coeffs_5" : [ -0.208390, 0.621902, 0.059093, -0.164886, -0.182966, -0.617859 ],
			"coeffs_6" : [ 0.239623, -0.168650, -0.223420, -0.156409, 0.239082, -0.483743 ],
			"coeffs_7" : [ -0.189304, 0.401613, 0.456519, 0.532541, 0.450994, 0.346864 ],
			"intercepts" : [ -0.251150, 0.087952, 0.209483, 0.417904, 0.295986, -0.027557 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.564555 ],
			"coeffs_1" : [ 0.669529 ],
			"coeffs_2" : [ 0.177574 ],
			"coeffs_3" : [ -0.293649 ],
			"coeffs_4" : [ -0.228143 ],
			"coeffs_5" : [ -0.435459 ],
			"intercepts" : [ 0.513186 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_sampled_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 12, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.104909, 0.418140, -0.369996, -0.036295 ],
			"coeffs_1" : [ 0.131317, -0.576250, 0.231650, 0.054364 ],
			"coeffs_2" : [ 0.710432, 0.153970, 0.700104, -0.108911 ],
			"coeffs_3" : [ 0.831653, -0.734272, -0.380510, 0.349487 ],
			"intercepts" : [ 0.423405, -0.414892, -0.458924, -0.644804 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.275665, -0.722299, -0.112743, 0.015322, -0.113751, -0.616148, -0.333935, 0.554062 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601759, 0.040321, -0.185891, 0.230481, -0.115525, 0.268744 ],
			"coeffs_2" : [ -0.439422, 0.594769, -0.486482, 0.362370, -0.476709, 0.415400, 0.185624, 0.617784 ],
			"coeffs_3" : [ -0.412807, -0.571705, 0.206271, 0.235034, 0.444413, 0.635370, 0.557955, -0.486289 ],
			"intercepts" : [ 0.422772, 0.552140, -0.426981, 0.296650, 0.209398, 0.080670, 0.114351, 0.378766 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530127, 0.082615, 0.237669, 0.345674, -0.527480, 0.422645 ],
			"coeffs_1" : [ -0.342336, -0.584245, 0.667306, 0.603910, -0.107134, -0.553332 ],
			"coeffs_2" : [ -0.023593, 0.594577, -0.441200, 0.227656, 0.264156, 0.355750 ],
			"coeffs_3" : [ 0.603053, -0.305116, 0.301352, 0.435560, 0.454506, -0.083906 ],
			"coeffs_4" : [ -0.549861, 0.296371, 0.007260, -0.124039, -0.449586, -0.587979 ],
			"coeffs_5" : [ -0.208390, 0.621902, 0.059093, -0.164886, -0.182966, -0.617859 ],
			"coeffs_6" : [ 0.239623, -0.168650, -0.223420, -0.156409, 0.239082, -0.483743 ],
			"coeffs_7" : [ -0.189304, 0.401613, 0.456519, 0.532541, 0.450994, 0.346864 ],
			"intercepts" : [ -0.251150, 0.087952, 0.209483, 0.417904, 0.295986, -0.027557 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.564555 ],
			"coeffs_1" : [ 0.669529 ],
			"coeffs_2" : [ 0.177574 ],
			"coeffs_3" : [ -0.293649 ],
			"coeffs_4" : [ -0.228143 ],
			"coeffs_5" : [ -0.435459 ],
			"intercepts" : [ 0.513186 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 12
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.104909, 0.41814, -0.369996, -0.036295 ],
			"coeffs_1" : [ 0.131317, -0.57625, 0.23165, 0.054364 ],
			"coeffs_2" : [ 0.710432, 0.15397, 0.700104, -0.108911 ],
			"coeffs_3" : [ 0.831653, -0.734272, -0.38051, 0.349487 ],
			"intercepts" : [ 0.423405, -0.414892, -0.458924, -0.644804 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.275665, -0.722299, -0.112743, 0.015322, -0.113751, -0.616148, -0.333935, 0.554062 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601759, 0.040321, -0.185891, 0.230481, -0.115525, 0.268744 ],
			"coeffs_2" : [ -0.439422, 0.594769, -0.486482, 0.36237, -0.476709, 0.4154, 0.185624, 0.617784 ],
			"coeffs_3" : [ -0.412807, -0.571705, 0.206271, 0.235034, 0.444413, 0.63537, 0.557955, -0.486289 ],
			"intercepts" : [ 0.422772, 0.55214, -0.426981, 0.29665, 0.209398, 0.08067, 0.114351, 0.378766 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.530127, 0.082615, 0.237669, 0.345674, -0.52748, 0.422645 ],
			"coeffs_1" : [ -0.342336, -0.584245, 0.667306, 0.60391, -0.107134, -0.553332 ],
			"coeffs_2" : [ -0.023593, 0.594577, -0.4412, 0.227656, 0.264156, 0.35575 ],
			"coeffs_3" : [ 0.603053, -0.305116, 0.301352, 0.43556, 0.454506, -0.083906 ],
			"coeffs_4" : [ -0.549861, 0.296371, 0.00726, -0.124039, -0.449586, -0.587979 ],
			"coeffs_5" : [ -0.20839, 0.621902, 0.059093, -0.164886, -0.182966, -0.617859 ],
			"coeffs_6" : [ 0.239623, -0.16865, -0.22342, -0.156409, 0.239082, -0.483743 ],
			"coeffs_7" : [ -0.189304, 0.401613, 0.456519, 0.532541, 0.450994, 0.346864 ],
			"intercepts" : [ -0.25115, 0.087952, 0.209483, 0.417904, 0.295986, -0.027557 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.564555 ],
			"coeffs_1" : [ 0.669529 ],
			"coeffs_2" : [ 0.177574 ],
			"coeffs_3" : [ -0.293649 ],
			"coeffs_4" : [ -0.228143 ],
			"coeffs_5" : [ -0.435459 ],
			"intercepts" : [ 0.513186 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-1.8078728  -2.3142104  -1.2763183  -0.33575344  1.957449   -1.8829842
  0.8195553  -3.8270802  -3.6920114   3.3294744   0.9714813   1.9064469 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-1.8079348  -2.3142397  -1.276382   -0.3358717   1.9574037  -1.8830647
  0.81944895 -3.8271177  -3.6920512   3.3294048   0.9714484   1.9064097 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman3_sampled', 'size': 12, 'mse': 7.6443543, 'mae': 2.252178, 'mape': 1.8834769, 'r2': -156.9582046828247}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman3_sampled', 'training_time_in_sec': 0.01, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_sampled_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_sampled', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.423405 + -0.104909 * t."OUT_0"  + 0.131317 * t."OUT_1"  + 0.710432 * t."OUT_2"  + 0.831653 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418140 * t."OUT_0"  + -0.576250 * t."OUT_1"  + 0.153970 * t."OUT_2"  + -0.734272 * t."OUT_3" AS "OUT_1",
    -0.458924 + -0.369996 * t."OUT_0"  + 0.231650 * t."OUT_1"  + 0.700104 * t."OUT_2"  + -0.380510 * t."OUT_3" AS "OUT_2",
    -0.644804 + -0.036295 * t."OUT_0"  + 0.054364 * t."OUT_1"  + -0.108911 * t."OUT_2"  + 0.349487 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_sampled', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_sampled', 'MLPRegressor', 'duckdb')
0.587979 * t."OUT_4"  + -0.617859 * t."OUT_5"  + -0.483743 * t."OUT_6"  + 0.346864 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.513186 + 0.564555 * t."OUT_0"  + 0.669529 * t."OUT_1"  + 0.177574 * t."OUT_2"  + -0.293649 * t."OUT_3"  + -0.228143 * t."OUT_4"  + -0.435459 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_sampled', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 12 entries, 0 to 11
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     12 non-null     float32
 1   X_1     12 non-null     float32
 2   X_2     12 non-null     float32
 3   X_3     12 non-null     float32
dtypes: float32(4)
memory usage: 288.0 bytes
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
5      52.067585   534.256165  0.155164   8.526538
6      50.992905   814.561340  0.257439   5.994627
7      34.347893   205.928116  0.720020   9.414678
8      63.010204   221.354385  0.814630   5.897069
9      22.605108  1660.837036  0.731124   9.374556
10     13.280704   643.716797  0.520814   4.842079
11      7.606344  1112.226562  0.732761   6.140375
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12 entries, 0 to 11
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      12 non-null     int64  
 1   Estimator  12 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 324.0 bytes
    index  Estimator
0       0  -1.807935
1       1  -2.314240
2       2  -1.276382
3       3  -0.335872
4       4   1.957404
5       5  -1.883065
6       6   0.819449
7       7  -3.827118
8       8  -3.692051
9       9   3.329405
10     10   0.971448
11     11   1.906410
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_sampled', 'MLPRegressor') Estimator 6.020069122314453e-05
    index  SQL_Estimator  Py_Estimator  SQL_Error
0       0      -1.807935     -1.807873  -0.000062
1       1      -2.314240     -2.314210  -0.000029
2       2      -1.276382     -1.276318  -0.000064
3       3      -0.335872     -0.335753  -0.000118
4       4       1.957404      1.957449  -0.000045
5       5      -1.883065     -1.882984  -0.000081
6       6       0.819449      0.819555  -0.000106
7       7      -3.827118     -3.827080  -0.000037
8       8      -3.692051     -3.692011  -0.000040
9       9       3.329405      3.329474  -0.000070
10     10       0.971448      0.971481  -0.000033
11     11       1.906410      1.906447  -0.000037
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_sampled', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_sampled_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_sampled', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.423405 + -0.104909 * t."OUT_0"  + 0.131317 * t."OUT_1"  + 0.710432 * t."OUT_2"  + 0.831653 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418140 * t."OUT_0"  + -0.576250 * t."OUT_1"  + 0.153970 * t."OUT_2"  + -0.734272 * t."OUT_3" AS "OUT_1",
    -0.458924 + -0.369996 * t."OUT_0"  + 0.231650 * t."OUT_1"  + 0.700104 * t."OUT_2"  + -0.380510 * t."OUT_3" AS "OUT_2",
    -0.644804 + -0.036295 * t."OUT_0"  + 0.054364 * t."OUT_1"  + -0.108911 * t."OUT_2"  + 0.349487 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_sampled', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_sampled', 'MLPRegressor', 'sqlite')
0.587979 * t."OUT_4"  + -0.617859 * t."OUT_5"  + -0.483743 * t."OUT_6"  + 0.346864 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.513186 + 0.564555 * t."OUT_0"  + 0.669529 * t."OUT_1"  + 0.177574 * t."OUT_2"  + -0.293649 * t."OUT_3"  + -0.228143 * t."OUT_4"  + -0.435459 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_sampled', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 12 entries, 0 to 11
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     12 non-null     float32
 1   X_1     12 non-null     float32
 2   X_2     12 non-null     float32
 3   X_3     12 non-null     float32
dtypes: float32(4)
memory usage: 288.0 bytes
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
5      52.067585   534.256165  0.155164   8.526538
6      50.992905   814.561340  0.257439   5.994627
7      34.347893   205.928116  0.720020   9.414678
8      63.010204   221.354385  0.814630   5.897069
9      22.605108  1660.837036  0.731124   9.374556
10     13.280704   643.716797  0.520814   4.842079
11      7.606344  1112.226562  0.732761   6.140375
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12 entries, 0 to 11
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      12 non-null     int64  
 1   Estimator  12 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 324.0 bytes
    index  Estimator
0       0  -1.807934
1       1  -2.314239
2       2  -1.276379
3       3  -0.335877
4       4   1.957406
5       5  -1.883060
6       6   0.819451
7       7  -3.827116
8       8  -3.692052
9       9   3.329414
10     10   0.971447
11     11   1.906404
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_sampled', 'MLPRegressor') Estimator 5.917918762802602e-05
    index  SQL_Estimator  Py_Estimator  SQL_Error
0       0      -1.807934     -1.807873  -0.000062
1       1      -2.314239     -2.314210  -0.000028
2       2      -1.276379     -1.276318  -0.000060
3       3      -0.335877     -0.335753  -0.000124
4       4       1.957406      1.957449  -0.000043
5       5      -1.883060     -1.882984  -0.000076
6       6       0.819451      0.819555  -0.000104
7       7      -3.827116     -3.827080  -0.000035
8       8      -3.692052     -3.692011  -0.000041
9       9       3.329414      3.329474  -0.000061
10     10       0.971447      0.971481  -0.000034
11     11       1.906404      1.906447  -0.000043
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_sampled', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman3_sampled_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_sampled', 'MLPRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.423405 + -0.104909 * t."OUT_0"  + 0.131317 * t."OUT_1"  + 0.710432 * t."OUT_2"  + 0.831653 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418140 * t."OUT_0"  + -0.576250 * t."OUT_1"  + 0.153970 * t."OUT_2"  + -0.734272 * t."OUT_3" AS "OUT_1",
    -0.458924 + -0.369996 * t."OUT_0"  + 0.231650 * t."OUT_1"  + 0.700104 * t."OUT_2"  + -0.380510 * t."OUT_3" AS "OUT_2",
    -0.644804 + -0.036295 * t."OUT_0"  + 0.054364 * t."OUT_1"  + -0.108911 * t."OUT_2"  + 0.349487 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_sampled', 'MLPRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_sampled', 'MLPRegressor', 'pgsql')
0.587979 * t."OUT_4"  + -0.617859 * t."OUT_5"  + -0.483743 * t."OUT_6"  + 0.346864 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.513186 + 0.564555 * t."OUT_0"  + 0.669529 * t."OUT_1"  + 0.177574 * t."OUT_2"  + -0.293649 * t."OUT_3"  + -0.228143 * t."OUT_4"  + -0.435459 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_sampled', 'MLPRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
