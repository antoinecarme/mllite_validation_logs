         age       sex       bmi  ...        s5        s6  target
0   0.038076  0.050680 -0.009439  ... -0.025953  0.106617    81.0
1   0.081666  0.050680  0.001339  ...  0.084492 -0.030072   196.0
2   0.041708 -0.044642 -0.008362  ... -0.048359 -0.030072    81.0
3  -0.041840 -0.044642  0.128521  ... -0.015999 -0.050783   259.0
4   0.023546  0.050680 -0.030996  ... -0.074093 -0.034215    55.0
5   0.016281  0.050680  0.014272  ...  0.074966  0.040343   220.0
6  -0.009147  0.050680 -0.039618  ...  0.017765 -0.067351   124.0
7  -0.085430 -0.044642 -0.004050  ... -0.061176 -0.013504    68.0
8  -0.001882 -0.044642  0.033673  ...  0.026717  0.061054   270.0
9  -0.070900  0.050680 -0.089197  ... -0.012909 -0.054925   104.0
10 -0.052738 -0.044642  0.071397  ... -0.046883  0.003064    55.0
11 -0.060003  0.050680  0.015350  ... -0.030748 -0.001078    96.0
12  0.009016  0.050680  0.069241  ...  0.103297  0.073480   277.0
13 -0.096328 -0.044642 -0.076264  ... -0.059471 -0.083920   134.0
14 -0.060003  0.050680 -0.047163  ... -0.062917 -0.054925    72.0
15  0.045341 -0.044642  0.071397  ... -0.041176 -0.071494   141.0

[16 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[ 0.03807591  0.05068012 -0.00943939  0.00235142  0.00118295  0.03751653
  -0.05444576  0.05017634 -0.02595311  0.10661709]
 [ 0.08166637  0.05068012  0.00133873  0.03564379  0.12639466  0.09106492
   0.019187    0.03430886  0.08449153 -0.03007245]
 [ 0.04170844 -0.04464164 -0.00836158 -0.02632753  0.02457414  0.01622244
   0.07072993 -0.03949338 -0.04835926 -0.03007245]
 [-0.04183994 -0.04464164  0.12852055  0.0631866  -0.03321588 -0.03262872
   0.01182372 -0.03949338 -0.01599887 -0.05078298]
 [ 0.02354575  0.05068012 -0.03099563 -0.00567042 -0.01670444  0.01778818
  -0.03235593 -0.00259226 -0.0740926  -0.03421455]] [ 81. 196.  81. 259.  55.]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.007, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.056448, 0.305058, -0.235382, -0.074940 ],
			"coeffs_1" : [ 0.120414, -0.424765, 0.157933, 0.047602 ],
			"coeffs_2" : [ 0.527094, 0.173455, 0.512491, -0.075848 ],
			"coeffs_3" : [ 0.619644, -0.544326, -0.306077, 0.270309 ],
			"coeffs_4" : [ 0.311679, -0.279073, -0.364986, -0.481249 ],
			"coeffs_5" : [ 0.253470, -0.611739, -0.136199, 0.057280 ],
			"coeffs_6" : [ -0.130053, -0.629298, -0.303378, 0.508757 ],
			"coeffs_7" : [ -0.048116, 0.039957, -0.618019, 0.064084 ],
			"coeffs_8" : [ -0.170580, 0.276124, -0.163552, 0.303935 ],
			"coeffs_9" : [ -0.404878, 0.538798, -0.447509, 0.325058 ],
			"intercepts" : [ -0.470260, 0.394737, 0.122375, 0.621427 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.413093, -0.513921, 0.206758, 0.225049, 0.444683, 0.575409, 0.507096, -0.428481 ],
			"coeffs_1" : [ 0.455299, 0.545812, -0.456921, 0.285500, 0.242043, 0.021260, 0.058005, 0.437420 ],
			"coeffs_2" : [ -0.574814, 0.059803, 0.260736, 0.376074, -0.571820, 0.459345, -0.424409, -0.621160 ],
			"coeffs_3" : [ 0.730041, 0.644573, -0.122969, -0.543945, 0.007022, 0.644510, -0.541798, 0.312173 ],
			"intercepts" : [ 0.350657, 0.387554, 0.593408, -0.357124, 0.329943, 0.466161, 0.486583, -0.030067 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.613397, 0.295095, 0.007260, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.271147, 0.558729, 0.027252, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.186978, -0.230115, -0.224128, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.185583, 0.345899, 0.400288, 0.526231, 0.444787, 0.341110 ],
			"coeffs_4" : [ -0.310847, 0.029191, 0.156136, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.344910, 0.423072, 0.107910, -0.195384, -0.154200, -0.294011 ],
			"coeffs_6" : [ 0.313832, 0.333820, -0.422008, 0.182649, -0.386450, -0.001729 ],
			"coeffs_7" : [ 0.089507, -0.296743, 0.268866, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.561489, -0.464827, -0.245913, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.278902 ],
			"coeffs_1" : [ -0.180640 ],
			"coeffs_2" : [ -0.574788 ],
			"coeffs_3" : [ -0.636297 ],
			"coeffs_4" : [ -0.788203 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575882 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_tiny_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.056448, 0.305058, -0.235382, -0.074940 ],
			"coeffs_1" : [ 0.120414, -0.424765, 0.157933, 0.047602 ],
			"coeffs_2" : [ 0.527094, 0.173455, 0.512491, -0.075848 ],
			"coeffs_3" : [ 0.619644, -0.544326, -0.306077, 0.270309 ],
			"coeffs_4" : [ 0.311679, -0.279073, -0.364986, -0.481249 ],
			"coeffs_5" : [ 0.253470, -0.611739, -0.136199, 0.057280 ],
			"coeffs_6" : [ -0.130053, -0.629298, -0.303378, 0.508757 ],
			"coeffs_7" : [ -0.048116, 0.039957, -0.618019, 0.064084 ],
			"coeffs_8" : [ -0.170580, 0.276124, -0.163552, 0.303935 ],
			"coeffs_9" : [ -0.404878, 0.538798, -0.447509, 0.325058 ],
			"intercepts" : [ -0.470260, 0.394737, 0.122375, 0.621427 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.413093, -0.513921, 0.206758, 0.225049, 0.444683, 0.575409, 0.507096, -0.428481 ],
			"coeffs_1" : [ 0.455299, 0.545812, -0.456921, 0.285500, 0.242043, 0.021260, 0.058005, 0.437420 ],
			"coeffs_2" : [ -0.574814, 0.059803, 0.260736, 0.376074, -0.571820, 0.459345, -0.424409, -0.621160 ],
			"coeffs_3" : [ 0.730041, 0.644573, -0.122969, -0.543945, 0.007022, 0.644510, -0.541798, 0.312173 ],
			"intercepts" : [ 0.350657, 0.387554, 0.593408, -0.357124, 0.329943, 0.466161, 0.486583, -0.030067 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.613397, 0.295095, 0.007260, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.271147, 0.558729, 0.027252, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.186978, -0.230115, -0.224128, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.185583, 0.345899, 0.400288, 0.526231, 0.444787, 0.341110 ],
			"coeffs_4" : [ -0.310847, 0.029191, 0.156136, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.344910, 0.423072, 0.107910, -0.195384, -0.154200, -0.294011 ],
			"coeffs_6" : [ 0.313832, 0.333820, -0.422008, 0.182649, -0.386450, -0.001729 ],
			"coeffs_7" : [ 0.089507, -0.296743, 0.268866, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.561489, -0.464827, -0.245913, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.278902 ],
			"coeffs_1" : [ -0.180640 ],
			"coeffs_2" : [ -0.574788 ],
			"coeffs_3" : [ -0.636297 ],
			"coeffs_4" : [ -0.788203 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575882 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 16
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.056448, 0.305058, -0.235382, -0.07494 ],
			"coeffs_1" : [ 0.120414, -0.424765, 0.157933, 0.047602 ],
			"coeffs_2" : [ 0.527094, 0.173455, 0.512491, -0.075848 ],
			"coeffs_3" : [ 0.619644, -0.544326, -0.306077, 0.270309 ],
			"coeffs_4" : [ 0.311679, -0.279073, -0.364986, -0.481249 ],
			"coeffs_5" : [ 0.25347, -0.611739, -0.136199, 0.05728 ],
			"coeffs_6" : [ -0.130053, -0.629298, -0.303378, 0.508757 ],
			"coeffs_7" : [ -0.048116, 0.039957, -0.618019, 0.064084 ],
			"coeffs_8" : [ -0.17058, 0.276124, -0.163552, 0.303935 ],
			"coeffs_9" : [ -0.404878, 0.538798, -0.447509, 0.325058 ],
			"intercepts" : [ -0.47026, 0.394737, 0.122375, 0.621427 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.413093, -0.513921, 0.206758, 0.225049, 0.444683, 0.575409, 0.507096, -0.428481 ],
			"coeffs_1" : [ 0.455299, 0.545812, -0.456921, 0.2855, 0.242043, 0.02126, 0.058005, 0.43742 ],
			"coeffs_2" : [ -0.574814, 0.059803, 0.260736, 0.376074, -0.57182, 0.459345, -0.424409, -0.62116 ],
			"coeffs_3" : [ 0.730041, 0.644573, -0.122969, -0.543945, 0.007022, 0.64451, -0.541798, 0.312173 ],
			"intercepts" : [ 0.350657, 0.387554, 0.593408, -0.357124, 0.329943, 0.466161, 0.486583, -0.030067 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.613397, 0.295095, 0.00726, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.271147, 0.558729, 0.027252, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.186978, -0.230115, -0.224128, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.185583, 0.345899, 0.400288, 0.526231, 0.444787, 0.34111 ],
			"coeffs_4" : [ -0.310847, 0.029191, 0.156136, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.34491, 0.423072, 0.10791, -0.195384, -0.1542, -0.294011 ],
			"coeffs_6" : [ 0.313832, 0.33382, -0.422008, 0.182649, -0.38645, -0.001729 ],
			"coeffs_7" : [ 0.089507, -0.296743, 0.268866, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.561489, -0.464827, -0.245913, -0.494865, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.278902 ],
			"coeffs_1" : [ -0.18064 ],
			"coeffs_2" : [ -0.574788 ],
			"coeffs_3" : [ -0.636297 ],
			"coeffs_4" : [ -0.788203 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575882 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-0.6980467  -0.70404595 -0.71601874 -0.73027897 -0.72160095 -0.7029305
 -0.7156711  -0.72299737 -0.70123154 -0.72271085 -0.7242571  -0.72125787
 -0.703133   -0.7279791  -0.7295299  -0.72722965]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-0.6980473  -0.7040466  -0.7160194  -0.7302796  -0.7216016  -0.70293117
 -0.7156717  -0.722998   -0.70123214 -0.7227115  -0.72425777 -0.7212586
 -0.70313346 -0.7279798  -0.7295306  -0.72723037]
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'diabetes_tiny', 'size': 16, 'mse': 25559.309, 'mae': 140.2793, 'mape': 1.0068798, 'r2': -3.3455308802865655}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'diabetes_tiny', 'training_time_in_sec': 0.007, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -0.000741 ],
      "X_1" : [ -0.000307 ],
      "X_2" : [ 0.001245 ],
      "X_3" : [ -0.000238 ],
      "X_4" : [ -0.000140 ],
      "X_5" : [ -0.000058 ],
      "X_6" : [ -0.000056 ],
      "X_7" : [ -0.000205 ],
      "X_8" : [ -0.000412 ],
      "X_9" : [ -0.000570 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 2, 0, 9, 8, 1, 3, 7, 4, 5, 6 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_tiny_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_tiny', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "diabetes_tiny" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.470260 + -0.056448 * t."OUT_0"  + 0.120414 * t."OUT_1"  + 0.527094 * t."OUT_2"  + 0.619644 * t."OUT_3"  + 0.311679 * t."OUT_4"  + 0.253470 * t."OUT_5"  + -0.130053 * t."
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_tiny', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_tiny', 'MLPRegressor', 'duckdb')
01604 * t."OUT_4"  + -0.294011 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.457149 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575882 + -0.278902 * t."OUT_0"  + -0.180640 * t."OUT_1"  + -0.574788 * t."OUT_2"  + -0.636297 * t."OUT_3"  + -0.788203 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_tiny', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.038076  0.050680 -0.009439  ...  0.050176 -0.025953  0.106617
1      0.081666  0.050680  0.001339  ...  0.034309  0.084492 -0.030072
2      0.041708 -0.044642 -0.008362  ... -0.039493 -0.048359 -0.030072
3     -0.041840 -0.044642  0.128521  ... -0.039493 -0.015999 -0.050783
4      0.023546  0.050680 -0.030996  ... -0.002592 -0.074093 -0.034215
5      0.016281  0.050680  0.014272  ...  0.034309  0.074966  0.040343
6     -0.009147  0.050680 -0.039618  ...  0.071210  0.017765 -0.067351
7     -0.085430 -0.044642 -0.004050  ... -0.039493 -0.061176 -0.013504
8     -0.001882 -0.044642  0.033673  ... -0.002592  0.026717  0.061054
9     -0.070900  0.050680 -0.089197  ... -0.002592 -0.012909 -0.054925
10    -0.052738 -0.044642  0.071397  ... -0.021412 -0.046883  0.003064
11    -0.060003  0.050680  0.015350  ... -0.002592 -0.030748 -0.001078
12     0.009016  0.050680  0.069241  ...  0.034309  0.103297  0.073480
13    -0.096328 -0.044642 -0.076264  ... -0.039493 -0.059471 -0.083920
14    -0.060003  0.050680 -0.047163  ... -0.039493 -0.062917 -0.054925
15     0.045341 -0.044642  0.071397  ... -0.039493 -0.041176 -0.071494

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  -0.698047
1       1  -0.704047
2       2  -0.716019
3       3  -0.730280
4       4  -0.721602
5       5  -0.702931
6       6  -0.715672
7       7  -0.722998
8       8  -0.701232
9       9  -0.722712
10     10  -0.724258
11     11  -0.721259
12     12  -0.703133
13     13  -0.727980
14     14  -0.729531
15     15  -0.727230
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_tiny', 'MLPRegressor') Estimator 6.407499313354492e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      -0.698047     -0.698047 -5.960464e-07
1       1      -0.704047     -0.704046 -6.556511e-07
2       2      -0.716019     -0.716019 -6.556511e-07
3       3      -0.730280     -0.730279 -6.556511e-07
4       4      -0.721602     -0.721601 -6.556511e-07
5       5      -0.702931     -0.702931 -6.556511e-07
6       6      -0.715672     -0.715671 -5.960464e-07
7       7      -0.722998     -0.722997 -6.556511e-07
8       8      -0.701232     -0.701232 -5.960464e-07
9       9      -0.722712     -0.722711 -6.556511e-07
10     10      -0.724258     -0.724257 -6.556511e-07
11     11      -0.721259     -0.721258 -7.152557e-07
12     12      -0.703133     -0.703133 -4.768372e-07
13     13      -0.727980     -0.727979 -6.556511e-07
14     14      -0.729531     -0.729530 -6.556511e-07
15     15      -0.727230     -0.727230 -7.152557e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_tiny', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_tiny', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "diabetes_tiny" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.470260 + -0.056448 * t."OUT_0"  + 0.120414 * t."OUT_1"  + 0.527094 * t."OUT_2"  + 0.619644 * t."OUT_3"  + 0.311679 * t."OUT_4"  + 0.253470 * t."OUT_5"  + -0.130053 * t."
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_tiny', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_tiny', 'MLPRegressor', 'sqlite')
01604 * t."OUT_4"  + -0.294011 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.457149 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575882 + -0.278902 * t."OUT_0"  + -0.180640 * t."OUT_1"  + -0.574788 * t."OUT_2"  + -0.636297 * t."OUT_3"  + -0.788203 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_tiny', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.038076  0.050680 -0.009439  ...  0.050176 -0.025953  0.106617
1      0.081666  0.050680  0.001339  ...  0.034309  0.084492 -0.030072
2      0.041708 -0.044642 -0.008362  ... -0.039493 -0.048359 -0.030072
3     -0.041840 -0.044642  0.128521  ... -0.039493 -0.015999 -0.050783
4      0.023546  0.050680 -0.030996  ... -0.002592 -0.074093 -0.034215
5      0.016281  0.050680  0.014272  ...  0.034309  0.074966  0.040343
6     -0.009147  0.050680 -0.039618  ...  0.071210  0.017765 -0.067351
7     -0.085430 -0.044642 -0.004050  ... -0.039493 -0.061176 -0.013504
8     -0.001882 -0.044642  0.033673  ... -0.002592  0.026717  0.061054
9     -0.070900  0.050680 -0.089197  ... -0.002592 -0.012909 -0.054925
10    -0.052738 -0.044642  0.071397  ... -0.021412 -0.046883  0.003064
11    -0.060003  0.050680  0.015350  ... -0.002592 -0.030748 -0.001078
12     0.009016  0.050680  0.069241  ...  0.034309  0.103297  0.073480
13    -0.096328 -0.044642 -0.076264  ... -0.039493 -0.059471 -0.083920
14    -0.060003  0.050680 -0.047163  ... -0.039493 -0.062917 -0.054925
15     0.045341 -0.044642  0.071397  ... -0.039493 -0.041176 -0.071494

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  -0.698047
1       1  -0.704047
2       2  -0.716019
3       3  -0.730280
4       4  -0.721602
5       5  -0.702931
6       6  -0.715672
7       7  -0.722998
8       8  -0.701232
9       9  -0.722711
10     10  -0.724258
11     11  -0.721259
12     12  -0.703133
13     13  -0.727980
14     14  -0.729531
15     15  -0.727230
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_tiny', 'MLPRegressor') Estimator 6.364977704273467e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      -0.698047     -0.698047 -6.089220e-07
1       1      -0.704047     -0.704046 -6.431729e-07
2       2      -0.716019     -0.716019 -7.057484e-07
3       3      -0.730280     -0.730279 -6.444090e-07
4       4      -0.721602     -0.721601 -6.780826e-07
5       5      -0.702931     -0.702931 -6.325413e-07
6       6      -0.715672     -0.715671 -6.030593e-07
7       7      -0.722998     -0.722997 -6.698644e-07
8       8      -0.701232     -0.701232 -5.988200e-07
9       9      -0.722711     -0.722711 -6.395322e-07
10     10      -0.724258     -0.724257 -6.276179e-07
11     11      -0.721259     -0.721258 -6.853698e-07
12     12      -0.703133     -0.703133 -4.414752e-07
13     13      -0.727980     -0.727979 -6.454676e-07
14     14      -0.729531     -0.729530 -6.512846e-07
15     15      -0.727230     -0.727230 -7.085971e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_tiny', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
