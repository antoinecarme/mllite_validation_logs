         age       sex       bmi  ...        s5        s6  target
0   0.038076  0.050680 -0.009439  ... -0.025953  0.106617    81.0
1   0.081666  0.050680  0.001339  ...  0.084492 -0.030072   196.0
2   0.041708 -0.044642 -0.008362  ... -0.048359 -0.030072    81.0
3  -0.041840 -0.044642  0.128521  ... -0.015999 -0.050783   259.0
4   0.023546  0.050680 -0.030996  ... -0.074093 -0.034215    55.0
5   0.016281  0.050680  0.014272  ...  0.074966  0.040343   220.0
6  -0.009147  0.050680 -0.039618  ...  0.017765 -0.067351   124.0
7  -0.085430 -0.044642 -0.004050  ... -0.061176 -0.013504    68.0
8  -0.001882 -0.044642  0.033673  ...  0.026717  0.061054   270.0
9  -0.070900  0.050680 -0.089197  ... -0.012909 -0.054925   104.0
10 -0.052738 -0.044642  0.071397  ... -0.046883  0.003064    55.0
11 -0.060003  0.050680  0.015350  ... -0.030748 -0.001078    96.0
12  0.009016  0.050680  0.069241  ...  0.103297  0.073480   277.0
13 -0.096328 -0.044642 -0.076264  ... -0.059471 -0.083920   134.0
14 -0.060003  0.050680 -0.047163  ... -0.062917 -0.054925    72.0
15  0.045341 -0.044642  0.071397  ... -0.041176 -0.071494   141.0

[16 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
('OPERATION_START', 'TRAINING')
[[ 0.03807591  0.05068012 -0.00943939  0.00235142  0.00118295  0.03751653
  -0.05444576  0.05017634 -0.02595311  0.10661709]
 [ 0.08166637  0.05068012  0.00133873  0.03564379  0.12639466  0.09106492
   0.019187    0.03430886  0.08449153 -0.03007245]
 [ 0.04170844 -0.04464164 -0.00836158 -0.02632753  0.02457414  0.01622244
   0.07072993 -0.03949338 -0.04835926 -0.03007245]
 [-0.04183994 -0.04464164  0.12852055  0.0631866  -0.03321588 -0.03262872
   0.01182372 -0.03949338 -0.01599887 -0.05078298]
 [ 0.02354575  0.05068012 -0.03099563 -0.00567042 -0.01670444  0.01778818
  -0.03235593 -0.00259226 -0.0740926  -0.03421455]] [ 81. 196.  81. 259.  55.]
MLLITE_FIT_USING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 1 2
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_REGRESSOR_FIT' 2 2
('OPERATION_END_ELAPSED', 0.009, 'TRAINING')
{ ,   , }
{ ,   , }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W12", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"equations" : {
			"intercept" : 149.097015,
			"coeffs" : [ -118.840614, -249.450287, 122.361702, 796.902405, 8.864485, -454.984802, -35.762161, 138.316147, 859.926392, -221.403900 ]
		}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_diabetes_tiny.json'

MLLITE_MODEL_SET_OPTIONS RidgeRegressor None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeRegressor { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeRegressor { ,   , }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeRegressor None
MLLITE_RELOADING_MODEL mllite_ridge_reg.RidgeRegressor_ff4_ff4
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W12", "signature" : "ff4_ff4"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"equations" : {
			"intercept" : 149.097015,
			"coeffs" : [ -118.840614, -249.450287, 122.361702, 796.902405, 8.864485, -454.984802, -35.762161, 138.316147, 859.926392, -221.403900 ]
		}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 16
	},
	"equations" : 	{
		"coeffs" : [ -118.840614, -249.450287, 122.361702, 796.902405, 8.864485, -454.984802, -35.762161, 138.316147, 859.926392, -221.4039 ],
		"intercept" : 149.097015
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_ff4", "version" : "2024-W12" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 78.553856 198.37923   83.19023  237.43613   61.76339  208.39717
 135.66368  103.17008  262.0586    87.765144  72.19215   81.1375
 281.18216  104.77454   98.0153   139.32082 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 78.553856 198.37923   83.19023  237.43613   61.76339  208.39717
 135.66368  103.17008  262.0586    87.765144  72.19215   81.1375
 281.18216  104.77454   98.0153   139.32082 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'diabetes_tiny', 'size': 16, 'mse': 276.82007, 'mae': 13.194529, 'mape': 0.1374354, 'r2': 0.9529357366202386}
WRITING_PERF_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_diabetes_tiny.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeRegressor', 'model_name': 'RidgeRegressor', 'options': None, 'dataset': 'diabetes_tiny', 'training_time_in_sec': 0.009, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/RidgeRegressor/mllite.RidgeRegressor_diabetes_tiny.sql'



SQL_OUT_PUT_FIRST_LINES_START
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  model_input."index" AS "index",
   149.097015 + -118.840614 * X_0 + -249.450287 * X_1 + 122.361702 * X_2 + 796.902405 * X_3 + 8.864485 * X_4 + -454.984802 * X_5 + -35.762161 * X_6 + 138.316147 * X_7 + 859.926392 * X_8 + -221.403900 * X_9 AS "Estimator"
  FROM model_input
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_FIRST_LINES_END
SQL_OUT_PUT_LAST_LINES_START
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT
  model_input."index" AS "index",
   149.097015 + -118.840614 * X_0 + -249.450287 * X_1 + 122.361702 * X_2 + 796.902405 * X_3 + 8.864485 * X_4 + -454.984802 * X_5 + -35.762161 * X_6 + 138.316147 * X_7 + 859.926392 * X_8 + -221.403900 * X_9 AS "Estimator"
  FROM model_input
 )
SELECT
  model_scores_cte."index" as "index",
  model_scores_cte."Estimator" as "Estimator"
FROM  model_scores_cte

SQL_OUT_PUT_LAST_LINES_END




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.038076  0.050680 -0.009439  ...  0.050176 -0.025953  0.106617
1      0.081666  0.050680  0.001339  ...  0.034309  0.084492 -0.030072
2      0.041708 -0.044642 -0.008362  ... -0.039493 -0.048359 -0.030072
3     -0.041840 -0.044642  0.128521  ... -0.039493 -0.015999 -0.050783
4      0.023546  0.050680 -0.030996  ... -0.002592 -0.074093 -0.034215
5      0.016281  0.050680  0.014272  ...  0.034309  0.074966  0.040343
6     -0.009147  0.050680 -0.039618  ...  0.071210  0.017765 -0.067351
7     -0.085430 -0.044642 -0.004050  ... -0.039493 -0.061176 -0.013504
8     -0.001882 -0.044642  0.033673  ... -0.002592  0.026717  0.061054
9     -0.070900  0.050680 -0.089197  ... -0.002592 -0.012909 -0.054925
10    -0.052738 -0.044642  0.071397  ... -0.021412 -0.046883  0.003064
11    -0.060003  0.050680  0.015350  ... -0.002592 -0.030748 -0.001078
12     0.009016  0.050680  0.069241  ...  0.034309  0.103297  0.073480
13    -0.096328 -0.044642 -0.076264  ... -0.039493 -0.059471 -0.083920
14    -0.060003  0.050680 -0.047163  ... -0.039493 -0.062917 -0.054925
15     0.045341 -0.044642  0.071397  ... -0.039493 -0.041176 -0.071494

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index   Estimator
0       0   78.553841
1       1  198.379215
2       2   83.190220
3       3  237.436130
4       4   61.763390
5       5  208.397173
6       6  135.663668
7       7  103.170076
8       8  262.058595
9       9   87.765137
10     10   72.192147
11     11   81.137498
12     12  281.182149
13     13  104.774543
14     14   98.015296
15     15  139.320811
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
    index  SQL_Estimator  Py_Estimator
0       0      78.553841     78.553856
1       1     198.379215    198.379227
2       2      83.190220     83.190231
3       3     237.436130    237.436127
4       4      61.763390     61.763390
5       5     208.397173    208.397171
6       6     135.663668    135.663681
7       7     103.170076    103.170082
8       8     262.058595    262.058594
9       9      87.765137     87.765144
10     10      72.192147     72.192146
11     11      81.137498     81.137497
12     12     281.182149    281.182159
13     13     104.774543    104.774544
14     14      98.015296     98.015297
15     15     139.320811    139.320816
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
