          X_0          X_1       X_2        X_3       target
0   17.761710   423.498320  0.135270  10.148129    59.976816
1   45.437614   168.841197  0.343817   3.279963    73.717247
2   69.792322   473.447926  0.233546   3.411073   130.755488
3   67.667095   938.672588  0.652046   9.523154   615.786950
4   55.118421  1002.086076  0.726658   4.570617   730.257013
5   52.067586   534.256140  0.155164   8.526538    97.892577
6   50.992903   814.561313  0.257439   5.994628   215.810735
7   34.347892   205.928122  0.720020   9.414677   152.198309
8   63.010204   221.354390  0.814630   5.897069   191.013194
9   22.605109  1660.837003  0.731124   9.374556  1214.488603
10  13.280703   643.716771  0.520814   4.842079   335.519300
11   7.606344  1112.226604  0.732761   6.140375   815.031479
12  51.401745  1161.331552  0.618557   2.218271   720.185923
13  94.566439   663.266399  0.852323   6.919084   573.171849
14  14.282172  1575.160409  0.428596   4.169882   675.258981
15  38.088467  1321.297507  0.052941  10.429984    79.647890
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[1.77617092e+01 4.23498322e+02 1.35270208e-01 1.01481285e+01]
 [4.54376144e+01 1.68841202e+02 3.43817413e-01 3.27996254e+00]
 [6.97923203e+01 4.73447937e+02 2.33546272e-01 3.41107249e+00]
 [6.76670914e+01 9.38672607e+02 6.52046204e-01 9.52315426e+00]
 [5.51184196e+01 1.00208606e+03 7.26658285e-01 4.57061768e+00]] [ 59.976818  73.71725  130.7555   615.7869   730.257   ]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.007, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.108948, 0.418424, -0.368166, -0.030796 ],
			"coeffs_1" : [ 0.126617, -0.576469, 0.229808, 0.059993 ],
			"coeffs_2" : [ 0.705004, 0.156986, 0.700507, -0.103025 ],
			"coeffs_3" : [ 0.827366, -0.734452, -0.380831, 0.354788 ],
			"intercepts" : [ 0.419235, -0.414892, -0.459947, -0.639429 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.276058, -0.728161, -0.112743, 0.013564, -0.140474, -0.610826, -0.330400, 0.548770 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601970, 0.040321, -0.186417, 0.230930, -0.142278, 0.269144 ],
			"coeffs_2" : [ -0.439695, 0.588808, -0.486733, 0.360540, -0.476964, 0.420831, 0.195614, 0.612354 ],
			"coeffs_3" : [ -0.413093, -0.577873, 0.206758, 0.232570, 0.444683, 0.640703, 0.565436, -0.491975 ],
			"intercepts" : [ 0.422772, 0.546091, -0.426981, 0.295174, 0.209398, 0.085708, 0.119336, 0.373605 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530362, 0.082615, 0.238108, 0.346003, -0.527715, 0.422926 ],
			"coeffs_1" : [ -0.338166, -0.580606, 0.671057, 0.600393, -0.110627, -0.556877 ],
			"coeffs_2" : [ -0.023593, 0.594791, -0.441472, 0.228110, 0.264562, 0.356072 ],
			"coeffs_3" : [ 0.608972, -0.299273, 0.307257, 0.429810, 0.448778, -0.089683 ],
			"coeffs_4" : [ -0.550089, 0.296743, 0.007260, -0.124039, -0.449854, -0.588194 ],
			"coeffs_5" : [ -0.204654, 0.625840, 0.062919, -0.168937, -0.187036, -0.621888 ],
			"coeffs_6" : [ 0.244016, -0.166655, -0.221497, -0.162969, 0.237031, -0.489729 ],
			"coeffs_7" : [ -0.183492, 0.407294, 0.462280, 0.526972, 0.445450, 0.341265 ],
			"intercepts" : [ -0.245639, 0.093444, 0.215010, 0.412478, 0.290577, -0.033004 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.567894 ],
			"coeffs_1" : [ 0.675423 ],
			"coeffs_2" : [ 0.183193 ],
			"coeffs_3" : [ -0.288160 ],
			"coeffs_4" : [ -0.222458 ],
			"coeffs_5" : [ -0.431548 ],
			"intercepts" : [ 0.518658 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_tiny_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.108948, 0.418424, -0.368166, -0.030796 ],
			"coeffs_1" : [ 0.126617, -0.576469, 0.229808, 0.059993 ],
			"coeffs_2" : [ 0.705004, 0.156986, 0.700507, -0.103025 ],
			"coeffs_3" : [ 0.827366, -0.734452, -0.380831, 0.354788 ],
			"intercepts" : [ 0.419235, -0.414892, -0.459947, -0.639429 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.276058, -0.728161, -0.112743, 0.013564, -0.140474, -0.610826, -0.330400, 0.548770 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.601970, 0.040321, -0.186417, 0.230930, -0.142278, 0.269144 ],
			"coeffs_2" : [ -0.439695, 0.588808, -0.486733, 0.360540, -0.476964, 0.420831, 0.195614, 0.612354 ],
			"coeffs_3" : [ -0.413093, -0.577873, 0.206758, 0.232570, 0.444683, 0.640703, 0.565436, -0.491975 ],
			"intercepts" : [ 0.422772, 0.546091, -0.426981, 0.295174, 0.209398, 0.085708, 0.119336, 0.373605 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530362, 0.082615, 0.238108, 0.346003, -0.527715, 0.422926 ],
			"coeffs_1" : [ -0.338166, -0.580606, 0.671057, 0.600393, -0.110627, -0.556877 ],
			"coeffs_2" : [ -0.023593, 0.594791, -0.441472, 0.228110, 0.264562, 0.356072 ],
			"coeffs_3" : [ 0.608972, -0.299273, 0.307257, 0.429810, 0.448778, -0.089683 ],
			"coeffs_4" : [ -0.550089, 0.296743, 0.007260, -0.124039, -0.449854, -0.588194 ],
			"coeffs_5" : [ -0.204654, 0.625840, 0.062919, -0.168937, -0.187036, -0.621888 ],
			"coeffs_6" : [ 0.244016, -0.166655, -0.221497, -0.162969, 0.237031, -0.489729 ],
			"coeffs_7" : [ -0.183492, 0.407294, 0.462280, 0.526972, 0.445450, 0.341265 ],
			"intercepts" : [ -0.245639, 0.093444, 0.215010, 0.412478, 0.290577, -0.033004 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.567894 ],
			"coeffs_1" : [ 0.675423 ],
			"coeffs_2" : [ 0.183193 ],
			"coeffs_3" : [ -0.288160 ],
			"coeffs_4" : [ -0.222458 ],
			"coeffs_5" : [ -0.431548 ],
			"intercepts" : [ 0.518658 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 16
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.108948, 0.418424, -0.368166, -0.030796 ],
			"coeffs_1" : [ 0.126617, -0.576469, 0.229808, 0.059993 ],
			"coeffs_2" : [ 0.705004, 0.156986, 0.700507, -0.103025 ],
			"coeffs_3" : [ 0.827366, -0.734452, -0.380831, 0.354788 ],
			"intercepts" : [ 0.419235, -0.414892, -0.459947, -0.639429 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.276058, -0.728161, -0.112743, 0.013564, -0.140474, -0.610826, -0.3304, 0.54877 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.60197, 0.040321, -0.186417, 0.23093, -0.142278, 0.269144 ],
			"coeffs_2" : [ -0.439695, 0.588808, -0.486733, 0.36054, -0.476964, 0.420831, 0.195614, 0.612354 ],
			"coeffs_3" : [ -0.413093, -0.577873, 0.206758, 0.23257, 0.444683, 0.640703, 0.565436, -0.491975 ],
			"intercepts" : [ 0.422772, 0.546091, -0.426981, 0.295174, 0.209398, 0.085708, 0.119336, 0.373605 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.530362, 0.082615, 0.238108, 0.346003, -0.527715, 0.422926 ],
			"coeffs_1" : [ -0.338166, -0.580606, 0.671057, 0.600393, -0.110627, -0.556877 ],
			"coeffs_2" : [ -0.023593, 0.594791, -0.441472, 0.22811, 0.264562, 0.356072 ],
			"coeffs_3" : [ 0.608972, -0.299273, 0.307257, 0.42981, 0.448778, -0.089683 ],
			"coeffs_4" : [ -0.550089, 0.296743, 0.00726, -0.124039, -0.449854, -0.588194 ],
			"coeffs_5" : [ -0.204654, 0.62584, 0.062919, -0.168937, -0.187036, -0.621888 ],
			"coeffs_6" : [ 0.244016, -0.166655, -0.221497, -0.162969, 0.237031, -0.489729 ],
			"coeffs_7" : [ -0.183492, 0.407294, 0.46228, 0.526972, 0.44545, 0.341265 ],
			"intercepts" : [ -0.245639, 0.093444, 0.21501, 0.412478, 0.290577, -0.033004 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.567894 ],
			"coeffs_1" : [ 0.675423 ],
			"coeffs_2" : [ 0.183193 ],
			"coeffs_3" : [ -0.28816 ],
			"coeffs_4" : [ -0.222458 ],
			"coeffs_5" : [ -0.431548 ],
			"intercepts" : [ 0.518658 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 4.6389256e+00 -1.6241431e-02  5.4975843e+00  1.3634979e+01
  1.7235611e+01  5.9855928e+00  1.2984845e+01 -8.2764840e-01
 -6.9521499e-01  3.0865799e+01  1.1322454e+01  2.0447538e+01
  2.1086662e+01  7.1487112e+00  2.7635040e+01  2.3272236e+01]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 4.6388054e+00 -1.6290069e-02  5.4974566e+00  1.3634727e+01
  1.7235353e+01  5.9854469e+00  1.2984622e+01 -8.2770848e-01
 -6.9527400e-01  3.0865292e+01  1.1322276e+01  2.0447180e+01
  2.1086288e+01  7.1485333e+00  2.7634743e+01  2.3271889e+01]
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman2_tiny', 'size': 16, 'mse': 273379.8, 'mae': 405.03094, 'mape': 0.95398355, 'r2': -1.3951080298600607}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman2_tiny', 'training_time_in_sec': 0.007, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_tiny', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.419235 + -0.108948 * t."OUT_0"  + 0.126617 * t."OUT_1"  + 0.705004 * t."OUT_2"  + 0.827366 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418424 * t."OUT_0"  + -0.576469 * t."OUT_1"  + 0.156986 * t."OUT_2"  + -0.734452 * t."OUT_3" AS "OUT_1",
    -0.459947 + -0.368166 * t."OUT_0"  + 0.229808 * t."OUT_1"  + 0.700507 * t."OUT_2"  + -0.380831 * t."OUT_3" AS "OUT_2",
    -0.639429 + -0.030796 * t."OUT_0"  + 0.059993 * t."OUT_1"  + -0.103025 * t."OUT_2"  + 0.354788 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_tiny', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_tiny', 'MLPRegressor', 'duckdb')
0.588194 * t."OUT_4"  + -0.621888 * t."OUT_5"  + -0.489729 * t."OUT_6"  + 0.341265 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518658 + 0.567894 * t."OUT_0"  + 0.675423 * t."OUT_1"  + 0.183193 * t."OUT_2"  + -0.288160 * t."OUT_3"  + -0.222458 * t."OUT_4"  + -0.431548 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_tiny', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
dtypes: float32(4)
memory usage: 384.0 bytes
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
5      52.067585   534.256165  0.155164   8.526538
6      50.992905   814.561340  0.257439   5.994627
7      34.347893   205.928116  0.720020   9.414678
8      63.010204   221.354385  0.814630   5.897069
9      22.605108  1660.837036  0.731124   9.374556
10     13.280704   643.716797  0.520814   4.842079
11      7.606344  1112.226562  0.732761   6.140375
12     51.401745  1161.331543  0.618557   2.218271
13     94.566437   663.266418  0.852323   6.919084
14     14.282172  1575.160400  0.428596   4.169882
15     38.088467  1321.297485  0.052941  10.429984
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0   4.638805
1       1  -0.016290
2       2   5.497457
3       3  13.634727
4       4  17.235353
5       5   5.985447
6       6  12.984622
7       7  -0.827708
8       8  -0.695274
9       9  30.865292
10     10  11.322276
11     11  20.447180
12     12  21.086288
13     13   7.148533
14     14  27.634743
15     15  23.271889
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_tiny', 'MLPRegressor') Estimator 0.00022097676992416382
    index  SQL_Estimator  Py_Estimator  SQL_Error
0       0       4.638805      4.638926  -0.000120
1       1      -0.016290     -0.016241  -0.000049
2       2       5.497457      5.497584  -0.000128
3       3      13.634727     13.634979  -0.000253
4       4      17.235353     17.235611  -0.000257
5       5       5.985447      5.985593  -0.000146
6       6      12.984622     12.984845  -0.000223
7       7      -0.827708     -0.827648  -0.000060
8       8      -0.695274     -0.695215  -0.000059
9       9      30.865292     30.865799  -0.000507
10     10      11.322276     11.322454  -0.000178
11     11      20.447180     20.447538  -0.000359
12     12      21.086288     21.086662  -0.000374
13     13       7.148533      7.148711  -0.000178
14     14      27.634743     27.635040  -0.000298
15     15      23.271889     23.272236  -0.000347
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_tiny', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_tiny', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.419235 + -0.108948 * t."OUT_0"  + 0.126617 * t."OUT_1"  + 0.705004 * t."OUT_2"  + 0.827366 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418424 * t."OUT_0"  + -0.576469 * t."OUT_1"  + 0.156986 * t."OUT_2"  + -0.734452 * t."OUT_3" AS "OUT_1",
    -0.459947 + -0.368166 * t."OUT_0"  + 0.229808 * t."OUT_1"  + 0.700507 * t."OUT_2"  + -0.380831 * t."OUT_3" AS "OUT_2",
    -0.639429 + -0.030796 * t."OUT_0"  + 0.059993 * t."OUT_1"  + -0.103025 * t."OUT_2"  + 0.354788 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_tiny', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_tiny', 'MLPRegressor', 'sqlite')
0.588194 * t."OUT_4"  + -0.621888 * t."OUT_5"  + -0.489729 * t."OUT_6"  + 0.341265 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518658 + 0.567894 * t."OUT_0"  + 0.675423 * t."OUT_1"  + 0.183193 * t."OUT_2"  + -0.288160 * t."OUT_3"  + -0.222458 * t."OUT_4"  + -0.431548 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_tiny', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
dtypes: float32(4)
memory usage: 384.0 bytes
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
5      52.067585   534.256165  0.155164   8.526538
6      50.992905   814.561340  0.257439   5.994627
7      34.347893   205.928116  0.720020   9.414678
8      63.010204   221.354385  0.814630   5.897069
9      22.605108  1660.837036  0.731124   9.374556
10     13.280704   643.716797  0.520814   4.842079
11      7.606344  1112.226562  0.732761   6.140375
12     51.401745  1161.331543  0.618557   2.218271
13     94.566437   663.266418  0.852323   6.919084
14     14.282172  1575.160400  0.428596   4.169882
15     38.088467  1321.297485  0.052941  10.429984
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0   4.638804
1       1  -0.016289
2       2   5.497459
3       3  13.634723
4       4  17.235344
5       5   5.985446
6       6  12.984626
7       7  -0.827708
8       8  -0.695276
9       9  30.865291
10     10  11.322276
11     11  20.447186
12     12  21.086290
13     13   7.148533
14     14  27.634765
15     15  23.271892
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_tiny', 'MLPRegressor') Estimator 0.00021958084419207435
    index  SQL_Estimator  Py_Estimator  SQL_Error
0       0       4.638804      4.638926  -0.000121
1       1      -0.016289     -0.016241  -0.000048
2       2       5.497459      5.497584  -0.000125
3       3      13.634723     13.634979  -0.000256
4       4      17.235344     17.235611  -0.000267
5       5       5.985446      5.985593  -0.000147
6       6      12.984626     12.984845  -0.000219
7       7      -0.827708     -0.827648  -0.000059
8       8      -0.695276     -0.695215  -0.000061
9       9      30.865291     30.865799  -0.000508
10     10      11.322276     11.322454  -0.000179
11     11      20.447186     20.447538  -0.000353
12     12      21.086290     21.086662  -0.000372
13     13       7.148533      7.148711  -0.000179
14     14      27.634765     27.635040  -0.000275
15     15      23.271892     23.272236  -0.000344
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_tiny', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_tiny_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_tiny', 'MLPRegressor', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.419235 + -0.108948 * t."OUT_0"  + 0.126617 * t."OUT_1"  + 0.705004 * t."OUT_2"  + 0.827366 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.418424 * t."OUT_0"  + -0.576469 * t."OUT_1"  + 0.156986 * t."OUT_2"  + -0.734452 * t."OUT_3" AS "OUT_1",
    -0.459947 + -0.368166 * t."OUT_0"  + 0.229808 * t."OUT_1"  + 0.700507 * t."OUT_2"  + -0.380831 * t."OUT_3" AS "OUT_2",
    -0.639429 + -0.030796 * t."OUT_0"  + 0.059993 * t."OUT_1"  + -0.103025 * t."OUT_2"  + 0.354788 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_tiny', 'MLPRegressor', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_tiny', 'MLPRegressor', 'pgsql')
0.588194 * t."OUT_4"  + -0.621888 * t."OUT_5"  + -0.489729 * t."OUT_6"  + 0.341265 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518658 + 0.567894 * t."OUT_0"  + 0.675423 * t."OUT_1"  + 0.183193 * t."OUT_2"  + -0.288160 * t."OUT_3"  + -0.222458 * t."OUT_4"  + -0.431548 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_tiny', 'MLPRegressor', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
