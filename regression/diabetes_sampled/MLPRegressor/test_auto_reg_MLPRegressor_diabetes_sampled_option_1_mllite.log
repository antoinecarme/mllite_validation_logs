         age       sex       bmi  ...        s5        s6  target
0   0.038076  0.050680 -0.009439  ... -0.025953  0.106617    81.0
1   0.081666  0.050680  0.001339  ...  0.084492 -0.030072   196.0
2   0.041708 -0.044642 -0.008362  ... -0.048359 -0.030072    81.0
3  -0.041840 -0.044642  0.128521  ... -0.015999 -0.050783   259.0
4   0.023546  0.050680 -0.030996  ... -0.074093 -0.034215    55.0
5   0.016281  0.050680  0.014272  ...  0.074966  0.040343   220.0
6  -0.009147  0.050680 -0.039618  ...  0.017765 -0.067351   124.0
7  -0.085430 -0.044642 -0.004050  ... -0.061176 -0.013504    68.0
8  -0.001882 -0.044642  0.033673  ...  0.026717  0.061054   270.0
9  -0.070900  0.050680 -0.089197  ... -0.012909 -0.054925   104.0
10 -0.052738 -0.044642  0.071397  ... -0.046883  0.003064    55.0
11 -0.060003  0.050680  0.015350  ... -0.030748 -0.001078    96.0
12  0.009016  0.050680  0.069241  ...  0.103297  0.073480   277.0
13 -0.096328 -0.044642 -0.076264  ... -0.059471 -0.083920   134.0
14 -0.060003  0.050680 -0.047163  ... -0.062917 -0.054925    72.0
15  0.045341 -0.044642  0.071397  ... -0.041176 -0.071494   141.0
16  0.027178 -0.044642 -0.007284  ...  0.043444  0.015491    95.0
17  0.067136 -0.044642 -0.061174  ... -0.056153 -0.059067    89.0
18  0.030811 -0.044642 -0.033151  ... -0.039809 -0.054925    65.0
19  0.074401 -0.044642  0.114509  ... -0.000612 -0.005220   237.0
20  0.016281  0.050680 -0.021295  ... -0.012909  0.023775   107.0
21  0.001751  0.050680 -0.005128  ... -0.006081 -0.067351    92.0
22 -0.103593  0.050680 -0.023451  ... -0.078140 -0.071494    71.0
23  0.023546  0.050680 -0.020218  ... -0.096435 -0.017646    47.0
24 -0.016412  0.050680  0.002417  ...  0.085531  0.081764   123.0
25  0.056239  0.050680  0.009961  ...  0.060791  0.032059   150.0
26  0.067136 -0.044642  0.036907  ... -0.025953 -0.038357    90.0
27 -0.052738  0.050680  0.039062  ...  0.016307  0.003064    85.0
28  0.067136  0.050680 -0.014828  ... -0.005142  0.048628   124.0
29  0.038076  0.050680 -0.029918  ...  0.003709 -0.030072    88.0
30 -0.070900 -0.044642 -0.004050  ... -0.051404 -0.034215    61.0
31  0.019913  0.050680  0.104809  ...  0.003709  0.040343   321.0
32 -0.016412 -0.044642 -0.052552  ... -0.068332 -0.030072   181.0
33 -0.005515  0.050680  0.001339  ... -0.041176 -0.088062    51.0
34  0.045341  0.050680 -0.008362  ...  0.029935  0.027917   131.0
35 -0.001882  0.050680  0.030440  ...  0.025395  0.027917   222.0
36  0.012648  0.050680 -0.020218  ... -0.005142 -0.009362   111.0
37  0.009016 -0.044642 -0.032073  ... -0.011897 -0.038357    87.0
38  0.016281 -0.044642  0.020739  ...  0.013317  0.040343   281.0
39  0.041708  0.050680  0.071397  ...  0.073407  0.085907   295.0
40  0.048974  0.050680  0.074630  ...  0.033654  0.019633   275.0
41  0.067136  0.050680 -0.029918  ... -0.038460  0.007207   108.0
42 -0.027310  0.050680 -0.055785  ... -0.005142 -0.050783    63.0
43 -0.052738 -0.044642  0.054152  ... -0.074093 -0.059067   142.0
44 -0.041840 -0.044642 -0.066563  ... -0.056153 -0.013504    59.0
45  0.009016 -0.044642 -0.012673  ...  0.023371 -0.005220   292.0
46  0.001751 -0.044642 -0.046085  ... -0.061176 -0.079778   114.0
47  0.045341 -0.044642 -0.006206  ...  0.032432 -0.005220   219.0
48 -0.023677 -0.044642  0.030440  ...  0.033043  0.003064   122.0
49  0.023546  0.050680 -0.019140  ... -0.025953 -0.013504   219.0
50  0.009016 -0.044642 -0.020218  ... -0.010903 -0.001078    97.0
51  0.034443 -0.044642 -0.038540  ...  0.031193  0.098333   206.0
52 -0.099961 -0.044642 -0.067641  ... -0.049872 -0.009362    55.0
53  0.005383 -0.044642  0.058463  ... -0.051404 -0.025930   136.0
54 -0.049105 -0.044642  0.160855  ...  0.028020  0.011349   346.0

[55 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[ 0.03807591  0.05068012 -0.00943939  0.00235142  0.00118295  0.03751653
  -0.05444576  0.05017634 -0.02595311  0.10661709]
 [ 0.08166637  0.05068012  0.00133873  0.03564379  0.12639466  0.09106492
   0.019187    0.03430886  0.08449153 -0.03007245]
 [ 0.04170844 -0.04464164 -0.00836158 -0.02632753  0.02457414  0.01622244
   0.07072993 -0.03949338 -0.04835926 -0.03007245]
 [-0.04183994 -0.04464164  0.12852055  0.0631866  -0.03321588 -0.03262872
   0.01182372 -0.03949338 -0.01599887 -0.05078298]
 [ 0.02354575  0.05068012 -0.03099563 -0.00567042 -0.01670444  0.01778818
  -0.03235593 -0.00259226 -0.0740926  -0.03421455]] [ 81. 196.  81. 259.  55.]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.009, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 55, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.056448, 0.373925, -0.298895, -0.021684 ],
			"coeffs_1" : [ 0.120414, -0.424785, 0.157843, 0.047221 ],
			"coeffs_2" : [ 0.558164, 0.173479, 0.512519, -0.075731 ],
			"coeffs_3" : [ 0.623864, -0.544390, -0.306027, 0.270254 ],
			"coeffs_4" : [ 0.342145, -0.348291, -0.301327, -0.534933 ],
			"coeffs_5" : [ 0.283620, -0.680742, -0.072625, 0.003907 ],
			"coeffs_6" : [ -0.130053, -0.629000, -0.303497, 0.509225 ],
			"coeffs_7" : [ -0.048116, 0.038361, -0.618955, 0.061550 ],
			"coeffs_8" : [ -0.199980, 0.275584, -0.163357, 0.303044 ],
			"coeffs_9" : [ -0.435677, 0.605482, -0.510495, 0.374473 ],
			"intercepts" : [ -0.470260, 0.394671, 0.122443, 0.621452 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.443915, -0.544968, 0.236548, 0.254996, 0.475586, 0.606558, 0.538130, -0.459344 ],
			"coeffs_1" : [ 0.455198, 0.545841, -0.456743, 0.315838, 0.241953, 0.021346, 0.058092, 0.437388 ],
			"coeffs_2" : [ -0.574857, 0.059838, 0.260806, 0.406786, -0.571860, 0.459388, -0.424365, -0.621182 ],
			"coeffs_3" : [ 0.729962, 0.644590, -0.122822, -0.575044, 0.006952, 0.644577, -0.541730, 0.312152 ],
			"intercepts" : [ 0.350582, 0.387570, 0.593543, -0.357124, 0.329878, 0.466222, 0.486645, -0.030086 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.613320, 0.295151, 0.007260, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.271073, 0.558784, 0.027252, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.187060, -0.230047, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.215160, 0.376506, 0.431074, 0.557300, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.310766, 0.029250, 0.182889, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.344982, 0.423126, 0.107910, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313924, 0.333893, -0.452853, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.089661, -0.296614, 0.299111, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.561557, -0.464776, -0.245913, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.279159 ],
			"coeffs_1" : [ -0.180692 ],
			"coeffs_2" : [ -0.605936 ],
			"coeffs_3" : [ -0.637970 ],
			"coeffs_4" : [ -0.789604 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575928 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_sampled_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 55, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.056448, 0.373925, -0.298895, -0.021684 ],
			"coeffs_1" : [ 0.120414, -0.424785, 0.157843, 0.047221 ],
			"coeffs_2" : [ 0.558164, 0.173479, 0.512519, -0.075731 ],
			"coeffs_3" : [ 0.623864, -0.544390, -0.306027, 0.270254 ],
			"coeffs_4" : [ 0.342145, -0.348291, -0.301327, -0.534933 ],
			"coeffs_5" : [ 0.283620, -0.680742, -0.072625, 0.003907 ],
			"coeffs_6" : [ -0.130053, -0.629000, -0.303497, 0.509225 ],
			"coeffs_7" : [ -0.048116, 0.038361, -0.618955, 0.061550 ],
			"coeffs_8" : [ -0.199980, 0.275584, -0.163357, 0.303044 ],
			"coeffs_9" : [ -0.435677, 0.605482, -0.510495, 0.374473 ],
			"intercepts" : [ -0.470260, 0.394671, 0.122443, 0.621452 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.443915, -0.544968, 0.236548, 0.254996, 0.475586, 0.606558, 0.538130, -0.459344 ],
			"coeffs_1" : [ 0.455198, 0.545841, -0.456743, 0.315838, 0.241953, 0.021346, 0.058092, 0.437388 ],
			"coeffs_2" : [ -0.574857, 0.059838, 0.260806, 0.406786, -0.571860, 0.459388, -0.424365, -0.621182 ],
			"coeffs_3" : [ 0.729962, 0.644590, -0.122822, -0.575044, 0.006952, 0.644577, -0.541730, 0.312152 ],
			"intercepts" : [ 0.350582, 0.387570, 0.593543, -0.357124, 0.329878, 0.466222, 0.486645, -0.030086 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.613320, 0.295151, 0.007260, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.271073, 0.558784, 0.027252, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.187060, -0.230047, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.215160, 0.376506, 0.431074, 0.557300, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.310766, 0.029250, 0.182889, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.344982, 0.423126, 0.107910, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313924, 0.333893, -0.452853, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.089661, -0.296614, 0.299111, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.561557, -0.464776, -0.245913, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.279159 ],
			"coeffs_1" : [ -0.180692 ],
			"coeffs_2" : [ -0.605936 ],
			"coeffs_3" : [ -0.637970 ],
			"coeffs_4" : [ -0.789604 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575928 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 55
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.056448, 0.373925, -0.298895, -0.021684 ],
			"coeffs_1" : [ 0.120414, -0.424785, 0.157843, 0.047221 ],
			"coeffs_2" : [ 0.558164, 0.173479, 0.512519, -0.075731 ],
			"coeffs_3" : [ 0.623864, -0.54439, -0.306027, 0.270254 ],
			"coeffs_4" : [ 0.342145, -0.348291, -0.301327, -0.534933 ],
			"coeffs_5" : [ 0.28362, -0.680742, -0.072625, 0.003907 ],
			"coeffs_6" : [ -0.130053, -0.629, -0.303497, 0.509225 ],
			"coeffs_7" : [ -0.048116, 0.038361, -0.618955, 0.06155 ],
			"coeffs_8" : [ -0.19998, 0.275584, -0.163357, 0.303044 ],
			"coeffs_9" : [ -0.435677, 0.605482, -0.510495, 0.374473 ],
			"intercepts" : [ -0.47026, 0.394671, 0.122443, 0.621452 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.443915, -0.544968, 0.236548, 0.254996, 0.475586, 0.606558, 0.53813, -0.459344 ],
			"coeffs_1" : [ 0.455198, 0.545841, -0.456743, 0.315838, 0.241953, 0.021346, 0.058092, 0.437388 ],
			"coeffs_2" : [ -0.574857, 0.059838, 0.260806, 0.406786, -0.57186, 0.459388, -0.424365, -0.621182 ],
			"coeffs_3" : [ 0.729962, 0.64459, -0.122822, -0.575044, 0.006952, 0.644577, -0.54173, 0.312152 ],
			"intercepts" : [ 0.350582, 0.38757, 0.593543, -0.357124, 0.329878, 0.466222, 0.486645, -0.030086 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.61332, 0.295151, 0.00726, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.271073, 0.558784, 0.027252, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.18706, -0.230047, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.21516, 0.376506, 0.431074, 0.5573, 0.47569, 0.371699 ],
			"coeffs_4" : [ -0.310766, 0.02925, 0.182889, 0.443776, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.344982, 0.423126, 0.10791, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313924, 0.333893, -0.452853, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.089661, -0.296614, 0.299111, -0.618701, -0.588556, 0.48808 ],
			"intercepts" : [ 0.561557, -0.464776, -0.245913, -0.494865, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.279159 ],
			"coeffs_1" : [ -0.180692 ],
			"coeffs_2" : [ -0.605936 ],
			"coeffs_3" : [ -0.63797 ],
			"coeffs_4" : [ -0.789604 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575928 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-0.69926596 -0.70718986 -0.7168424  -0.7310669  -0.7221387  -0.70202416
 -0.717429   -0.72508454 -0.7014737  -0.72400904 -0.725169   -0.72407126
 -0.70417565 -0.7299716  -0.7296149  -0.72781324 -0.70593965 -0.71573806
 -0.71791476 -0.71398324 -0.71211267 -0.72762966 -0.7373948  -0.722505
 -0.7024106  -0.7005024  -0.7176222  -0.72429645 -0.70415235 -0.71575916
 -0.7268869  -0.713783   -0.71871173 -0.7338983  -0.70450664 -0.7068696
 -0.71303135 -0.71657693 -0.70395577 -0.7014679  -0.7085535  -0.71042097
 -0.7211306  -0.7339488  -0.71574426 -0.705325   -0.7248949  -0.70649314
 -0.70865905 -0.71586204 -0.7134587  -0.7051375  -0.7202457  -0.72624105
 -0.72049224]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-0.6992661  -0.7071899  -0.7168425  -0.73106694 -0.72213876 -0.7020242
 -0.71742904 -0.7250847  -0.70147383 -0.7240092  -0.72516906 -0.72407126
 -0.70417583 -0.7299717  -0.72961503 -0.7278133  -0.70593977 -0.7157382
 -0.7179149  -0.7139833  -0.7121127  -0.7276298  -0.7373949  -0.7225051
 -0.7024107  -0.7005025  -0.7176223  -0.72429657 -0.7041525  -0.7157593
 -0.7268871  -0.71378314 -0.71871185 -0.73389834 -0.70450675 -0.70686966
 -0.7130314  -0.716577   -0.7039559  -0.70146805 -0.7085536  -0.71042097
 -0.7211307  -0.73394895 -0.7157444  -0.70532507 -0.724895   -0.70649314
 -0.70865905 -0.71586215 -0.7134588  -0.7051376  -0.7202459  -0.72624123
 -0.72049236]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'diabetes_sampled', 'size': 55, 'mse': 27438.398, 'mae': 144.17056, 'mape': 1.0067577, 'r2': -3.123620927465338}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'diabetes_sampled', 'training_time_in_sec': 0.009, 'prediction_time_in_sec': 0.001}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ 0.000701 ],
      "X_1" : [ -0.000357 ],
      "X_2" : [ -0.000250 ],
      "X_3" : [ 0.000055 ],
      "X_4" : [ 0.000130 ],
      "X_5" : [ -0.000364 ],
      "X_6" : [ 0.000032 ],
      "X_7" : [ 0.000685 ],
      "X_8" : [ 0.000808 ],
      "X_9" : [ 0.001455 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 9, 8, 0, 7, 5, 1, 2, 4, 3, 6 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_sampled_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_sampled_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_sampled', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "diabetes_sampled" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.470260 + -0.056448 * t."OUT_0"  + 0.120414 * t."OUT_1"  + 0.558164 * t."OUT_2"  + 0.623864 * t."OUT_3"  + 0.342145 * t."OUT_4"  + 0.283620 * t."OUT_5"  + -0.130053 * 
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_sampled', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_sampled', 'MLPRegressor', 'duckdb')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575928 + -0.279159 * t."OUT_0"  + -0.180692 * t."OUT_1"  + -0.605936 * t."OUT_2"  + -0.637970 * t."OUT_3"  + -0.789604 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_sampled', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 55 entries, 0 to 54
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     55 non-null     float32
 1   X_1     55 non-null     float32
 2   X_2     55 non-null     float32
 3   X_3     55 non-null     float32
 4   X_4     55 non-null     float32
 5   X_5     55 non-null     float32
 6   X_6     55 non-null     float32
 7   X_7     55 non-null     float32
 8   X_8     55 non-null     float32
 9   X_9     55 non-null     float32
dtypes: float32(10)
memory usage: 2.6 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.038076  0.050680 -0.009439  ...  0.050176 -0.025953  0.106617
1      0.081666  0.050680  0.001339  ...  0.034309  0.084492 -0.030072
2      0.041708 -0.044642 -0.008362  ... -0.039493 -0.048359 -0.030072
3     -0.041840 -0.044642  0.128521  ... -0.039493 -0.015999 -0.050783
4      0.023546  0.050680 -0.030996  ... -0.002592 -0.074093 -0.034215
5      0.016281  0.050680  0.014272  ...  0.034309  0.074966  0.040343
6     -0.009147  0.050680 -0.039618  ...  0.071210  0.017765 -0.067351
7     -0.085430 -0.044642 -0.004050  ... -0.039493 -0.061176 -0.013504
8     -0.001882 -0.044642  0.033673  ... -0.002592  0.026717  0.061054
9     -0.070900  0.050680 -0.089197  ... -0.002592 -0.012909 -0.054925
10    -0.052738 -0.044642  0.071397  ... -0.021412 -0.046883  0.003064
11    -0.060003  0.050680  0.015350  ... -0.002592 -0.030748 -0.001078
12     0.009016  0.050680  0.069241  ...  0.034309  0.103297  0.073480
13    -0.096328 -0.044642 -0.076264  ... -0.039493 -0.059471 -0.083920
14    -0.060003  0.050680 -0.047163  ... -0.039493 -0.062917 -0.054925
15     0.045341 -0.044642  0.071397  ... -0.039493 -0.041176 -0.071494
16     0.027178 -0.044642 -0.007284  ... -0.002592  0.043444  0.015491
17     0.067136 -0.044642 -0.061174  ... -0.039493 -0.056153 -0.059067
18     0.030811 -0.044642 -0.033151  ... -0.076395 -0.039809 -0.054925
19     0.074401 -0.044642  0.114509  ... -0.002592 -0.000612 -0.005220
20     0.016281  0.050680 -0.021295  ... -0.002592 -0.012909  0.023775
21     0.001751  0.050680 -0.005128  ... -0.039493 -0.006081 -0.067351
22    -0.103593  0.050680 -0.023451  ... -0.039493 -0.078140 -0.071494
23     0.023546  0.050680 -0.020218  ... -0.039493 -0.096435 -0.017646
24    -0.016412  0.050680  0.002417  ...  0.034309  0.085531  0.081764
25     0.056239  0.050680  0.009961  ...  0.034309  0.060791  0.032059
26     0.067136 -0.044642  0.036907  ... -0.039493 -0.025953 -0.038357
27    -0.052738  0.050680  0.039062  ... -0.039493  0.016307  0.003064
28     0.067136  0.050680 -0.014828  ...  0.012906 -0.005142  0.048628
29     0.038076  0.050680 -0.029918  ... -0.002592  0.003709 -0.030072
30    -0.070900 -0.044642 -0.004050  ... -0.076395 -0.051404 -0.034215
31     0.019913  0.050680  0.104809  ... -0.002592  0.003709  0.040343
32    -0.016412 -0.044642 -0.052552  ... -0.039493 -0.068332 -0.030072
33    -0.005515  0.050680  0.001339  ... -0.039493 -0.041176 -0.088062
34     0.045341  0.050680 -0.008362  ...  0.034309  0.029935  0.027917
35    -0.001882  0.050680  0.030440  ...  0.071210  0.025395  0.027917
36     0.012648  0.050680 -0.020218  ...  0.034309 -0.005142 -0.009362
37     0.009016 -0.044642 -0.032073  ... -0.076395 -0.011897 -0.038357
38     0.016281 -0.044642  0.020739  ... -0.002592  0.013317  0.040343
39     0.041708  0.050680  0.071397  ...  0.034309  0.073407  0.085907
40     0.048974  0.050680  0.074630  ...  0.034309  0.033654  0.019633
41     0.067136  0.050680 -0.029918  ... -0.050564 -0.038460  0.007207
42    -0.027310  0.050680 -0.055785  ... -0.039493 -0.005142 -0.050783
43    -0.052738 -0.044642  0.054152  ... -0.039493 -0.074093 -0.059067
44    -0.041840 -0.044642 -0.066563  ... -0.039493 -0.056153 -0.013504
45     0.009016 -0.044642 -0.012673  ...  0.034309  0.023371 -0.005220
46     0.001751 -0.044642 -0.046085  ... -0.069383 -0.061176 -0.079778
47     0.045341 -0.044642 -0.006206  ...  0.034309  0.032432 -0.005220
48    -0.023677 -0.044642  0.030440  ...  0.071210  0.033043  0.003064
49     0.023546  0.050680 -0.019140  ... -0.039493 -0.025953 -0.013504
50     0.009016 -0.044642 -0.020218  ... -0.039493 -0.010903 -0.001078
51     0.034443 -0.044642 -0.038540  ... -0.002592  0.031193  0.098333
52    -0.099961 -0.044642 -0.067641  ... -0.039493 -0.049872 -0.009362
53     0.005383 -0.044642  0.058463  ... -0.076395 -0.051404 -0.025930
54    -0.049105 -0.044642  0.160855  ...  0.034309  0.028020  0.011349

[55 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 55 entries, 0 to 54
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      55 non-null     int64  
 1   Estimator  55 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1012.0 bytes
    index  Estimator
0       0  -0.699266
1       1  -0.707190
2       2  -0.716842
3       3  -0.731067
4       4  -0.722139
5       5  -0.702024
6       6  -0.717429
7       7  -0.725085
8       8  -0.701474
9       9  -0.724009
10     10  -0.725169
11     11  -0.724071
12     12  -0.704176
13     13  -0.729972
14     14  -0.729615
15     15  -0.727813
16     16  -0.705940
17     17  -0.715738
18     18  -0.717915
19     19  -0.713983
20     20  -0.712113
21     21  -0.727630
22     22  -0.737395
23     23  -0.722505
24     24  -0.702411
25     25  -0.700503
26     26  -0.717622
27     27  -0.724297
28     28  -0.704153
29     29  -0.715759
30     30  -0.726887
31     31  -0.713783
32     32  -0.718712
33     33  -0.733898
34     34  -0.704507
35     35  -0.706870
36     36  -0.713031
37     37  -0.716577
38     38  -0.703956
39     39  -0.701468
40     40  -0.708554
41     41  -0.710421
42     42  -0.721131
43     43  -0.733949
44     44  -0.715744
45     45  -0.705325
46     46  -0.724895
47     47  -0.706493
48     48  -0.708659
49     49  -0.715862
50     50  -0.713459
51     51  -0.705138
52     52  -0.720246
53     53  -0.726241
54     54  -0.720492
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_sampled', 'MLPRegressor') Estimator 1.0078603571111506e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
39     39      -0.701468     -0.701468 -1.788139e-07
40     40      -0.708554     -0.708553 -1.192093e-07
41     41      -0.710421     -0.710421  0.000000e+00
42     42      -0.721131     -0.721131 -1.192093e-07
43     43      -0.733949     -0.733949 -1.192093e-07
44     44      -0.715744     -0.715744 -1.192093e-07
45     45      -0.705325     -0.705325 -5.960464e-08
46     46      -0.724895     -0.724895 -1.192093e-07
47     47      -0.706493     -0.706493  0.000000e+00
48     48      -0.708659     -0.708659  0.000000e+00
49     49      -0.715862     -0.715862 -1.192093e-07
50     50      -0.713459     -0.713459 -5.960464e-08
51     51      -0.705138     -0.705137 -1.192093e-07
52     52      -0.720246     -0.720246 -1.788139e-07
53     53      -0.726241     -0.726241 -1.788139e-07
54     54      -0.720492     -0.720492 -1.192093e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_sampled', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_diabetes_sampled_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('diabetes_sampled', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "diabetes_sampled" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.470260 + -0.056448 * t."OUT_0"  + 0.120414 * t."OUT_1"  + 0.558164 * t."OUT_2"  + 0.623864 * t."OUT_3"  + 0.342145 * t."OUT_4"  + 0.283620 * t."OUT_5"  + -0.130053 * 
SQL_OUT_PUT_FIRST_LINES_END ('diabetes_sampled', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('diabetes_sampled', 'MLPRegressor', 'sqlite')
01604 * t."OUT_4"  + -0.324393 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.488080 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575928 + -0.279159 * t."OUT_0"  + -0.180692 * t."OUT_1"  + -0.605936 * t."OUT_2"  + -0.637970 * t."OUT_3"  + -0.789604 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('diabetes_sampled', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 55 entries, 0 to 54
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     55 non-null     float32
 1   X_1     55 non-null     float32
 2   X_2     55 non-null     float32
 3   X_3     55 non-null     float32
 4   X_4     55 non-null     float32
 5   X_5     55 non-null     float32
 6   X_6     55 non-null     float32
 7   X_7     55 non-null     float32
 8   X_8     55 non-null     float32
 9   X_9     55 non-null     float32
dtypes: float32(10)
memory usage: 2.6 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.038076  0.050680 -0.009439  ...  0.050176 -0.025953  0.106617
1      0.081666  0.050680  0.001339  ...  0.034309  0.084492 -0.030072
2      0.041708 -0.044642 -0.008362  ... -0.039493 -0.048359 -0.030072
3     -0.041840 -0.044642  0.128521  ... -0.039493 -0.015999 -0.050783
4      0.023546  0.050680 -0.030996  ... -0.002592 -0.074093 -0.034215
5      0.016281  0.050680  0.014272  ...  0.034309  0.074966  0.040343
6     -0.009147  0.050680 -0.039618  ...  0.071210  0.017765 -0.067351
7     -0.085430 -0.044642 -0.004050  ... -0.039493 -0.061176 -0.013504
8     -0.001882 -0.044642  0.033673  ... -0.002592  0.026717  0.061054
9     -0.070900  0.050680 -0.089197  ... -0.002592 -0.012909 -0.054925
10    -0.052738 -0.044642  0.071397  ... -0.021412 -0.046883  0.003064
11    -0.060003  0.050680  0.015350  ... -0.002592 -0.030748 -0.001078
12     0.009016  0.050680  0.069241  ...  0.034309  0.103297  0.073480
13    -0.096328 -0.044642 -0.076264  ... -0.039493 -0.059471 -0.083920
14    -0.060003  0.050680 -0.047163  ... -0.039493 -0.062917 -0.054925
15     0.045341 -0.044642  0.071397  ... -0.039493 -0.041176 -0.071494
16     0.027178 -0.044642 -0.007284  ... -0.002592  0.043444  0.015491
17     0.067136 -0.044642 -0.061174  ... -0.039493 -0.056153 -0.059067
18     0.030811 -0.044642 -0.033151  ... -0.076395 -0.039809 -0.054925
19     0.074401 -0.044642  0.114509  ... -0.002592 -0.000612 -0.005220
20     0.016281  0.050680 -0.021295  ... -0.002592 -0.012909  0.023775
21     0.001751  0.050680 -0.005128  ... -0.039493 -0.006081 -0.067351
22    -0.103593  0.050680 -0.023451  ... -0.039493 -0.078140 -0.071494
23     0.023546  0.050680 -0.020218  ... -0.039493 -0.096435 -0.017646
24    -0.016412  0.050680  0.002417  ...  0.034309  0.085531  0.081764
25     0.056239  0.050680  0.009961  ...  0.034309  0.060791  0.032059
26     0.067136 -0.044642  0.036907  ... -0.039493 -0.025953 -0.038357
27    -0.052738  0.050680  0.039062  ... -0.039493  0.016307  0.003064
28     0.067136  0.050680 -0.014828  ...  0.012906 -0.005142  0.048628
29     0.038076  0.050680 -0.029918  ... -0.002592  0.003709 -0.030072
30    -0.070900 -0.044642 -0.004050  ... -0.076395 -0.051404 -0.034215
31     0.019913  0.050680  0.104809  ... -0.002592  0.003709  0.040343
32    -0.016412 -0.044642 -0.052552  ... -0.039493 -0.068332 -0.030072
33    -0.005515  0.050680  0.001339  ... -0.039493 -0.041176 -0.088062
34     0.045341  0.050680 -0.008362  ...  0.034309  0.029935  0.027917
35    -0.001882  0.050680  0.030440  ...  0.071210  0.025395  0.027917
36     0.012648  0.050680 -0.020218  ...  0.034309 -0.005142 -0.009362
37     0.009016 -0.044642 -0.032073  ... -0.076395 -0.011897 -0.038357
38     0.016281 -0.044642  0.020739  ... -0.002592  0.013317  0.040343
39     0.041708  0.050680  0.071397  ...  0.034309  0.073407  0.085907
40     0.048974  0.050680  0.074630  ...  0.034309  0.033654  0.019633
41     0.067136  0.050680 -0.029918  ... -0.050564 -0.038460  0.007207
42    -0.027310  0.050680 -0.055785  ... -0.039493 -0.005142 -0.050783
43    -0.052738 -0.044642  0.054152  ... -0.039493 -0.074093 -0.059067
44    -0.041840 -0.044642 -0.066563  ... -0.039493 -0.056153 -0.013504
45     0.009016 -0.044642 -0.012673  ...  0.034309  0.023371 -0.005220
46     0.001751 -0.044642 -0.046085  ... -0.069383 -0.061176 -0.079778
47     0.045341 -0.044642 -0.006206  ...  0.034309  0.032432 -0.005220
48    -0.023677 -0.044642  0.030440  ...  0.071210  0.033043  0.003064
49     0.023546  0.050680 -0.019140  ... -0.039493 -0.025953 -0.013504
50     0.009016 -0.044642 -0.020218  ... -0.039493 -0.010903 -0.001078
51     0.034443 -0.044642 -0.038540  ... -0.002592  0.031193  0.098333
52    -0.099961 -0.044642 -0.067641  ... -0.039493 -0.049872 -0.009362
53     0.005383 -0.044642  0.058463  ... -0.076395 -0.051404 -0.025930
54    -0.049105 -0.044642  0.160855  ...  0.034309  0.028020  0.011349

[55 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 55 entries, 0 to 54
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      55 non-null     int64  
 1   Estimator  55 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1012.0 bytes
    index  Estimator
0       0  -0.699266
1       1  -0.707190
2       2  -0.716843
3       3  -0.731067
4       4  -0.722139
5       5  -0.702024
6       6  -0.717429
7       7  -0.725085
8       8  -0.701474
9       9  -0.724009
10     10  -0.725169
11     11  -0.724071
12     12  -0.704176
13     13  -0.729972
14     14  -0.729615
15     15  -0.727813
16     16  -0.705940
17     17  -0.715738
18     18  -0.717915
19     19  -0.713983
20     20  -0.712113
21     21  -0.727630
22     22  -0.737395
23     23  -0.722505
24     24  -0.702411
25     25  -0.700503
26     26  -0.717622
27     27  -0.724297
28     28  -0.704153
29     29  -0.715759
30     30  -0.726887
31     31  -0.713783
32     32  -0.718712
33     33  -0.733898
34     34  -0.704507
35     35  -0.706870
36     36  -0.713031
37     37  -0.716577
38     38  -0.703956
39     39  -0.701468
40     40  -0.708554
41     41  -0.710421
42     42  -0.721131
43     43  -0.733949
44     44  -0.715744
45     45  -0.705325
46     46  -0.724895
47     47  -0.706493
48     48  -0.708659
49     49  -0.715862
50     50  -0.713459
51     51  -0.705138
52     52  -0.720246
53     53  -0.726241
54     54  -0.720492
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('diabetes_sampled', 'MLPRegressor') Estimator 1.2508563496307155e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
39     39      -0.701468     -0.701468 -2.003878e-07
40     40      -0.708554     -0.708553 -1.137054e-07
41     41      -0.710421     -0.710421 -3.690593e-08
42     42      -0.721131     -0.721131 -1.063481e-07
43     43      -0.733949     -0.733949 -1.482852e-07
44     44      -0.715744     -0.715744 -1.690495e-07
45     45      -0.705325     -0.705325 -1.134193e-07
46     46      -0.724895     -0.724895 -1.940730e-07
47     47      -0.706493     -0.706493  2.135510e-09
48     48      -0.708659     -0.708659 -7.490332e-08
49     49      -0.715862     -0.715862 -1.194771e-07
50     50      -0.713459     -0.713459 -7.942733e-08
51     51      -0.705138     -0.705137 -1.447088e-07
52     52      -0.720246     -0.720246 -1.604088e-07
53     53      -0.726241     -0.726241 -1.994929e-07
54     54      -0.720492     -0.720492 -1.552862e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('diabetes_sampled', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
