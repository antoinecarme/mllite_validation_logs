          X_0          X_1       X_2        X_3       target
0   45.688718   609.092549  0.591968   7.449268   363.446298
1   92.630496  1621.621954  0.997097   3.905369  1619.565758
2   76.131749   526.792001  0.716619   5.202790   385.108775
3   40.067007   524.247515  0.463251   1.522912   246.139654
4   34.726296   778.125942  0.167246   2.339115   134.691570
..        ...          ...       ...        ...          ...
95  22.116345  1162.774063  0.675740   4.934592   786.044214
96  59.325419  1558.844569  0.742170   4.222862  1158.447272
97  74.947222  1754.316103  0.366207   1.961987   646.799393
98  52.067586   534.256140  0.155164   8.526538    97.892577
99   0.743929   167.010742  0.924844  10.614025   154.460077

[100 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[4.5688717e+01 6.0909253e+02 5.9196806e-01 7.4492683e+00]
 [9.2630493e+01 1.6216219e+03 9.9709725e-01 3.9053690e+00]
 [7.6131752e+01 5.2679199e+02 7.1661860e-01 5.2027898e+00]
 [4.0067005e+01 5.2424750e+02 4.6325052e-01 1.5229123e+00]
 [3.4726295e+01 7.7812592e+02 1.6724615e-01 2.3391147e+00]] [ 363.4463  1619.5658   385.10876  246.13965  134.69157]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.019, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.108833, 0.449260, -0.370283, -0.031178 ],
			"coeffs_1" : [ 0.126513, -0.607619, 0.230112, 0.059876 ],
			"coeffs_2" : [ 0.704743, 0.183749, 0.701261, -0.103100 ],
			"coeffs_3" : [ 0.827090, -0.765788, -0.379834, 0.354587 ],
			"intercepts" : [ 0.419028, -0.414892, -0.459353, -0.639574 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.279463, -0.727803, -0.112743, 0.013595, -0.130848, -0.610961, -0.334154, 0.548863 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.633156, 0.040321, -0.216003, 0.260923, -0.142278, 0.299391 ],
			"coeffs_2" : [ -0.470585, 0.589155, -0.517727, 0.360572, -0.507938, 0.420716, 0.194596, 0.612438 ],
			"coeffs_3" : [ -0.469420, -0.577613, 0.236548, 0.232538, 0.485430, 0.640669, 0.567111, -0.491978 ],
			"intercepts" : [ 0.394422, 0.546580, -0.426981, 0.295069, 0.219103, 0.085634, 0.118199, 0.373697 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.110692, 0.296628, 0.348956, -0.586362, 0.426025 ],
			"coeffs_1" : [ -0.338332, -0.581088, 0.670568, 0.600866, -0.110156, -0.556401 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.609045, -0.299372, 0.307162, 0.429914, 0.448883, -0.089578 ],
			"coeffs_4" : [ -0.581198, 0.336320, 0.016433, -0.133231, -0.489963, -0.628550 ],
			"coeffs_5" : [ -0.204585, 0.625859, 0.062930, -0.168964, -0.187065, -0.621912 ],
			"coeffs_6" : [ 0.246928, -0.170297, -0.225232, -0.161860, 0.240775, -0.491395 ],
			"coeffs_7" : [ -0.183434, 0.407179, 0.462170, 0.527092, 0.445570, 0.341385 ],
			"intercepts" : [ -0.245647, 0.093364, 0.214933, 0.412563, 0.290662, -0.032919 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.567924 ],
			"coeffs_1" : [ 0.675369 ],
			"coeffs_2" : [ 0.183072 ],
			"coeffs_3" : [ -0.288283 ],
			"coeffs_4" : [ -0.222577 ],
			"coeffs_5" : [ -0.431610 ],
			"intercepts" : [ 0.518576 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_medium_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 100, "dataset_features" : 4 },
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.108833, 0.449260, -0.370283, -0.031178 ],
			"coeffs_1" : [ 0.126513, -0.607619, 0.230112, 0.059876 ],
			"coeffs_2" : [ 0.704743, 0.183749, 0.701261, -0.103100 ],
			"coeffs_3" : [ 0.827090, -0.765788, -0.379834, 0.354587 ],
			"intercepts" : [ 0.419028, -0.414892, -0.459353, -0.639574 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.279463, -0.727803, -0.112743, 0.013595, -0.130848, -0.610961, -0.334154, 0.548863 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.633156, 0.040321, -0.216003, 0.260923, -0.142278, 0.299391 ],
			"coeffs_2" : [ -0.470585, 0.589155, -0.517727, 0.360572, -0.507938, 0.420716, 0.194596, 0.612438 ],
			"coeffs_3" : [ -0.469420, -0.577613, 0.236548, 0.232538, 0.485430, 0.640669, 0.567111, -0.491978 ],
			"intercepts" : [ 0.394422, 0.546580, -0.426981, 0.295069, 0.219103, 0.085634, 0.118199, 0.373697 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.110692, 0.296628, 0.348956, -0.586362, 0.426025 ],
			"coeffs_1" : [ -0.338332, -0.581088, 0.670568, 0.600866, -0.110156, -0.556401 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.609045, -0.299372, 0.307162, 0.429914, 0.448883, -0.089578 ],
			"coeffs_4" : [ -0.581198, 0.336320, 0.016433, -0.133231, -0.489963, -0.628550 ],
			"coeffs_5" : [ -0.204585, 0.625859, 0.062930, -0.168964, -0.187065, -0.621912 ],
			"coeffs_6" : [ 0.246928, -0.170297, -0.225232, -0.161860, 0.240775, -0.491395 ],
			"coeffs_7" : [ -0.183434, 0.407179, 0.462170, 0.527092, 0.445570, 0.341385 ],
			"intercepts" : [ -0.245647, 0.093364, 0.214933, 0.412563, 0.290662, -0.032919 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.567924 ],
			"coeffs_1" : [ 0.675369 ],
			"coeffs_2" : [ 0.183072 ],
			"coeffs_3" : [ -0.288283 ],
			"coeffs_4" : [ -0.222577 ],
			"coeffs_5" : [ -0.431610 ],
			"intercepts" : [ 0.518576 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 100
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.108833, 0.44926, -0.370283, -0.031178 ],
			"coeffs_1" : [ 0.126513, -0.607619, 0.230112, 0.059876 ],
			"coeffs_2" : [ 0.704743, 0.183749, 0.701261, -0.1031 ],
			"coeffs_3" : [ 0.82709, -0.765788, -0.379834, 0.354587 ],
			"intercepts" : [ 0.419028, -0.414892, -0.459353, -0.639574 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.279463, -0.727803, -0.112743, 0.013595, -0.130848, -0.610961, -0.334154, 0.548863 ],
			"coeffs_1" : [ -0.051972, 0.005832, -0.633156, 0.040321, -0.216003, 0.260923, -0.142278, 0.299391 ],
			"coeffs_2" : [ -0.470585, 0.589155, -0.517727, 0.360572, -0.507938, 0.420716, 0.194596, 0.612438 ],
			"coeffs_3" : [ -0.46942, -0.577613, 0.236548, 0.232538, 0.48543, 0.640669, 0.567111, -0.491978 ],
			"intercepts" : [ 0.394422, 0.54658, -0.426981, 0.295069, 0.219103, 0.085634, 0.118199, 0.373697 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.561438, 0.110692, 0.296628, 0.348956, -0.586362, 0.426025 ],
			"coeffs_1" : [ -0.338332, -0.581088, 0.670568, 0.600866, -0.110156, -0.556401 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.609045, -0.299372, 0.307162, 0.429914, 0.448883, -0.089578 ],
			"coeffs_4" : [ -0.581198, 0.33632, 0.016433, -0.133231, -0.489963, -0.62855 ],
			"coeffs_5" : [ -0.204585, 0.625859, 0.06293, -0.168964, -0.187065, -0.621912 ],
			"coeffs_6" : [ 0.246928, -0.170297, -0.225232, -0.16186, 0.240775, -0.491395 ],
			"coeffs_7" : [ -0.183434, 0.407179, 0.46217, 0.527092, 0.44557, 0.341385 ],
			"intercepts" : [ -0.245647, 0.093364, 0.214933, 0.412563, 0.290662, -0.032919 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.567924 ],
			"coeffs_1" : [ 0.675369 ],
			"coeffs_2" : [ 0.183072 ],
			"coeffs_3" : [ -0.288283 ],
			"coeffs_4" : [ -0.222577 ],
			"coeffs_5" : [ -0.43161 ],
			"intercepts" : [ 0.518576 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[ 7.9851875e+00  2.8738592e+01  5.4722099e+00  8.4191828e+00
  1.3737896e+01  2.0595242e+01  2.7891171e+01  1.6490358e+01
  7.7604351e+00  1.3059964e+00  2.7569351e+01  1.1155168e+01
  8.3407335e+00  2.6389334e+01  2.4938793e+01  1.8086520e+00
 -9.7838390e-01  1.1471327e+01  1.9915333e+01  3.1977798e+01
  3.0346069e+01  1.9971653e+01  6.3266325e+00  2.5811565e+00
  1.7213453e+01  1.7821704e+00  1.6961897e+01  2.0276937e+01
  2.2925705e+01  2.4895046e+01  2.2277115e+01 -7.7613878e-01
  1.3372431e+01  1.1586440e+01  1.7995188e+01  1.2657701e+01
  1.9500580e+01  1.6077682e+01  1.5143207e+01  2.8992153e+01
 -8.9335322e-01  2.7150466e+00  8.8940458e+00  1.6965145e+01
  4.0107727e+00  2.8794788e+01  5.1515770e+00  2.9355949e+01
  1.6637360e+01  4.5255203e+00  2.4118711e+01  5.9011478e+00
  1.5701609e+01  6.3541799e+00  1.1487161e+01  2.1180859e+01
  2.7936630e+01  1.6215008e+01  2.9480991e+01  2.8741251e+01
  3.0960987e+01  1.1437386e+01  8.1520557e+00  6.0425463e+00
  9.1173019e+00  8.5060854e+00 -4.5665264e-02 -7.8240275e-01
  2.3979462e+01  6.7517862e+00  1.4467268e+01  2.0137060e+01
  5.3510909e+00 -2.8088808e-02  2.6983242e+01  1.3949573e+00
  2.0012623e+01  6.1946449e+00  2.0596245e+01  1.6489120e+00
  3.0158545e+01  7.9172959e+00  6.5096970e+00  2.5676723e+01
  1.1045126e+01  7.8763598e-01  6.9445591e+00  8.4599562e+00
  1.5079178e+01 -7.6865911e-02  6.9671359e+00  1.3751420e+01
  1.2760147e+01  7.2398515e+00  1.1473606e+01  2.0817272e+01
  2.7934261e+01  3.0791309e+01  5.8309326e+00 -6.0129857e-01]
('OPERATION_END_ELAPSED', 0.003, 'PREDICT')
('OPERATION_START', 'PREDICT')
[ 7.98522758e+00  2.87387161e+01  5.47222662e+00  8.41921806e+00
  1.37380686e+01  2.05954933e+01  2.78915119e+01  1.64904308e+01
  7.76048994e+00  1.30599737e+00  2.75694714e+01  1.11552305e+01
  8.34076309e+00  2.63894329e+01  2.49389076e+01  1.80863929e+00
 -9.78411794e-01  1.14715557e+01  1.99155788e+01  3.19781990e+01
  3.03466721e+01  1.99719028e+01  6.32664490e+00  2.58114839e+00
  1.72135105e+01  1.78217959e+00  1.69619923e+01  2.02770519e+01
  2.29258194e+01  2.48955307e+01  2.22775650e+01 -7.76158094e-01
  1.33724899e+01  1.15864925e+01  1.79952602e+01  1.26577473e+01
  1.95006714e+01  1.60780144e+01  1.51432934e+01  2.89925079e+01
 -8.93356085e-01  2.71505833e+00  8.89405823e+00  1.69652309e+01
  4.01079512e+00  2.87951527e+01  5.15157461e+00  2.93563251e+01
  1.66374569e+01  4.52555799e+00  2.41188450e+01  5.90113926e+00
  1.57017918e+01  6.35418653e+00  1.14872131e+01  2.11809635e+01
  2.79367466e+01  1.62150726e+01  2.94816208e+01  2.87416286e+01
  3.09615898e+01  1.14374189e+01  8.15209961e+00  6.04258633e+00
  9.11735249e+00  8.50611782e+00 -4.56808805e-02 -7.82426119e-01
  2.39799538e+01  6.75180435e+00  1.44673195e+01  2.01371574e+01
  5.35109043e+00 -2.81132460e-02  2.69838028e+01  1.39493132e+00
  2.00127354e+01  6.19465828e+00  2.05964947e+01  1.64890146e+00
  3.01589203e+01  7.91732121e+00  6.50974655e+00  2.56772156e+01
  1.10451717e+01  7.87625015e-01  6.94457579e+00  8.46005917e+00
  1.50792627e+01 -7.68765211e-02  6.96715832e+00  1.37514486e+01
  1.27602158e+01  7.23989439e+00  1.14738598e+01  2.08175449e+01
  2.79345932e+01  3.07918968e+01  5.83095217e+00 -6.01277351e-01]
('OPERATION_END_ELAPSED', 0.002, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman2_medium', 'size': 100, 'mse': 297673.53, 'mae': 427.48816, 'mape': 0.9549992, 'r2': -1.502119389880972}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_medium_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'freidman2_medium', 'training_time_in_sec': 0.019, 'prediction_time_in_sec': 0.002}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ -0.142736 ],
      "X_1" : [ 0.052975 ],
      "X_2" : [ 0.001659 ],
      "X_3" : [ -0.026671 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 0, 1, 3, 2 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_medium_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_medium_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_medium', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_medium" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.419028 + -0.108833 * t."OUT_0"  + 0.126513 * t."OUT_1"  + 0.704743 * t."OUT_2"  + 0.827090 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.449260 * t."OUT_0"  + -0.607619 * t."OUT_1"  + 0.183749 * t."OUT_2"  + -0.765788 * t."OUT_3" AS "OUT_1",
    -0.459353 + -0.370283 * t."OUT_0"  + 0.230112 * t."OUT_1"  + 0.701261 * t."OUT_2"  + -0.379834 * t."OUT_3" AS "OUT_2",
    -0.639574 + -0.031178 * t."OUT_0"  + 0.059876 * t."OUT_1"  + -0.103100 * t."OUT_2"  + 0.354587 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_1_
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_medium', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_medium', 'MLPRegressor', 'duckdb')
0.628550 * t."OUT_4"  + -0.621912 * t."OUT_5"  + -0.491395 * t."OUT_6"  + 0.341385 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518576 + 0.567924 * t."OUT_0"  + 0.675369 * t."OUT_1"  + 0.183072 * t."OUT_2"  + -0.288283 * t."OUT_3"  + -0.222577 * t."OUT_4"  + -0.431610 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_medium', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   7.985228
1       1  28.738716
2       2   5.472227
3       3   8.419218
4       4  13.738069
..    ...        ...
95     95  20.817545
96     96  27.934593
97     97  30.791897
98     98   5.830952
99     99  -0.601277

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_medium', 'MLPRegressor') Estimator 0.00013818621635437012
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84      11.045172     11.045126   0.000046
85     85       0.787625      0.787636  -0.000011
86     86       6.944576      6.944559   0.000017
87     87       8.460059      8.459956   0.000103
88     88      15.079263     15.079178   0.000085
89     89      -0.076877     -0.076866  -0.000011
90     90       6.967158      6.967136   0.000022
91     91      13.751449     13.751420   0.000029
92     92      12.760216     12.760147   0.000069
93     93       7.239894      7.239851   0.000043
94     94      11.473860     11.473606   0.000254
95     95      20.817545     20.817272   0.000273
96     96      27.934593     27.934261   0.000332
97     97      30.791897     30.791309   0.000587
98     98       5.830952      5.830933   0.000020
99     99      -0.601277     -0.601299   0.000021
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_medium', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_freidman2_medium_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman2_medium', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman2_medium" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    0.419028 + -0.108833 * t."OUT_0"  + 0.126513 * t."OUT_1"  + 0.704743 * t."OUT_2"  + 0.827090 * t."OUT_3" AS "OUT_0",
    -0.414892 + 0.449260 * t."OUT_0"  + -0.607619 * t."OUT_1"  + 0.183749 * t."OUT_2"  + -0.765788 * t."OUT_3" AS "OUT_1",
    -0.459353 + -0.370283 * t."OUT_0"  + 0.230112 * t."OUT_1"  + 0.701261 * t."OUT_2"  + -0.379834 * t."OUT_3" AS "OUT_2",
    -0.639574 + -0.031178 * t."OUT_0"  + 0.059876 * t."OUT_1"  + -0.103100 * t."OUT_2"  + 0.354587 * t."OUT_3" AS "OUT_3"
   FROM "Input_Layer_BA" AS t
 ),
"Hidden_Layer_1_
SQL_OUT_PUT_FIRST_LINES_END ('freidman2_medium', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman2_medium', 'MLPRegressor', 'sqlite')
0.628550 * t."OUT_4"  + -0.621912 * t."OUT_5"  + -0.491395 * t."OUT_6"  + 0.341385 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    0.518576 + 0.567924 * t."OUT_0"  + 0.675369 * t."OUT_1"  + 0.183072 * t."OUT_2"  + -0.288283 * t."OUT_3"  + -0.222577 * t."OUT_4"  + -0.431610 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman2_medium', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 100 entries, 0 to 99
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     100 non-null    float32
 1   X_1     100 non-null    float32
 2   X_2     100 non-null    float32
 3   X_3     100 non-null    float32
dtypes: float32(4)
memory usage: 2.3 KB
             X_0          X_1       X_2        X_3
index                                             
0      45.688717   609.092529  0.591968   7.449268
1      92.630493  1621.621948  0.997097   3.905369
2      76.131752   526.791992  0.716619   5.202790
3      40.067005   524.247498  0.463251   1.522912
4      34.726295   778.125916  0.167246   2.339115
...          ...          ...       ...        ...
95     22.116344  1162.774048  0.675740   4.934592
96     59.325420  1558.844604  0.742170   4.222862
97     74.947220  1754.316162  0.366207   1.961987
98     52.067585   534.256165  0.155164   8.526538
99      0.743929   167.010742  0.924844  10.614025

[100 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 100 entries, 0 to 99
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      100 non-null    int64  
 1   Estimator  100 non-null    float64
dtypes: float64(1), int64(1)
memory usage: 1.7 KB
    index  Estimator
0       0   7.985225
1       1  28.738712
2       2   5.472223
3       3   8.419221
4       4  13.738076
..    ...        ...
95     95  20.817543
96     96  27.934603
97     97  30.791904
98     98   5.830956
99     99  -0.601278

[100 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman2_medium', 'MLPRegressor') Estimator 0.00013987232686923034
    index  SQL_Estimator  Py_Estimator  SQL_Error
84     84      11.045180     11.045126   0.000054
85     85       0.787625      0.787636  -0.000011
86     86       6.944573      6.944559   0.000014
87     87       8.460066      8.459956   0.000110
88     88      15.079267     15.079178   0.000089
89     89      -0.076877     -0.076866  -0.000011
90     90       6.967158      6.967136   0.000022
91     91      13.751454     13.751420   0.000034
92     92      12.760209     12.760147   0.000062
93     93       7.239894      7.239851   0.000042
94     94      11.473850     11.473606   0.000244
95     95      20.817543     20.817272   0.000270
96     96      27.934603     27.934261   0.000342
97     97      30.791904     30.791309   0.000595
98     98       5.830956      5.830933   0.000024
99     99      -0.601278     -0.601299   0.000021
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman2_medium', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
