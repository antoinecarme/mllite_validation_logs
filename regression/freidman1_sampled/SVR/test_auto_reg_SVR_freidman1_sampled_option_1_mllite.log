         X_0       X_1       X_2  ...       X_8       X_9     target
0   0.544738  0.515912  0.990435  ...  0.898018  0.377159  15.807614
1   0.783459  0.095321  0.135945  ...  0.019766  0.833486  14.766437
2   0.652811  0.757719  0.306902  ...  0.894295  0.086598  22.842493
3   0.226051  0.939732  0.731124  ...  0.185038  0.248943  19.544314
4   0.764610  0.378970  0.823855  ...  0.814980  0.123688  21.897690
5   0.368356  0.189593  0.403483  ...  0.462841  0.813023  11.119547
6   0.888102  0.149216  0.426902  ...  0.865909  0.986362   9.912128
7   0.825366  0.284076  0.971058  ...  0.780396  0.355315  15.012190
8   0.235384  0.117604  0.514017  ...  0.527227  0.211281  10.304959
9   0.834709  0.502155  0.670056  ...  0.038824  0.113899  12.722529
10  0.287599  0.939261  0.380885  ...  0.329620  0.003549  15.371187
11  0.992031  0.233387  0.782862  ...  0.461541  0.895167  11.851628

[12 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS SVR {"C" : 2}
MLLITE_MODEL_OPTIONS_DEFAULT SVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING SVR { "C" : 2,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING SVR None
('OPERATION_START', 'TRAINING')
[[0.54473835 0.51591223 0.99043506 0.25514543 0.14395337 0.33235115
  0.8686215  0.04108923 0.8980185  0.37715888]
 [0.78345853 0.09532096 0.1359447  0.858711   0.24078475 0.08367069
  0.05237448 0.42276597 0.01976581 0.8334865 ]
 [0.652811   0.75771934 0.3069025  0.8282855  0.7630638  0.85900337
  0.87337655 0.14607023 0.89429516 0.08659814]
 [0.22605109 0.9397324  0.7311243  0.8374556  0.7824477  0.3529266
  0.1832118  0.84345275 0.18503828 0.2489433 ]
 [0.76461023 0.37897    0.82385516 0.9136035  0.55340034 0.05504839
  0.58833206 0.36104986 0.81497955 0.12368783]] [15.807614 14.766437 22.842493 19.544313 21.89769 ]
MLLITE_FIT_USING_MODEL mllite_svm_reg.SVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.007, 'TRAINING')
{ "C" : 2,  "max_iter" : 128  , }
{ "C" : 2,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_SVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "epsilon_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 1.066337, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.100000, "shrinking" : 0, "probability" : 0, "C" : 2.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 12, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 12,
	"SupportVectors" : {
		"SV_00" : [ 0.544738, 0.515912, 0.990435, 0.255145, 0.143953, 0.332351, 0.868622, 0.041089, 0.898018, 0.377159 ],
		"SV_01" : [ 0.783459, 0.095321, 0.135945, 0.858711, 0.240785, 0.083671, 0.052374, 0.422766, 0.019766, 0.833486 ],
		"SV_02" : [ 0.652811, 0.757719, 0.306902, 0.828286, 0.763064, 0.859003, 0.873377, 0.146070, 0.894295, 0.086598 ],
		"SV_03" : [ 0.226051, 0.939732, 0.731124, 0.837456, 0.782448, 0.352927, 0.183212, 0.843453, 0.185038, 0.248943 ],
		"SV_04" : [ 0.764610, 0.378970, 0.823855, 0.913603, 0.553400, 0.055048, 0.588332, 0.361050, 0.814980, 0.123688 ],
		"SV_05" : [ 0.368356, 0.189593, 0.403483, 0.670145, 0.411066, 0.464093, 0.307388, 0.840440, 0.462841, 0.813023 ],
		"SV_06" : [ 0.888102, 0.149216, 0.426902, 0.180039, 0.792176, 0.085835, 0.603319, 0.653572, 0.865909, 0.986362 ],
		"SV_07" : [ 0.825366, 0.284076, 0.971058, 0.191878, 0.387555, 0.062500, 0.206877, 0.900471, 0.780397, 0.355315 ],
		"SV_08" : [ 0.235384, 0.117604, 0.514017, 0.633968, 0.618557, 0.121827, 0.576931, 0.091568, 0.527227, 0.211281 ],
		"SV_09" : [ 0.834709, 0.502155, 0.670056, 0.169213, 0.154568, 0.685113, 0.954394, 0.848192, 0.038824, 0.113899 ],
		"SV_10" : [ 0.287599, 0.939261, 0.380885, 0.731889, 0.052941, 0.942998, 0.527849, 0.812585, 0.329620, 0.003549 ],
		"SV_11" : [ 0.992031, 0.233387, 0.782862, 0.234139, 0.252201, 0.042487, 0.353661, 0.403574, 0.461541, 0.895167 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 1.248515, 1.209557, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, 1.328962, -2.000000, -2.000000, 0.212965, -2.000000 ]
	},
	"rho" : [ -14.879016 ],
	"nSV" : [ 12 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 15 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman1_sampled_option_1.json'

MLLITE_MODEL_SET_OPTIONS SVR {"C" : 2}
MLLITE_MODEL_OPTIONS_DEFAULT SVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING SVR { "C" : 2,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING SVR None
MLLITE_RELOADING_MODEL mllite_svm_reg.SVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_SVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "epsilon_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 1.066337, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.100000, "shrinking" : 0, "probability" : 0, "C" : 2.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 12, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 12,
	"SupportVectors" : {
		"SV_00" : [ 0.544738, 0.515912, 0.990435, 0.255145, 0.143953, 0.332351, 0.868622, 0.041089, 0.898018, 0.377159 ],
		"SV_01" : [ 0.783459, 0.095321, 0.135945, 0.858711, 0.240785, 0.083671, 0.052374, 0.422766, 0.019766, 0.833486 ],
		"SV_02" : [ 0.652811, 0.757719, 0.306902, 0.828286, 0.763064, 0.859003, 0.873377, 0.146070, 0.894295, 0.086598 ],
		"SV_03" : [ 0.226051, 0.939732, 0.731124, 0.837456, 0.782448, 0.352927, 0.183212, 0.843453, 0.185038, 0.248943 ],
		"SV_04" : [ 0.764610, 0.378970, 0.823855, 0.913603, 0.553400, 0.055048, 0.588332, 0.361050, 0.814980, 0.123688 ],
		"SV_05" : [ 0.368356, 0.189593, 0.403483, 0.670145, 0.411066, 0.464093, 0.307388, 0.840440, 0.462841, 0.813023 ],
		"SV_06" : [ 0.888102, 0.149216, 0.426902, 0.180039, 0.792176, 0.085835, 0.603319, 0.653572, 0.865909, 0.986362 ],
		"SV_07" : [ 0.825366, 0.284076, 0.971058, 0.191878, 0.387555, 0.062500, 0.206877, 0.900471, 0.780397, 0.355315 ],
		"SV_08" : [ 0.235384, 0.117604, 0.514017, 0.633968, 0.618557, 0.121827, 0.576931, 0.091568, 0.527227, 0.211281 ],
		"SV_09" : [ 0.834709, 0.502155, 0.670056, 0.169213, 0.154568, 0.685113, 0.954394, 0.848192, 0.038824, 0.113899 ],
		"SV_10" : [ 0.287599, 0.939261, 0.380885, 0.731889, 0.052941, 0.942998, 0.527849, 0.812585, 0.329620, 0.003549 ],
		"SV_11" : [ 0.992031, 0.233387, 0.782862, 0.234139, 0.252201, 0.042487, 0.353661, 0.403574, 0.461541, 0.895167 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 1.248515, 1.209557, 2.000000, 2.000000, 2.000000, -2.000000, -2.000000, 1.328962, -2.000000, -2.000000, 0.212965, -2.000000 ]
	},
	"rho" : [ -14.879016 ],
	"nSV" : [ 12 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 15 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 12
	},
	"metadata" :  { "model" : "Vapnik_SVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "C" : 2.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.1, "gamma" : 1.066337, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.5, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "epsilon_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 12,
		"SupportVectors" : 	{
			"SV_00" : [ 0.544738, 0.515912, 0.990435, 0.255145, 0.143953, 0.332351, 0.868622, 0.041089, 0.898018, 0.377159 ],
			"SV_01" : [ 0.783459, 0.095321, 0.135945, 0.858711, 0.240785, 0.083671, 0.052374, 0.422766, 0.019766, 0.833486 ],
			"SV_02" : [ 0.652811, 0.757719, 0.306902, 0.828286, 0.763064, 0.859003, 0.873377, 0.14607, 0.894295, 0.086598 ],
			"SV_03" : [ 0.226051, 0.939732, 0.731124, 0.837456, 0.782448, 0.352927, 0.183212, 0.843453, 0.185038, 0.248943 ],
			"SV_04" : [ 0.76461, 0.37897, 0.823855, 0.913603, 0.5534, 0.055048, 0.588332, 0.36105, 0.81498, 0.123688 ],
			"SV_05" : [ 0.368356, 0.189593, 0.403483, 0.670145, 0.411066, 0.464093, 0.307388, 0.84044, 0.462841, 0.813023 ],
			"SV_06" : [ 0.888102, 0.149216, 0.426902, 0.180039, 0.792176, 0.085835, 0.603319, 0.653572, 0.865909, 0.986362 ],
			"SV_07" : [ 0.825366, 0.284076, 0.971058, 0.191878, 0.387555, 0.0625, 0.206877, 0.900471, 0.780397, 0.355315 ],
			"SV_08" : [ 0.235384, 0.117604, 0.514017, 0.633968, 0.618557, 0.121827, 0.576931, 0.091568, 0.527227, 0.211281 ],
			"SV_09" : [ 0.834709, 0.502155, 0.670056, 0.169213, 0.154568, 0.685113, 0.954394, 0.848192, 0.038824, 0.113899 ],
			"SV_10" : [ 0.287599, 0.939261, 0.380885, 0.731889, 0.052941, 0.942998, 0.527849, 0.812585, 0.32962, 0.003549 ],
			"SV_11" : [ 0.992031, 0.233387, 0.782862, 0.234139, 0.252201, 0.042487, 0.353661, 0.403574, 0.461541, 0.895167 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ 1.248515, 1.209557, 2.0, 2.0, 2.0, -2.0, -2.0, 1.328962, -2.0, -2.0, 0.212965, -2.0 ]
		},
		"classes" : 2,
		"nSV" : [ 12 ],
		"n_iter" : [ 15 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -14.879016 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[15.707929 14.666383 16.979355 16.596586 16.425394 12.904938 12.195543
 14.911611 13.947499 13.105352 15.271503 12.658303]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[15.70793  14.666383 16.979353 16.596584 16.425394 12.904937 12.195543
 14.911611 13.9475   13.105352 15.271503 12.658303]
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.SVR', 'model_name': 'SVR', 'options': '{"C" : 2}', 'dataset': 'freidman1_sampled', 'size': 12, 'mse': 7.9598737, 'mae': 1.965334, 'mape': 0.12718563, 'r2': 0.5419974229411825}
WRITING_PERF_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman1_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.SVR', 'model_name': 'SVR', 'options': '{"C" : 2}', 'dataset': 'freidman1_sampled', 'training_time_in_sec': 0.007, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -0.010679 ],
      "X_1" : [ -0.045784 ],
      "X_2" : [ -0.035268 ],
      "X_3" : [ 0.051876 ],
      "X_4" : [ -0.008663 ],
      "X_5" : [ -0.013022 ],
      "X_6" : [ -0.001896 ],
      "X_7" : [ -0.024557 ],
      "X_8" : [ -0.044515 ],
      "X_9" : [ -0.014109 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 3, 1, 8, 2, 7, 9, 5, 0, 4, 6 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman1_sampled_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman1_sampled_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_sampled', 'SVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_sampled" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.248515 AS "coeff", 0.544738 AS "sv_0", 0.515912 AS "sv_1", 0.990435 AS "sv_2", 0.255145 AS "sv_3", 0.143953 AS "sv_4", 0.3323
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_sampled', 'SVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_sampled', 'SVR', 'duckdb')

    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -14.879016 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -1.066337 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_sampled', 'SVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 12 entries, 0 to 11
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     12 non-null     float32
 1   X_1     12 non-null     float32
 2   X_2     12 non-null     float32
 3   X_3     12 non-null     float32
 4   X_4     12 non-null     float32
 5   X_5     12 non-null     float32
 6   X_6     12 non-null     float32
 7   X_7     12 non-null     float32
 8   X_8     12 non-null     float32
 9   X_9     12 non-null     float32
dtypes: float32(10)
memory usage: 576.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
5      0.368356  0.189593  0.403483  ...  0.840440  0.462841  0.813023
6      0.888102  0.149216  0.426902  ...  0.653572  0.865909  0.986362
7      0.825366  0.284076  0.971058  ...  0.900471  0.780397  0.355315
8      0.235384  0.117604  0.514017  ...  0.091568  0.527227  0.211281
9      0.834709  0.502155  0.670056  ...  0.848192  0.038824  0.113899
10     0.287599  0.939261  0.380885  ...  0.812585  0.329620  0.003549
11     0.992031  0.233387  0.782862  ...  0.403574  0.461541  0.895167

[12 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12 entries, 0 to 11
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      12 non-null     int64  
 1   Estimator  12 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 324.0 bytes
    index  Estimator
0       0  15.707930
1       1  14.666383
2       2  16.979354
3       3  16.596586
4       4  16.425394
5       5  12.904937
6       6  12.195544
7       7  14.911610
8       8  13.947500
9       9  13.105352
10     10  15.271503
11     11  12.658303
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_sampled', 'SVR') Estimator 5.432264593707714e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      15.707930     15.707929  1.398069e-06
1       1      14.666383     14.666383  3.056276e-07
2       2      16.979354     16.979355 -1.168656e-06
3       3      16.596586     16.596586 -6.191757e-07
4       4      16.425394     16.425394  3.214601e-07
5       5      12.904937     12.904938 -6.303515e-07
6       6      12.195544     12.195543  6.429992e-07
7       7      14.911610     14.911611 -3.071826e-07
8       8      13.947500     13.947499  4.965488e-07
9       9      13.105352     13.105352 -2.093937e-07
10     10      15.271503     15.271503 -2.131190e-07
11     11      12.658303     12.658303 -2.061341e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_sampled', 'SVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman1_sampled_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman1_sampled', 'SVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "freidman1_sampled" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", 1.248515 AS "coeff", 0.544738 AS "sv_0", 0.515912 AS "sv_1", 0.990435 AS "sv_2", 0.255145 AS "sv_3", 0.143953 AS "sv_4", 0.3323
SQL_OUT_PUT_FIRST_LINES_END ('freidman1_sampled', 'SVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman1_sampled', 'SVR', 'sqlite')
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -14.879016 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -1.066337 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman1_sampled', 'SVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 12 entries, 0 to 11
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     12 non-null     float32
 1   X_1     12 non-null     float32
 2   X_2     12 non-null     float32
 3   X_3     12 non-null     float32
 4   X_4     12 non-null     float32
 5   X_5     12 non-null     float32
 6   X_6     12 non-null     float32
 7   X_7     12 non-null     float32
 8   X_8     12 non-null     float32
 9   X_9     12 non-null     float32
dtypes: float32(10)
memory usage: 576.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0      0.544738  0.515912  0.990435  ...  0.041089  0.898018  0.377159
1      0.783459  0.095321  0.135945  ...  0.422766  0.019766  0.833486
2      0.652811  0.757719  0.306902  ...  0.146070  0.894295  0.086598
3      0.226051  0.939732  0.731124  ...  0.843453  0.185038  0.248943
4      0.764610  0.378970  0.823855  ...  0.361050  0.814980  0.123688
5      0.368356  0.189593  0.403483  ...  0.840440  0.462841  0.813023
6      0.888102  0.149216  0.426902  ...  0.653572  0.865909  0.986362
7      0.825366  0.284076  0.971058  ...  0.900471  0.780397  0.355315
8      0.235384  0.117604  0.514017  ...  0.091568  0.527227  0.211281
9      0.834709  0.502155  0.670056  ...  0.848192  0.038824  0.113899
10     0.287599  0.939261  0.380885  ...  0.812585  0.329620  0.003549
11     0.992031  0.233387  0.782862  ...  0.403574  0.461541  0.895167

[12 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12 entries, 0 to 11
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      12 non-null     int64  
 1   Estimator  12 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 324.0 bytes
    index  Estimator
0       0  15.707930
1       1  14.666383
2       2  16.979354
3       3  16.596586
4       4  16.425394
5       5  12.904937
6       6  12.195544
7       7  14.911610
8       8  13.947500
9       9  13.105352
10     10  15.271503
11     11  12.658303
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman1_sampled', 'SVR') Estimator 5.257048161233513e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      15.707930     15.707929  1.489275e-06
1       1      14.666383     14.666383  2.206385e-07
2       2      16.979354     16.979355 -1.126932e-06
3       3      16.596586     16.596586 -4.847982e-07
4       4      16.425394     16.425394  3.698475e-07
5       5      12.904937     12.904938 -6.033657e-07
6       6      12.195544     12.195543  6.598045e-07
7       7      14.911610     14.911611 -2.564375e-07
8       8      13.947500     13.947499  5.621728e-07
9       9      13.105352     13.105352 -2.283740e-07
10     10      15.271503     15.271503 -1.219899e-07
11     11      12.658303     12.658303 -1.848224e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman1_sampled', 'SVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
