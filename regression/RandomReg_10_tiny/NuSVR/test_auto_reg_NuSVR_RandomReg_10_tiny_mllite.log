         X_0       X_1       X_2  ...       X_8       X_9      target
0  -0.478793  2.502870 -0.103623  ... -1.647981  0.327583   49.318079
1   1.195055 -1.450382 -0.468737  ...  0.311669  0.685749   -0.276592
2  -0.648732 -0.880620  0.202193  ... -0.548644 -0.541692 -185.910228
3  -0.612877  0.045409  0.558935  ... -0.258238 -0.097936   33.841240
4  -0.749045 -0.067925  0.967609  ...  0.132868 -0.324339   65.232160
5  -0.695245  0.529279 -0.012289  ... -0.321756  0.330976  -28.928501
6  -0.304252 -2.418750  0.148738  ... -0.113479 -1.359821 -148.117709
7   2.688408 -0.118800  0.359897  ... -0.462834 -0.129511  253.006748
8   1.092563  0.944507 -1.920995  ... -1.156224  1.876815  -11.299567
9   0.316403  0.549981 -0.016203  ... -1.068699  0.480429  -61.438678
10  0.375851  2.459667  2.331842  ...  0.035418 -1.673652  390.059222
11 -0.361483  0.387538  0.595749  ...  0.382503 -1.402543   30.267571
12  1.174554 -0.660511  1.243189  ...  0.417907 -0.191627  106.739658
13 -0.406296 -1.114724 -0.690144  ...  1.572700 -0.719172  -33.169388
14 -0.119582 -0.489682  0.671135  ...  1.680182 -0.191141   72.851982
15 -0.132642 -1.528495  0.683175  ... -0.378033 -1.493023  -27.190423

[16 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[-0.4787931   2.50287    -0.10362324 -1.0679785   0.85598224 -2.105926
   1.3220862  -0.73586607 -1.6479812   0.3275829 ]
 [ 1.1950554  -1.4503824  -0.46873727  0.28645465  0.7561831   0.4906449
  -0.91751045  0.852386    0.31166935  0.68574876]
 [-0.648732   -0.8806197   0.20219254  0.52595264  0.65514773 -0.64766103
   0.27212194 -2.4372282  -0.5486439  -0.54169184]
 [-0.6128774   0.04540905  0.55893517 -1.3404816   1.2081138  -0.7919418
   0.9230405   0.22838217 -0.25823826 -0.09793584]
 [-0.7490448  -0.06792526  0.9676091  -0.24765345 -0.7222614   0.46284628
   0.12873757  1.3984412   0.13286762 -0.324339  ]] [  49.318077     -0.27659237 -185.91023      33.84124      65.23216   ]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.01, 'TRAINING')
{ ,  "max_iter" : 128  , }
{ ,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.088583, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 8,
	"SupportVectors" : {
		"SV_0" : [ -0.648732, -0.880620, 0.202193, 0.525953, 0.655148, -0.647661, 0.272122, -2.437228, -0.548644, -0.541692 ],
		"SV_1" : [ -0.304252, -2.418750, 0.148738, -1.156809, 1.856268, 1.161673, 0.542158, -1.733213, -0.113479, -1.359821 ],
		"SV_2" : [ 2.688408, -0.118800, 0.359897, -0.489429, 0.996860, 0.599293, -1.045101, 2.004759, -0.462834, -0.129511 ],
		"SV_3" : [ 0.316403, 0.549981, -0.016203, -1.294070, 0.278531, -0.274334, -0.927009, -0.240115, -1.068699, 0.480429 ],
		"SV_4" : [ 0.375851, 2.459666, 2.331842, 1.801873, 0.883058, -1.030525, 2.246760, -1.930692, 0.035418, -1.673652 ],
		"SV_5" : [ 1.174554, -0.660511, 1.243189, -2.320833, -0.455125, -1.586949, 0.584329, -1.353951, 0.417907, -0.191627 ],
		"SV_6" : [ -0.406296, -1.114724, -0.690144, -0.042832, 0.738593, 0.753398, 1.110532, -0.872249, 1.572700, -0.719172 ],
		"SV_7" : [ -0.119582, -0.489682, 0.671135, 0.153117, 0.091115, -2.239584, 1.111452, -0.253174, 1.680182, -0.191141 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ -1.000000, -1.000000, 1.000000, -1.000000, 1.000000, 1.000000, -1.000000, 1.000000 ]
	},
	"rho" : [ -19.313898 ],
	"nSV" : [ 8 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 7 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_RandomReg_10_tiny.json'

MLLITE_MODEL_SET_OPTIONS NuSVR None
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.088583, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"svm_model" : {
	"classes" : 2,
	"L" : 8,
	"SupportVectors" : {
		"SV_0" : [ -0.648732, -0.880620, 0.202193, 0.525953, 0.655148, -0.647661, 0.272122, -2.437228, -0.548644, -0.541692 ],
		"SV_1" : [ -0.304252, -2.418750, 0.148738, -1.156809, 1.856268, 1.161673, 0.542158, -1.733213, -0.113479, -1.359821 ],
		"SV_2" : [ 2.688408, -0.118800, 0.359897, -0.489429, 0.996860, 0.599293, -1.045101, 2.004759, -0.462834, -0.129511 ],
		"SV_3" : [ 0.316403, 0.549981, -0.016203, -1.294070, 0.278531, -0.274334, -0.927009, -0.240115, -1.068699, 0.480429 ],
		"SV_4" : [ 0.375851, 2.459666, 2.331842, 1.801873, 0.883058, -1.030525, 2.246760, -1.930692, 0.035418, -1.673652 ],
		"SV_5" : [ 1.174554, -0.660511, 1.243189, -2.320833, -0.455125, -1.586949, 0.584329, -1.353951, 0.417907, -0.191627 ],
		"SV_6" : [ -0.406296, -1.114724, -0.690144, -0.042832, 0.738593, 0.753398, 1.110532, -0.872249, 1.572700, -0.719172 ],
		"SV_7" : [ -0.119582, -0.489682, 0.671135, 0.153117, 0.091115, -2.239584, 1.111452, -0.253174, 1.680182, -0.191141 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ -1.000000, -1.000000, 1.000000, -1.000000, 1.000000, 1.000000, -1.000000, 1.000000 ]
	},
	"rho" : [ -19.313898 ],
	"nSV" : [ 8 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 7 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 16
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 0.088583, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.5, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 8,
		"SupportVectors" : 	{
			"SV_0" : [ -0.648732, -0.88062, 0.202193, 0.525953, 0.655148, -0.647661, 0.272122, -2.437228, -0.548644, -0.541692 ],
			"SV_1" : [ -0.304252, -2.41875, 0.148738, -1.156809, 1.856268, 1.161673, 0.542158, -1.733213, -0.113479, -1.359821 ],
			"SV_2" : [ 2.688408, -0.1188, 0.359897, -0.489429, 0.99686, 0.599293, -1.045101, 2.004759, -0.462834, -0.129511 ],
			"SV_3" : [ 0.316403, 0.549981, -0.016203, -1.29407, 0.278531, -0.274334, -0.927009, -0.240115, -1.068699, 0.480429 ],
			"SV_4" : [ 0.375851, 2.459666, 2.331842, 1.801873, 0.883058, -1.030525, 2.24676, -1.930692, 0.035418, -1.673652 ],
			"SV_5" : [ 1.174554, -0.660511, 1.243189, -2.320833, -0.455125, -1.586949, 0.584329, -1.353951, 0.417907, -0.191627 ],
			"SV_6" : [ -0.406296, -1.114724, -0.690144, -0.042832, 0.738593, 0.753398, 1.110532, -0.872249, 1.5727, -0.719172 ],
			"SV_7" : [ -0.119582, -0.489682, 0.671135, 0.153117, 0.091115, -2.239584, 1.111452, -0.253174, 1.680182, -0.191141 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0 ]
		},
		"classes" : 2,
		"nSV" : [ 8 ],
		"n_iter" : [ 7 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -19.313898 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[19.197891 19.112123 17.948536 18.883162 19.075806 19.027702 17.668865
 20.00902  18.84907  18.520018 20.25773  19.139605 19.95645  17.933702
 19.949047 19.010246]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[19.197891 19.112125 17.948536 18.883162 19.075806 19.027702 17.668867
 20.009022 18.849073 18.520016 20.257732 19.139606 19.956453 17.933702
 19.949049 19.010248]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'RandomReg_10_tiny', 'size': 16, 'mse': 18032.75, 'mae': 93.07808, 'mape': 5.4198523, 'r2': 0.000784038864601988}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_RandomReg_10_tiny.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': None, 'dataset': 'RandomReg_10_tiny', 'training_time_in_sec': 0.01, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_RandomReg_10_tiny_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_tiny', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", -1.000000 AS "coeff", -0.648732 AS "sv_0", -0.880620 AS "sv_1", 0.202193 AS "sv_2", 0.525953 AS "sv_3", 0.655148 AS "sv_4", -0
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_tiny', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_tiny', 'NuSVR', 'duckdb')

    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -19.313898 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.088583 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_tiny', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
5     -0.695245  0.529279 -0.012289  ...  1.592387 -0.321756  0.330976
6     -0.304252 -2.418750  0.148738  ... -1.733213 -0.113479 -1.359821
7      2.688408 -0.118800  0.359897  ...  2.004759 -0.462834 -0.129511
8      1.092563  0.944507 -1.920995  ... -1.050732 -1.156224  1.876815
9      0.316403  0.549981 -0.016203  ... -0.240115 -1.068699  0.480429
10     0.375851  2.459666  2.331842  ... -1.930692  0.035418 -1.673652
11    -0.361483  0.387538  0.595749  ...  0.556831  0.382503 -1.402543
12     1.174554 -0.660511  1.243189  ... -1.353951  0.417907 -0.191627
13    -0.406296 -1.114724 -0.690144  ... -0.872249  1.572700 -0.719172
14    -0.119582 -0.489682  0.671135  ... -0.253174  1.680182 -0.191141
15    -0.132642 -1.528494  0.683175  ... -0.337466 -0.378033 -1.493023

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  19.197891
1       1  19.112125
2       2  17.948536
3       3  18.883162
4       4  19.075806
5       5  19.027703
6       6  17.668867
7       7  20.009022
8       8  18.849073
9       9  18.520016
10     10  20.257732
11     11  19.139606
12     12  19.956453
13     13  17.933702
14     14  19.949049
15     15  19.010248
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_tiny', 'NuSVR') Estimator 1.2849957915506138e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      19.197891     19.197891 -2.485980e-07
1       1      19.112125     19.112123  1.295535e-06
2       2      17.948536     17.948536 -2.392848e-07
3       3      18.883162     18.883162  2.189260e-07
4       4      19.075806     19.075806  1.220684e-07
5       5      19.027703     19.027702  3.041420e-07
6       6      17.668867     17.668865  1.524640e-06
7       7      20.009022     20.009020  2.591005e-06
8       8      18.849073     18.849070  2.904860e-06
9       9      18.520016     18.520018 -1.174333e-06
10     10      20.257732     20.257730  1.266664e-06
11     11      19.139606     19.139605  9.379070e-07
12     12      19.956453     19.956450  3.296016e-06
13     13      17.933702     17.933702 -9.027314e-08
14     14      19.949049     19.949047  2.323715e-06
15     15      19.010248     19.010246  2.021966e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_tiny', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_RandomReg_10_tiny_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_tiny', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", -1.000000 AS "coeff", -0.648732 AS "sv_0", -0.880620 AS "sv_1", 0.202193 AS "sv_2", 0.525953 AS "sv_3", 0.655148 AS "sv_4", -0
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_tiny', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_tiny', 'NuSVR', 'sqlite')
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -19.313898 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.088583 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_tiny', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
5     -0.695245  0.529279 -0.012289  ...  1.592387 -0.321756  0.330976
6     -0.304252 -2.418750  0.148738  ... -1.733213 -0.113479 -1.359821
7      2.688408 -0.118800  0.359897  ...  2.004759 -0.462834 -0.129511
8      1.092563  0.944507 -1.920995  ... -1.050732 -1.156224  1.876815
9      0.316403  0.549981 -0.016203  ... -0.240115 -1.068699  0.480429
10     0.375851  2.459666  2.331842  ... -1.930692  0.035418 -1.673652
11    -0.361483  0.387538  0.595749  ...  0.556831  0.382503 -1.402543
12     1.174554 -0.660511  1.243189  ... -1.353951  0.417907 -0.191627
13    -0.406296 -1.114724 -0.690144  ... -0.872249  1.572700 -0.719172
14    -0.119582 -0.489682  0.671135  ... -0.253174  1.680182 -0.191141
15    -0.132642 -1.528494  0.683175  ... -0.337466 -0.378033 -1.493023

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  19.197891
1       1  19.112125
2       2  17.948536
3       3  18.883162
4       4  19.075806
5       5  19.027703
6       6  17.668867
7       7  20.009022
8       8  18.849073
9       9  18.520016
10     10  20.257732
11     11  19.139605
12     12  19.956453
13     13  17.933702
14     14  19.949049
15     15  19.010248
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_tiny', 'NuSVR') Estimator 1.2857897777607263e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      19.197891     19.197891 -2.734548e-07
1       1      19.112125     19.112123  1.271899e-06
2       2      17.948536     17.948536 -2.563020e-07
3       3      18.883162     18.883162  2.170497e-07
4       4      19.075806     19.075806  1.185691e-07
5       5      19.027703     19.027702  2.718621e-07
6       6      17.668867     17.668865  1.528825e-06
7       7      20.009022     20.009020  2.602948e-06
8       8      18.849073     18.849070  2.934825e-06
9       9      18.520016     18.520018 -1.178677e-06
10     10      20.257732     20.257730  1.261210e-06
11     11      19.139605     19.139605  9.154132e-07
12     12      19.956453     19.956450  3.289654e-06
13     13      17.933702     17.933702 -9.834115e-08
14     14      19.949049     19.949047  2.306899e-06
15     15      19.010248     19.010246  2.046708e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_tiny', 'NuSVR', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_RandomReg_10_tiny_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_tiny', 'NuSVR', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3",
   "Values"."sv_4" AS "sv_4",
   "Values"."sv_5" AS "sv_5",
   "Values"."sv_6" AS "sv_6",
   "Values"."sv_7" AS "sv_7",
   "Values"."sv_8" AS "sv_8",
   "Values"."sv_9" AS "sv_9"
  FROM
  (
     SELECT 0 AS "sv_idx", -1.000000 AS "coeff", -0.648732 AS "sv_0", -0.880620 AS "sv_1", 0.202193 AS "sv_2", 0.525953 AS "sv_3", 0.655148 AS "sv_4", -0
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_tiny', 'NuSVR', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_tiny', 'NuSVR', 'pgsql')

    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -19.313898 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.088583 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2) + power(model_input."X_4" - "SV_data".sv_4, 2) + power(model_input."X_5" - "SV_data".sv_5, 2) + power(model_input."X_6" - "SV_data".sv_6, 2) + power(model_input."X_7" - "SV_data".sv_7, 2) + power(model_input."X_8" - "SV_data".sv_8, 2) + power(model_input."X_9" - "SV_data".sv_9, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_tiny', 'NuSVR', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
