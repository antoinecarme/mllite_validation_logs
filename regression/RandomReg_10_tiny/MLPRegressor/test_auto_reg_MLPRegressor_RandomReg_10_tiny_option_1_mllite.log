         X_0       X_1       X_2  ...       X_8       X_9      target
0  -0.478793  2.502870 -0.103623  ... -1.647981  0.327583   49.318079
1   1.195055 -1.450382 -0.468737  ...  0.311669  0.685749   -0.276592
2  -0.648732 -0.880620  0.202193  ... -0.548644 -0.541692 -185.910228
3  -0.612877  0.045409  0.558935  ... -0.258238 -0.097936   33.841240
4  -0.749045 -0.067925  0.967609  ...  0.132868 -0.324339   65.232160
5  -0.695245  0.529279 -0.012289  ... -0.321756  0.330976  -28.928501
6  -0.304252 -2.418750  0.148738  ... -0.113479 -1.359821 -148.117709
7   2.688408 -0.118800  0.359897  ... -0.462834 -0.129511  253.006748
8   1.092563  0.944507 -1.920995  ... -1.156224  1.876815  -11.299567
9   0.316403  0.549981 -0.016203  ... -1.068699  0.480429  -61.438678
10  0.375851  2.459667  2.331842  ...  0.035418 -1.673652  390.059222
11 -0.361483  0.387538  0.595749  ...  0.382503 -1.402543   30.267571
12  1.174554 -0.660511  1.243189  ...  0.417907 -0.191627  106.739658
13 -0.406296 -1.114724 -0.690144  ...  1.572700 -0.719172  -33.169388
14 -0.119582 -0.489682  0.671135  ...  1.680182 -0.191141   72.851982
15 -0.132642 -1.528495  0.683175  ... -0.378033 -1.493023  -27.190423

[16 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
('OPERATION_START', 'TRAINING')
[[-0.4787931   2.50287    -0.10362324 -1.0679785   0.85598224 -2.105926
   1.3220862  -0.73586607 -1.6479812   0.3275829 ]
 [ 1.1950554  -1.4503824  -0.46873727  0.28645465  0.7561831   0.4906449
  -0.91751045  0.852386    0.31166935  0.68574876]
 [-0.648732   -0.8806197   0.20219254  0.52595264  0.65514773 -0.64766103
   0.27212194 -2.4372282  -0.5486439  -0.54169184]
 [-0.6128774   0.04540905  0.55893517 -1.3404816   1.2081138  -0.7919418
   0.9230405   0.22838217 -0.25823826 -0.09793584]
 [-0.7490448  -0.06792526  0.9676091  -0.24765345 -0.7222614   0.46284628
   0.12873757  1.3984412   0.13286762 -0.324339  ]] [  49.318077     -0.27659237 -185.91023      33.84124      65.23216   ]
MLLITE_FIT_USING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.007, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.087588, 0.306215, -0.298958, -0.075249 ],
			"coeffs_1" : [ 0.089373, -0.428839, 0.159396, -0.010572 ],
			"coeffs_2" : [ 0.527311, 0.107600, 0.512455, -0.132905 ],
			"coeffs_3" : [ 0.619938, -0.547259, -0.300700, 0.208615 ],
			"coeffs_4" : [ 0.374291, -0.312172, -0.300086, -0.505632 ],
			"coeffs_5" : [ 0.314573, -0.617974, -0.071756, 0.060742 ],
			"coeffs_6" : [ -0.160870, -0.612851, -0.366740, 0.504618 ],
			"coeffs_7" : [ -0.064059, 0.022370, -0.553580, 0.066184 ],
			"coeffs_8" : [ -0.231187, 0.214954, -0.163573, 0.246926 ],
			"coeffs_9" : [ -0.405212, 0.604303, -0.447397, 0.383057 ],
			"intercepts" : [ -0.498034, 0.326803, 0.120723, 0.564345 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.412471, -0.513391, 0.207505, 0.233759, 0.507647, 0.575602, 0.507199, -0.428481 ],
			"coeffs_1" : [ 0.394505, 0.544051, -0.432323, 0.283423, 0.208216, 0.023954, 0.068091, 0.385768 ],
			"coeffs_2" : [ -0.634549, 0.059189, 0.261525, 0.375584, -0.571571, 0.459699, -0.423525, -0.674970 ],
			"coeffs_3" : [ 0.680798, 0.644721, -0.121074, -0.603977, 0.005942, 0.645985, -0.539668, 0.248449 ],
			"intercepts" : [ 0.322168, 0.384234, 0.606596, -0.390511, 0.326593, 0.467862, 0.491037, -0.080228 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.601104, 0.295831, -0.024647, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.249554, 0.558994, -0.004536, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.187288, -0.229826, -0.247508, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.245614, 0.345831, 0.399722, 0.526231, 0.444787, 0.341110 ],
			"coeffs_4" : [ -0.307597, 0.028875, 0.149193, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.346244, 0.423777, 0.076283, -0.195384, -0.154200, -0.294011 ],
			"coeffs_6" : [ 0.315382, 0.332526, -0.438691, 0.182649, -0.386450, -0.001729 ],
			"coeffs_7" : [ 0.103744, -0.294497, 0.267450, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.567518, -0.464814, -0.278412, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.276749 ],
			"coeffs_1" : [ -0.181028 ],
			"coeffs_2" : [ -0.577052 ],
			"coeffs_3" : [ -0.636297 ],
			"coeffs_4" : [ -0.788203 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575897 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_tiny_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPRegressor {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPRegressor { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPRegressor { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 , }
MLLITE_MODEL_JSON_AFTER_SETTING MLPRegressor None
MLLITE_RELOADING_MODEL mllite_mlp_reg.MLPRegressor_ff4_ff4
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.087588, 0.306215, -0.298958, -0.075249 ],
			"coeffs_1" : [ 0.089373, -0.428839, 0.159396, -0.010572 ],
			"coeffs_2" : [ 0.527311, 0.107600, 0.512455, -0.132905 ],
			"coeffs_3" : [ 0.619938, -0.547259, -0.300700, 0.208615 ],
			"coeffs_4" : [ 0.374291, -0.312172, -0.300086, -0.505632 ],
			"coeffs_5" : [ 0.314573, -0.617974, -0.071756, 0.060742 ],
			"coeffs_6" : [ -0.160870, -0.612851, -0.366740, 0.504618 ],
			"coeffs_7" : [ -0.064059, 0.022370, -0.553580, 0.066184 ],
			"coeffs_8" : [ -0.231187, 0.214954, -0.163573, 0.246926 ],
			"coeffs_9" : [ -0.405212, 0.604303, -0.447397, 0.383057 ],
			"intercepts" : [ -0.498034, 0.326803, 0.120723, 0.564345 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.412471, -0.513391, 0.207505, 0.233759, 0.507647, 0.575602, 0.507199, -0.428481 ],
			"coeffs_1" : [ 0.394505, 0.544051, -0.432323, 0.283423, 0.208216, 0.023954, 0.068091, 0.385768 ],
			"coeffs_2" : [ -0.634549, 0.059189, 0.261525, 0.375584, -0.571571, 0.459699, -0.423525, -0.674970 ],
			"coeffs_3" : [ 0.680798, 0.644721, -0.121074, -0.603977, 0.005942, 0.645985, -0.539668, 0.248449 ],
			"intercepts" : [ 0.322168, 0.384234, 0.606596, -0.390511, 0.326593, 0.467862, 0.491037, -0.080228 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.601104, 0.295831, -0.024647, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.249554, 0.558994, -0.004536, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.187288, -0.229826, -0.247508, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.245614, 0.345831, 0.399722, 0.526231, 0.444787, 0.341110 ],
			"coeffs_4" : [ -0.307597, 0.028875, 0.149193, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.346244, 0.423777, 0.076283, -0.195384, -0.154200, -0.294011 ],
			"coeffs_6" : [ 0.315382, 0.332526, -0.438691, 0.182649, -0.386450, -0.001729 ],
			"coeffs_7" : [ 0.103744, -0.294497, 0.267450, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.567518, -0.464814, -0.278412, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.276749 ],
			"coeffs_1" : [ -0.181028 ],
			"coeffs_2" : [ -0.577052 ],
			"coeffs_3" : [ -0.636297 ],
			"coeffs_4" : [ -0.788203 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575897 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 16
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.087588, 0.306215, -0.298958, -0.075249 ],
			"coeffs_1" : [ 0.089373, -0.428839, 0.159396, -0.010572 ],
			"coeffs_2" : [ 0.527311, 0.1076, 0.512455, -0.132905 ],
			"coeffs_3" : [ 0.619938, -0.547259, -0.3007, 0.208615 ],
			"coeffs_4" : [ 0.374291, -0.312172, -0.300086, -0.505632 ],
			"coeffs_5" : [ 0.314573, -0.617974, -0.071756, 0.060742 ],
			"coeffs_6" : [ -0.16087, -0.612851, -0.36674, 0.504618 ],
			"coeffs_7" : [ -0.064059, 0.02237, -0.55358, 0.066184 ],
			"coeffs_8" : [ -0.231187, 0.214954, -0.163573, 0.246926 ],
			"coeffs_9" : [ -0.405212, 0.604303, -0.447397, 0.383057 ],
			"intercepts" : [ -0.498034, 0.326803, 0.120723, 0.564345 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.412471, -0.513391, 0.207505, 0.233759, 0.507647, 0.575602, 0.507199, -0.428481 ],
			"coeffs_1" : [ 0.394505, 0.544051, -0.432323, 0.283423, 0.208216, 0.023954, 0.068091, 0.385768 ],
			"coeffs_2" : [ -0.634549, 0.059189, 0.261525, 0.375584, -0.571571, 0.459699, -0.423525, -0.67497 ],
			"coeffs_3" : [ 0.680798, 0.644721, -0.121074, -0.603977, 0.005942, 0.645985, -0.539668, 0.248449 ],
			"intercepts" : [ 0.322168, 0.384234, 0.606596, -0.390511, 0.326593, 0.467862, 0.491037, -0.080228 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.601104, 0.295831, -0.024647, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.249554, 0.558994, -0.004536, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.187288, -0.229826, -0.247508, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.245614, 0.345831, 0.399722, 0.526231, 0.444787, 0.34111 ],
			"coeffs_4" : [ -0.307597, 0.028875, 0.149193, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.346244, 0.423777, 0.076283, -0.195384, -0.1542, -0.294011 ],
			"coeffs_6" : [ 0.315382, 0.332526, -0.438691, 0.182649, -0.38645, -0.001729 ],
			"coeffs_7" : [ 0.103744, -0.294497, 0.26745, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.567518, -0.464814, -0.278412, -0.494865, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.276749 ],
			"coeffs_1" : [ -0.181028 ],
			"coeffs_2" : [ -0.577052 ],
			"coeffs_3" : [ -0.636297 ],
			"coeffs_4" : [ -0.788203 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.575897 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[-0.8464076  -0.74179137 -0.9181568  -0.79002315 -0.808378   -0.7801877
 -0.89505595 -0.7021704  -0.7220606  -0.82148004 -1.2483497  -0.9986564
 -1.064097   -0.73409617 -0.8754194  -0.8508414 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[-0.84640855 -0.7417921  -0.91815794 -0.79002404 -0.80837893 -0.7801885
 -0.8950571  -0.7021713  -0.7220616  -0.8214811  -1.2483504  -0.9986576
 -1.0640985  -0.734097   -0.87542003 -0.85084236]
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'RandomReg_10_tiny', 'size': 16, 'mse': 19113.951, 'mae': 93.7155, 'mape': 1.0391939, 'r2': -0.05912653250098643}
WRITING_PERF_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPRegressor', 'model_name': 'MLPRegressor', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'RandomReg_10_tiny', 'training_time_in_sec': 0.007, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ 0.000790 ],
      "X_1" : [ -0.001489 ],
      "X_2" : [ 0.003859 ],
      "X_3" : [ -0.001811 ],
      "X_4" : [ -0.001378 ],
      "X_5" : [ -0.003700 ],
      "X_6" : [ -0.004973 ],
      "X_7" : [ 0.003670 ],
      "X_8" : [ -0.000216 ],
      "X_9" : [ 0.003859 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 6, 2, 9, 5, 7, 3, 1, 4, 0, 8 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_tiny_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_tiny', 'MLPRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "RandomReg_10_tiny" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.498034 + -0.087588 * t."OUT_0"  + 0.089373 * t."OUT_1"  + 0.527311 * t."OUT_2"  + 0.619938 * t."OUT_3"  + 0.374291 * t."OUT_4"  + 0.314573 * t."OUT_5"  + -0.160870 *
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_tiny', 'MLPRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_tiny', 'MLPRegressor', 'duckdb')
01604 * t."OUT_4"  + -0.294011 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.457149 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575897 + -0.276749 * t."OUT_0"  + -0.181028 * t."OUT_1"  + -0.577052 * t."OUT_2"  + -0.636297 * t."OUT_3"  + -0.788203 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_tiny', 'MLPRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
5     -0.695245  0.529279 -0.012289  ...  1.592387 -0.321756  0.330976
6     -0.304252 -2.418750  0.148738  ... -1.733213 -0.113479 -1.359821
7      2.688408 -0.118800  0.359897  ...  2.004759 -0.462834 -0.129511
8      1.092563  0.944507 -1.920995  ... -1.050732 -1.156224  1.876815
9      0.316403  0.549981 -0.016203  ... -0.240115 -1.068699  0.480429
10     0.375851  2.459666  2.331842  ... -1.930692  0.035418 -1.673652
11    -0.361483  0.387538  0.595749  ...  0.556831  0.382503 -1.402543
12     1.174554 -0.660511  1.243189  ... -1.353951  0.417907 -0.191627
13    -0.406296 -1.114724 -0.690144  ... -0.872249  1.572700 -0.719172
14    -0.119582 -0.489682  0.671135  ... -0.253174  1.680182 -0.191141
15    -0.132642 -1.528494  0.683175  ... -0.337466 -0.378033 -1.493023

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  -0.846409
1       1  -0.741792
2       2  -0.918158
3       3  -0.790024
4       4  -0.808379
5       5  -0.780189
6       6  -0.895057
7       7  -0.702171
8       8  -0.722062
9       9  -0.821481
10     10  -1.248350
11     11  -0.998658
12     12  -1.064098
13     13  -0.734097
14     14  -0.875420
15     15  -0.850842
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_tiny', 'MLPRegressor') Estimator 9.57399606704712e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      -0.846409     -0.846408 -9.536743e-07
1       1      -0.741792     -0.741791 -7.152557e-07
2       2      -0.918158     -0.918157 -1.132488e-06
3       3      -0.790024     -0.790023 -8.940697e-07
4       4      -0.808379     -0.808378 -9.536743e-07
5       5      -0.780189     -0.780188 -7.748604e-07
6       6      -0.895057     -0.895056 -1.132488e-06
7       7      -0.702171     -0.702170 -9.536743e-07
8       8      -0.722062     -0.722061 -9.536743e-07
9       9      -0.821481     -0.821480 -1.072884e-06
10     10      -1.248350     -1.248350 -7.152557e-07
11     11      -0.998658     -0.998656 -1.192093e-06
12     12      -1.064098     -1.064097 -1.430511e-06
13     13      -0.734097     -0.734096 -8.344650e-07
14     14      -0.875420     -0.875419 -6.556511e-07
15     15      -0.850842     -0.850841 -9.536743e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_tiny', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/MLPRegressor/mllite.MLPRegressor_RandomReg_10_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_tiny', 'MLPRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "RandomReg_10_tiny" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT
    t."index" as "index",
    -0.498034 + -0.087588 * t."OUT_0"  + 0.089373 * t."OUT_1"  + 0.527311 * t."OUT_2"  + 0.619938 * t."OUT_3"  + 0.374291 * t."OUT_4"  + 0.314573 * t."OUT_5"  + -0.160870 *
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_tiny', 'MLPRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_tiny', 'MLPRegressor', 'sqlite')
01604 * t."OUT_4"  + -0.294011 * t."OUT_5"  + -0.001729 * t."OUT_6"  + 0.457149 * t."OUT_7" AS "OUT_5"
   FROM "Hidden_Layer_2_Activation" AS t
 ),
"Hidden_Layer_3_Activation" AS
 ( SELECT
    t."index" as "index",
    CASE WHEN (t."OUT_0" > 0) THEN t."OUT_0" ELSE 0 END AS "OUT_0",
    CASE WHEN (t."OUT_1" > 0) THEN t."OUT_1" ELSE 0 END AS "OUT_1",
    CASE WHEN (t."OUT_2" > 0) THEN t."OUT_2" ELSE 0 END AS "OUT_2",
    CASE WHEN (t."OUT_3" > 0) THEN t."OUT_3" ELSE 0 END AS "OUT_3",
    CASE WHEN (t."OUT_4" > 0) THEN t."OUT_4" ELSE 0 END AS "OUT_4",
    CASE WHEN (t."OUT_5" > 0) THEN t."OUT_5" ELSE 0 END AS "OUT_5"
   FROM "Hidden_Layer_3_BA" AS t
 ),
"Output_Layer_BA" AS
 ( SELECT
    t."index" as "index",
    -0.575897 + -0.276749 * t."OUT_0"  + -0.181028 * t."OUT_1"  + -0.577052 * t."OUT_2"  + -0.636297 * t."OUT_3"  + -0.788203 * t."OUT_4"  + 0.178692 * t."OUT_5" AS "OUT_0"
   FROM "Hidden_Layer_3_Activation" AS t
 )
 SELECT
    t."index" AS "index",
    t.OUT_0 AS "Estimator"
  FROM "Output_Layer_BA" AS t

SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_tiny', 'MLPRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
5     -0.695245  0.529279 -0.012289  ...  1.592387 -0.321756  0.330976
6     -0.304252 -2.418750  0.148738  ... -1.733213 -0.113479 -1.359821
7      2.688408 -0.118800  0.359897  ...  2.004759 -0.462834 -0.129511
8      1.092563  0.944507 -1.920995  ... -1.050732 -1.156224  1.876815
9      0.316403  0.549981 -0.016203  ... -0.240115 -1.068699  0.480429
10     0.375851  2.459666  2.331842  ... -1.930692  0.035418 -1.673652
11    -0.361483  0.387538  0.595749  ...  0.556831  0.382503 -1.402543
12     1.174554 -0.660511  1.243189  ... -1.353951  0.417907 -0.191627
13    -0.406296 -1.114724 -0.690144  ... -0.872249  1.572700 -0.719172
14    -0.119582 -0.489682  0.671135  ... -0.253174  1.680182 -0.191141
15    -0.132642 -1.528494  0.683175  ... -0.337466 -0.378033 -1.493023

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index  Estimator
0       0  -0.846409
1       1  -0.741792
2       2  -0.918158
3       3  -0.790024
4       4  -0.808379
5       5  -0.780189
6       6  -0.895057
7       7  -0.702171
8       8  -0.722062
9       9  -0.821481
10     10  -1.248350
11     11  -0.998658
12     12  -1.064099
13     13  -0.734097
14     14  -0.875420
15     15  -0.850842
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_tiny', 'MLPRegressor') Estimator 9.625810516930566e-07
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0      -0.846409     -0.846408 -9.510205e-07
1       1      -0.741792     -0.741791 -7.309713e-07
2       2      -0.918158     -0.918157 -1.119917e-06
3       3      -0.790024     -0.790023 -9.124449e-07
4       4      -0.808379     -0.808378 -9.935949e-07
5       5      -0.780189     -0.780188 -8.009100e-07
6       6      -0.895057     -0.895056 -1.088829e-06
7       7      -0.702171     -0.702170 -9.646318e-07
8       8      -0.722062     -0.722061 -9.747366e-07
9       9      -0.821481     -0.821480 -1.093997e-06
10     10      -1.248350     -1.248350 -6.634207e-07
11     11      -0.998658     -0.998656 -1.165294e-06
12     12      -1.064099     -1.064097 -1.455670e-06
13     13      -0.734097     -0.734096 -8.130584e-07
14     14      -0.875420     -0.875419 -7.088328e-07
15     15      -0.850842     -0.850841 -9.639681e-07
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_tiny', 'MLPRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
