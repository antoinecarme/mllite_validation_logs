         X_0       X_1       X_2  ...       X_8       X_9      target
0  -0.478793  2.502870 -0.103623  ... -1.647981  0.327583   49.318079
1   1.195055 -1.450382 -0.468737  ...  0.311669  0.685749   -0.276592
2  -0.648732 -0.880620  0.202193  ... -0.548644 -0.541692 -185.910228
3  -0.612877  0.045409  0.558935  ... -0.258238 -0.097936   33.841240
4  -0.749045 -0.067925  0.967609  ...  0.132868 -0.324339   65.232160
5  -0.695245  0.529279 -0.012289  ... -0.321756  0.330976  -28.928501
6  -0.304252 -2.418750  0.148738  ... -0.113479 -1.359821 -148.117709
7   2.688408 -0.118800  0.359897  ... -0.462834 -0.129511  253.006748
8   1.092563  0.944507 -1.920995  ... -1.156224  1.876815  -11.299567
9   0.316403  0.549981 -0.016203  ... -1.068699  0.480429  -61.438678
10  0.375851  2.459667  2.331842  ...  0.035418 -1.673652  390.059222
11 -0.361483  0.387538  0.595749  ...  0.382503 -1.402543   30.267571
12  1.174554 -0.660511  1.243189  ...  0.417907 -0.191627  106.739658
13 -0.406296 -1.114724 -0.690144  ...  1.572700 -0.719172  -33.169388
14 -0.119582 -0.489682  0.671135  ...  1.680182 -0.191141   72.851982
15 -0.132642 -1.528495  0.683175  ... -0.378033 -1.493023  -27.190423

[16 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS XGBRegressor {"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }
MLLITE_MODEL_OPTIONS_DEFAULT XGBRegressor { "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING XGBRegressor { "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  , }
MLLITE_MODEL_JSON_AFTER_SETTING XGBRegressor None
('OPERATION_START', 'TRAINING')
[[-0.4787931   2.50287    -0.10362324 -1.0679785   0.85598224 -2.105926
   1.3220862  -0.73586607 -1.6479812   0.3275829 ]
 [ 1.1950554  -1.4503824  -0.46873727  0.28645465  0.7561831   0.4906449
  -0.91751045  0.852386    0.31166935  0.68574876]
 [-0.648732   -0.8806197   0.20219254  0.52595264  0.65514773 -0.64766103
   0.27212194 -2.4372282  -0.5486439  -0.54169184]
 [-0.6128774   0.04540905  0.55893517 -1.3404816   1.2081138  -0.7919418
   0.9230405   0.22838217 -0.25823826 -0.09793584]
 [-0.7490448  -0.06792526  0.9676091  -0.24765345 -0.7222614   0.46284628
   0.12873757  1.3984412   0.13286762 -0.324339  ]] [  49.318077     -0.27659237 -185.91023      33.84124      65.23216   ]
MLLITE_FIT_USING_MODEL mllite_xgb_reg.XGBRegressor_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 1 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 2 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 3 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 4 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 5 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 6 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 7 7
('OPERATION_END_ELAPSED', 0.008, 'TRAINING')
{ "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  , }
{ "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  , }
{
	"metadata" : { "model" : "Friedman_XGB", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : { "base_score" : [ ], "early_stopping_rounds" : 0, "eval_metric" : "", "gamma" : 0.000000, "grow_policy" : 0, "learning_rate" : 0.300000, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 32, "min_child_weight" : 5.000000, "n_estimators" : 5, "objective" : "reg:squarederror", "reg_alpha" : 0.000000, "reg_lambda" : 1.000000, "tree_method" : "auto" },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"booster" : {
		"BaseScore" : [ 31.561600 ],
		"Trees" : 5,
		"Tree_0" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : 0.359897, "sindex" : 2 },
			"Node_1" : { "leaf_value" : [ -22.410513 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_2" : { "leaf_value" : [ 22.410511 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_1" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : 0.375851, "sindex" : 0 },
			"Node_1" : { "leaf_value" : [ ], "parent" : 0, "left" : 3, "right" : 4, "svalue" : -0.324339, "sindex" : 9 },
			"Node_2" : { "leaf_value" : [ 27.900551 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_3" : { "leaf_value" : [ -24.975887 ], "parent" : 1, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_4" : { "leaf_value" : [ -2.506855 ], "parent" : 1, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_2" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : 0.359897, "sindex" : 2 },
			"Node_1" : { "leaf_value" : [ -15.546139 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_2" : { "leaf_value" : [ 15.560067 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_3" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : 0.375851, "sindex" : 0 },
			"Node_1" : { "leaf_value" : [ ], "parent" : 0, "left" : 3, "right" : 4, "svalue" : -0.324339, "sindex" : 9 },
			"Node_2" : { "leaf_value" : [ 20.146015 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_3" : { "leaf_value" : [ -17.955997 ], "parent" : 1, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_4" : { "leaf_value" : [ -1.864027 ], "parent" : 1, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_4" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : -0.489682, "sindex" : 1 },
			"Node_1" : { "leaf_value" : [ -13.961761 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_2" : { "leaf_value" : [ ], "parent" : 0, "left" : 3, "right" : 4, "svalue" : 0.655148, "sindex" : 4 },
			"Node_3" : { "leaf_value" : [ -2.870324 ], "parent" : 2, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_4" : { "leaf_value" : [ 19.186068 ], "parent" : 2, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/XGBRegressor/mllite.XGBRegressor_RandomReg_10_tiny_option_1.json'

MLLITE_MODEL_SET_OPTIONS XGBRegressor {"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }
MLLITE_MODEL_OPTIONS_DEFAULT XGBRegressor { "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING XGBRegressor { "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  , }
MLLITE_MODEL_JSON_AFTER_SETTING XGBRegressor None
MLLITE_RELOADING_MODEL mllite_xgb_reg.XGBRegressor_ff4_ff4
{
	"metadata" : { "model" : "Friedman_XGB", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : { "base_score" : [ ], "early_stopping_rounds" : 0, "eval_metric" : "", "gamma" : 0.000000, "grow_policy" : 0, "learning_rate" : 0.300000, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 32, "min_child_weight" : 5.000000, "n_estimators" : 5, "objective" : "reg:squarederror", "reg_alpha" : 0.000000, "reg_lambda" : 1.000000, "tree_method" : "auto" },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"booster" : {
		"BaseScore" : [ 31.561600 ],
		"Trees" : 5,
		"Tree_0" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : 0.359897, "sindex" : 2 },
			"Node_1" : { "leaf_value" : [ -22.410513 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_2" : { "leaf_value" : [ 22.410511 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_1" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : 0.375851, "sindex" : 0 },
			"Node_1" : { "leaf_value" : [ ], "parent" : 0, "left" : 3, "right" : 4, "svalue" : -0.324339, "sindex" : 9 },
			"Node_2" : { "leaf_value" : [ 27.900551 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_3" : { "leaf_value" : [ -24.975887 ], "parent" : 1, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_4" : { "leaf_value" : [ -2.506855 ], "parent" : 1, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_2" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : 0.359897, "sindex" : 2 },
			"Node_1" : { "leaf_value" : [ -15.546139 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_2" : { "leaf_value" : [ 15.560067 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_3" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : 0.375851, "sindex" : 0 },
			"Node_1" : { "leaf_value" : [ ], "parent" : 0, "left" : 3, "right" : 4, "svalue" : -0.324339, "sindex" : 9 },
			"Node_2" : { "leaf_value" : [ 20.146015 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_3" : { "leaf_value" : [ -17.955997 ], "parent" : 1, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_4" : { "leaf_value" : [ -1.864027 ], "parent" : 1, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_4" : {
			"Node_0" : { "leaf_value" : [ ], "parent" : null, "left" : 1, "right" : 2, "svalue" : -0.489682, "sindex" : 1 },
			"Node_1" : { "leaf_value" : [ -13.961761 ], "parent" : 0, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_2" : { "leaf_value" : [ ], "parent" : 0, "left" : 3, "right" : 4, "svalue" : 0.655148, "sindex" : 4 },
			"Node_3" : { "leaf_value" : [ -2.870324 ], "parent" : 2, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 },
			"Node_4" : { "leaf_value" : [ 19.186068 ], "parent" : 2, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		}
	}
}
BEAUTIFIED_JSON_START
{
	"booster" : 	{
		"BaseScore" : [ 31.5616 ],
		"Tree_0" : 	{
			"Node_0" : 	{
				"leaf_value" : [  ],
				"left" : 1,
				"parent" : null,
				"right" : 2,
				"sindex" : 2,
				"svalue" : 0.359897
			},
			"Node_1" : 	{
				"leaf_value" : [ -22.410513 ],
				"left" : null,
				"parent" : 0,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			},
			"Node_2" : 	{
				"leaf_value" : [ 22.410511 ],
				"left" : null,
				"parent" : 0,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_1" : 	{
			"Node_0" : 	{
				"leaf_value" : [  ],
				"left" : 1,
				"parent" : null,
				"right" : 2,
				"sindex" : 0,
				"svalue" : 0.375851
			},
			"Node_1" : 	{
				"leaf_value" : [  ],
				"left" : 3,
				"parent" : 0,
				"right" : 4,
				"sindex" : 9,
				"svalue" : -0.324339
			},
			"Node_2" : 	{
				"leaf_value" : [ 27.900551 ],
				"left" : null,
				"parent" : 0,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			},
			"Node_3" : 	{
				"leaf_value" : [ -24.975887 ],
				"left" : null,
				"parent" : 1,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			},
			"Node_4" : 	{
				"leaf_value" : [ -2.506855 ],
				"left" : null,
				"parent" : 1,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_2" : 	{
			"Node_0" : 	{
				"leaf_value" : [  ],
				"left" : 1,
				"parent" : null,
				"right" : 2,
				"sindex" : 2,
				"svalue" : 0.359897
			},
			"Node_1" : 	{
				"leaf_value" : [ -15.546139 ],
				"left" : null,
				"parent" : 0,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			},
			"Node_2" : 	{
				"leaf_value" : [ 15.560067 ],
				"left" : null,
				"parent" : 0,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_3" : 	{
			"Node_0" : 	{
				"leaf_value" : [  ],
				"left" : 1,
				"parent" : null,
				"right" : 2,
				"sindex" : 0,
				"svalue" : 0.375851
			},
			"Node_1" : 	{
				"leaf_value" : [  ],
				"left" : 3,
				"parent" : 0,
				"right" : 4,
				"sindex" : 9,
				"svalue" : -0.324339
			},
			"Node_2" : 	{
				"leaf_value" : [ 20.146015 ],
				"left" : null,
				"parent" : 0,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			},
			"Node_3" : 	{
				"leaf_value" : [ -17.955997 ],
				"left" : null,
				"parent" : 1,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			},
			"Node_4" : 	{
				"leaf_value" : [ -1.864027 ],
				"left" : null,
				"parent" : 1,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_4" : 	{
			"Node_0" : 	{
				"leaf_value" : [  ],
				"left" : 1,
				"parent" : null,
				"right" : 2,
				"sindex" : 1,
				"svalue" : -0.489682
			},
			"Node_1" : 	{
				"leaf_value" : [ -13.961761 ],
				"left" : null,
				"parent" : 0,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			},
			"Node_2" : 	{
				"leaf_value" : [  ],
				"left" : 3,
				"parent" : 0,
				"right" : 4,
				"sindex" : 4,
				"svalue" : 0.655148
			},
			"Node_3" : 	{
				"leaf_value" : [ -2.870324 ],
				"left" : null,
				"parent" : 2,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			},
			"Node_4" : 	{
				"leaf_value" : [ 19.186068 ],
				"left" : null,
				"parent" : 2,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Trees" : 5
	},
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 16
	},
	"metadata" :  { "model" : "Friedman_XGB", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "base_score" : [ ], "early_stopping_rounds" : 0, "eval_metric" : "", "gamma" : 0.0, "grow_policy" : 0, "learning_rate" : 0.3, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 32, "min_child_weight" : 5.0, "n_estimators" : 5, "objective" : "reg:squarederror", "reg_alpha" : 0.0, "reg_lambda" : 1.0, "tree_method" : "auto" }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[  8.420134  27.68975  -63.288696  84.34736   62.29097  -13.636258
 -63.288696 136.76482   60.837578 -13.636258 136.76482   23.729969
 103.61699  -63.288696  62.29097   12.638531]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[  8.420134  27.68975  -63.288696  84.34736   62.29097  -13.636258
 -63.288696 136.76482   60.837578 -13.636258 136.76482   23.729969
 103.61699  -63.288696  62.29097   12.638531]
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.XGBRegressor', 'model_name': 'XGBRegressor', 'options': '{"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }', 'dataset': 'RandomReg_10_tiny', 'size': 16, 'mse': 7206.048, 'mae': 57.79374, 'mape': 7.2670026, 'r2': 0.6007044148524967}
WRITING_PERF_CODE 'logs/auto_tests/regression/XGBRegressor/mllite.XGBRegressor_RandomReg_10_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.XGBRegressor', 'model_name': 'XGBRegressor', 'options': '{"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }', 'dataset': 'RandomReg_10_tiny', 'training_time_in_sec': 0.008, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -4.029234 ],
      "X_1" : [ 0.996743 ],
      "X_2" : [ 2.372727 ],
      "X_3" : [ 0.000000 ],
      "X_4" : [ -2.197024 ],
      "X_5" : [ 0.000000 ],
      "X_6" : [ 0.000000 ],
      "X_7" : [ 0.000000 ],
      "X_8" : [ 0.000000 ],
      "X_9" : [ -2.033489 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 0, 2, 4, 9, 1 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/XGBRegressor/mllite.XGBRegressor_RandomReg_10_tiny_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/XGBRegressor/mllite.XGBRegressor_RandomReg_10_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_tiny', 'XGBRegressor', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "RandomReg_10_tiny" AS "ADS" 
 ),
"DT_node_lookup_0" AS 
 (SELECT
    t."index" AS "index",
    CASE WHEN (t."X_2" < 0.359897) THEN 1 ELSE 2 END AS node_id
  FROM model_input AS t
 )
,
"DT_node_data_0" AS 
 (SELECT
    "Values".nid AS nid,
    "Values"."E" AS "E"
  FROM (
    SELECT 1 AS nid,  -22.410513 AS "E"
    UNION ALL
    SELECT 2 AS nid,  22.410511 AS "E"
  ) AS "Values"
 )
,
"DT_output_0" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t2."E" AS "E"
  FROM
   "DT_node_lookup_0" AS t1
   LEFT OUTER JOIN
   "DT_node_data_0" AS t2
   ON t
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_tiny', 'XGBRegressor', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_tiny', 'XGBRegressor', 'duckdb')
FROM (
    SELECT 1 AS nid,  -13.961761 AS "E"
    UNION ALL
    SELECT 3 AS nid,  -2.870324 AS "E"
    UNION ALL
    SELECT 4 AS nid,  19.186068 AS "E"
  ) AS "Values"
 )
,
"DT_output_4" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t2."E" AS "E"
  FROM
   "DT_node_lookup_4" AS t1
   LEFT OUTER JOIN
   "DT_node_data_4" AS t2
   ON t1.node_id = t2.nid
 )
,
"union_of_trees" AS
 (SELECT scu."index_u" AS "index", scu."E" AS "E"
 FROM (
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_0" AS t
    UNION ALL
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_1" AS t
    UNION ALL
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_2" AS t
    UNION ALL
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_3" AS t
    UNION ALL
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_4" AS t
  ) AS scu
)
SELECT
   t."index" AS "index",
   31.561600 + SUM(t."E") AS "Estimator"
FROM "union_of_trees" AS t
GROUP BY t."index"
SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_tiny', 'XGBRegressor', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
5     -0.695245  0.529279 -0.012289  ...  1.592387 -0.321756  0.330976
6     -0.304252 -2.418750  0.148738  ... -1.733213 -0.113479 -1.359821
7      2.688408 -0.118800  0.359897  ...  2.004759 -0.462834 -0.129511
8      1.092563  0.944507 -1.920995  ... -1.050732 -1.156224  1.876815
9      0.316403  0.549981 -0.016203  ... -0.240115 -1.068699  0.480429
10     0.375851  2.459666  2.331842  ... -1.930692  0.035418 -1.673652
11    -0.361483  0.387538  0.595749  ...  0.556831  0.382503 -1.402543
12     1.174554 -0.660511  1.243189  ... -1.353951  0.417907 -0.191627
13    -0.406296 -1.114724 -0.690144  ... -0.872249  1.572700 -0.719172
14    -0.119582 -0.489682  0.671135  ... -0.253174  1.680182 -0.191141
15    -0.132642 -1.528494  0.683175  ... -0.337466 -0.378033 -1.493023

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index   Estimator
0       0    8.420134
1       1   27.689753
2       2  -63.288697
3       3   84.347364
4       4   62.290972
5       5  -13.636258
6       6  -63.288697
7       7  136.764812
8       8   60.837582
9       9  -13.636258
10     10  136.764812
11     11   23.729970
12     12  103.616983
13     13  -63.288697
14     14   62.290972
15     15   12.638533
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_tiny', 'XGBRegressor') Estimator 2.3030548077507262e-06
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0       8.420134      8.420134  4.093018e-07
1       1      27.689753     27.689751  2.328613e-06
2       2     -63.288697    -63.288696 -7.109375e-07
3       3      84.347364     84.347359  5.296387e-06
4       4      62.290972     62.290970  2.151367e-06
5       5     -13.636258    -13.636258  1.253052e-07
6       6     -63.288697    -63.288696 -7.109375e-07
7       7     136.764812    136.764816 -4.284180e-06
8       8      60.837582     60.837578  4.180176e-06
9       9     -13.636258    -13.636258  1.253052e-07
10     10     136.764812    136.764816 -4.284180e-06
11     11      23.729970     23.729969  9.753418e-07
12     12     103.616983    103.616989 -6.135742e-06
13     13     -63.288697    -63.288696 -7.109375e-07
14     14      62.290972     62.290970  2.151367e-06
15     15      12.638533     12.638531  2.268799e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_tiny', 'XGBRegressor', 'Success')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/XGBRegressor/mllite.XGBRegressor_RandomReg_10_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('RandomReg_10_tiny', 'XGBRegressor', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "RandomReg_10_tiny" AS "ADS" 
 ),
"DT_node_lookup_0" AS 
 (SELECT
    t."index" AS "index",
    CASE WHEN (t."X_2" < 0.359897) THEN 1 ELSE 2 END AS node_id
  FROM model_input AS t
 )
,
"DT_node_data_0" AS 
 (SELECT
    "Values".nid AS nid,
    "Values"."E" AS "E"
  FROM (
    SELECT 1 AS nid,  -22.410513 AS "E"
    UNION ALL
    SELECT 2 AS nid,  22.410511 AS "E"
  ) AS "Values"
 )
,
"DT_output_0" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t2."E" AS "E"
  FROM
   "DT_node_lookup_0" AS t1
   LEFT OUTER JOIN
   "DT_node_data_0" AS t2
   ON t
SQL_OUT_PUT_FIRST_LINES_END ('RandomReg_10_tiny', 'XGBRegressor', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('RandomReg_10_tiny', 'XGBRegressor', 'sqlite')
FROM (
    SELECT 1 AS nid,  -13.961761 AS "E"
    UNION ALL
    SELECT 3 AS nid,  -2.870324 AS "E"
    UNION ALL
    SELECT 4 AS nid,  19.186068 AS "E"
  ) AS "Values"
 )
,
"DT_output_4" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t2."E" AS "E"
  FROM
   "DT_node_lookup_4" AS t1
   LEFT OUTER JOIN
   "DT_node_data_4" AS t2
   ON t1.node_id = t2.nid
 )
,
"union_of_trees" AS
 (SELECT scu."index_u" AS "index", scu."E" AS "E"
 FROM (
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_0" AS t
    UNION ALL
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_1" AS t
    UNION ALL
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_2" AS t
    UNION ALL
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_3" AS t
    UNION ALL
    SELECT t."index" AS "index_u", t."E" AS "E" FROM "DT_output_4" AS t
  ) AS scu
)
SELECT
   t."index" AS "index",
   31.561600 + SUM(t."E") AS "Estimator"
FROM "union_of_trees" AS t
GROUP BY t."index"
SQL_OUT_PUT_LAST_LINES_END ('RandomReg_10_tiny', 'XGBRegressor', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -0.478793  2.502870 -0.103623  ... -0.735866 -1.647981  0.327583
1      1.195055 -1.450382 -0.468737  ...  0.852386  0.311669  0.685749
2     -0.648732 -0.880620  0.202193  ... -2.437228 -0.548644 -0.541692
3     -0.612877  0.045409  0.558935  ...  0.228382 -0.258238 -0.097936
4     -0.749045 -0.067925  0.967609  ...  1.398441  0.132868 -0.324339
5     -0.695245  0.529279 -0.012289  ...  1.592387 -0.321756  0.330976
6     -0.304252 -2.418750  0.148738  ... -1.733213 -0.113479 -1.359821
7      2.688408 -0.118800  0.359897  ...  2.004759 -0.462834 -0.129511
8      1.092563  0.944507 -1.920995  ... -1.050732 -1.156224  1.876815
9      0.316403  0.549981 -0.016203  ... -0.240115 -1.068699  0.480429
10     0.375851  2.459666  2.331842  ... -1.930692  0.035418 -1.673652
11    -0.361483  0.387538  0.595749  ...  0.556831  0.382503 -1.402543
12     1.174554 -0.660511  1.243189  ... -1.353951  0.417907 -0.191627
13    -0.406296 -1.114724 -0.690144  ... -0.872249  1.572700 -0.719172
14    -0.119582 -0.489682  0.671135  ... -0.253174  1.680182 -0.191141
15    -0.132642 -1.528494  0.683175  ... -0.337466 -0.378033 -1.493023

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      16 non-null     int64  
 1   Estimator  16 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 388.0 bytes
    index   Estimator
0       0    8.420134
1       1   27.689753
2       2  -63.288697
3       3   84.347364
4       4   23.729970
5       5  -13.636258
6       6  -63.288697
7       7  136.764812
8       8   60.837582
9       9  -13.636258
10     10  136.764812
11     11   23.729970
12     12  103.616983
13     13  -63.288697
14     14   62.290972
15     15   12.638533
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('RandomReg_10_tiny', 'XGBRegressor') Estimator 2.4100646591339085
    index  SQL_Estimator  Py_Estimator     SQL_Error
0       0       8.420134      8.420134  4.093018e-07
1       1      27.689753     27.689751  2.328613e-06
2       2     -63.288697    -63.288696 -7.109375e-07
3       3      84.347364     84.347359  5.296387e-06
4       4      23.729970     62.290970 -3.856100e+01
5       5     -13.636258    -13.636258  1.253052e-07
6       6     -63.288697    -63.288696 -7.109375e-07
7       7     136.764812    136.764816 -4.284180e-06
8       8      60.837582     60.837578  4.180176e-06
9       9     -13.636258    -13.636258  1.253052e-07
10     10     136.764812    136.764816 -4.284180e-06
11     11      23.729970     23.729969  9.753418e-07
12     12     103.616983    103.616989 -6.135742e-06
13     13     -63.288697    -63.288696 -7.109375e-07
14     14      62.290972     62.290970  2.151367e-06
15     15      12.638533     12.638531  2.268799e-06
MLLITE_REG_SQL_EXECUTION_STATUS ('RandomReg_10_tiny', 'XGBRegressor', 'Failure')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
