          X_0          X_1       X_2        X_3    target
0   17.761710   423.498320  0.135270  10.148129  1.270144
1   45.437614   168.841197  0.343817   3.279963  0.906663
2   69.792322   473.447926  0.233546   3.411073  1.007753
3   67.667095   938.672588  0.652046   9.523154  1.460687
4   55.118421  1002.086076  0.726658   4.570617  1.495246
..        ...          ...       ...        ...       ...
59  82.923828  1535.997616  0.287537   7.396835  1.385201
60  17.167281  1104.656206  0.421381   6.591000  1.533932
61  48.198019   353.104245  0.725143  10.405507  1.384737
62  17.373148   483.680246  0.685229   2.728044  1.518426
63   7.321981   487.752848  0.993317   5.340956  1.555685

[64 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
('OPERATION_START', 'TRAINING')
[[1.77617092e+01 4.23498322e+02 1.35270208e-01 1.01481285e+01]
 [4.54376144e+01 1.68841202e+02 3.43817413e-01 3.27996254e+00]
 [6.97923203e+01 4.73447937e+02 2.33546272e-01 3.41107249e+00]
 [6.76670914e+01 9.38672607e+02 6.52046204e-01 9.52315426e+00]
 [5.51184196e+01 1.00208606e+03 7.26658285e-01 4.57061768e+00]] [1.2701445 0.9066629 1.0077531 1.4606868 1.4952464]
MLLITE_FIT_USING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 24 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 36 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:NuSVR_Global' 48 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_NU_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.012, 'TRAINING')
{ "nu" : 0.1,  "max_iter" : 128  , }
{ "nu" : 0.1,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.000001, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 9,
	"SupportVectors" : {
		"SV_0" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
		"SV_1" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
		"SV_2" : [ 2.070305, 957.545105, 0.737876, 2.535709 ],
		"SV_3" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
		"SV_4" : [ 7.737632, 682.638123, 0.943330, 1.569080 ],
		"SV_5" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
		"SV_6" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
		"SV_7" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
		"SV_8" : [ 7.321981, 487.752838, 0.993317, 5.340956 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 0.588360, -1.000000, 0.701633, -1.000000, 0.805240, -0.199998, 0.104765, -1.000000, 1.000000 ]
	},
	"rho" : [ -1.015656 ],
	"nSV" : [ 9 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 56 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS NuSVR {"nu" : 0.1}
MLLITE_MODEL_OPTIONS_DEFAULT NuSVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING NuSVR { "nu" : 0.1,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING NuSVR None
MLLITE_RELOADING_MODEL mllite_nu_svm_reg.NuSVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_NuSVR_RBF", "version" : "2024-W13", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "nu_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.000001, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.100000, "epsilon" : 0.000000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 9,
	"SupportVectors" : {
		"SV_0" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
		"SV_1" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
		"SV_2" : [ 2.070305, 957.545105, 0.737876, 2.535709 ],
		"SV_3" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
		"SV_4" : [ 7.737632, 682.638123, 0.943330, 1.569080 ],
		"SV_5" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
		"SV_6" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
		"SV_7" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
		"SV_8" : [ 7.321981, 487.752838, 0.993317, 5.340956 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ 0.588360, -1.000000, 0.701633, -1.000000, 0.805240, -0.199998, 0.104765, -1.000000, 1.000000 ]
	},
	"rho" : [ -1.015656 ],
	"nSV" : [ 9 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 56 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 64
	},
	"metadata" :  { "model" : "Vapnik_NuSVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W13" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.0, "gamma" : 1e-06, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.1, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "nu_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 9,
		"SupportVectors" : 	{
			"SV_0" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
			"SV_1" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
			"SV_2" : [ 2.070305, 957.545105, 0.737876, 2.535709 ],
			"SV_3" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
			"SV_4" : [ 7.737632, 682.638123, 0.94333, 1.56908 ],
			"SV_5" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
			"SV_6" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
			"SV_7" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
			"SV_8" : [ 7.321981, 487.752838, 0.993317, 5.340956 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ 0.58836, -1.0, 0.701633, -1.0, 0.80524, -0.199998, 0.104765, -1.0, 1.0 ]
		},
		"classes" : 2,
		"nSV" : [ 9 ],
		"n_iter" : [ 56 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -1.015656 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[1.0341692  0.9631654  1.0140111  1.046828   1.0540855  1.0339882
 1.0567341  0.97627604 0.9670151  1.0811512  1.0712909  1.080062
 1.0552864  1.0217273  1.0809932  1.0642056  1.0234097  1.07203
 1.0054022  0.9742171  1.0479549  0.9691484  1.0872502  1.0352643
 1.0781991  1.071183   1.067075   1.0456239  1.0294952  1.0420508
 1.0760053  1.0301716  1.0190358  1.0381505  1.0522747  1.0347742
 1.0184855  1.0537977  1.0548148  0.93478185 1.0818009  0.95989037
 1.0544364  1.0604612  1.0649638  1.0148847  1.0649967  1.0414813
 1.0360388  1.0395695  1.0710204  1.0661194  1.0801966  1.0747252
 1.0713184  1.0227315  1.0596228  0.98062545 1.0357935  1.057411
 1.0748636  1.0029134  1.046067   1.0526495 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[1.0141816  0.965647   0.9998096  1.0478384  1.0571625  1.0154345
 1.0461131  0.9747375  0.9670496  1.0851278  1.0460453  1.0821348
 1.0662051  1.0120058  1.0871046  1.076406   1.0162183  1.0741379
 0.9932058  0.9708827  1.0245843  0.9688769  1.0777793  1.0346124
 1.0529027  1.0779381  1.0618035  1.0343487  1.0110201  1.0199699
 1.0802712  1.046237   1.0075748  1.0283859  1.0666717  1.0233903
 1.004126   1.029614   1.0339597  0.9440885  1.0873901  0.96186244
 1.0356892  1.0678159  1.0718389  1.0023475  1.057636   1.0583756
 1.0202235  1.019192   1.081831   1.0506755  1.0679327  1.0498406
 1.0751929  1.0057895  1.0720805  0.97519755 1.04684    1.0680172
 1.0779753  0.9915566  1.0231739  1.0280046 ]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman3_small', 'size': 64, 'mse': 0.16669227, 'mae': 0.37434188, 'mape': 1.0697811, 'r2': -0.7049723376461405}
WRITING_PERF_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.NuSVR', 'model_name': 'NuSVR', 'options': '{"nu" : 0.1}', 'dataset': 'freidman3_small', 'training_time_in_sec': 0.012, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_small', 'NuSVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 0.588360 AS "coeff", 7.606344 AS "sv_0", 1112.226562 AS "sv_1", 0.732761 AS "sv_2", 6.140375 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", -1.000000 AS "coeff", 75.648438 AS "sv_0", 442.560303 AS "sv_1", 0.035123 AS "sv_2", 1.334146 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", 0.701633 AS "coeff", 2.070305 AS "sv_0", 957.545105 AS "sv_1", 0.737876 AS "sv_2", 2.535709 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", -1.000000 AS "coeff", 85.409492 AS "sv_0", 865.747681 AS "sv_1", 0.002107 AS "sv_2", 1.657108
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_small', 'NuSVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_small', 'NuSVR', 'duckdb')
.186899 AS "sv_3"
     UNION ALL
     SELECT 8 AS "sv_idx", 1.000000 AS "coeff", 7.321981 AS "sv_0", 487.752838 AS "sv_1", 0.993317 AS "sv_2", 5.340956 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -1.015656 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.000001 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_small', 'NuSVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
...          ...          ...       ...        ...
59     82.923828  1535.997559  0.287537   7.396835
60     17.167280  1104.656250  0.421381   6.591000
61     48.198017   353.104248  0.725143  10.405507
62     17.373148   483.680237  0.685229   2.728044
63      7.321981   487.752838  0.993317   5.340956

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0   1.014182
1       1   0.965647
2       2   0.999810
3       3   1.047838
4       4   1.057162
..    ...        ...
59     59   1.068017
60     60   1.077975
61     61   0.991557
62     62   1.023174
63     63   1.028005

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_small', 'NuSVR') Estimator 0.01132549709351549
    index  SQL_Estimator  Py_Estimator  SQL_Error
48     48       1.020224      1.036039  -0.015815
49     49       1.019192      1.039569  -0.020377
50     50       1.081831      1.071020   0.010811
51     51       1.050676      1.066119  -0.015444
52     52       1.067933      1.080197  -0.012264
53     53       1.049841      1.074725  -0.024884
54     54       1.075193      1.071318   0.003874
55     55       1.005790      1.022732  -0.016942
56     56       1.072080      1.059623   0.012458
57     57       0.975198      0.980625  -0.005428
58     58       1.046840      1.035794   0.011046
59     59       1.068017      1.057411   0.010606
60     60       1.077975      1.074864   0.003112
61     61       0.991557      1.002913  -0.011357
62     62       1.023174      1.046067  -0.022893
63     63       1.028005      1.052649  -0.024645
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_small', 'NuSVR', 'Failure')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_small', 'NuSVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 0.588360 AS "coeff", 7.606344 AS "sv_0", 1112.226562 AS "sv_1", 0.732761 AS "sv_2", 6.140375 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", -1.000000 AS "coeff", 75.648438 AS "sv_0", 442.560303 AS "sv_1", 0.035123 AS "sv_2", 1.334146 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", 0.701633 AS "coeff", 2.070305 AS "sv_0", 957.545105 AS "sv_1", 0.737876 AS "sv_2", 2.535709 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", -1.000000 AS "coeff", 85.409492 AS "sv_0", 865.747681 AS "sv_1", 0.002107 AS "sv_2", 1.657108
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_small', 'NuSVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_small', 'NuSVR', 'sqlite')
v_2", 3.186899 AS "sv_3"
     UNION ALL
     SELECT 8 AS "sv_idx", 1.000000 AS "coeff", 7.321981 AS "sv_0", 487.752838 AS "sv_1", 0.993317 AS "sv_2", 5.340956 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -1.015656 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.000001 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_small', 'NuSVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
...          ...          ...       ...        ...
59     82.923828  1535.997559  0.287537   7.396835
60     17.167280  1104.656250  0.421381   6.591000
61     48.198017   353.104248  0.725143  10.405507
62     17.373148   483.680237  0.685229   2.728044
63      7.321981   487.752838  0.993317   5.340956

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0   1.014182
1       1   0.965647
2       2   0.999810
3       3   1.047839
4       4   1.057163
..    ...        ...
59     59   1.068017
60     60   1.077975
61     61   0.991557
62     62   1.023174
63     63   1.028005

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_small', 'NuSVR') Estimator 0.01132552828633972
    index  SQL_Estimator  Py_Estimator  SQL_Error
48     48       1.020224      1.036039  -0.015815
49     49       1.019192      1.039569  -0.020377
50     50       1.081831      1.071020   0.010811
51     51       1.050676      1.066119  -0.015444
52     52       1.067933      1.080197  -0.012264
53     53       1.049841      1.074725  -0.024885
54     54       1.075193      1.071318   0.003874
55     55       1.005790      1.022732  -0.016942
56     56       1.072081      1.059623   0.012458
57     57       0.975198      0.980625  -0.005428
58     58       1.046840      1.035794   0.011046
59     59       1.068017      1.057411   0.010606
60     60       1.077975      1.074864   0.003112
61     61       0.991557      1.002913  -0.011357
62     62       1.023174      1.046067  -0.022893
63     63       1.028005      1.052649  -0.024645
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_small', 'NuSVR', 'Failure')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/NuSVR/mllite.NuSVR_freidman3_small_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_small', 'NuSVR', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", 0.588360 AS "coeff", 7.606344 AS "sv_0", 1112.226562 AS "sv_1", 0.732761 AS "sv_2", 6.140375 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", -1.000000 AS "coeff", 75.648438 AS "sv_0", 442.560303 AS "sv_1", 0.035123 AS "sv_2", 1.334146 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", 0.701633 AS "coeff", 2.070305 AS "sv_0", 957.545105 AS "sv_1", 0.737876 AS "sv_2", 2.535709 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", -1.000000 AS "coeff", 85.409492 AS "sv_0", 865.747681 AS "sv_1", 0.002107 AS "sv_2", 1.657108
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_small', 'NuSVR', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_small', 'NuSVR', 'pgsql')
.186899 AS "sv_3"
     UNION ALL
     SELECT 8 AS "sv_idx", 1.000000 AS "coeff", 7.321981 AS "sv_0", 487.752838 AS "sv_1", 0.993317 AS "sv_2", 5.340956 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -1.015656 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.000001 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_small', 'NuSVR', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
