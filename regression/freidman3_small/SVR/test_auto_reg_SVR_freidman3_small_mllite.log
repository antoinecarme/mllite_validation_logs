          X_0          X_1       X_2        X_3    target
0   17.761710   423.498320  0.135270  10.148129  1.270144
1   45.437614   168.841197  0.343817   3.279963  0.906663
2   69.792322   473.447926  0.233546   3.411073  1.007753
3   67.667095   938.672588  0.652046   9.523154  1.460687
4   55.118421  1002.086076  0.726658   4.570617  1.495246
..        ...          ...       ...        ...       ...
59  82.923828  1535.997616  0.287537   7.396835  1.385201
60  17.167281  1104.656206  0.421381   6.591000  1.533932
61  48.198019   353.104245  0.725143  10.405507  1.384737
62  17.373148   483.680246  0.685229   2.728044  1.518426
63   7.321981   487.752848  0.993317   5.340956  1.555685

[64 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS SVR None
MLLITE_MODEL_OPTIONS_DEFAULT SVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING SVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING SVR None
('OPERATION_START', 'TRAINING')
[[1.77617092e+01 4.23498322e+02 1.35270208e-01 1.01481285e+01]
 [4.54376144e+01 1.68841202e+02 3.43817413e-01 3.27996254e+00]
 [6.97923203e+01 4.73447937e+02 2.33546272e-01 3.41107249e+00]
 [6.76670914e+01 9.38672607e+02 6.52046204e-01 9.52315426e+00]
 [5.51184196e+01 1.00208606e+03 7.26658285e-01 4.57061768e+00]] [1.2701445 0.9066629 1.0077531 1.4606868 1.4952464]
MLLITE_FIT_USING_MODEL mllite_svm_reg.SVR_ff4_ff4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 12 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 24 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 36 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 48 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 60 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_SOLVER_ITERATION:SVR_Global' 72 128
PROGRESS_REPORT_ELAPSED_TOTAL 'SVM_REGRESSOR_FIT' 4 4
('OPERATION_END_ELAPSED', 0.012, 'TRAINING')
{ ,  "max_iter" : 128  , }
{ ,  "max_iter" : 128  , }
{
	"metadata" : { "model" : "Vapnik_SVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "epsilon_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.000001, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.100000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 26,
	"SupportVectors" : {
		"SV_00" : [ 45.437614, 168.841202, 0.343817, 3.279963 ],
		"SV_01" : [ 69.792320, 473.447937, 0.233546, 3.411072 ],
		"SV_02" : [ 52.067585, 534.256165, 0.155164, 8.526538 ],
		"SV_03" : [ 34.347893, 205.928116, 0.720020, 9.414678 ],
		"SV_04" : [ 13.280704, 643.716797, 0.520814, 4.842079 ],
		"SV_05" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
		"SV_06" : [ 38.088467, 1321.297485, 0.052941, 10.429984 ],
		"SV_07" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
		"SV_08" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
		"SV_09" : [ 7.737632, 682.638123, 0.943330, 1.569080 ],
		"SV_10" : [ 22.116344, 1162.774048, 0.675740, 4.934592 ],
		"SV_11" : [ 65.455681, 755.864746, 0.990681, 3.455762 ],
		"SV_12" : [ 11.179132, 444.204834, 0.202220, 7.809537 ],
		"SV_13" : [ 78.244774, 702.214600, 0.183212, 9.434527 ],
		"SV_14" : [ 18.503828, 532.344482, 0.721851, 10.655538 ],
		"SV_15" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
		"SV_16" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
		"SV_17" : [ 44.357746, 674.885315, 0.220269, 3.032311 ],
		"SV_18" : [ 39.016674, 895.294678, 0.992031, 3.333866 ],
		"SV_19" : [ 81.412109, 1254.374390, 0.194226, 8.164762 ],
		"SV_20" : [ 39.873802, 428.048248, 0.235384, 2.176043 ],
		"SV_21" : [ 44.762737, 1255.201538, 0.591546, 2.754247 ],
		"SV_22" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
		"SV_23" : [ 48.198017, 353.104248, 0.725143, 10.405507 ],
		"SV_24" : [ 17.373148, 483.680237, 0.685229, 2.728044 ],
		"SV_25" : [ 7.321981, 487.752838, 0.993317, 5.340956 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ -1.000000, -1.000000, -1.000000, 1.000000, 1.000000, 1.000000, -1.000000, -1.000000, -1.000000, 1.000000, 1.000000, 0.282564, 0.952080, -1.000000, 1.000000, -1.000000, 0.700887, -1.000000, 0.607691, -1.000000, -1.000000, 0.456778, -1.000000, 1.000000, 1.000000, 1.000000 ]
	},
	"rho" : [ -1.276027 ],
	"nSV" : [ 26 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 75 ]
}
}
WRITING_JSON_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman3_small.json'

MLLITE_MODEL_SET_OPTIONS SVR None
MLLITE_MODEL_OPTIONS_DEFAULT SVR { "max_iter" : 128 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING SVR { ,  "max_iter" : 128  , }
MLLITE_MODEL_JSON_AFTER_SETTING SVR None
MLLITE_RELOADING_MODEL mllite_svm_reg.SVR_ff4_ff4
{
	"metadata" : { "model" : "Vapnik_SVR_RBF", "version" : "2024-W14", "signature" : "ff4_ff4"},
	"options" : {"svm_type" : "epsilon_svr", "kernel" : "rbf", "degree" : 3, "gamma" : 0.000001, "coef0" : 0.000000, "cache_size" : 300, "tol" : 0.001000, "nu" : 0.500000, "epsilon" : 0.100000, "shrinking" : 0, "probability" : 0, "C" : 1.000000, "max_iter" : 128, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"svm_model" : {
	"classes" : 2,
	"L" : 26,
	"SupportVectors" : {
		"SV_00" : [ 45.437614, 168.841202, 0.343817, 3.279963 ],
		"SV_01" : [ 69.792320, 473.447937, 0.233546, 3.411072 ],
		"SV_02" : [ 52.067585, 534.256165, 0.155164, 8.526538 ],
		"SV_03" : [ 34.347893, 205.928116, 0.720020, 9.414678 ],
		"SV_04" : [ 13.280704, 643.716797, 0.520814, 4.842079 ],
		"SV_05" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
		"SV_06" : [ 38.088467, 1321.297485, 0.052941, 10.429984 ],
		"SV_07" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
		"SV_08" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
		"SV_09" : [ 7.737632, 682.638123, 0.943330, 1.569080 ],
		"SV_10" : [ 22.116344, 1162.774048, 0.675740, 4.934592 ],
		"SV_11" : [ 65.455681, 755.864746, 0.990681, 3.455762 ],
		"SV_12" : [ 11.179132, 444.204834, 0.202220, 7.809537 ],
		"SV_13" : [ 78.244774, 702.214600, 0.183212, 9.434527 ],
		"SV_14" : [ 18.503828, 532.344482, 0.721851, 10.655538 ],
		"SV_15" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
		"SV_16" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
		"SV_17" : [ 44.357746, 674.885315, 0.220269, 3.032311 ],
		"SV_18" : [ 39.016674, 895.294678, 0.992031, 3.333866 ],
		"SV_19" : [ 81.412109, 1254.374390, 0.194226, 8.164762 ],
		"SV_20" : [ 39.873802, 428.048248, 0.235384, 2.176043 ],
		"SV_21" : [ 44.762737, 1255.201538, 0.591546, 2.754247 ],
		"SV_22" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
		"SV_23" : [ 48.198017, 353.104248, 0.725143, 10.405507 ],
		"SV_24" : [ 17.373148, 483.680237, 0.685229, 2.728044 ],
		"SV_25" : [ 7.321981, 487.752838, 0.993317, 5.340956 ]
	},
	"SupportVectorsCoefs" : {
		"SV_coef_0" : [ -1.000000, -1.000000, -1.000000, 1.000000, 1.000000, 1.000000, -1.000000, -1.000000, -1.000000, 1.000000, 1.000000, 0.282564, 0.952080, -1.000000, 1.000000, -1.000000, 0.700887, -1.000000, 0.607691, -1.000000, -1.000000, 0.456778, -1.000000, 1.000000, 1.000000, 1.000000 ]
	},
	"rho" : [ -1.276027 ],
	"nSV" : [ 26 ],
	"probA" : [ ],
	"probB" : [ ],
	"n_iter" : [ 75 ]
}
}
BEAUTIFIED_JSON_START
{
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 64
	},
	"metadata" :  { "model" : "Vapnik_SVR_RBF", "signature" : "ff4_ff4", "version" : "2024-W14" },
	"options" :  { "C" : 1.0, "cache_size" : 300, "coef0" : 0.0, "degree" : 3, "epsilon" : 0.1, "gamma" : 1e-06, "kernel" : "rbf", "max_iter" : 128, "nu" : 0.5, "probability" : 0, "random_state" : 1789, "shrinking" : 0, "svm_type" : "epsilon_svr", "tol" : 0.001 },
	"svm_model" : 	{
		"L" : 26,
		"SupportVectors" : 	{
			"SV_00" : [ 45.437614, 168.841202, 0.343817, 3.279963 ],
			"SV_01" : [ 69.79232, 473.447937, 0.233546, 3.411072 ],
			"SV_02" : [ 52.067585, 534.256165, 0.155164, 8.526538 ],
			"SV_03" : [ 34.347893, 205.928116, 0.72002, 9.414678 ],
			"SV_04" : [ 13.280704, 643.716797, 0.520814, 4.842079 ],
			"SV_05" : [ 7.606344, 1112.226562, 0.732761, 6.140375 ],
			"SV_06" : [ 38.088467, 1321.297485, 0.052941, 10.429984 ],
			"SV_07" : [ 75.648438, 442.560303, 0.035123, 1.334146 ],
			"SV_08" : [ 85.409492, 865.747681, 0.002107, 1.657108 ],
			"SV_09" : [ 7.737632, 682.638123, 0.94333, 1.56908 ],
			"SV_10" : [ 22.116344, 1162.774048, 0.67574, 4.934592 ],
			"SV_11" : [ 65.455681, 755.864746, 0.990681, 3.455762 ],
			"SV_12" : [ 11.179132, 444.204834, 0.20222, 7.809537 ],
			"SV_13" : [ 78.244774, 702.2146, 0.183212, 9.434527 ],
			"SV_14" : [ 18.503828, 532.344482, 0.721851, 10.655538 ],
			"SV_15" : [ 97.541664, 130.009232, 0.366127, 5.345118 ],
			"SV_16" : [ 13.316919, 1592.958618, 0.993566, 7.946761 ],
			"SV_17" : [ 44.357746, 674.885315, 0.220269, 3.032311 ],
			"SV_18" : [ 39.016674, 895.294678, 0.992031, 3.333866 ],
			"SV_19" : [ 81.412109, 1254.37439, 0.194226, 8.164762 ],
			"SV_20" : [ 39.873802, 428.048248, 0.235384, 2.176043 ],
			"SV_21" : [ 44.762737, 1255.201538, 0.591546, 2.754247 ],
			"SV_22" : [ 85.125381, 1049.026855, 0.039136, 3.186899 ],
			"SV_23" : [ 48.198017, 353.104248, 0.725143, 10.405507 ],
			"SV_24" : [ 17.373148, 483.680237, 0.685229, 2.728044 ],
			"SV_25" : [ 7.321981, 487.752838, 0.993317, 5.340956 ]
		},
		"SupportVectorsCoefs" : 	{
			"SV_coef_0" : [ -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 0.282564, 0.95208, -1.0, 1.0, -1.0, 0.700887, -1.0, 0.607691, -1.0, -1.0, 0.456778, -1.0, 1.0, 1.0, 1.0 ]
		},
		"classes" : 2,
		"nSV" : [ 26 ],
		"n_iter" : [ 75 ],
		"probA" : [  ],
		"probB" : [  ],
		"rho" : [ -1.276027 ]
	}
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
[1.326896  1.1260794 1.2890005 1.3902252 1.4039583 1.3404727 1.4087889
 1.1629031 1.1431644 1.4650719 1.4302411 1.4519813 1.403336  1.3280487
 1.4600478 1.4192743 1.3358195 1.4518936 1.265519  1.1714759 1.3650647
 1.1472939 1.4696766 1.3666899 1.4471285 1.4338465 1.4302919 1.3840082
 1.3228835 1.3469785 1.4436293 1.3553321 1.3172828 1.3681078 1.3978691
 1.3584309 1.3059716 1.383026  1.3950527 1.0518401 1.4625094 1.1241959
 1.3973024 1.4219141 1.4308705 1.3015807 1.4263725 1.3755436 1.3546237
 1.3512414 1.4327387 1.4269531 1.4565237 1.4392354 1.4474105 1.3019142
 1.41058   1.1919167 1.3674549 1.4119413 1.4421475 1.2467167 1.3605578
 1.3754585]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
[1.2674017 1.1265887 1.242071  1.3873761 1.4097207 1.2833941 1.3755567
 1.1520574 1.1363215 1.4847875 1.3605099 1.4644027 1.434413  1.2905573
 1.486878  1.4593714 1.3047705 1.464573  1.2236727 1.1544285 1.2975917
 1.1397493 1.4491713 1.3556108 1.3786179 1.4577911 1.4155071 1.3463776
 1.2663908 1.282556  1.4614677 1.3929222 1.2755308 1.3329673 1.4425575
 1.3185177 1.25808   1.3137469 1.3340914 1.0720268 1.4877955 1.1227614
 1.3417004 1.4495938 1.457643  1.2574921 1.4047751 1.421706  1.3039222
 1.2902641 1.4710408 1.3827094 1.4254031 1.3711305 1.4657485 1.2494305
 1.4490495 1.168731  1.3910881 1.4481521 1.455842  1.208559  1.2941489
 1.3051424]
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
MODEL_PERFS {'class_name': 'mllite.SVR', 'model_name': 'SVR', 'options': None, 'dataset': 'freidman3_small', 'size': 64, 'mse': 0.07893981, 'mae': 0.1547845, 'mape': 1.191499, 'r2': 0.19258290868450811}
WRITING_PERF_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman3_small.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.SVR', 'model_name': 'SVR', 'options': None, 'dataset': 'freidman3_small', 'training_time_in_sec': 0.012, 'prediction_time_in_sec': 0.001}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_REGRESSION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ -0.012708 ],
      "X_1" : [ -0.008049 ],
      "X_2" : [ 0.000000 ],
      "X_3" : [ -0.000014 ]   
   },
   "Most_Contributive_Features" : {
      "y" : [ 0, 1, 3, 2 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman3_small_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman3_small_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_small', 'SVR', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman3_small" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", -1.000000 AS "coeff", 45.437614 AS "sv_0", 168.841202 AS "sv_1", 0.343817 AS "sv_2", 3.279963 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", -1.000000 AS "coeff", 69.792320 AS "sv_0", 473.447937 AS "sv_1", 0.233546 AS "sv_2", 3.411072 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", -1.000000 AS "coeff", 52.067585 AS "sv_0", 534.256165 AS "sv_1", 0.155164 AS "sv_2", 8.526538 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", 1.000000 AS "coeff", 34.347893 AS "sv_0", 205.928116 AS "sv_1", 0.720020 AS "sv_2", 9.414678 
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_small', 'SVR', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_small', 'SVR', 'duckdb')
728044 AS "sv_3"
     UNION ALL
     SELECT 25 AS "sv_idx", 1.000000 AS "coeff", 7.321981 AS "sv_0", 487.752838 AS "sv_1", 0.993317 AS "sv_2", 5.340956 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -1.276027 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( LEAST( GREATEST( CAST(-32.0 AS FLOAT), -0.000001 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_small', 'SVR', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
...          ...          ...       ...        ...
59     82.923828  1535.997559  0.287537   7.396835
60     17.167280  1104.656250  0.421381   6.591000
61     48.198017   353.104248  0.725143  10.405507
62     17.373148   483.680237  0.685229   2.728044
63      7.321981   487.752838  0.993317   5.340956

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0   1.267402
1       1   1.126589
2       2   1.242071
3       3   1.387376
4       4   1.409721
..    ...        ...
59     59   1.448152
60     60   1.455842
61     61   1.208559
62     62   1.294149
63     63   1.305143

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_small', 'SVR') Estimator 0.03553326992320269
    index  SQL_Estimator  Py_Estimator  SQL_Error
48     48       1.303922      1.354624  -0.050701
49     49       1.290264      1.351241  -0.060977
50     50       1.471041      1.432739   0.038302
51     51       1.382709      1.426953  -0.044244
52     52       1.425403      1.456524  -0.031121
53     53       1.371131      1.439235  -0.068105
54     54       1.465748      1.447410   0.018338
55     55       1.249431      1.301914  -0.052483
56     56       1.449050      1.410580   0.038469
57     57       1.168731      1.191917  -0.023186
58     58       1.391088      1.367455   0.023633
59     59       1.448152      1.411941   0.036211
60     60       1.455842      1.442147   0.013695
61     61       1.208559      1.246717  -0.038158
62     62       1.294149      1.360558  -0.066409
63     63       1.305143      1.375458  -0.070316
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_small', 'SVR', 'Failure')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/regression/SVR/mllite.SVR_freidman3_small_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('freidman3_small', 'SVR', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "freidman3_small" AS "ADS" 
 )
,"SV_data" AS
 ( SELECT 
   "Values"."sv_idx" AS "sv_idx",
   "Values"."coeff" AS "coeff",
   "Values"."sv_0" AS "sv_0",
   "Values"."sv_1" AS "sv_1",
   "Values"."sv_2" AS "sv_2",
   "Values"."sv_3" AS "sv_3"
  FROM
  (
     SELECT 0 AS "sv_idx", -1.000000 AS "coeff", 45.437614 AS "sv_0", 168.841202 AS "sv_1", 0.343817 AS "sv_2", 3.279963 AS "sv_3"
     UNION ALL
     SELECT 1 AS "sv_idx", -1.000000 AS "coeff", 69.792320 AS "sv_0", 473.447937 AS "sv_1", 0.233546 AS "sv_2", 3.411072 AS "sv_3"
     UNION ALL
     SELECT 2 AS "sv_idx", -1.000000 AS "coeff", 52.067585 AS "sv_0", 534.256165 AS "sv_1", 0.155164 AS "sv_2", 8.526538 AS "sv_3"
     UNION ALL
     SELECT 3 AS "sv_idx", 1.000000 AS "coeff", 34.347893 AS "sv_0", 205.928116 AS "sv_1", 0.720020 AS "sv_2", 9.414678 
SQL_OUT_PUT_FIRST_LINES_END ('freidman3_small', 'SVR', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('freidman3_small', 'SVR', 'sqlite')
_2", 2.728044 AS "sv_3"
     UNION ALL
     SELECT 25 AS "sv_idx", 1.000000 AS "coeff", 7.321981 AS "sv_0", 487.752838 AS "sv_1", 0.993317 AS "sv_2", 5.340956 AS "sv_3"
   ) AS "Values"
 )
,"Kernel_DotProd" AS
 ( SELECT
    dp."index" as "index",
    dp."dot_product" AS "Estimator"
   FROM
    (SELECT
      full_join_data_sv."index" AS "index",
      sum(CAST(full_join_data_sv.dot_prod AS FLOAT)) - -1.276027 AS dot_product
     FROM
       (SELECT
          model_input."index" AS "index",
          "SV_data"."coeff" *  EXP( MIN( MAX( CAST(-32.0 AS FLOAT), -0.000001 * (power(model_input."X_0" - "SV_data".sv_0, 2) + power(model_input."X_1" - "SV_data".sv_1, 2) + power(model_input."X_2" - "SV_data".sv_2, 2) + power(model_input."X_3" - "SV_data".sv_3, 2)) ), CAST(32.0 AS FLOAT) ) )  AS "dot_prod" 
        FROM
          model_input, "SV_data"
       ) AS full_join_data_sv
     GROUP BY full_join_data_sv."index"
    ) AS dp )
SELECT
  t."index" as "index",
  t."Estimator" as "Estimator"
FROM "Kernel_DotProd" AS t

SQL_OUT_PUT_LAST_LINES_END ('freidman3_small', 'SVR', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
             X_0          X_1       X_2        X_3
index                                             
0      17.761709   423.498322  0.135270  10.148129
1      45.437614   168.841202  0.343817   3.279963
2      69.792320   473.447937  0.233546   3.411072
3      67.667091   938.672607  0.652046   9.523154
4      55.118420  1002.086060  0.726658   4.570618
...          ...          ...       ...        ...
59     82.923828  1535.997559  0.287537   7.396835
60     17.167280  1104.656250  0.421381   6.591000
61     48.198017   353.104248  0.725143  10.405507
62     17.373148   483.680237  0.685229   2.728044
63      7.321981   487.752838  0.993317   5.340956

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   index      64 non-null     int64  
 1   Estimator  64 non-null     float64
dtypes: float64(1), int64(1)
memory usage: 1.1 KB
    index  Estimator
0       0   1.267402
1       1   1.126588
2       2   1.242071
3       3   1.387376
4       4   1.409721
..    ...        ...
59     59   1.448152
60     60   1.455842
61     61   1.208559
62     62   1.294149
63     63   1.305143

[64 rows x 2 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Estimator'], dtype='object')
MLLITE_REG_SQL_L1_ERROR ('freidman3_small', 'SVR') Estimator 0.035533304469475085
    index  SQL_Estimator  Py_Estimator  SQL_Error
48     48       1.303922      1.354624  -0.050702
49     49       1.290264      1.351241  -0.060977
50     50       1.471041      1.432739   0.038302
51     51       1.382709      1.426953  -0.044244
52     52       1.425403      1.456524  -0.031121
53     53       1.371131      1.439235  -0.068105
54     54       1.465748      1.447410   0.018338
55     55       1.249431      1.301914  -0.052483
56     56       1.449050      1.410580   0.038470
57     57       1.168731      1.191917  -0.023186
58     58       1.391088      1.367455   0.023633
59     59       1.448152      1.411941   0.036211
60     60       1.455842      1.442147   0.013695
61     61       1.208559      1.246717  -0.038157
62     62       1.294149      1.360558  -0.066409
63     63       1.305143      1.375458  -0.070316
MLLITE_REG_SQL_EXECUTION_STATUS ('freidman3_small', 'SVR', 'Failure')
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
