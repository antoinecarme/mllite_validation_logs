READING_CSV FourClass_10_tiny ['data/tiny/FourClass_10_tiny.csv']
         X_0       X_1       X_2  ...       X_8       X_9  target
0  -1.050659  0.920640 -0.455125  ... -0.010797 -1.586949       2
1   1.869880 -2.312190 -1.153852  ... -1.648043  2.109906       3
2  -0.124049  0.768644 -1.040184  ...  1.247335 -1.413962       1
3   0.928858 -1.177375  0.542731  ...  0.485529  1.106564       0
4  -1.598324  1.482463  1.664691  ...  1.816533  0.637000       3
5  -1.750210  1.576099  0.286503  ... -2.267550  1.213184       0
6   0.476411  0.555172  2.004011  ...  0.821823  0.485550       3
7  -0.049861  1.019062 -0.239901  ...  0.642133  0.460004       1
8  -0.649409  1.030112  0.590313  ... -0.635514  0.255228       0
9   0.914030 -0.385815  2.120265  ... -0.152956 -0.427271       2
10 -1.979466  2.354344 -0.380747  ...  2.837784  0.027100       3
11 -1.368644  0.716127  0.307297  ...  1.172710  1.728196       1
12  1.184632 -1.691100 -0.781676  ... -1.114233  0.622367       3
13 -1.728087  2.393295  0.055107  ...  0.248741  1.048002       1
14 -0.128543  1.029262 -1.338428  ... -0.885099  0.307255       2
15  0.420960  0.508218  0.792587  ...  0.458008  1.340859       2

[16 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS DecisionTreeClassifier {"max_depth" : 6, "max_leaf_nodes" : 32}
MLLITE_MODEL_OPTIONS_DEFAULT DecisionTreeClassifier { "max_leaf_nodes" : 64}
MLLITE_MODEL_OPTIONS_AFTER_SETTING DecisionTreeClassifier { "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
MLLITE_MODEL_JSON_AFTER_SETTING DecisionTreeClassifier None
('OPERATION_START', 'TRAINING')
[[-1.0506592   0.92064023 -0.4551253  -0.05012989 -0.19162714  0.5843286
   0.9430313   1.0213077  -0.01079692 -1.5869486 ]
 [ 1.86988    -2.3121896  -1.1538523   1.292078   -1.061729    2.0429258
   1.284271   -1.3353989  -1.6480426   2.1099062 ]
 [-0.1240493   0.7686444  -1.040184   -1.0419097  -0.5159428   1.4802165
  -1.7200696   0.34235197  1.2473352  -1.4139622 ]
 [ 0.9288579  -1.1773754   0.5427306   1.248167   -0.7323589   0.6922126
   0.362028   -0.05373104  0.48552942  1.1065644 ]
 [-1.5983242   1.4824632   1.6646907  -0.7911312  -0.3269162  -0.07355959
  -3.3526254  -1.3474813   1.8165325   0.6370003 ]] [2 3 1 0 3]
MLLITE_FIT_USING_MODEL mllite_decision_tree_class.DecisionTreeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 0 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 4 4
('OPERATION_END_ELAPSED', 0.013, 'TRAINING')
{ "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
{ "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
{
	"metadata" : { "model" : "Breiman_CART", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "ccp_alpha" : 0.000000, "criterion" : "", "max_depth" : 6, "max_features" : null, "max_leaf_nodes" : 32, "min_impurity_decrease" : 0.000000, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.000000, "random_state" : 1789, "splitter" : "best" },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"tree" : {
	"features" : 10,
	"outputs" : 4,
	"max_depth" : 3,
	"node_count" : 13,
	"nodes" : {
		"node_00" : {"left" : 1, "right" : 2, "feature" : 7, "threshold" : 0.080690, "impurity" : 0.742188, "n_samples" : 16, "w_samples" : 16.000000, "value" : [0.187500, 0.250000, 0.250000, 0.312500]},
		"node_01" : {"left" : 7, "right" : 8, "feature" : 5, "threshold" : -0.478152, "impurity" : 0.641975, "n_samples" : 9, "w_samples" : 9.000000, "value" : [0.333333, 0.000000, 0.222222, 0.444444]},
		"node_02" : {"left" : 3, "right" : 4, "feature" : 8, "threshold" : 0.118972, "impurity" : 0.571429, "n_samples" : 7, "w_samples" : 7.000000, "value" : [0.000000, 0.571429, 0.285714, 0.142857]},
		"node_03" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 0.000000, 1.000000, 0.000000]},
		"node_04" : {"left" : 5, "right" : 6, "feature" : 2, "threshold" : 1.155654, "impurity" : 0.320000, "n_samples" : 5, "w_samples" : 5.000000, "value" : [0.000000, 0.800000, 0.000000, 0.200000]},
		"node_05" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 4, "w_samples" : 4.000000, "value" : [0.000000, 1.000000, 0.000000, 0.000000]},
		"node_06" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 0.000000, 1.000000]},
		"node_07" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 0.000000, 1.000000, 0.000000]},
		"node_08" : {"left" : 9, "right" : 10, "feature" : 2, "threshold" : -0.047122, "impurity" : 0.489796, "n_samples" : 7, "w_samples" : 7.000000, "value" : [0.428571, 0.000000, 0.000000, 0.571429]},
		"node_09" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 0.000000, 0.000000, 1.000000]},
		"node_10" : {"left" : 11, "right" : 12, "feature" : 8, "threshold" : 1.151031, "impurity" : 0.375000, "n_samples" : 4, "w_samples" : 4.000000, "value" : [0.750000, 0.000000, 0.000000, 0.250000]},
		"node_11" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [1.000000, 0.000000, 0.000000, 0.000000]},
		"node_12" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 0.000000, 1.000000]}
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_FourClass_10_tiny_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('FourClass_10_tiny', 'DecisionTreeClassifier')
MLLITE_MODEL_SET_OPTIONS DecisionTreeClassifier {"max_depth" : 6, "max_leaf_nodes" : 32}
MLLITE_MODEL_OPTIONS_DEFAULT DecisionTreeClassifier { "max_leaf_nodes" : 64}
MLLITE_MODEL_OPTIONS_AFTER_SETTING DecisionTreeClassifier { "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
MLLITE_MODEL_JSON_AFTER_SETTING DecisionTreeClassifier None
MLLITE_RELOADING_MODEL mllite_decision_tree_class.DecisionTreeClassifier_ff4_il8
{
	"metadata" : { "model" : "Breiman_CART", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "ccp_alpha" : 0.000000, "criterion" : "", "max_depth" : 6, "max_features" : null, "max_leaf_nodes" : 32, "min_impurity_decrease" : 0.000000, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.000000, "random_state" : 1789, "splitter" : "best" },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"tree" : {
	"features" : 10,
	"outputs" : 4,
	"max_depth" : 3,
	"node_count" : 13,
	"nodes" : {
		"node_00" : {"left" : 1, "right" : 2, "feature" : 7, "threshold" : 0.080690, "impurity" : 0.742188, "n_samples" : 16, "w_samples" : 16.000000, "value" : [0.187500, 0.250000, 0.250000, 0.312500]},
		"node_01" : {"left" : 7, "right" : 8, "feature" : 5, "threshold" : -0.478152, "impurity" : 0.641975, "n_samples" : 9, "w_samples" : 9.000000, "value" : [0.333333, 0.000000, 0.222222, 0.444444]},
		"node_02" : {"left" : 3, "right" : 4, "feature" : 8, "threshold" : 0.118972, "impurity" : 0.571429, "n_samples" : 7, "w_samples" : 7.000000, "value" : [0.000000, 0.571429, 0.285714, 0.142857]},
		"node_03" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 0.000000, 1.000000, 0.000000]},
		"node_04" : {"left" : 5, "right" : 6, "feature" : 2, "threshold" : 1.155654, "impurity" : 0.320000, "n_samples" : 5, "w_samples" : 5.000000, "value" : [0.000000, 0.800000, 0.000000, 0.200000]},
		"node_05" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 4, "w_samples" : 4.000000, "value" : [0.000000, 1.000000, 0.000000, 0.000000]},
		"node_06" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 0.000000, 1.000000]},
		"node_07" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 0.000000, 1.000000, 0.000000]},
		"node_08" : {"left" : 9, "right" : 10, "feature" : 2, "threshold" : -0.047122, "impurity" : 0.489796, "n_samples" : 7, "w_samples" : 7.000000, "value" : [0.428571, 0.000000, 0.000000, 0.571429]},
		"node_09" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 0.000000, 0.000000, 1.000000]},
		"node_10" : {"left" : 11, "right" : 12, "feature" : 8, "threshold" : 1.151031, "impurity" : 0.375000, "n_samples" : 4, "w_samples" : 4.000000, "value" : [0.750000, 0.000000, 0.000000, 0.250000]},
		"node_11" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [1.000000, 0.000000, 0.000000, 0.000000]},
		"node_12" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 0.000000, 1.000000]}
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2, 3 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 16
	},
	"metadata" :  { "model" : "Breiman_CART", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "ccp_alpha" : 0.0, "criterion" : "", "max_depth" : 6, "max_features" : null, "max_leaf_nodes" : 32, "min_impurity_decrease" : 0.0, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.0, "random_state" : 1789, "splitter" : "best" },
	"tree" : 	{
		"features" : 10,
		"max_depth" : 3,
		"node_count" : 13,
		"nodes" : 	{
			"node_00" :  { "feature" : 7, "impurity" : 0.742188, "left" : 1, "n_samples" : 16, "right" : 2, "threshold" : 0.08069, "value" : [ 0.1875, 0.25, 0.25, 0.3125 ], "w_samples" : 16.0 },
			"node_01" :  { "feature" : 5, "impurity" : 0.641975, "left" : 7, "n_samples" : 9, "right" : 8, "threshold" : -0.478152, "value" : [ 0.333333, 0.0, 0.222222, 0.444444 ], "w_samples" : 9.0 },
			"node_02" :  { "feature" : 8, "impurity" : 0.571429, "left" : 3, "n_samples" : 7, "right" : 4, "threshold" : 0.118972, "value" : [ 0.0, 0.571429, 0.285714, 0.142857 ], "w_samples" : 7.0 },
			"node_03" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 2, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 1.0, 0.0 ], "w_samples" : 2.0 },
			"node_04" :  { "feature" : 2, "impurity" : 0.32, "left" : 5, "n_samples" : 5, "right" : 6, "threshold" : 1.155654, "value" : [ 0.0, 0.8, 0.0, 0.2 ], "w_samples" : 5.0 },
			"node_05" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 4, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0, 0.0, 0.0 ], "w_samples" : 4.0 },
			"node_06" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 0.0, 1.0 ], "w_samples" : 1.0 },
			"node_07" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 2, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 1.0, 0.0 ], "w_samples" : 2.0 },
			"node_08" :  { "feature" : 2, "impurity" : 0.489796, "left" : 9, "n_samples" : 7, "right" : 10, "threshold" : -0.047122, "value" : [ 0.428571, 0.0, 0.0, 0.571429 ], "w_samples" : 7.0 },
			"node_09" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 3, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 0.0, 1.0 ], "w_samples" : 3.0 },
			"node_10" :  { "feature" : 8, "impurity" : 0.375, "left" : 11, "n_samples" : 4, "right" : 12, "threshold" : 1.151031, "value" : [ 0.75, 0.0, 0.0, 0.25 ], "w_samples" : 4.0 },
			"node_11" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 3, "right" : null, "threshold" : null, "value" : [ 1.0, 0.0, 0.0, 0.0 ], "w_samples" : 3.0 },
			"node_12" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 0.0, 1.0 ], "w_samples" : 1.0 }
		},
		"outputs" : 4
	}
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('FourClass_10_tiny', 'DecisionTreeClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0. 0. 1. 0.]
 [0. 0. 0. 1.]
 [0. 1. 0. 0.]
 [1. 0. 0. 0.]
 [0. 0. 0. 1.]
 [1. 0. 0. 0.]
 [0. 0. 0. 1.]
 [0. 1. 0. 0.]
 [1. 0. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 0. 1.]
 [0. 1. 0. 0.]
 [0. 0. 0. 1.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 1. 0.]]
(16, 4)
(16, 4) float32
MODEL_PERFS {'class_name': 'mllite.DecisionTreeClassifier', 'model_name': 'DecisionTreeClassifier', 'options': '{"max_depth" : 6, "max_leaf_nodes" : 32}', 'dataset': 'FourClass_10_tiny', 'size': 16, 'accuracy': 1.0, 'auc': 1.0}
WRITING_PERF_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_FourClass_10_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.DecisionTreeClassifier', 'model_name': 'DecisionTreeClassifier', 'options': '{"max_depth" : 6, "max_leaf_nodes" : 32}', 'dataset': 'FourClass_10_tiny', 'training_time_in_sec': 0.013, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_1" : [ 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_2" : [ -0.021484, -0.029297, 0.000000, 0.050781 ],
      "X_3" : [ 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_4" : [ 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_5" : [ 0.033203, 0.000000, -0.035156, 0.001953 ],
      "X_6" : [ 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_7" : [ -0.029297, 0.115234, 0.029297, -0.115234 ],
      "X_8" : [ -0.033203, 0.001953, -0.005859, 0.037109 ],
      "X_9" : [ 0.000000, 0.000000, 0.000000, 0.000000 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 5, 8, 7, 2 ],
      "class_1" : [ 7, 2, 8 ],
      "class_2" : [ 5, 7, 8 ],
      "class_3" : [ 7, 2, 8, 5 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_FourClass_10_tiny_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_FourClass_10_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_tiny', 'DecisionTreeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "FourClass_10_tiny" AS "ADS" 
 ),
"DT_node_lookup" AS 
 (SELECT
    t."index" AS "index",
    COALESCE( t1."Leaf_3", t1."Leaf_5", t1."Leaf_6", t1."Leaf_7", t1."Leaf_9", t1."Leaf_11", t1."Leaf_12" ) AS node_id
  FROM
    "model_input" AS t
    LEFT OUTER JOIN
   (SELECT
      t."index" AS "index",
      CASE WHEN((t."X_7" > 0.080690) AND (t."X_8" <= 0.118972)) THEN 3 ELSE NULL END AS "Leaf_3",
      CASE WHEN((t."X_7" > 0.080690) AND (t."X_8" > 0.118972) AND (t."X_2" <= 1.155654)) THEN 5 ELSE NULL END AS "Leaf_5",
      CASE WHEN((t."X_7" > 0.080690) AND (t."X_8" > 0.118972) AND (t.
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_tiny', 'DecisionTreeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_tiny', 'DecisionTreeClassifier', 'duckdb')
e_id = t2.nid
 )
SELECT
   "DT_Output"."index" AS "index",
   CAST(NULL AS FLOAT)  AS "Score_0",
   "DT_Output"."P_0" AS "Proba_0",
   CASE WHEN ("DT_Output"."P_0" IS NULL OR "DT_Output"."P_0" > 0.0) THEN LN( "DT_Output"."P_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
   CAST(NULL AS FLOAT)  AS "Score_1",
   "DT_Output"."P_1" AS "Proba_1",
   CASE WHEN ("DT_Output"."P_1" IS NULL OR "DT_Output"."P_1" > 0.0) THEN LN( "DT_Output"."P_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
   CAST(NULL AS FLOAT)  AS "Score_2",
   "DT_Output"."P_2" AS "Proba_2",
   CASE WHEN ("DT_Output"."P_2" IS NULL OR "DT_Output"."P_2" > 0.0) THEN LN( "DT_Output"."P_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
   CAST(NULL AS FLOAT)  AS "Score_3",
   "DT_Output"."P_3" AS "Proba_3",
   CASE WHEN ("DT_Output"."P_3" IS NULL OR "DT_Output"."P_3" > 0.0) THEN LN( "DT_Output"."P_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
   "DT_Output"."D" AS "Decision",
   "DT_Output"."DP" AS "DecisionProba"
FROM "DT_Output"
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_tiny', 'DecisionTreeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.050659  0.920640 -0.455125  ...  1.021308 -0.010797 -1.586949
1      1.869880 -2.312190 -1.153852  ... -1.335399 -1.648043  2.109906
2     -0.124049  0.768644 -1.040184  ...  0.342352  1.247335 -1.413962
3      0.928858 -1.177375  0.542731  ... -0.053731  0.485529  1.106564
4     -1.598324  1.482463  1.664691  ... -1.347481  1.816532  0.637000
5     -1.750210  1.576099  0.286503  ... -1.160993 -2.267550  1.213184
6      0.476411  0.555172  2.004011  ...  0.803645  0.821823  0.485550
7     -0.049861  1.019062 -0.239901  ...  0.600685  0.642133  0.460004
8     -0.649409  1.030112  0.590313  ... -0.064296 -0.635514  0.255228
9      0.914030 -0.385815  2.120265  ... -1.398672 -0.152956 -0.427271
10    -1.979466  2.354344 -0.380747  ... -1.103278  2.837784  0.027100
11    -1.368644  0.716127  0.307297  ...  0.215110  1.172710  1.728197
12     1.184632 -1.691100 -0.781676  ... -0.742383 -1.114233  0.622367
13    -1.728087  2.393295  0.055107  ...  2.200070  0.248741  1.048002
14    -0.128543  1.029262 -1.338428  ...  0.340163 -0.885099  0.307255
15     0.420960  0.508218  0.792587  ... -0.576551  0.458008  1.340859

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 15 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        0 non-null      object 
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        0 non-null      object 
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Score_2        0 non-null      object 
 8   Proba_2        16 non-null     float64
 9   LogProba_2     16 non-null     float64
 10  Score_3        0 non-null      object 
 11  Proba_3        16 non-null     float64
 12  LogProba_3     16 non-null     float64
 13  Decision       16 non-null     int64  
 14  DecisionProba  16 non-null     float64
dtypes: float64(9), int64(2), object(4)
memory usage: 2.0+ KB
    index Score_0  Proba_0  ...     LogProba_3 Decision  DecisionProba
0       0    None      0.0  ... -1.797693e+308        2            1.0
1       1    None      0.0  ...   0.000000e+00        3            1.0
2       2    None      0.0  ... -1.797693e+308        1            1.0
3       3    None      1.0  ... -1.797693e+308        0            1.0
4       4    None      0.0  ...   0.000000e+00        3            1.0
5       5    None      1.0  ... -1.797693e+308        0            1.0
6       6    None      0.0  ...   0.000000e+00        3            1.0
7       7    None      0.0  ... -1.797693e+308        1            1.0
8       8    None      1.0  ... -1.797693e+308        0            1.0
9       9    None      0.0  ... -1.797693e+308        2            1.0
10     10    None      0.0  ...   0.000000e+00        3            1.0
11     11    None      0.0  ... -1.797693e+308        1            1.0
12     12    None      0.0  ...   0.000000e+00        3            1.0
13     13    None      0.0  ... -1.797693e+308        1            1.0
14     14    None      0.0  ... -1.797693e+308        2            1.0
15     15    None      0.0  ... -1.797693e+308        2            1.0

[16 rows x 15 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Decision', 'DecisionProba'],
      dtype='object')
    index Score_0  SQL_Proba_0  ...  Py_Proba_2 Py_Proba_3  Py_Decision
0       0    None          0.0  ...         1.0        0.0            2
1       1    None          0.0  ...         0.0        1.0            3
2       2    None          0.0  ...         0.0        0.0            1
3       3    None          1.0  ...         0.0        0.0            0
4       4    None          0.0  ...         0.0        1.0            3
5       5    None          1.0  ...         0.0        0.0            0
6       6    None          0.0  ...         0.0        1.0            3
7       7    None          0.0  ...         0.0        0.0            1
8       8    None          1.0  ...         0.0        0.0            0
9       9    None          0.0  ...         1.0        0.0            2
10     10    None          0.0  ...         0.0        1.0            3
11     11    None          0.0  ...         0.0        0.0            1
12     12    None          0.0  ...         0.0        1.0            3
13     13    None          0.0  ...         0.0        0.0            1
14     14    None          0.0  ...         1.0        0.0            2
15     15    None          0.0  ...         1.0        0.0            2

[16 rows x 20 columns]
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 0.0
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
0          0.0          0.0          0.0
1          0.0          0.0          0.0
2          0.0          0.0          0.0
3          1.0          1.0          0.0
4          0.0          0.0          0.0
5          1.0          1.0          0.0
6          0.0          0.0          0.0
7          0.0          0.0          0.0
8          1.0          1.0          0.0
9          0.0          0.0          0.0
10         0.0          0.0          0.0
11         0.0          0.0          0.0
12         0.0          0.0          0.0
13         0.0          0.0          0.0
14         0.0          0.0          0.0
15         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 0.0
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
0          0.0          0.0          0.0
1          0.0          0.0          0.0
2          1.0          1.0          0.0
3          0.0          0.0          0.0
4          0.0          0.0          0.0
5          0.0          0.0          0.0
6          0.0          0.0          0.0
7          1.0          1.0          0.0
8          0.0          0.0          0.0
9          0.0          0.0          0.0
10         0.0          0.0          0.0
11         1.0          1.0          0.0
12         0.0          0.0          0.0
13         1.0          1.0          0.0
14         0.0          0.0          0.0
15         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 0.0
    Py_Proba_2  SQL_Proba_2  SQL_Error_2
0          1.0          1.0          0.0
1          0.0          0.0          0.0
2          0.0          0.0          0.0
3          0.0          0.0          0.0
4          0.0          0.0          0.0
5          0.0          0.0          0.0
6          0.0          0.0          0.0
7          0.0          0.0          0.0
8          0.0          0.0          0.0
9          1.0          1.0          0.0
10         0.0          0.0          0.0
11         0.0          0.0          0.0
12         0.0          0.0          0.0
13         0.0          0.0          0.0
14         1.0          1.0          0.0
15         1.0          1.0          0.0
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_3', 'SQL_Proba_3') 0.0
    Py_Proba_3  SQL_Proba_3  SQL_Error_3
0          0.0          0.0          0.0
1          1.0          1.0          0.0
2          0.0          0.0          0.0
3          0.0          0.0          0.0
4          1.0          1.0          0.0
5          0.0          0.0          0.0
6          1.0          1.0          0.0
7          0.0          0.0          0.0
8          0.0          0.0          0.0
9          0.0          0.0          0.0
10         1.0          1.0          0.0
11         0.0          0.0          0.0
12         1.0          1.0          0.0
13         0.0          0.0          0.0
14         0.0          0.0          0.0
15         0.0          0.0          0.0
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_tiny', 'DecisionTreeClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
0             2             2
1             3             3
2             1             1
3             0             0
4             3             3
5             0             0
6             3             3
7             1             1
8             0             0
9             2             2
10            3             3
11            1             1
12            3             3
13            1             1
14            2             2
15            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_FourClass_10_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_tiny', 'DecisionTreeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "FourClass_10_tiny" AS "ADS" 
 ),
"DT_node_lookup" AS 
 (SELECT
    t."index" AS "index",
    COALESCE( t1."Leaf_3", t1."Leaf_5", t1."Leaf_6", t1."Leaf_7", t1."Leaf_9", t1."Leaf_11", t1."Leaf_12" ) AS node_id
  FROM
    "model_input" AS t
    LEFT OUTER JOIN
   (SELECT
      t."index" AS "index",
      CASE WHEN((t."X_7" > 0.080690) AND (t."X_8" <= 0.118972)) THEN 3 ELSE NULL END AS "Leaf_3",
      CASE WHEN((t."X_7" > 0.080690) AND (t."X_8" > 0.118972) AND (t."X_2" <= 1.155654)) THEN 5 ELSE NULL END AS "Leaf_5",
      CASE WHEN((t."X_7" > 0.080690) AND (t."X_8" > 0.118972) AND (t.
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_tiny', 'DecisionTreeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_tiny', 'DecisionTreeClassifier', 'sqlite')
e_id = t2.nid
 )
SELECT
   "DT_Output"."index" AS "index",
   CAST(NULL AS FLOAT)  AS "Score_0",
   "DT_Output"."P_0" AS "Proba_0",
   CASE WHEN ("DT_Output"."P_0" IS NULL OR "DT_Output"."P_0" > 0.0) THEN LN( "DT_Output"."P_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
   CAST(NULL AS FLOAT)  AS "Score_1",
   "DT_Output"."P_1" AS "Proba_1",
   CASE WHEN ("DT_Output"."P_1" IS NULL OR "DT_Output"."P_1" > 0.0) THEN LN( "DT_Output"."P_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
   CAST(NULL AS FLOAT)  AS "Score_2",
   "DT_Output"."P_2" AS "Proba_2",
   CASE WHEN ("DT_Output"."P_2" IS NULL OR "DT_Output"."P_2" > 0.0) THEN LN( "DT_Output"."P_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
   CAST(NULL AS FLOAT)  AS "Score_3",
   "DT_Output"."P_3" AS "Proba_3",
   CASE WHEN ("DT_Output"."P_3" IS NULL OR "DT_Output"."P_3" > 0.0) THEN LN( "DT_Output"."P_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
   "DT_Output"."D" AS "Decision",
   "DT_Output"."DP" AS "DecisionProba"
FROM "DT_Output"
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_tiny', 'DecisionTreeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.050659  0.920640 -0.455125  ...  1.021308 -0.010797 -1.586949
1      1.869880 -2.312190 -1.153852  ... -1.335399 -1.648043  2.109906
2     -0.124049  0.768644 -1.040184  ...  0.342352  1.247335 -1.413962
3      0.928858 -1.177375  0.542731  ... -0.053731  0.485529  1.106564
4     -1.598324  1.482463  1.664691  ... -1.347481  1.816532  0.637000
5     -1.750210  1.576099  0.286503  ... -1.160993 -2.267550  1.213184
6      0.476411  0.555172  2.004011  ...  0.803645  0.821823  0.485550
7     -0.049861  1.019062 -0.239901  ...  0.600685  0.642133  0.460004
8     -0.649409  1.030112  0.590313  ... -0.064296 -0.635514  0.255228
9      0.914030 -0.385815  2.120265  ... -1.398672 -0.152956 -0.427271
10    -1.979466  2.354344 -0.380747  ... -1.103278  2.837784  0.027100
11    -1.368644  0.716127  0.307297  ...  0.215110  1.172710  1.728197
12     1.184632 -1.691100 -0.781676  ... -0.742383 -1.114233  0.622367
13    -1.728087  2.393295  0.055107  ...  2.200070  0.248741  1.048002
14    -0.128543  1.029262 -1.338428  ...  0.340163 -0.885099  0.307255
15     0.420960  0.508218  0.792587  ... -0.576551  0.458008  1.340859

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 15 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        0 non-null      object 
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        0 non-null      object 
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Score_2        0 non-null      object 
 8   Proba_2        16 non-null     float64
 9   LogProba_2     16 non-null     float64
 10  Score_3        0 non-null      object 
 11  Proba_3        16 non-null     float64
 12  LogProba_3     16 non-null     float64
 13  Decision       16 non-null     int64  
 14  DecisionProba  16 non-null     float64
dtypes: float64(9), int64(2), object(4)
memory usage: 2.0+ KB
    index Score_0  Proba_0  ...     LogProba_3 Decision  DecisionProba
0       0    None      0.0  ... -1.797693e+308        2            1.0
1       1    None      0.0  ...   0.000000e+00        3            1.0
2       2    None      0.0  ... -1.797693e+308        1            1.0
3       3    None      1.0  ... -1.797693e+308        0            1.0
4       4    None      0.0  ...   0.000000e+00        3            1.0
5       5    None      1.0  ... -1.797693e+308        0            1.0
6       6    None      0.0  ...   0.000000e+00        3            1.0
7       7    None      0.0  ... -1.797693e+308        1            1.0
8       8    None      1.0  ... -1.797693e+308        0            1.0
9       9    None      0.0  ... -1.797693e+308        2            1.0
10     10    None      0.0  ...   0.000000e+00        3            1.0
11     11    None      0.0  ... -1.797693e+308        1            1.0
12     12    None      0.0  ...   0.000000e+00        3            1.0
13     13    None      0.0  ... -1.797693e+308        1            1.0
14     14    None      0.0  ... -1.797693e+308        2            1.0
15     15    None      0.0  ... -1.797693e+308        2            1.0

[16 rows x 15 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Decision', 'DecisionProba'],
      dtype='object')
    index Score_0  SQL_Proba_0  ...  Py_Proba_2 Py_Proba_3  Py_Decision
0       0    None          0.0  ...         1.0        0.0            2
1       1    None          0.0  ...         0.0        1.0            3
2       2    None          0.0  ...         0.0        0.0            1
3       3    None          1.0  ...         0.0        0.0            0
4       4    None          0.0  ...         0.0        1.0            3
5       5    None          1.0  ...         0.0        0.0            0
6       6    None          0.0  ...         0.0        1.0            3
7       7    None          0.0  ...         0.0        0.0            1
8       8    None          1.0  ...         0.0        0.0            0
9       9    None          0.0  ...         1.0        0.0            2
10     10    None          0.0  ...         0.0        1.0            3
11     11    None          0.0  ...         0.0        0.0            1
12     12    None          0.0  ...         0.0        1.0            3
13     13    None          0.0  ...         0.0        0.0            1
14     14    None          0.0  ...         1.0        0.0            2
15     15    None          0.0  ...         1.0        0.0            2

[16 rows x 20 columns]
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 0.0
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
0          0.0          0.0          0.0
1          0.0          0.0          0.0
2          0.0          0.0          0.0
3          1.0          1.0          0.0
4          0.0          0.0          0.0
5          1.0          1.0          0.0
6          0.0          0.0          0.0
7          0.0          0.0          0.0
8          1.0          1.0          0.0
9          0.0          0.0          0.0
10         0.0          0.0          0.0
11         0.0          0.0          0.0
12         0.0          0.0          0.0
13         0.0          0.0          0.0
14         0.0          0.0          0.0
15         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 0.0
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
0          0.0          0.0          0.0
1          0.0          0.0          0.0
2          1.0          1.0          0.0
3          0.0          0.0          0.0
4          0.0          0.0          0.0
5          0.0          0.0          0.0
6          0.0          0.0          0.0
7          1.0          1.0          0.0
8          0.0          0.0          0.0
9          0.0          0.0          0.0
10         0.0          0.0          0.0
11         1.0          1.0          0.0
12         0.0          0.0          0.0
13         1.0          1.0          0.0
14         0.0          0.0          0.0
15         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_2', 'SQL_Proba_2') 0.0
    Py_Proba_2  SQL_Proba_2  SQL_Error_2
0          1.0          1.0          0.0
1          0.0          0.0          0.0
2          0.0          0.0          0.0
3          0.0          0.0          0.0
4          0.0          0.0          0.0
5          0.0          0.0          0.0
6          0.0          0.0          0.0
7          0.0          0.0          0.0
8          0.0          0.0          0.0
9          1.0          1.0          0.0
10         0.0          0.0          0.0
11         0.0          0.0          0.0
12         0.0          0.0          0.0
13         0.0          0.0          0.0
14         1.0          1.0          0.0
15         1.0          1.0          0.0
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_3', 'SQL_Proba_3') 0.0
    Py_Proba_3  SQL_Proba_3  SQL_Error_3
0          0.0          0.0          0.0
1          1.0          1.0          0.0
2          0.0          0.0          0.0
3          0.0          0.0          0.0
4          1.0          1.0          0.0
5          0.0          0.0          0.0
6          1.0          1.0          0.0
7          0.0          0.0          0.0
8          0.0          0.0          0.0
9          0.0          0.0          0.0
10         1.0          1.0          0.0
11         0.0          0.0          0.0
12         1.0          1.0          0.0
13         0.0          0.0          0.0
14         0.0          0.0          0.0
15         0.0          0.0          0.0
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_tiny', 'DecisionTreeClassifier', 'sqlite', 'Success')
    Py_Decision  SQL_Decision
0             2             2
1             3             3
2             1             1
3             0             0
4             3             3
5             0             0
6             3             3
7             1             1
8             0             0
9             2             2
10            3             3
11            1             1
12            3             3
13            1             1
14            2             2
15            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
