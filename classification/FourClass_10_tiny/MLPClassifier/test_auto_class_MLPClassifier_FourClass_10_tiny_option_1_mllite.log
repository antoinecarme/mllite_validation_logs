         X_0       X_1       X_2  ...       X_8       X_9  target
0  -1.050659  0.920640 -0.455125  ... -0.010797 -1.586949       2
1   1.869880 -2.312190 -1.153852  ... -1.648043  2.109906       3
2  -0.124049  0.768644 -1.040184  ...  1.247335 -1.413962       1
3   0.928858 -1.177375  0.542731  ...  0.485529  1.106564       0
4  -1.598324  1.482463  1.664691  ...  1.816533  0.637000       3
5  -1.750210  1.576099  0.286503  ... -2.267550  1.213184       0
6   0.476411  0.555172  2.004011  ...  0.821823  0.485550       3
7  -0.049861  1.019062 -0.239901  ...  0.642133  0.460004       1
8  -0.649409  1.030112  0.590313  ... -0.635514  0.255228       0
9   0.914030 -0.385815  2.120265  ... -0.152956 -0.427271       2
10 -1.979466  2.354344 -0.380747  ...  2.837784  0.027100       3
11 -1.368644  0.716127  0.307297  ...  1.172710  1.728196       1
12  1.184632 -1.691100 -0.781676  ... -1.114233  0.622367       3
13 -1.728087  2.393295  0.055107  ...  0.248741  1.048002       1
14 -0.128543  1.029262 -1.338428  ... -0.885099  0.307255       2
15  0.420960  0.508218  0.792587  ...  0.458008  1.340859       2

[16 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[-1.0506592   0.92064023 -0.4551253  -0.05012989 -0.19162714  0.5843286
   0.9430313   1.0213077  -0.01079692 -1.5869486 ]
 [ 1.86988    -2.3121896  -1.1538523   1.292078   -1.061729    2.0429258
   1.284271   -1.3353989  -1.6480426   2.1099062 ]
 [-0.1240493   0.7686444  -1.040184   -1.0419097  -0.5159428   1.4802165
  -1.7200696   0.34235197  1.2473352  -1.4139622 ]
 [ 0.9288579  -1.1773754   0.5427306   1.248167   -0.7323589   0.6922126
   0.362028   -0.05373104  0.48552942  1.1065644 ]
 [-1.5983242   1.4824632   1.6646907  -0.7911312  -0.3269162  -0.07355959
  -3.3526254  -1.3474813   1.8165325   0.6370003 ]] [2 3 1 0 3]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.009, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.086814, 0.367734, -0.236466, -0.079293 ],
			"coeffs_1" : [ 0.151402, -0.484605, 0.159106, 0.051847 ],
			"coeffs_2" : [ 0.527794, 0.108212, 0.513961, -0.072004 ],
			"coeffs_3" : [ 0.672687, -0.549845, -0.243917, 0.212689 ],
			"coeffs_4" : [ 0.311649, -0.283687, -0.301387, -0.478619 ],
			"coeffs_5" : [ 0.253373, -0.631922, -0.076235, 0.000116 ],
			"coeffs_6" : [ -0.137333, -0.564834, -0.305080, 0.505003 ],
			"coeffs_7" : [ -0.016440, 0.036404, -0.556609, 0.068297 ],
			"coeffs_8" : [ -0.171643, 0.276316, -0.162244, 0.307903 ],
			"coeffs_9" : [ -0.409369, 0.542898, -0.507411, 0.322623 ],
			"intercepts" : [ -0.499854, 0.330286, 0.123405, 0.564615 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.411498, -0.573615, 0.267072, 0.225578, 0.505778, 0.577503, 0.518021, -0.430080 ],
			"coeffs_1" : [ 0.393148, 0.546021, -0.396178, 0.285631, 0.180158, 0.022620, 0.061349, 0.434935 ],
			"coeffs_2" : [ -0.635391, 0.058894, 0.320927, 0.376658, -0.630044, 0.459761, -0.421779, -0.622063 ],
			"coeffs_3" : [ 0.670915, 0.645756, -0.064353, -0.605906, 0.008568, 0.646684, -0.530513, 0.308509 ],
			"intercepts" : [ 0.295076, 0.387519, 0.653779, -0.387526, 0.332241, 0.467207, 0.493342, -0.032539 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.611951, 0.297706, -0.023799, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.270057, 0.560093, -0.003128, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.186364, -0.230828, -0.285305, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.245533, 0.346322, 0.401170, 0.526231, 0.444787, 0.341110 ],
			"coeffs_4" : [ -0.309537, 0.031799, 0.151509, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.346096, 0.424410, 0.078039, -0.195384, -0.154200, -0.294011 ],
			"coeffs_6" : [ 0.314341, 0.351626, -0.482137, 0.182649, -0.386450, -0.001729 ],
			"coeffs_7" : [ 0.088815, -0.294119, 0.266559, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.562280, -0.463783, -0.276615, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.226770, -0.207724, -0.475964, -0.529525 ],
			"coeffs_1" : [ -0.675079, 0.119639, -0.478053, -0.583265 ],
			"coeffs_2" : [ 0.119085, 0.240380, -0.091755, 0.235523 ],
			"coeffs_3" : [ 0.091557, -0.481524, -0.127638, 0.610762 ],
			"coeffs_4" : [ 0.740563, -0.123417, -0.627652, -0.345769 ],
			"coeffs_5" : [ 0.292528, -0.610184, 0.237228, -0.379884 ],
			"intercepts" : [ 0.718539, 0.713525, -0.323009, 0.433123 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_tiny_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.086814, 0.367734, -0.236466, -0.079293 ],
			"coeffs_1" : [ 0.151402, -0.484605, 0.159106, 0.051847 ],
			"coeffs_2" : [ 0.527794, 0.108212, 0.513961, -0.072004 ],
			"coeffs_3" : [ 0.672687, -0.549845, -0.243917, 0.212689 ],
			"coeffs_4" : [ 0.311649, -0.283687, -0.301387, -0.478619 ],
			"coeffs_5" : [ 0.253373, -0.631922, -0.076235, 0.000116 ],
			"coeffs_6" : [ -0.137333, -0.564834, -0.305080, 0.505003 ],
			"coeffs_7" : [ -0.016440, 0.036404, -0.556609, 0.068297 ],
			"coeffs_8" : [ -0.171643, 0.276316, -0.162244, 0.307903 ],
			"coeffs_9" : [ -0.409369, 0.542898, -0.507411, 0.322623 ],
			"intercepts" : [ -0.499854, 0.330286, 0.123405, 0.564615 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.411498, -0.573615, 0.267072, 0.225578, 0.505778, 0.577503, 0.518021, -0.430080 ],
			"coeffs_1" : [ 0.393148, 0.546021, -0.396178, 0.285631, 0.180158, 0.022620, 0.061349, 0.434935 ],
			"coeffs_2" : [ -0.635391, 0.058894, 0.320927, 0.376658, -0.630044, 0.459761, -0.421779, -0.622063 ],
			"coeffs_3" : [ 0.670915, 0.645756, -0.064353, -0.605906, 0.008568, 0.646684, -0.530513, 0.308509 ],
			"intercepts" : [ 0.295076, 0.387519, 0.653779, -0.387526, 0.332241, 0.467207, 0.493342, -0.032539 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.611951, 0.297706, -0.023799, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.270057, 0.560093, -0.003128, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.186364, -0.230828, -0.285305, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.245533, 0.346322, 0.401170, 0.526231, 0.444787, 0.341110 ],
			"coeffs_4" : [ -0.309537, 0.031799, 0.151509, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.346096, 0.424410, 0.078039, -0.195384, -0.154200, -0.294011 ],
			"coeffs_6" : [ 0.314341, 0.351626, -0.482137, 0.182649, -0.386450, -0.001729 ],
			"coeffs_7" : [ 0.088815, -0.294119, 0.266559, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.562280, -0.463783, -0.276615, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.226770, -0.207724, -0.475964, -0.529525 ],
			"coeffs_1" : [ -0.675079, 0.119639, -0.478053, -0.583265 ],
			"coeffs_2" : [ 0.119085, 0.240380, -0.091755, 0.235523 ],
			"coeffs_3" : [ 0.091557, -0.481524, -0.127638, 0.610762 ],
			"coeffs_4" : [ 0.740563, -0.123417, -0.627652, -0.345769 ],
			"coeffs_5" : [ 0.292528, -0.610184, 0.237228, -0.379884 ],
			"intercepts" : [ 0.718539, 0.713525, -0.323009, 0.433123 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2, 3 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 16
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.086814, 0.367734, -0.236466, -0.079293 ],
			"coeffs_1" : [ 0.151402, -0.484605, 0.159106, 0.051847 ],
			"coeffs_2" : [ 0.527794, 0.108212, 0.513961, -0.072004 ],
			"coeffs_3" : [ 0.672687, -0.549845, -0.243917, 0.212689 ],
			"coeffs_4" : [ 0.311649, -0.283687, -0.301387, -0.478619 ],
			"coeffs_5" : [ 0.253373, -0.631922, -0.076235, 0.000116 ],
			"coeffs_6" : [ -0.137333, -0.564834, -0.30508, 0.505003 ],
			"coeffs_7" : [ -0.01644, 0.036404, -0.556609, 0.068297 ],
			"coeffs_8" : [ -0.171643, 0.276316, -0.162244, 0.307903 ],
			"coeffs_9" : [ -0.409369, 0.542898, -0.507411, 0.322623 ],
			"intercepts" : [ -0.499854, 0.330286, 0.123405, 0.564615 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.411498, -0.573615, 0.267072, 0.225578, 0.505778, 0.577503, 0.518021, -0.43008 ],
			"coeffs_1" : [ 0.393148, 0.546021, -0.396178, 0.285631, 0.180158, 0.02262, 0.061349, 0.434935 ],
			"coeffs_2" : [ -0.635391, 0.058894, 0.320927, 0.376658, -0.630044, 0.459761, -0.421779, -0.622063 ],
			"coeffs_3" : [ 0.670915, 0.645756, -0.064353, -0.605906, 0.008568, 0.646684, -0.530513, 0.308509 ],
			"intercepts" : [ 0.295076, 0.387519, 0.653779, -0.387526, 0.332241, 0.467207, 0.493342, -0.032539 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.611951, 0.297706, -0.023799, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.270057, 0.560093, -0.003128, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.186364, -0.230828, -0.285305, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.245533, 0.346322, 0.40117, 0.526231, 0.444787, 0.34111 ],
			"coeffs_4" : [ -0.309537, 0.031799, 0.151509, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.346096, 0.42441, 0.078039, -0.195384, -0.1542, -0.294011 ],
			"coeffs_6" : [ 0.314341, 0.351626, -0.482137, 0.182649, -0.38645, -0.001729 ],
			"coeffs_7" : [ 0.088815, -0.294119, 0.266559, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.56228, -0.463783, -0.276615, -0.494865, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.22677, -0.207724, -0.475964, -0.529525 ],
			"coeffs_1" : [ -0.675079, 0.119639, -0.478053, -0.583265 ],
			"coeffs_2" : [ 0.119085, 0.24038, -0.091755, 0.235523 ],
			"coeffs_3" : [ 0.091557, -0.481524, -0.127638, 0.610762 ],
			"coeffs_4" : [ 0.740563, -0.123417, -0.627652, -0.345769 ],
			"coeffs_5" : [ 0.292528, -0.610184, 0.237228, -0.379884 ],
			"intercepts" : [ 0.718539, 0.713525, -0.323009, 0.433123 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 4 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.274  0.4336 0.0986 0.1938]
 [0.1834 0.5733 0.086  0.1574]
 [0.3451 0.3611 0.0974 0.1964]
 [0.1719 0.5964 0.0815 0.1502]
 [0.1541 0.659  0.0649 0.122 ]
 [0.2768 0.4761 0.0858 0.1613]
 [0.2199 0.5167 0.0914 0.172 ]
 [0.2525 0.4438 0.1021 0.2015]
 [0.3053 0.4124 0.0952 0.1871]
 [0.158  0.6526 0.0653 0.124 ]
 [0.1494 0.6638 0.0645 0.1223]
 [0.1912 0.558  0.0881 0.1627]
 [0.2508 0.4544 0.0997 0.1951]
 [0.137  0.6681 0.0692 0.1256]
 [0.3223 0.366  0.1026 0.2091]
 [0.119  0.7074 0.0576 0.116 ]]
(16, 4)
(16, 4) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_tiny', 'size': 16, 'accuracy': 0.25, 'auc': 0.4931526806526807}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_tiny', 'training_time_in_sec': 0.009, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_tiny', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.499854 + -0.086814 * t."OUT_0"  + 0.151402 * t."OUT_1"  + 0.527794 * t."OUT_2"  + 0.672687 * t."OUT_3"  + 0.311649 * t."OUT_4"  + 0.253373 * t."OUT_5"  + -0.137333 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_tiny', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_tiny', 'MLPClassifier', 'duckdb')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_tiny', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.050659  0.920640 -0.455125  ...  1.021308 -0.010797 -1.586949
1      1.869880 -2.312190 -1.153852  ... -1.335399 -1.648043  2.109906
2     -0.124049  0.768644 -1.040184  ...  0.342352  1.247335 -1.413962
3      0.928858 -1.177375  0.542731  ... -0.053731  0.485529  1.106564
4     -1.598324  1.482463  1.664691  ... -1.347481  1.816532  0.637000
5     -1.750210  1.576099  0.286503  ... -1.160993 -2.267550  1.213184
6      0.476411  0.555172  2.004011  ...  0.803645  0.821823  0.485550
7     -0.049861  1.019062 -0.239901  ...  0.600685  0.642133  0.460004
8     -0.649409  1.030112  0.590313  ... -0.064296 -0.635514  0.255228
9      0.914030 -0.385815  2.120265  ... -1.398672 -0.152956 -0.427271
10    -1.979466  2.354344 -0.380747  ... -1.103278  2.837784  0.027100
11    -1.368644  0.716127  0.307297  ...  0.215110  1.172710  1.728197
12     1.184632 -1.691100 -0.781676  ... -0.742383 -1.114233  0.622367
13    -1.728087  2.393295  0.055107  ...  2.200070  0.248741  1.048002
14    -0.128543  1.029262 -1.338428  ...  0.340163 -0.885099  0.307255
15     0.420960  0.508218  0.792587  ... -0.576551  0.458008  1.340859

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 15 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        16 non-null     float64
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        16 non-null     float64
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Score_2        16 non-null     float64
 8   Proba_2        16 non-null     float64
 9   LogProba_2     16 non-null     float64
 10  Score_3        16 non-null     float64
 11  Proba_3        16 non-null     float64
 12  LogProba_3     16 non-null     float64
 13  Decision       16 non-null     int64  
 14  DecisionProba  16 non-null     float64
dtypes: float64(13), int64(2)
memory usage: 2.0 KB
    index   Score_0   Proba_0  ...  LogProba_3  Decision  DecisionProba
0       0  0.245216  0.274014  ...   -1.641079         1       0.433606
1       1 -0.253745  0.183414  ...   -1.849188         1       0.573254
2       2  0.479747  0.345084  ...   -1.627360         1       0.361106
3       3 -0.329120  0.171906  ...   -1.895804         1       0.596395
4       4 -0.559719  0.154098  ...   -2.103547         1       0.658982
5       5  0.033879  0.276794  ...   -1.824779         1       0.476107
6       6 -0.052684  0.219919  ...   -1.760435         1       0.516737
7       7  0.231189  0.252528  ...   -1.601820         1       0.443826
8       8  0.293332  0.305256  ...   -1.676095         1       0.412429
9       9 -0.530472  0.158049  ...   -2.087210         1       0.652612
10     10 -0.567750  0.149416  ...   -2.100926         1       0.663752
11     11 -0.195580  0.191181  ...   -1.815625         1       0.557983
12     12  0.185366  0.250805  ...   -1.634251         1       0.454358
13     13 -0.598886  0.137044  ...   -2.074311         1       0.668078
14     14  0.493838  0.322291  ...   -1.565161         1       0.366017
15     15 -0.682993  0.118976  ...   -2.153773         1       0.707370

[16 rows x 15 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_2  Py_Proba_3  Py_Decision
0       0  0.245216     0.274014  ...    0.098609    0.193771            1
1       1 -0.253745     0.183414  ...    0.085967    0.157365            1
2       2  0.479747     0.345084  ...    0.097362    0.196447            1
3       3 -0.329120     0.171906  ...    0.081502    0.150197            1
4       4 -0.559719     0.154098  ...    0.064897    0.122023            1
5       5  0.033879     0.276794  ...    0.085846    0.161253            1
6       6 -0.052684     0.219919  ...    0.091374    0.171970            1
7       7  0.231189     0.252528  ...    0.102116    0.201529            1
8       8  0.293332     0.305256  ...    0.095211    0.187103            1
9       9 -0.530472     0.158049  ...    0.065306    0.124033            1
10     10 -0.567750     0.149416  ...    0.064488    0.122343            1
11     11 -0.195580     0.191181  ...    0.088099    0.162736            1
12     12  0.185366     0.250805  ...    0.099739    0.195098            1
13     13 -0.598886     0.137044  ...    0.069235    0.125643            1
14     14  0.493838     0.322291  ...    0.102637    0.209054            1
15     15 -0.682993     0.118976  ...    0.057608    0.116045            1

[16 rows x 20 columns]
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 1.1981963331849504e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
0     0.274015     0.274014  1.854125e-07
1     0.183415     0.183414  2.674611e-07
2     0.345085     0.345084  9.471304e-08
3     0.171906     0.171906  2.020348e-07
4     0.154098     0.154098  4.000405e-08
5     0.276794     0.276794  1.624914e-07
6     0.219919     0.219919  1.229249e-08
7     0.252528     0.252528  1.038638e-07
8     0.305256     0.305256  8.724119e-08
9     0.158049     0.158049  6.200693e-08
10    0.149416     0.149416  3.877720e-08
11    0.191181     0.191181  1.204253e-07
12    0.250805     0.250805  2.373785e-07
13    0.137044     0.137044  1.362552e-07
14    0.322291     0.322291  1.404870e-07
15    0.118976     0.118976  2.626959e-08
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 1.3319881368017983e-07
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
0     0.433606     0.433606  2.442793e-08
1     0.573253     0.573254 -3.262624e-07
2     0.361106     0.361106  1.820152e-07
3     0.596395     0.596395 -5.726983e-08
4     0.658982     0.658982  2.100012e-07
5     0.476107     0.476107  9.377234e-08
6     0.516737     0.516737  1.595106e-07
7     0.443826     0.443826  1.549244e-07
8     0.412429     0.412429  1.137243e-07
9     0.652612     0.652612  1.634951e-07
10    0.663752     0.663752  2.185559e-07
11    0.557983     0.557983  1.185154e-07
12    0.454357     0.454358 -6.934442e-08
13    0.668078     0.668078  8.489832e-08
14    0.366017     0.366017  4.933218e-09
15    0.707370     0.707370  1.495304e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 5.6946692270163496e-08
    Py_Proba_2  SQL_Proba_2   SQL_Error_2
0     0.098609     0.098609 -7.457590e-08
1     0.085967     0.085967 -3.273570e-08
2     0.097362     0.097362 -4.574159e-08
3     0.081502     0.081502 -2.125735e-08
4     0.064897     0.064897 -9.146368e-08
5     0.085846     0.085846 -7.829938e-08
6     0.091374     0.091374 -5.374408e-08
7     0.102116     0.102116 -3.706898e-08
8     0.095211     0.095212 -4.802394e-08
9     0.065306     0.065306 -7.673767e-08
10    0.064488     0.064489 -7.937952e-08
11    0.088099     0.088099 -4.816411e-08
12    0.099739     0.099739 -3.593809e-08
13    0.069235     0.069235 -4.045854e-08
14    0.102637     0.102638 -7.855558e-08
15    0.057608     0.057608 -6.900295e-08
MLLITE_CLASS_SQL_ERROR ('FourClass_10_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_3', 'SQL_Proba_3') 1.0550232663712744e-07
    Py_Proba_3  SQL_Proba_3   SQL_Error_3
0     0.193771     0.193771 -1.725175e-07
1     0.157365     0.157365  2.130034e-09
2     0.196447     0.196448 -9.687623e-08
3     0.150197     0.150197 -4.900179e-08
4     0.122023     0.122023 -9.893694e-08
5     0.161253     0.161253 -1.481621e-07
6     0.171970     0.171970 -9.570731e-08
7     0.201529     0.201529 -1.248617e-07
8     0.187103     0.187103 -1.156886e-07
9     0.124033     0.124033 -9.661031e-08
10    0.122343     0.122343 -9.599723e-08
11    0.162736     0.162736 -1.088202e-07
12    0.195098     0.195099 -1.022937e-07
13    0.125643     0.125643 -7.638688e-08
14    0.209054     0.209054 -1.562716e-07
15    0.116045     0.116046 -1.477752e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_tiny', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
0             1             1
1             1             1
2             1             1
3             1             1
4             1             1
5             1             1
6             1             1
7             1             1
8             1             1
9             1             1
10            1             1
11            1             1
12            1             1
13            1             1
14            1             1
15            1             1
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_tiny', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.499854 + -0.086814 * t."OUT_0"  + 0.151402 * t."OUT_1"  + 0.527794 * t."OUT_2"  + 0.672687 * t."OUT_3"  + 0.311649 * t."OUT_4"  + 0.253373 * t."OUT_5"  + -0.137333 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_tiny', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_tiny', 'MLPClassifier', 'sqlite')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_tiny', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.050659  0.920640 -0.455125  ...  1.021308 -0.010797 -1.586949
1      1.869880 -2.312190 -1.153852  ... -1.335399 -1.648043  2.109906
2     -0.124049  0.768644 -1.040184  ...  0.342352  1.247335 -1.413962
3      0.928858 -1.177375  0.542731  ... -0.053731  0.485529  1.106564
4     -1.598324  1.482463  1.664691  ... -1.347481  1.816532  0.637000
5     -1.750210  1.576099  0.286503  ... -1.160993 -2.267550  1.213184
6      0.476411  0.555172  2.004011  ...  0.803645  0.821823  0.485550
7     -0.049861  1.019062 -0.239901  ...  0.600685  0.642133  0.460004
8     -0.649409  1.030112  0.590313  ... -0.064296 -0.635514  0.255228
9      0.914030 -0.385815  2.120265  ... -1.398672 -0.152956 -0.427271
10    -1.979466  2.354344 -0.380747  ... -1.103278  2.837784  0.027100
11    -1.368644  0.716127  0.307297  ...  0.215110  1.172710  1.728197
12     1.184632 -1.691100 -0.781676  ... -0.742383 -1.114233  0.622367
13    -1.728087  2.393295  0.055107  ...  2.200070  0.248741  1.048002
14    -0.128543  1.029262 -1.338428  ...  0.340163 -0.885099  0.307255
15     0.420960  0.508218  0.792587  ... -0.576551  0.458008  1.340859

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('FourClass_10_tiny', 'MLPClassifier', 'sqlite', '')
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_tiny_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_tiny', 'MLPClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.499854 + -0.086814 * t."OUT_0"  + 0.151402 * t."OUT_1"  + 0.527794 * t."OUT_2"  + 0.672687 * t."OUT_3"  + 0.311649 * t."OUT_4"  + 0.253373 * t."OUT_5"  + -0.137333 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_tiny', 'MLPClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_tiny', 'MLPClassifier', 'pgsql')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_tiny', 'MLPClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
