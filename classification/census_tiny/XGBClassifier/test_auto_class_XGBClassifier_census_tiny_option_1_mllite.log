    age  workclass     fnlwgt  ...  hoursperweek  native-country  target
0   2.0        0.0   188950.0  ...           3.0             0.0    >50K
1   1.0        0.0  1033222.0  ...           2.0             0.0   <=50K
2   1.0        0.0   129707.0  ...           1.0             0.0    >50K
3   1.0        0.0    78530.0  ...           4.0             0.0    >50K
4   1.0        0.0   159537.0  ...           2.0             0.0   <=50K
5   3.0        0.0    96586.0  ...           2.0             0.0    >50K
6   2.0        0.0   165346.0  ...           4.0             0.0   <=50K
7   1.0        0.0   142712.0  ...           2.0             0.0   <=50K
8   4.0        0.0   175964.0  ...           2.0             0.0   <=50K
9   1.0        0.0   229656.0  ...           2.0             0.0    >50K
10  2.0        0.0    25806.0  ...           2.0             0.0   <=50K
11  0.0        0.0   340543.0  ...           2.0             0.0   <=50K
12  4.0        0.0    31781.0  ...           1.0             0.0   <=50K
13  1.0        0.0    56121.0  ...           3.0             0.0   <=50K
14  3.0        0.0   126840.0  ...           2.0             0.0   <=50K
15  2.0        0.0    67187.0  ...           2.0             0.0   <=50K

[16 rows x 15 columns]
MLLITE_MODEL_SET_OPTIONS XGBClassifier {"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }
MLLITE_MODEL_OPTIONS_DEFAULT XGBClassifier { "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING XGBClassifier { "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  }
MLLITE_MODEL_JSON_AFTER_SETTING XGBClassifier None
('OPERATION_START', 'TRAINING')
[[2.000000e+00 0.000000e+00 1.889500e+05 0.000000e+00 1.400000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 3.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.033222e+06 0.000000e+00 1.000000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 2.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.297070e+05 0.000000e+00 1.300000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  4.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 7.853000e+04 0.000000e+00 9.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 4.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.595370e+05 0.000000e+00 1.200000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 2.000000e+00 0.000000e+00]] ['>50K' '<=50K' '>50K' '>50K' '<=50K']
MLLITE_FIT_USING_MODEL mllite_xgb_class.XGBClassifier_ff4_OO8
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_CLASSIFIER_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_CLASSIFIER_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 1 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 2 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 3 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 4 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 5 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 6 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 7 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_CLASSIFIER_FIT' 3 3
('OPERATION_END_ELAPSED', 0.008, 'TRAINING')
{ "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  }
{ "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  }
{
	"metadata" : { "model" : "Friedman_XGB", "version" : "2024-W13", "signature" : "ff4_OO8"},
	"options" : { "base_score" : [ ], "early_stopping_rounds" : 0, "eval_metric" : "", "gamma" : 0.000000, "grow_policy" : 0, "learning_rate" : 0.300000, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 32, "min_child_weight" : 5.000000, "n_estimators" : 5, "objective" : "reg:squarederror", "reg_alpha" : 0.000000, "reg_lambda" : 1.000000, "tree_method" : "auto" },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"booster" : {
		"BaseScore" : [ 0.687500, 0.312500 ],
		"Trees" : 5,
		"Tree_0" : {
			"Node_0" : { "leaf_value" : [ 0.687500, 0.312500 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_1" : {
			"Node_0" : { "leaf_value" : [ 1.375000, 0.625000 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_2" : {
			"Node_0" : { "leaf_value" : [ 2.750000, 1.250000 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_3" : {
			"Node_0" : { "leaf_value" : [ 5.500000, 2.500000 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_4" : {
			"Node_0" : { "leaf_value" : [ 11.000000, 5.000000 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/XGBClassifier/mllite.XGBClassifier_census_tiny_option_1.json'

MLLITE_MODEL_SET_OPTIONS XGBClassifier {"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }
MLLITE_MODEL_OPTIONS_DEFAULT XGBClassifier { "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING XGBClassifier { "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  }
MLLITE_MODEL_JSON_AFTER_SETTING XGBClassifier None
MLLITE_RELOADING_MODEL mllite_xgb_class.XGBClassifier_ff4_OO8
{
	"metadata" : { "model" : "Friedman_XGB", "version" : "2024-W13", "signature" : "ff4_OO8"},
	"options" : { "base_score" : [ ], "early_stopping_rounds" : 0, "eval_metric" : "", "gamma" : 0.000000, "grow_policy" : 0, "learning_rate" : 0.300000, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 32, "min_child_weight" : 5.000000, "n_estimators" : 5, "objective" : "reg:squarederror", "reg_alpha" : 0.000000, "reg_lambda" : 1.000000, "tree_method" : "auto" },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"booster" : {
		"BaseScore" : [ 0.687500, 0.312500 ],
		"Trees" : 5,
		"Tree_0" : {
			"Node_0" : { "leaf_value" : [ 0.687500, 0.312500 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_1" : {
			"Node_0" : { "leaf_value" : [ 1.375000, 0.625000 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_2" : {
			"Node_0" : { "leaf_value" : [ 2.750000, 1.250000 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_3" : {
			"Node_0" : { "leaf_value" : [ 5.500000, 2.500000 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_4" : {
			"Node_0" : { "leaf_value" : [ 11.000000, 5.000000 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		}
	}
}
BEAUTIFIED_JSON_START
{
	"booster" : 	{
		"BaseScore" : [ 0.6875, 0.3125 ],
		"Tree_0" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 0.6875, 0.3125 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_1" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 1.375, 0.625 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_2" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 2.75, 1.25 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_3" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 5.5, 2.5 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_4" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 11.0, 5.0 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Trees" : 5
	},
	"classes" : [ "<=50K", ">50K" ],
	"dataset" : 	{
		"dataset_features" : 14,
		"dataset_rows" : 16
	},
	"metadata" :  { "model" : "Friedman_XGB", "signature" : "ff4_OO8", "version" : "2024-W13" },
	"options" :  { "base_score" : [ ], "early_stopping_rounds" : 0, "eval_metric" : "", "gamma" : 0.0, "grow_policy" : 0, "learning_rate" : 0.3, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 32, "min_child_weight" : 5.0, "n_estimators" : 5, "objective" : "reg:squarederror", "reg_alpha" : 0.0, "reg_lambda" : 1.0, "tree_method" : "auto" }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]]
(16, 2)
(16,) float32
MODEL_PERFS {'class_name': 'mllite.XGBClassifier', 'model_name': 'XGBClassifier', 'options': '{"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }', 'dataset': 'census_tiny', 'size': 16, 'accuracy': 0.6875, 'auc': 0.5}
WRITING_PERF_CODE 'logs/auto_tests/classification/XGBClassifier/mllite.XGBClassifier_census_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.XGBClassifier', 'model_name': 'XGBClassifier', 'options': '{"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }', 'dataset': 'census_tiny', 'training_time_in_sec': 0.008, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/XGBClassifier/mllite.XGBClassifier_census_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_tiny', 'XGBClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"DT_node_lookup_0" AS 
 (SELECT
    t."index" AS "index",
    0 AS node_id
  FROM model_input t
 )
,
"DT_node_data_0" AS 
 (SELECT
    "Values".nid AS nid,
    "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1"
  FROM (
    SELECT 0 AS nid,  0.687500 AS "P_0", 0.312500 AS "P_1"
  ) AS "Values")
,
"DT_output_0" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t
SQL_OUT_PUT_FIRST_LINES_END ('census_tiny', 'XGBClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('census_tiny', 'XGBClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_tiny', 'XGBClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
 10  X_10    16 non-null     float32
 11  X_11    16 non-null     float32
 12  X_12    16 non-null     float32
 13  X_13    16 non-null     float32
dtypes: float32(14)
memory usage: 1.0 KB
       X_0  X_1        X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                       ...                                  
0      2.0  0.0   188950.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
1      1.0  0.0  1033222.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
2      1.0  0.0   129707.0  0.0  13.0  0.0  ...  0.0  0.0   4.0   0.0   1.0   0.0
3      1.0  0.0    78530.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
4      1.0  0.0   159537.0  0.0  12.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
5      3.0  0.0    96586.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
6      2.0  0.0   165346.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
7      1.0  0.0   142712.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
8      4.0  0.0   175964.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
9      1.0  0.0   229656.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   1.0   2.0   0.0
10     2.0  0.0    25806.0  0.0  16.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
11     0.0  0.0   340543.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
12     4.0  0.0    31781.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   1.0   1.0   0.0
13     1.0  0.0    56121.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
14     3.0  0.0   126840.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
15     2.0  0.0    67187.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0

[16 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        16 non-null     float64
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        16 non-null     float64
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Decision       16 non-null     int64  
 8   DecisionProba  16 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 1.3 KB
    index  Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0     22.0  0.999994  ...  -12.000006         0       0.999994
1       1     22.0  0.999994  ...  -12.000006         0       0.999994
2       2     22.0  0.999994  ...  -12.000006         0       0.999994
3       3     22.0  0.999994  ...  -12.000006         0       0.999994
4       4     22.0  0.999994  ...  -12.000006         0       0.999994
5       5     22.0  0.999994  ...  -12.000006         0       0.999994
6       6     22.0  0.999994  ...  -12.000006         0       0.999994
7       7     22.0  0.999994  ...  -12.000006         0       0.999994
8       8     22.0  0.999994  ...  -12.000006         0       0.999994
9       9     22.0  0.999994  ...  -12.000006         0       0.999994
10     10     22.0  0.999994  ...  -12.000006         0       0.999994
11     11     22.0  0.999994  ...  -12.000006         0       0.999994
12     12     22.0  0.999994  ...  -12.000006         0       0.999994
13     13     22.0  0.999994  ...  -12.000006         0       0.999994
14     14     22.0  0.999994  ...  -12.000006         0       0.999994
15     15     22.0  0.999994  ...  -12.000006         0       0.999994

[16 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index  Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
0       0     22.0     0.999994  ...    0.999994    0.000006        <=50K
1       1     22.0     0.999994  ...    0.999994    0.000006        <=50K
2       2     22.0     0.999994  ...    0.999994    0.000006        <=50K
3       3     22.0     0.999994  ...    0.999994    0.000006        <=50K
4       4     22.0     0.999994  ...    0.999994    0.000006        <=50K
5       5     22.0     0.999994  ...    0.999994    0.000006        <=50K
6       6     22.0     0.999994  ...    0.999994    0.000006        <=50K
7       7     22.0     0.999994  ...    0.999994    0.000006        <=50K
8       8     22.0     0.999994  ...    0.999994    0.000006        <=50K
9       9     22.0     0.999994  ...    0.999994    0.000006        <=50K
10     10     22.0     0.999994  ...    0.999994    0.000006        <=50K
11     11     22.0     0.999994  ...    0.999994    0.000006        <=50K
12     12     22.0     0.999994  ...    0.999994    0.000006        <=50K
13     13     22.0     0.999994  ...    0.999994    0.000006        <=50K
14     14     22.0     0.999994  ...    0.999994    0.000006        <=50K
15     15     22.0     0.999994  ...    0.999994    0.000006        <=50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'XGBClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 4.221287037697863e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
0     0.999994     0.999994  4.221287e-07
1     0.999994     0.999994  4.221287e-07
2     0.999994     0.999994  4.221287e-07
3     0.999994     0.999994  4.221287e-07
4     0.999994     0.999994  4.221287e-07
5     0.999994     0.999994  4.221287e-07
6     0.999994     0.999994  4.221287e-07
7     0.999994     0.999994  4.221287e-07
8     0.999994     0.999994  4.221287e-07
9     0.999994     0.999994  4.221287e-07
10    0.999994     0.999994  4.221287e-07
11    0.999994     0.999994  4.221287e-07
12    0.999994     0.999994  4.221287e-07
13    0.999994     0.999994  4.221287e-07
14    0.999994     0.999994  4.221287e-07
15    0.999994     0.999994  4.221287e-07
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'XGBClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 2.802861616101591e-12
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
0     0.000006     0.000006  2.802862e-12
1     0.000006     0.000006  2.802862e-12
2     0.000006     0.000006  2.802862e-12
3     0.000006     0.000006  2.802862e-12
4     0.000006     0.000006  2.802862e-12
5     0.000006     0.000006  2.802862e-12
6     0.000006     0.000006  2.802862e-12
7     0.000006     0.000006  2.802862e-12
8     0.000006     0.000006  2.802862e-12
9     0.000006     0.000006  2.802862e-12
10    0.000006     0.000006  2.802862e-12
11    0.000006     0.000006  2.802862e-12
12    0.000006     0.000006  2.802862e-12
13    0.000006     0.000006  2.802862e-12
14    0.000006     0.000006  2.802862e-12
15    0.000006     0.000006  2.802862e-12
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_tiny', 'XGBClassifier', 'duckdb', 'Success')
   Py_Decision  SQL_Decision
0        <=50K             0
1        <=50K             0
2        <=50K             0
3        <=50K             0
4        <=50K             0
5        <=50K             0
6        <=50K             0
7        <=50K             0
8        <=50K             0
9        <=50K             0
10       <=50K             0
11       <=50K             0
12       <=50K             0
13       <=50K             0
14       <=50K             0
15       <=50K             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/XGBClassifier/mllite.XGBClassifier_census_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_tiny', 'XGBClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"DT_node_lookup_0" AS 
 (SELECT
    t."index" AS "index",
    0 AS node_id
  FROM model_input t
 )
,
"DT_node_data_0" AS 
 (SELECT
    "Values".nid AS nid,
    "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1"
  FROM (
    SELECT 0 AS nid,  0.687500 AS "P_0", 0.312500 AS "P_1"
  ) AS "Values")
,
"DT_output_0" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t
SQL_OUT_PUT_FIRST_LINES_END ('census_tiny', 'XGBClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('census_tiny', 'XGBClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_tiny', 'XGBClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
 10  X_10    16 non-null     float32
 11  X_11    16 non-null     float32
 12  X_12    16 non-null     float32
 13  X_13    16 non-null     float32
dtypes: float32(14)
memory usage: 1.0 KB
       X_0  X_1        X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                       ...                                  
0      2.0  0.0   188950.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
1      1.0  0.0  1033222.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
2      1.0  0.0   129707.0  0.0  13.0  0.0  ...  0.0  0.0   4.0   0.0   1.0   0.0
3      1.0  0.0    78530.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
4      1.0  0.0   159537.0  0.0  12.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
5      3.0  0.0    96586.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
6      2.0  0.0   165346.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
7      1.0  0.0   142712.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
8      4.0  0.0   175964.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
9      1.0  0.0   229656.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   1.0   2.0   0.0
10     2.0  0.0    25806.0  0.0  16.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
11     0.0  0.0   340543.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
12     4.0  0.0    31781.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   1.0   1.0   0.0
13     1.0  0.0    56121.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
14     3.0  0.0   126840.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
15     2.0  0.0    67187.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0

[16 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        16 non-null     float64
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        16 non-null     float64
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Decision       16 non-null     int64  
 8   DecisionProba  16 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 1.3 KB
    index  Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0     22.0  0.999994  ...  -12.000006         0       0.999994
1       1     22.0  0.999994  ...  -12.000006         0       0.999994
2       2     22.0  0.999994  ...  -12.000006         0       0.999994
3       3     22.0  0.999994  ...  -12.000006         0       0.999994
4       4     22.0  0.999994  ...  -12.000006         0       0.999994
5       5     22.0  0.999994  ...  -12.000006         0       0.999994
6       6     22.0  0.999994  ...  -12.000006         0       0.999994
7       7     22.0  0.999994  ...  -12.000006         0       0.999994
8       8     22.0  0.999994  ...  -12.000006         0       0.999994
9       9     22.0  0.999994  ...  -12.000006         0       0.999994
10     10     22.0  0.999994  ...  -12.000006         0       0.999994
11     11     22.0  0.999994  ...  -12.000006         0       0.999994
12     12     22.0  0.999994  ...  -12.000006         0       0.999994
13     13     22.0  0.999994  ...  -12.000006         0       0.999994
14     14     22.0  0.999994  ...  -12.000006         0       0.999994
15     15     22.0  0.999994  ...  -12.000006         0       0.999994

[16 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index  Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
0       0     22.0     0.999994  ...    0.999994    0.000006        <=50K
1       1     22.0     0.999994  ...    0.999994    0.000006        <=50K
2       2     22.0     0.999994  ...    0.999994    0.000006        <=50K
3       3     22.0     0.999994  ...    0.999994    0.000006        <=50K
4       4     22.0     0.999994  ...    0.999994    0.000006        <=50K
5       5     22.0     0.999994  ...    0.999994    0.000006        <=50K
6       6     22.0     0.999994  ...    0.999994    0.000006        <=50K
7       7     22.0     0.999994  ...    0.999994    0.000006        <=50K
8       8     22.0     0.999994  ...    0.999994    0.000006        <=50K
9       9     22.0     0.999994  ...    0.999994    0.000006        <=50K
10     10     22.0     0.999994  ...    0.999994    0.000006        <=50K
11     11     22.0     0.999994  ...    0.999994    0.000006        <=50K
12     12     22.0     0.999994  ...    0.999994    0.000006        <=50K
13     13     22.0     0.999994  ...    0.999994    0.000006        <=50K
14     14     22.0     0.999994  ...    0.999994    0.000006        <=50K
15     15     22.0     0.999994  ...    0.999994    0.000006        <=50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'XGBClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 4.221287037697863e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
0     0.999994     0.999994  4.221287e-07
1     0.999994     0.999994  4.221287e-07
2     0.999994     0.999994  4.221287e-07
3     0.999994     0.999994  4.221287e-07
4     0.999994     0.999994  4.221287e-07
5     0.999994     0.999994  4.221287e-07
6     0.999994     0.999994  4.221287e-07
7     0.999994     0.999994  4.221287e-07
8     0.999994     0.999994  4.221287e-07
9     0.999994     0.999994  4.221287e-07
10    0.999994     0.999994  4.221287e-07
11    0.999994     0.999994  4.221287e-07
12    0.999994     0.999994  4.221287e-07
13    0.999994     0.999994  4.221287e-07
14    0.999994     0.999994  4.221287e-07
15    0.999994     0.999994  4.221287e-07
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'XGBClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 2.802861616101591e-12
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
0     0.000006     0.000006  2.802862e-12
1     0.000006     0.000006  2.802862e-12
2     0.000006     0.000006  2.802862e-12
3     0.000006     0.000006  2.802862e-12
4     0.000006     0.000006  2.802862e-12
5     0.000006     0.000006  2.802862e-12
6     0.000006     0.000006  2.802862e-12
7     0.000006     0.000006  2.802862e-12
8     0.000006     0.000006  2.802862e-12
9     0.000006     0.000006  2.802862e-12
10    0.000006     0.000006  2.802862e-12
11    0.000006     0.000006  2.802862e-12
12    0.000006     0.000006  2.802862e-12
13    0.000006     0.000006  2.802862e-12
14    0.000006     0.000006  2.802862e-12
15    0.000006     0.000006  2.802862e-12
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_tiny', 'XGBClassifier', 'sqlite', 'Success')
   Py_Decision  SQL_Decision
0        <=50K             0
1        <=50K             0
2        <=50K             0
3        <=50K             0
4        <=50K             0
5        <=50K             0
6        <=50K             0
7        <=50K             0
8        <=50K             0
9        <=50K             0
10       <=50K             0
11       <=50K             0
12       <=50K             0
13       <=50K             0
14       <=50K             0
15       <=50K             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/XGBClassifier/mllite.XGBClassifier_census_tiny_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_tiny', 'XGBClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"DT_node_lookup_0" AS 
 (SELECT
    t."index" AS "index",
    0 AS node_id
  FROM model_input t
 )
,
"DT_node_data_0" AS 
 (SELECT
    "Values".nid AS nid,
    "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1"
  FROM (
    SELECT 0 AS nid,  0.687500 AS "P_0", 0.312500 AS "P_1"
  ) AS "Values")
,
"DT_output_0" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t
SQL_OUT_PUT_FIRST_LINES_END ('census_tiny', 'XGBClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('census_tiny', 'XGBClassifier', 'pgsql')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_tiny', 'XGBClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
