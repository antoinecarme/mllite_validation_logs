READING_CSV census_tiny ['data/tiny/census_tiny.csv']
    age  workclass     fnlwgt  ...  hoursperweek  native-country  target
0   2.0        0.0   188950.0  ...           3.0             0.0    >50K
1   1.0        0.0  1033222.0  ...           2.0             0.0   <=50K
2   1.0        0.0   129707.0  ...           1.0             0.0    >50K
3   1.0        0.0    78530.0  ...           4.0             0.0    >50K
4   1.0        0.0   159537.0  ...           2.0             0.0   <=50K
5   3.0        0.0    96586.0  ...           2.0             0.0    >50K
6   2.0        0.0   165346.0  ...           4.0             0.0   <=50K
7   1.0        0.0   142712.0  ...           2.0             0.0   <=50K
8   4.0        0.0   175964.0  ...           2.0             0.0   <=50K
9   1.0        0.0   229656.0  ...           2.0             0.0    >50K
10  2.0        0.0    25806.0  ...           2.0             0.0   <=50K
11  0.0        0.0   340543.0  ...           2.0             0.0   <=50K
12  4.0        0.0    31781.0  ...           1.0             0.0   <=50K
13  1.0        0.0    56121.0  ...           3.0             0.0   <=50K
14  3.0        0.0   126840.0  ...           2.0             0.0   <=50K
15  2.0        0.0    67187.0  ...           2.0             0.0   <=50K

[16 rows x 15 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[2.000000e+00 0.000000e+00 1.889500e+05 0.000000e+00 1.400000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 3.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.033222e+06 0.000000e+00 1.000000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 2.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.297070e+05 0.000000e+00 1.300000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  4.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 7.853000e+04 0.000000e+00 9.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 4.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.595370e+05 0.000000e+00 1.200000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 2.000000e+00 0.000000e+00]] ['>50K' '<=50K' '>50K' '>50K' '<=50K']
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_OO8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.008, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_OO8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"layers" : {
		"sizes" : [ 14, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 14 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 14,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.082182, 0.266804, -0.264979, -0.042498 ],
			"coeffs_01" : [ 0.106196, -0.374373, 0.167347, 0.018387 ],
			"coeffs_02" : [ 0.459855, 0.089796, 0.450709, -0.090487 ],
			"coeffs_03" : [ 0.542901, -0.479545, -0.212030, 0.185224 ],
			"coeffs_04" : [ 0.269344, -0.309297, -0.323152, -0.417190 ],
			"coeffs_05" : [ 0.220222, -0.538884, -0.092054, 0.026923 ],
			"coeffs_06" : [ -0.114696, -0.493507, -0.265394, 0.441385 ],
			"coeffs_07" : [ -0.042435, 0.004762, -0.485976, 0.032922 ],
			"coeffs_08" : [ -0.176366, 0.183489, -0.116169, 0.214592 ],
			"coeffs_09" : [ -0.353596, 0.474674, -0.391961, 0.279965 ],
			"coeffs_10" : [ -0.447130, 0.284950, 0.106656, 0.493445 ],
			"coeffs_11" : [ -0.394855, -0.477667, 0.163809, 0.178704 ],
			"coeffs_12" : [ 0.355914, 0.462549, 0.410049, -0.344451 ],
			"coeffs_13" : [ 0.314713, 0.439632, -0.318134, 0.227911 ],
			"intercepts" : [ 0.138573, 0.010593, 0.043944, 0.329774 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.575274, 0.121599, 0.258165, 0.376074, -0.572415, 0.458596, -0.362349, -0.622683 ],
			"coeffs_1" : [ 0.666390, 0.706601, -0.124008, -0.543945, -0.025484, 0.645251, -0.478856, 0.248640 ],
			"coeffs_2" : [ 0.288050, 0.450069, 0.591555, -0.326594, 0.267329, 0.466096, 0.518697, -0.063368 ],
			"coeffs_3" : [ -0.596587, 0.322835, 0.007842, -0.133978, -0.488291, -0.637754, -0.228659, 0.606367 ],
			"intercepts" : [ 0.029435, -0.111636, -0.195422, -0.633386, 0.235601, -0.246820, -0.258318, -0.143680 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.239555, -0.431684, -0.185583, 0.345899, 0.400288, 0.526231 ],
			"coeffs_1" : [ 0.444787, 0.340339, -0.310093, 0.061712, 0.156136, 0.412954 ],
			"coeffs_2" : [ 0.291422, -0.032585, 0.344950, 0.423650, 0.107910, -0.195384 ],
			"coeffs_3" : [ -0.154200, -0.294011, 0.313933, 0.333667, -0.422008, 0.182649 ],
			"coeffs_4" : [ -0.386450, -0.001729, 0.122957, -0.233412, 0.268866, -0.587535 ],
			"coeffs_5" : [ -0.557435, 0.457156, 0.561770, -0.402418, -0.216041, -0.463919 ],
			"coeffs_6" : [ -0.469560, -0.503103, -0.218569, -0.149899, -0.397683, -0.441119 ],
			"coeffs_7" : [ -0.548428, 0.126355, -0.399099, -0.487476, 0.129981, 0.197564 ],
			"intercepts" : [ -0.102936, 0.144275, 0.045427, -0.433148, -0.107874, 0.542555 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.891145 ],
			"coeffs_1" : [ -0.116135 ],
			"coeffs_2" : [ -0.756328 ],
			"coeffs_3" : [ -0.419017 ],
			"coeffs_4" : [ 0.355301 ],
			"coeffs_5" : [ -0.735261 ],
			"intercepts" : [ 0.351511 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_tiny_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('census_tiny', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_OO8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_OO8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"layers" : {
		"sizes" : [ 14, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 14 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 14,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.082182, 0.266804, -0.264979, -0.042498 ],
			"coeffs_01" : [ 0.106196, -0.374373, 0.167347, 0.018387 ],
			"coeffs_02" : [ 0.459855, 0.089796, 0.450709, -0.090487 ],
			"coeffs_03" : [ 0.542901, -0.479545, -0.212030, 0.185224 ],
			"coeffs_04" : [ 0.269344, -0.309297, -0.323152, -0.417190 ],
			"coeffs_05" : [ 0.220222, -0.538884, -0.092054, 0.026923 ],
			"coeffs_06" : [ -0.114696, -0.493507, -0.265394, 0.441385 ],
			"coeffs_07" : [ -0.042435, 0.004762, -0.485976, 0.032922 ],
			"coeffs_08" : [ -0.176366, 0.183489, -0.116169, 0.214592 ],
			"coeffs_09" : [ -0.353596, 0.474674, -0.391961, 0.279965 ],
			"coeffs_10" : [ -0.447130, 0.284950, 0.106656, 0.493445 ],
			"coeffs_11" : [ -0.394855, -0.477667, 0.163809, 0.178704 ],
			"coeffs_12" : [ 0.355914, 0.462549, 0.410049, -0.344451 ],
			"coeffs_13" : [ 0.314713, 0.439632, -0.318134, 0.227911 ],
			"intercepts" : [ 0.138573, 0.010593, 0.043944, 0.329774 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.575274, 0.121599, 0.258165, 0.376074, -0.572415, 0.458596, -0.362349, -0.622683 ],
			"coeffs_1" : [ 0.666390, 0.706601, -0.124008, -0.543945, -0.025484, 0.645251, -0.478856, 0.248640 ],
			"coeffs_2" : [ 0.288050, 0.450069, 0.591555, -0.326594, 0.267329, 0.466096, 0.518697, -0.063368 ],
			"coeffs_3" : [ -0.596587, 0.322835, 0.007842, -0.133978, -0.488291, -0.637754, -0.228659, 0.606367 ],
			"intercepts" : [ 0.029435, -0.111636, -0.195422, -0.633386, 0.235601, -0.246820, -0.258318, -0.143680 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.239555, -0.431684, -0.185583, 0.345899, 0.400288, 0.526231 ],
			"coeffs_1" : [ 0.444787, 0.340339, -0.310093, 0.061712, 0.156136, 0.412954 ],
			"coeffs_2" : [ 0.291422, -0.032585, 0.344950, 0.423650, 0.107910, -0.195384 ],
			"coeffs_3" : [ -0.154200, -0.294011, 0.313933, 0.333667, -0.422008, 0.182649 ],
			"coeffs_4" : [ -0.386450, -0.001729, 0.122957, -0.233412, 0.268866, -0.587535 ],
			"coeffs_5" : [ -0.557435, 0.457156, 0.561770, -0.402418, -0.216041, -0.463919 ],
			"coeffs_6" : [ -0.469560, -0.503103, -0.218569, -0.149899, -0.397683, -0.441119 ],
			"coeffs_7" : [ -0.548428, 0.126355, -0.399099, -0.487476, 0.129981, 0.197564 ],
			"intercepts" : [ -0.102936, 0.144275, 0.045427, -0.433148, -0.107874, 0.542555 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.891145 ],
			"coeffs_1" : [ -0.116135 ],
			"coeffs_2" : [ -0.756328 ],
			"coeffs_3" : [ -0.419017 ],
			"coeffs_4" : [ 0.355301 ],
			"coeffs_5" : [ -0.735261 ],
			"intercepts" : [ 0.351511 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ "<=50K", ">50K" ],
	"dataset" : 	{
		"dataset_features" : 14,
		"dataset_rows" : 16
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 14,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 14,
			"NbOutputs" : 4,
			"coeffs_00" : [ -0.082182, 0.266804, -0.264979, -0.042498 ],
			"coeffs_01" : [ 0.106196, -0.374373, 0.167347, 0.018387 ],
			"coeffs_02" : [ 0.459855, 0.089796, 0.450709, -0.090487 ],
			"coeffs_03" : [ 0.542901, -0.479545, -0.21203, 0.185224 ],
			"coeffs_04" : [ 0.269344, -0.309297, -0.323152, -0.41719 ],
			"coeffs_05" : [ 0.220222, -0.538884, -0.092054, 0.026923 ],
			"coeffs_06" : [ -0.114696, -0.493507, -0.265394, 0.441385 ],
			"coeffs_07" : [ -0.042435, 0.004762, -0.485976, 0.032922 ],
			"coeffs_08" : [ -0.176366, 0.183489, -0.116169, 0.214592 ],
			"coeffs_09" : [ -0.353596, 0.474674, -0.391961, 0.279965 ],
			"coeffs_10" : [ -0.44713, 0.28495, 0.106656, 0.493445 ],
			"coeffs_11" : [ -0.394855, -0.477667, 0.163809, 0.178704 ],
			"coeffs_12" : [ 0.355914, 0.462549, 0.410049, -0.344451 ],
			"coeffs_13" : [ 0.314713, 0.439632, -0.318134, 0.227911 ],
			"intercepts" : [ 0.138573, 0.010593, 0.043944, 0.329774 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.575274, 0.121599, 0.258165, 0.376074, -0.572415, 0.458596, -0.362349, -0.622683 ],
			"coeffs_1" : [ 0.66639, 0.706601, -0.124008, -0.543945, -0.025484, 0.645251, -0.478856, 0.24864 ],
			"coeffs_2" : [ 0.28805, 0.450069, 0.591555, -0.326594, 0.267329, 0.466096, 0.518697, -0.063368 ],
			"coeffs_3" : [ -0.596587, 0.322835, 0.007842, -0.133978, -0.488291, -0.637754, -0.228659, 0.606367 ],
			"intercepts" : [ 0.029435, -0.111636, -0.195422, -0.633386, 0.235601, -0.24682, -0.258318, -0.14368 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ 0.239555, -0.431684, -0.185583, 0.345899, 0.400288, 0.526231 ],
			"coeffs_1" : [ 0.444787, 0.340339, -0.310093, 0.061712, 0.156136, 0.412954 ],
			"coeffs_2" : [ 0.291422, -0.032585, 0.34495, 0.42365, 0.10791, -0.195384 ],
			"coeffs_3" : [ -0.1542, -0.294011, 0.313933, 0.333667, -0.422008, 0.182649 ],
			"coeffs_4" : [ -0.38645, -0.001729, 0.122957, -0.233412, 0.268866, -0.587535 ],
			"coeffs_5" : [ -0.557435, 0.457156, 0.56177, -0.402418, -0.216041, -0.463919 ],
			"coeffs_6" : [ -0.46956, -0.503103, -0.218569, -0.149899, -0.397683, -0.441119 ],
			"coeffs_7" : [ -0.548428, 0.126355, -0.399099, -0.487476, 0.129981, 0.197564 ],
			"intercepts" : [ -0.102936, 0.144275, 0.045427, -0.433148, -0.107874, 0.542555 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.891145 ],
			"coeffs_1" : [ -0.116135 ],
			"coeffs_2" : [ -0.756328 ],
			"coeffs_3" : [ -0.419017 ],
			"coeffs_4" : [ 0.355301 ],
			"coeffs_5" : [ -0.735261 ],
			"intercepts" : [ 0.351511 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 14, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_OO8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('census_tiny', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]]
(16, 2)
(16,) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'census_tiny', 'size': 16, 'accuracy': 0.6875, 'auc': 0.5}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'census_tiny', 'training_time_in_sec': 0.008, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 10 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 11 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 12 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 13 14
{
   "Contributions" : {
      "X_0" : [ 0.000000, 0.000000 ],
      "X_1" : [ 0.000000, 0.000000 ],
      "X_2" : [ 0.000000, 0.000000 ],
      "X_3" : [ 0.000000, 0.000000 ],
      "X_4" : [ 0.000000, 0.000000 ],
      "X_5" : [ 0.000000, 0.000000 ],
      "X_6" : [ 0.000000, 0.000000 ],
      "X_7" : [ 0.000000, 0.000000 ],
      "X_8" : [ 0.000000, 0.000000 ],
      "X_9" : [ 0.000000, 0.000000 ],
      "X_10" : [ 0.000000, 0.000000 ],
      "X_11" : [ 0.000000, 0.000000 ],
      "X_12" : [ 0.000000, 0.000000 ],
      "X_13" : [ 0.000000, 0.000000 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ ],
      "class_1" : [ ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_tiny_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_tiny', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "census_tiny" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9",
    t."X_10" AS "OUT_10",
    t."X_11" AS "OUT_11",
    t."X_12" AS "OUT_12",
    t."X_13" AS "OUT_13"
 FROM "mo
SQL_OUT_PUT_FIRST_LINES_END ('census_tiny', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('census_tiny', 'MLPClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_tiny', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
 10  X_10    16 non-null     float32
 11  X_11    16 non-null     float32
 12  X_12    16 non-null     float32
 13  X_13    16 non-null     float32
dtypes: float32(14)
memory usage: 1.0 KB
       X_0  X_1        X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                       ...                                  
0      2.0  0.0   188950.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
1      1.0  0.0  1033222.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
2      1.0  0.0   129707.0  0.0  13.0  0.0  ...  0.0  0.0   4.0   0.0   1.0   0.0
3      1.0  0.0    78530.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
4      1.0  0.0   159537.0  0.0  12.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
5      3.0  0.0    96586.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
6      2.0  0.0   165346.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
7      1.0  0.0   142712.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
8      4.0  0.0   175964.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
9      1.0  0.0   229656.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   1.0   2.0   0.0
10     2.0  0.0    25806.0  0.0  16.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
11     0.0  0.0   340543.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
12     4.0  0.0    31781.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   1.0   1.0   0.0
13     1.0  0.0    56121.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
14     3.0  0.0   126840.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
15     2.0  0.0    67187.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0

[16 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        16 non-null     float64
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        16 non-null     float64
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Decision       16 non-null     int64  
 8   DecisionProba  16 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 1.3 KB
    index        Score_0  Proba_0  ...     LogProba_1  Decision  DecisionProba
0       0   24268.333984      1.0  ... -1.797693e+308         0            1.0
1       1  132704.703125      1.0  ... -1.797693e+308         0            1.0
2       2   16658.880859      1.0  ... -1.797693e+308         0            1.0
3       3   10086.487305      1.0  ... -1.797693e+308         0            1.0
4       4   20490.484375      1.0  ... -1.797693e+308         0            1.0
5       5   12405.228516      1.0  ... -1.797693e+308         0            1.0
6       6   21236.919922      1.0  ... -1.797693e+308         0            1.0
7       7   18329.576172      1.0  ... -1.797693e+308         0            1.0
8       8   22600.357422      1.0  ... -1.797693e+308         0            1.0
9       9   29496.261719      1.0  ... -1.797693e+308         0            1.0
10     10    3314.286621      1.0  ... -1.797693e+308         0            1.0
11     11   43738.484375      1.0  ... -1.797693e+308         0            1.0
12     12    4081.565430      1.0  ... -1.797693e+308         0            1.0
13     13    7208.171875      1.0  ... -1.797693e+308         0            1.0
14     14   16290.985352      1.0  ... -1.797693e+308         0            1.0
15     15    8629.308594      1.0  ... -1.797693e+308         0            1.0

[16 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index        Score_0  SQL_Proba_0  ...  Py_Proba_0    Py_Proba_1  Py_Decision
0       0   24268.333984          1.0  ...         1.0  1.266417e-14        <=50K
1       1  132704.703125          1.0  ...         1.0  1.266417e-14        <=50K
2       2   16658.880859          1.0  ...         1.0  1.266417e-14        <=50K
3       3   10086.487305          1.0  ...         1.0  1.266417e-14        <=50K
4       4   20490.484375          1.0  ...         1.0  1.266417e-14        <=50K
5       5   12405.228516          1.0  ...         1.0  1.266417e-14        <=50K
6       6   21236.919922          1.0  ...         1.0  1.266417e-14        <=50K
7       7   18329.576172          1.0  ...         1.0  1.266417e-14        <=50K
8       8   22600.357422          1.0  ...         1.0  1.266417e-14        <=50K
9       9   29496.261719          1.0  ...         1.0  1.266417e-14        <=50K
10     10    3314.286621          1.0  ...         1.0  1.266417e-14        <=50K
11     11   43738.484375          1.0  ...         1.0  1.266417e-14        <=50K
12     12    4081.565430          1.0  ...         1.0  1.266417e-14        <=50K
13     13    7208.171875          1.0  ...         1.0  1.266417e-14        <=50K
14     14   16290.985352          1.0  ...         1.0  1.266417e-14        <=50K
15     15    8629.308594          1.0  ...         1.0  1.266417e-14        <=50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 0.0
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
0          1.0          1.0          0.0
1          1.0          1.0          0.0
2          1.0          1.0          0.0
3          1.0          1.0          0.0
4          1.0          1.0          0.0
5          1.0          1.0          0.0
6          1.0          1.0          0.0
7          1.0          1.0          0.0
8          1.0          1.0          0.0
9          1.0          1.0          0.0
10         1.0          1.0          0.0
11         1.0          1.0          0.0
12         1.0          1.0          0.0
13         1.0          1.0          0.0
14         1.0          1.0          0.0
15         1.0          1.0          0.0
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 1.2664165777252073e-14
      Py_Proba_1  SQL_Proba_1   SQL_Error_1
0   1.266417e-14          0.0  1.266417e-14
1   1.266417e-14          0.0  1.266417e-14
2   1.266417e-14          0.0  1.266417e-14
3   1.266417e-14          0.0  1.266417e-14
4   1.266417e-14          0.0  1.266417e-14
5   1.266417e-14          0.0  1.266417e-14
6   1.266417e-14          0.0  1.266417e-14
7   1.266417e-14          0.0  1.266417e-14
8   1.266417e-14          0.0  1.266417e-14
9   1.266417e-14          0.0  1.266417e-14
10  1.266417e-14          0.0  1.266417e-14
11  1.266417e-14          0.0  1.266417e-14
12  1.266417e-14          0.0  1.266417e-14
13  1.266417e-14          0.0  1.266417e-14
14  1.266417e-14          0.0  1.266417e-14
15  1.266417e-14          0.0  1.266417e-14
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_tiny', 'MLPClassifier', 'duckdb', 'Success')
   Py_Decision  SQL_Decision
0        <=50K             0
1        <=50K             0
2        <=50K             0
3        <=50K             0
4        <=50K             0
5        <=50K             0
6        <=50K             0
7        <=50K             0
8        <=50K             0
9        <=50K             0
10       <=50K             0
11       <=50K             0
12       <=50K             0
13       <=50K             0
14       <=50K             0
15       <=50K             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_tiny', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "census_tiny" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9",
    t."X_10" AS "OUT_10",
    t."X_11" AS "OUT_11",
    t."X_12" AS "OUT_12",
    t."X_13" AS "OUT_13"
 FROM "mo
SQL_OUT_PUT_FIRST_LINES_END ('census_tiny', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('census_tiny', 'MLPClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_tiny', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
 10  X_10    16 non-null     float32
 11  X_11    16 non-null     float32
 12  X_12    16 non-null     float32
 13  X_13    16 non-null     float32
dtypes: float32(14)
memory usage: 1.0 KB
       X_0  X_1        X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                       ...                                  
0      2.0  0.0   188950.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
1      1.0  0.0  1033222.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
2      1.0  0.0   129707.0  0.0  13.0  0.0  ...  0.0  0.0   4.0   0.0   1.0   0.0
3      1.0  0.0    78530.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
4      1.0  0.0   159537.0  0.0  12.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
5      3.0  0.0    96586.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
6      2.0  0.0   165346.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
7      1.0  0.0   142712.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
8      4.0  0.0   175964.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
9      1.0  0.0   229656.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   1.0   2.0   0.0
10     2.0  0.0    25806.0  0.0  16.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
11     0.0  0.0   340543.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
12     4.0  0.0    31781.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   1.0   1.0   0.0
13     1.0  0.0    56121.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
14     3.0  0.0   126840.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
15     2.0  0.0    67187.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0

[16 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('census_tiny', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_tiny', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
