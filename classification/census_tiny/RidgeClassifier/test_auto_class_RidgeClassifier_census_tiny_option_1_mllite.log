    age  workclass     fnlwgt  ...  hoursperweek  native-country  target
0   2.0        0.0   188950.0  ...           3.0             0.0    >50K
1   1.0        0.0  1033222.0  ...           2.0             0.0   <=50K
2   1.0        0.0   129707.0  ...           1.0             0.0    >50K
3   1.0        0.0    78530.0  ...           4.0             0.0    >50K
4   1.0        0.0   159537.0  ...           2.0             0.0   <=50K
5   3.0        0.0    96586.0  ...           2.0             0.0    >50K
6   2.0        0.0   165346.0  ...           4.0             0.0   <=50K
7   1.0        0.0   142712.0  ...           2.0             0.0   <=50K
8   4.0        0.0   175964.0  ...           2.0             0.0   <=50K
9   1.0        0.0   229656.0  ...           2.0             0.0    >50K
10  2.0        0.0    25806.0  ...           2.0             0.0   <=50K
11  0.0        0.0   340543.0  ...           2.0             0.0   <=50K
12  4.0        0.0    31781.0  ...           1.0             0.0   <=50K
13  1.0        0.0    56121.0  ...           3.0             0.0   <=50K
14  3.0        0.0   126840.0  ...           2.0             0.0   <=50K
15  2.0        0.0    67187.0  ...           2.0             0.0   <=50K

[16 rows x 15 columns]
MLLITE_MODEL_SET_OPTIONS RidgeClassifier {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { "alpha" : 0.0000001,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
('OPERATION_START', 'TRAINING')
[[2.000000e+00 0.000000e+00 1.889500e+05 0.000000e+00 1.400000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 3.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.033222e+06 0.000000e+00 1.000000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 2.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.297070e+05 0.000000e+00 1.300000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  4.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 7.853000e+04 0.000000e+00 9.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 4.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.595370e+05 0.000000e+00 1.200000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 2.000000e+00 0.000000e+00]] ['>50K' '<=50K' '>50K' '>50K' '<=50K']
MLLITE_FIT_USING_MODEL mllite_ridge_class.RidgeClassifier_ff4_OO8
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 4 4
('OPERATION_END_ELAPSED', 0.012, 'TRAINING')
{ "alpha" : 0.0000001,   }
{ "alpha" : 0.0000001,   }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_OO8"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"equations" : {
		"class_1" : {
			"intercept" : 107900.054688,
			"coeffs" : [ -13397.858398, 0.000000, -0.152188, 0.000000, -1822.007446, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -9383.578125, -13249.955078, -13538.763672, 0.000000 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_tiny_option_1.json'

MLLITE_MODEL_SET_OPTIONS RidgeClassifier {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { "alpha" : 0.0000001,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
MLLITE_RELOADING_MODEL mllite_ridge_class.RidgeClassifier_ff4_OO8
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_OO8"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"equations" : {
		"class_1" : {
			"intercept" : 107900.054688,
			"coeffs" : [ -13397.858398, 0.000000, -0.152188, 0.000000, -1822.007446, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -9383.578125, -13249.955078, -13538.763672, 0.000000 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ "<=50K", ">50K" ],
	"dataset" : 	{
		"dataset_features" : 14,
		"dataset_rows" : 16
	},
	"equations" : 	{
		"class_1" : 	{
			"coeffs" : [ -13397.858398, 0.0, -0.152188, 0.0, -1822.007446, 0.0, 0.0, 0.0, 0.0, 0.0, -9383.578125, -13249.955078, -13538.763672, 0.0 ],
			"intercept" : 107900.054688
		}
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_OO8", "version" : "2024-W13" },
	"options" :  { "alpha" : 0.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[1.     0.    ]
 [1.     0.    ]
 [0.0415 0.9585]
 [0.     1.    ]
 [0.     1.    ]
 [0.     1.    ]
 [1.     0.    ]
 [0.     1.    ]
 [1.     0.    ]
 [1.     0.    ]
 [0.     1.    ]
 [0.     1.    ]
 [0.     1.    ]
 [0.     1.    ]
 [0.     1.    ]
 [0.     1.    ]]
(16, 2)
(16,) float32
MODEL_PERFS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': '{"alpha" : 0.0000001}', 'dataset': 'census_tiny', 'size': 16, 'accuracy': 0.375, 'auc': 0.36363636363636365}
WRITING_PERF_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': '{"alpha" : 0.0000001}', 'dataset': 'census_tiny', 'training_time_in_sec': 0.012, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_tiny', 'RidgeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT t."index" AS "index",
   -0.5 * ( 107900.054688 + -13397.858398 * t."X_0" + 0.000000 * t."X_1" + -0.152188 * t."X_2" + 0.000000 * t."X_3" + -1822.007446 * t."X_4" + 0.000000 * t."X_5" + 0.000000 * t."X_6" + 0.000000 * t."X_7" + 0.000000 * t."X_8" + 0.000000 * t."X_9" + -9383.578125 * t."X_10" + -13249.955078 * t."X_11" + -13538.763672 * t."X_12" + 0.000000 * t."X_1
SQL_OUT_PUT_FIRST_LINES_END ('census_tiny', 'RidgeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('census_tiny', 'RidgeClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_tiny', 'RidgeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
 10  X_10    16 non-null     float32
 11  X_11    16 non-null     float32
 12  X_12    16 non-null     float32
 13  X_13    16 non-null     float32
dtypes: float32(14)
memory usage: 1.0 KB
       X_0  X_1        X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                       ...                                  
0      2.0  0.0   188950.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
1      1.0  0.0  1033222.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
2      1.0  0.0   129707.0  0.0  13.0  0.0  ...  0.0  0.0   4.0   0.0   1.0   0.0
3      1.0  0.0    78530.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
4      1.0  0.0   159537.0  0.0  12.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
5      3.0  0.0    96586.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
6      2.0  0.0   165346.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
7      1.0  0.0   142712.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
8      4.0  0.0   175964.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
9      1.0  0.0   229656.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   1.0   2.0   0.0
10     2.0  0.0    25806.0  0.0  16.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
11     0.0  0.0   340543.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
12     4.0  0.0    31781.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   1.0   1.0   0.0
13     1.0  0.0    56121.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
14     3.0  0.0   126840.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
15     2.0  0.0    67187.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0

[16 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        16 non-null     float64
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        16 non-null     float64
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Decision       16 non-null     int64  
 8   DecisionProba  16 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 1.3 KB
    index       Score_0   Proba_0  ...     LogProba_1  Decision  DecisionProba
0       0   6887.989258  1.000000  ... -1.797693e+308         0       1.000000
1       1  54019.703125  1.000000  ... -1.797693e+308         0       1.000000
2       2     -1.583008  0.040465  ...  -4.130632e-02         1       0.959535
3       3  -5998.878906  0.000000  ...   0.000000e+00         1       1.000000
4       4 -10640.480469  0.000000  ...   0.000000e+00         1       1.000000
5       5  -3854.826172  0.000000  ...   0.000000e+00         1       1.000000
6       6   8217.236328  1.000000  ... -1.797693e+308         0       1.000000
7       7 -14653.773438  0.000000  ...   0.000000e+00         1       1.000000
8       8   8884.294922  1.000000  ... -1.797693e+308         0       1.000000
9       9   3142.139648  1.000000  ... -1.797693e+308         0       1.000000
10     10 -10473.662109  0.000000  ...   0.000000e+00         1       1.000000
11     11  -2654.935547  0.000000  ...   0.000000e+00         1       1.000000
12     12  -3142.574219  0.000000  ...   0.000000e+00         1       1.000000
13     13 -14473.449219  0.000000  ...   0.000000e+00         1       1.000000
14     14  -1552.679688  0.000000  ...   0.000000e+00         1       1.000000
15     15 -13701.843750  0.000000  ...   0.000000e+00         1       1.000000

[16 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index       Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
0       0   6887.989258     1.000000  ...     1.00000     0.00000        <=50K
1       1  54019.703125     1.000000  ...     1.00000     0.00000        <=50K
2       2     -1.583008     0.040465  ...     0.04154     0.95846         >50K
3       3  -5998.878906     0.000000  ...     0.00000     1.00000         >50K
4       4 -10640.480469     0.000000  ...     0.00000     1.00000         >50K
5       5  -3854.826172     0.000000  ...     0.00000     1.00000         >50K
6       6   8217.236328     1.000000  ...     1.00000     0.00000        <=50K
7       7 -14653.773438     0.000000  ...     0.00000     1.00000         >50K
8       8   8884.294922     1.000000  ...     1.00000     0.00000        <=50K
9       9   3142.139648     1.000000  ...     1.00000     0.00000        <=50K
10     10 -10473.662109     0.000000  ...     0.00000     1.00000         >50K
11     11  -2654.935547     0.000000  ...     0.00000     1.00000         >50K
12     12  -3142.574219     0.000000  ...     0.00000     1.00000         >50K
13     13 -14473.449219     0.000000  ...     0.00000     1.00000         >50K
14     14  -1552.679688     0.000000  ...     0.00000     1.00000         >50K
15     15 -13701.843750     0.000000  ...     0.00000     1.00000         >50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'RidgeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 6.719525477241837e-05
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
0      1.00000     1.000000     0.000000
1      1.00000     1.000000     0.000000
2      0.04154     0.040465     0.001075
3      0.00000     0.000000     0.000000
4      0.00000     0.000000     0.000000
5      0.00000     0.000000     0.000000
6      1.00000     1.000000     0.000000
7      0.00000     0.000000     0.000000
8      1.00000     1.000000     0.000000
9      1.00000     1.000000     0.000000
10     0.00000     0.000000     0.000000
11     0.00000     0.000000     0.000000
12     0.00000     0.000000     0.000000
13     0.00000     0.000000     0.000000
14     0.00000     0.000000     0.000000
15     0.00000     0.000000     0.000000
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'RidgeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 6.719572043369787e-05
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
0      0.00000     0.000000     0.000000
1      0.00000     0.000000     0.000000
2      0.95846     0.959535    -0.001075
3      1.00000     1.000000     0.000000
4      1.00000     1.000000     0.000000
5      1.00000     1.000000     0.000000
6      0.00000     0.000000     0.000000
7      1.00000     1.000000     0.000000
8      0.00000     0.000000     0.000000
9      0.00000     0.000000     0.000000
10     1.00000     1.000000     0.000000
11     1.00000     1.000000     0.000000
12     1.00000     1.000000     0.000000
13     1.00000     1.000000     0.000000
14     1.00000     1.000000     0.000000
15     1.00000     1.000000     0.000000
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_tiny', 'RidgeClassifier', 'duckdb', 'Success')
   Py_Decision  SQL_Decision
0        <=50K             0
1        <=50K             0
2         >50K             1
3         >50K             1
4         >50K             1
5         >50K             1
6        <=50K             0
7         >50K             1
8        <=50K             0
9        <=50K             0
10        >50K             1
11        >50K             1
12        >50K             1
13        >50K             1
14        >50K             1
15        >50K             1
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_tiny', 'RidgeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT t."index" AS "index",
   -0.5 * ( 107900.054688 + -13397.858398 * t."X_0" + 0.000000 * t."X_1" + -0.152188 * t."X_2" + 0.000000 * t."X_3" + -1822.007446 * t."X_4" + 0.000000 * t."X_5" + 0.000000 * t."X_6" + 0.000000 * t."X_7" + 0.000000 * t."X_8" + 0.000000 * t."X_9" + -9383.578125 * t."X_10" + -13249.955078 * t."X_11" + -13538.763672 * t."X_12" + 0.000000 * t."X_1
SQL_OUT_PUT_FIRST_LINES_END ('census_tiny', 'RidgeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('census_tiny', 'RidgeClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_tiny', 'RidgeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
 10  X_10    16 non-null     float32
 11  X_11    16 non-null     float32
 12  X_12    16 non-null     float32
 13  X_13    16 non-null     float32
dtypes: float32(14)
memory usage: 1.0 KB
       X_0  X_1        X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                       ...                                  
0      2.0  0.0   188950.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
1      1.0  0.0  1033222.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
2      1.0  0.0   129707.0  0.0  13.0  0.0  ...  0.0  0.0   4.0   0.0   1.0   0.0
3      1.0  0.0    78530.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
4      1.0  0.0   159537.0  0.0  12.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
5      3.0  0.0    96586.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
6      2.0  0.0   165346.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
7      1.0  0.0   142712.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
8      4.0  0.0   175964.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
9      1.0  0.0   229656.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   1.0   2.0   0.0
10     2.0  0.0    25806.0  0.0  16.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
11     0.0  0.0   340543.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
12     4.0  0.0    31781.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   1.0   1.0   0.0
13     1.0  0.0    56121.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
14     3.0  0.0   126840.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
15     2.0  0.0    67187.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0

[16 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        16 non-null     float64
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        16 non-null     float64
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Decision       16 non-null     int64  
 8   DecisionProba  16 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 1.3 KB
    index       Score_0  Proba_0  ...     LogProba_1  Decision  DecisionProba
0       0   6887.989984  1.00000  ... -1.797693e+308         0        1.00000
1       1  54019.697625  1.00000  ... -1.797693e+308         0        1.00000
2       2     -1.587202  0.04014  ...  -4.096824e-02         1        0.95986
3       3  -5998.875474  0.00000  ...   0.000000e+00         1        1.00000
4       4 -10640.481319  0.00000  ...   0.000000e+00         1        1.00000
5       5  -3854.823761  0.00000  ...   0.000000e+00         1        1.00000
6       6   8217.234152  1.00000  ... -1.797693e+308         0        1.00000
7       7 -14653.774038  0.00000  ...   0.000000e+00         1        1.00000
8       8   8884.294970  1.00000  ... -1.797693e+308         0        1.00000
9       9   3142.138852  1.00000  ... -1.797693e+308         0        1.00000
10     10 -10473.663942  0.00000  ...   0.000000e+00         1        1.00000
11     11  -2654.936231  0.00000  ...   0.000000e+00         1        1.00000
12     12  -3142.574252  0.00000  ...   0.000000e+00         1        1.00000
13     13 -14473.447756  0.00000  ...   0.000000e+00         1        1.00000
14     14  -1552.675885  0.00000  ...   0.000000e+00         1        1.00000
15     15 -13701.844189  0.00000  ...   0.000000e+00         1        1.00000

[16 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index       Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
0       0   6887.989984      1.00000  ...     1.00000     0.00000        <=50K
1       1  54019.697625      1.00000  ...     1.00000     0.00000        <=50K
2       2     -1.587202      0.04014  ...     0.04154     0.95846         >50K
3       3  -5998.875474      0.00000  ...     0.00000     1.00000         >50K
4       4 -10640.481319      0.00000  ...     0.00000     1.00000         >50K
5       5  -3854.823761      0.00000  ...     0.00000     1.00000         >50K
6       6   8217.234152      1.00000  ...     1.00000     0.00000        <=50K
7       7 -14653.774038      0.00000  ...     0.00000     1.00000         >50K
8       8   8884.294970      1.00000  ...     1.00000     0.00000        <=50K
9       9   3142.138852      1.00000  ...     1.00000     0.00000        <=50K
10     10 -10473.663942      0.00000  ...     0.00000     1.00000         >50K
11     11  -2654.936231      0.00000  ...     0.00000     1.00000         >50K
12     12  -3142.574252      0.00000  ...     0.00000     1.00000         >50K
13     13 -14473.447756      0.00000  ...     0.00000     1.00000         >50K
14     14  -1552.675885      0.00000  ...     0.00000     1.00000         >50K
15     15 -13701.844189      0.00000  ...     0.00000     1.00000         >50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'RidgeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 8.747316112645833e-05
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
0      1.00000      1.00000       0.0000
1      1.00000      1.00000       0.0000
2      0.04154      0.04014       0.0014
3      0.00000      0.00000       0.0000
4      0.00000      0.00000       0.0000
5      0.00000      0.00000       0.0000
6      1.00000      1.00000       0.0000
7      0.00000      0.00000       0.0000
8      1.00000      1.00000       0.0000
9      1.00000      1.00000       0.0000
10     0.00000      0.00000       0.0000
11     0.00000      0.00000       0.0000
12     0.00000      0.00000       0.0000
13     0.00000      0.00000       0.0000
14     0.00000      0.00000       0.0000
15     0.00000      0.00000       0.0000
MLLITE_CLASS_SQL_ERROR ('census_tiny', 'RidgeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 8.747362678774434e-05
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
0      0.00000      0.00000       0.0000
1      0.00000      0.00000       0.0000
2      0.95846      0.95986      -0.0014
3      1.00000      1.00000       0.0000
4      1.00000      1.00000       0.0000
5      1.00000      1.00000       0.0000
6      0.00000      0.00000       0.0000
7      1.00000      1.00000       0.0000
8      0.00000      0.00000       0.0000
9      0.00000      0.00000       0.0000
10     1.00000      1.00000       0.0000
11     1.00000      1.00000       0.0000
12     1.00000      1.00000       0.0000
13     1.00000      1.00000       0.0000
14     1.00000      1.00000       0.0000
15     1.00000      1.00000       0.0000
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_tiny', 'RidgeClassifier', 'sqlite', 'Success')
   Py_Decision  SQL_Decision
0        <=50K             0
1        <=50K             0
2         >50K             1
3         >50K             1
4         >50K             1
5         >50K             1
6        <=50K             0
7         >50K             1
8        <=50K             0
9        <=50K             0
10        >50K             1
11        >50K             1
12        >50K             1
13        >50K             1
14        >50K             1
15        >50K             1
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_tiny_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_tiny', 'RidgeClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT t."index" AS "index",
   -0.5 * ( 107900.054688 + -13397.858398 * t."X_0" + 0.000000 * t."X_1" + -0.152188 * t."X_2" + 0.000000 * t."X_3" + -1822.007446 * t."X_4" + 0.000000 * t."X_5" + 0.000000 * t."X_6" + 0.000000 * t."X_7" + 0.000000 * t."X_8" + 0.000000 * t."X_9" + -9383.578125 * t."X_10" + -13249.955078 * t."X_11" + -13538.763672 * t."X_12" + 0.000000 * t."X_1
SQL_OUT_PUT_FIRST_LINES_END ('census_tiny', 'RidgeClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('census_tiny', 'RidgeClassifier', 'pgsql')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_tiny', 'RidgeClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
