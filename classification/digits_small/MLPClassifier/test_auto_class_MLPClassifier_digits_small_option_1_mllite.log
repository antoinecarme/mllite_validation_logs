    pixel_0_0  pixel_0_1  pixel_0_2  ...  pixel_7_6  pixel_7_7  target
0           0          0          0  ...          7          0       2
1           0          0         11  ...         16         12       1
2           0          0          0  ...          0          0       1
3           0          0          7  ...          4          0       9
4           0          0          5  ...          0          0       8
..        ...        ...        ...  ...        ...        ...     ...
59          0          0          0  ...          0          0       4
60          0          0         12  ...          0          0       5
61          0          0          1  ...          0          0       8
62          0          0         10  ...          0          0       8
63          0          3         15  ...          0          0       5

[64 rows x 65 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[ 0.  0.  0.  3. 15. 10.  1.  0.  0.  0.  0. 11. 10. 16.  4.  0.  0.  0.
   0. 12.  1. 15.  6.  0.  0.  0.  0.  3.  4. 15.  4.  0.  0.  0.  0.  6.
  15.  6.  0.  0.  0.  4. 15. 16.  9.  0.  0.  0.  0.  0. 13. 16. 15.  9.
   3.  0.  0.  0.  0.  4.  9. 14.  7.  0.]
 [ 0.  0. 11. 10.  0.  0.  0.  0.  0.  0. 11. 15.  0.  0.  0.  0.  0.  0.
  11. 16.  5.  0.  0.  0.  0.  0. 13. 16. 11.  0.  0.  0.  0.  0.  2.  7.
  16.  2.  0.  0.  0.  0.  0.  2. 14.  6.  0.  0.  0.  0.  6. 10. 15. 13.
   8.  3.  0.  0.  8. 16. 16. 16. 16. 12.]
 [ 0.  0.  0. 15. 11.  0.  0.  0.  0.  0.  6. 16. 16.  2.  0.  0.  0.  0.
  10. 16. 16.  1.  0.  0.  0.  2. 16. 16. 16.  3.  0.  0.  0.  7. 16. 16.
  14.  0.  0.  0.  0.  0.  3. 15. 10.  0.  0.  0.  0.  0.  0. 15.  7.  0.
   0.  0.  0.  0.  0. 14.  4.  0.  0.  0.]
 [ 0.  0.  7. 13. 10.  1.  0.  0.  0.  1. 15.  3.  9. 10.  0.  0.  0.  3.
  16.  4. 13. 11.  0.  0.  0.  0.  6. 12. 12. 16.  0.  0.  0.  0.  0.  0.
   0. 12.  5.  0.  0.  0.  0.  0.  0.  5. 11.  0.  0.  1. 11.  2.  0.  7.
  11.  0.  0.  0.  7. 13. 16. 15.  4.  0.]
 [ 0.  0.  5. 12. 13.  2.  0.  0.  0.  3. 16. 14. 16. 13.  1.  0.  0.  4.
  16.  9. 16. 12.  1.  0.  0.  1.  9. 16. 15.  1.  0.  0.  0.  1. 13. 16.
  16.  5.  0.  0.  0.  3. 16.  5. 12. 16.  0.  0.  0.  3. 15.  7. 14. 12.
   0.  0.  0.  0.  6. 16. 13.  3.  0.  0.]] [2 1 1 9 8]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.023, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 64 },
	"classes" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
	"layers" : {
		"sizes" : [ 64, 4, 8, 6, 10 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 64 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 64,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.025613, 0.154095, -0.121240, -0.021865 ],
			"coeffs_01" : [ 0.030234, -0.232588, 0.112691, -0.014523 ],
			"coeffs_02" : [ 0.231388, 0.036272, 0.274432, -0.069421 ],
			"coeffs_03" : [ 0.271579, -0.289571, -0.140721, 0.088627 ],
			"coeffs_04" : [ 0.132030, -0.168356, -0.174758, -0.251924 ],
			"coeffs_05" : [ 0.109842, -0.317639, -0.070401, -0.011922 ],
			"coeffs_06" : [ -0.063779, -0.291206, -0.123858, 0.221444 ],
			"coeffs_07" : [ -0.040878, 0.002450, -0.265979, 0.023940 ],
			"coeffs_08" : [ -0.124905, 0.075821, -0.059769, 0.160034 ],
			"coeffs_09" : [ -0.218576, 0.237206, -0.190897, 0.136619 ],
			"coeffs_10" : [ -0.234435, 0.136307, 0.097530, 0.245513 ],
			"coeffs_11" : [ -0.210625, -0.256088, 0.076603, 0.085283 ],
			"coeffs_12" : [ 0.173174, 0.227380, 0.201201, -0.209871 ],
			"coeffs_13" : [ 0.153104, 0.213977, -0.199746, 0.107556 ],
			"coeffs_14" : [ 0.077887, -0.004224, 0.065410, 0.139100 ],
			"coeffs_15" : [ -0.273783, 0.037486, 0.121673, 0.177920 ],
			"coeffs_16" : [ -0.287708, 0.172113, -0.165366, -0.240427 ],
			"coeffs_17" : [ 0.270528, 0.255610, -0.012561, -0.266093 ],
			"coeffs_18" : [ -0.033439, 0.256497, -0.216161, 0.092256 ],
			"coeffs_19" : [ 0.105577, 0.151104, 0.237111, -0.146298 ],
			"coeffs_20" : [ 0.095401, 0.184229, 0.192212, -0.035030 ],
			"coeffs_21" : [ -0.288410, 0.119710, -0.022974, -0.082434 ],
			"coeffs_22" : [ -0.238345, -0.309816, -0.133598, 0.237663 ],
			"coeffs_23" : [ 0.028409, -0.066349, -0.068791, -0.298138 ],
			"coeffs_24" : [ 0.098972, -0.090357, -0.115281, -0.060358 ],
			"coeffs_25" : [ 0.100235, -0.237791, -0.117939, 0.146649 ],
			"coeffs_26" : [ 0.171819, 0.226024, 0.192532, 0.146000 ],
			"coeffs_27" : [ -0.149248, 0.011451, 0.059973, 0.185705 ],
			"coeffs_28" : [ 0.123298, -0.021857, 0.146425, 0.185822 ],
			"coeffs_29" : [ 0.025390, -0.130186, -0.106712, -0.171952 ],
			"coeffs_30" : [ 0.128875, 0.136181, -0.229532, 0.069551 ],
			"coeffs_31" : [ -0.189299, -0.000784, 0.055791, -0.119526 ],
			"coeffs_32" : [ 0.135719, -0.280731, -0.267053, 0.221463 ],
			"coeffs_33" : [ 0.241377, -0.225272, -0.136924, -0.230105 ],
			"coeffs_34" : [ -0.252145, -0.253858, -0.123710, -0.060794 ],
			"coeffs_35" : [ -0.215187, -0.229082, -0.286925, 0.055933 ],
			"coeffs_36" : [ -0.213572, -0.252264, 0.033932, 0.086943 ],
			"coeffs_37" : [ -0.068988, 0.053384, 0.010240, -0.222088 ],
			"coeffs_38" : [ -0.073839, 0.217653, 0.269446, -0.072489 ],
			"coeffs_39" : [ -0.252666, -0.144333, 0.123827, -0.245958 ],
			"coeffs_40" : [ 0.102492, -0.157461, 0.273531, 0.285498 ],
			"coeffs_41" : [ -0.163601, 0.125124, -0.170760, 0.193602 ],
			"coeffs_42" : [ -0.278172, 0.149643, 0.034522, -0.185361 ],
			"coeffs_43" : [ 0.113496, 0.112980, -0.017462, -0.140093 ],
			"coeffs_44" : [ 0.224103, 0.231489, -0.144934, 0.032223 ],
			"coeffs_45" : [ 0.139410, 0.008517, -0.031286, 0.245081 ],
			"coeffs_46" : [ 0.085649, 0.094504, -0.237496, -0.065266 ],
			"coeffs_47" : [ 0.241957, 0.164243, -0.086117, -0.078452 ],
			"coeffs_48" : [ 0.184052, -0.183593, 0.038748, 0.219350 ],
			"coeffs_49" : [ -0.299293, -0.190492, -0.139037, -0.176644 ],
			"coeffs_50" : [ -0.145778, -0.032737, -0.216044, 0.159334 ],
			"coeffs_51" : [ 0.256944, 0.022827, -0.006752, 0.094173 ],
			"coeffs_52" : [ 0.005497, 0.116726, -0.001978, 0.154991 ],
			"coeffs_53" : [ 0.111793, -0.151962, -0.107975, -0.279819 ],
			"coeffs_54" : [ -0.179369, -0.203766, 0.101052, -0.066002 ],
			"coeffs_55" : [ -0.120360, -0.268608, 0.272328, -0.111468 ],
			"coeffs_56" : [ -0.095388, 0.073567, 0.137762, 0.106176 ],
			"coeffs_57" : [ -0.293925, 0.192176, 0.289771, 0.197045 ],
			"coeffs_58" : [ -0.005841, 0.270310, 0.213138, 0.057654 ],
			"coeffs_59" : [ -0.124146, 0.236444, -0.308258, -0.298650 ],
			"coeffs_60" : [ -0.055125, -0.043598, 0.090156, 0.220601 ],
			"coeffs_61" : [ 0.030320, -0.074832, -0.218577, -0.195610 ],
			"coeffs_62" : [ 0.053674, 0.083807, -0.242810, -0.059743 ],
			"coeffs_63" : [ 0.215113, -0.093293, 0.005261, -0.072528 ],
			"intercepts" : [ 0.080984, -0.178196, -0.025652, 0.179146 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.245516, 0.460738, 0.483940, 0.500495, 0.207351, -0.482540, -0.073451, -0.469820 ],
			"coeffs_1" : [ 0.291151, 0.170935, 0.669695, 0.380253, 0.623643, -0.375131, 0.136619, 0.433311 ],
			"coeffs_2" : [ 0.235853, 0.628908, -0.341594, 0.444128, 0.334126, 0.726802, -0.048545, 0.248787 ],
			"coeffs_3" : [ 0.439909, 0.374416, 0.417326, -0.670563, 0.233767, 0.616616, 0.134731, 0.577612 ],
			"intercepts" : [ -0.202136, 0.232265, -0.514895, 0.197103, -0.705470, 0.391429, 0.000051, 0.034664 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.292626, -0.574658, -0.474448, -0.196886, -0.456963, 0.262046 ],
			"coeffs_1" : [ -0.060282, -0.221255, -0.172889, 0.404107, 0.353595, -0.272955 ],
			"coeffs_2" : [ 0.325656, -0.557870, 0.522055, -0.152328, 0.160227, -0.401604 ],
			"coeffs_3" : [ -0.405995, 0.117362, -0.224890, 0.549532, -0.590324, -0.330454 ],
			"coeffs_4" : [ 0.267433, 0.044977, 0.425019, 0.403299, -0.394099, -0.446251 ],
			"coeffs_5" : [ -0.529935, 0.129291, 0.195065, 0.254770, -0.190328, 0.041223 ],
			"coeffs_6" : [ 0.596162, -0.495706, -0.203904, -0.206068, 0.012797, -0.212515 ],
			"coeffs_7" : [ -0.229642, -0.248821, -0.160378, 0.325162, 0.087162, -0.303818 ],
			"intercepts" : [ -0.220224, 0.010598, 0.544836, 0.049659, -0.514099, -0.314064 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 10 ,
			"coeffs_0" : [ -0.480950, 0.298996, -0.266631, -0.149180, -0.433969, 0.105552, -0.461217, -0.216545, 0.473519, -0.340167 ],
			"coeffs_1" : [ 0.578190, -0.353583, 0.222499, -0.414432, 0.287810, -0.300471, -0.349243, -0.340765, -0.595681, 0.137196 ],
			"coeffs_2" : [ -0.544157, 0.504067, -0.568559, -0.051077, 0.522786, 0.009926, -0.135802, -0.228073, 0.459990, -0.280637 ],
			"coeffs_3" : [ -0.368987, -0.270056, 0.049654, 0.404893, -0.043347, 0.198102, 0.360188, 0.309528, -0.404032, 0.280547 ],
			"coeffs_4" : [ -0.389083, 0.337891, -0.446701, -0.150599, 0.508040, -0.363815, -0.310573, 0.084499, 0.311561, 0.553982 ],
			"coeffs_5" : [ -0.288505, 0.013625, 0.608485, 0.500203, 0.465535, -0.136175, -0.291553, -0.266297, 0.116867, -0.521211 ],
			"intercepts" : [ -0.205104, -0.589861, -0.104577, -0.223243, -0.006699, -0.111442, 0.593925, 0.393669, -0.332480, 0.030241 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 64 },
	"classes" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
	"layers" : {
		"sizes" : [ 64, 4, 8, 6, 10 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 64 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 64,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.025613, 0.154095, -0.121240, -0.021865 ],
			"coeffs_01" : [ 0.030234, -0.232588, 0.112691, -0.014523 ],
			"coeffs_02" : [ 0.231388, 0.036272, 0.274432, -0.069421 ],
			"coeffs_03" : [ 0.271579, -0.289571, -0.140721, 0.088627 ],
			"coeffs_04" : [ 0.132030, -0.168356, -0.174758, -0.251924 ],
			"coeffs_05" : [ 0.109842, -0.317639, -0.070401, -0.011922 ],
			"coeffs_06" : [ -0.063779, -0.291206, -0.123858, 0.221444 ],
			"coeffs_07" : [ -0.040878, 0.002450, -0.265979, 0.023940 ],
			"coeffs_08" : [ -0.124905, 0.075821, -0.059769, 0.160034 ],
			"coeffs_09" : [ -0.218576, 0.237206, -0.190897, 0.136619 ],
			"coeffs_10" : [ -0.234435, 0.136307, 0.097530, 0.245513 ],
			"coeffs_11" : [ -0.210625, -0.256088, 0.076603, 0.085283 ],
			"coeffs_12" : [ 0.173174, 0.227380, 0.201201, -0.209871 ],
			"coeffs_13" : [ 0.153104, 0.213977, -0.199746, 0.107556 ],
			"coeffs_14" : [ 0.077887, -0.004224, 0.065410, 0.139100 ],
			"coeffs_15" : [ -0.273783, 0.037486, 0.121673, 0.177920 ],
			"coeffs_16" : [ -0.287708, 0.172113, -0.165366, -0.240427 ],
			"coeffs_17" : [ 0.270528, 0.255610, -0.012561, -0.266093 ],
			"coeffs_18" : [ -0.033439, 0.256497, -0.216161, 0.092256 ],
			"coeffs_19" : [ 0.105577, 0.151104, 0.237111, -0.146298 ],
			"coeffs_20" : [ 0.095401, 0.184229, 0.192212, -0.035030 ],
			"coeffs_21" : [ -0.288410, 0.119710, -0.022974, -0.082434 ],
			"coeffs_22" : [ -0.238345, -0.309816, -0.133598, 0.237663 ],
			"coeffs_23" : [ 0.028409, -0.066349, -0.068791, -0.298138 ],
			"coeffs_24" : [ 0.098972, -0.090357, -0.115281, -0.060358 ],
			"coeffs_25" : [ 0.100235, -0.237791, -0.117939, 0.146649 ],
			"coeffs_26" : [ 0.171819, 0.226024, 0.192532, 0.146000 ],
			"coeffs_27" : [ -0.149248, 0.011451, 0.059973, 0.185705 ],
			"coeffs_28" : [ 0.123298, -0.021857, 0.146425, 0.185822 ],
			"coeffs_29" : [ 0.025390, -0.130186, -0.106712, -0.171952 ],
			"coeffs_30" : [ 0.128875, 0.136181, -0.229532, 0.069551 ],
			"coeffs_31" : [ -0.189299, -0.000784, 0.055791, -0.119526 ],
			"coeffs_32" : [ 0.135719, -0.280731, -0.267053, 0.221463 ],
			"coeffs_33" : [ 0.241377, -0.225272, -0.136924, -0.230105 ],
			"coeffs_34" : [ -0.252145, -0.253858, -0.123710, -0.060794 ],
			"coeffs_35" : [ -0.215187, -0.229082, -0.286925, 0.055933 ],
			"coeffs_36" : [ -0.213572, -0.252264, 0.033932, 0.086943 ],
			"coeffs_37" : [ -0.068988, 0.053384, 0.010240, -0.222088 ],
			"coeffs_38" : [ -0.073839, 0.217653, 0.269446, -0.072489 ],
			"coeffs_39" : [ -0.252666, -0.144333, 0.123827, -0.245958 ],
			"coeffs_40" : [ 0.102492, -0.157461, 0.273531, 0.285498 ],
			"coeffs_41" : [ -0.163601, 0.125124, -0.170760, 0.193602 ],
			"coeffs_42" : [ -0.278172, 0.149643, 0.034522, -0.185361 ],
			"coeffs_43" : [ 0.113496, 0.112980, -0.017462, -0.140093 ],
			"coeffs_44" : [ 0.224103, 0.231489, -0.144934, 0.032223 ],
			"coeffs_45" : [ 0.139410, 0.008517, -0.031286, 0.245081 ],
			"coeffs_46" : [ 0.085649, 0.094504, -0.237496, -0.065266 ],
			"coeffs_47" : [ 0.241957, 0.164243, -0.086117, -0.078452 ],
			"coeffs_48" : [ 0.184052, -0.183593, 0.038748, 0.219350 ],
			"coeffs_49" : [ -0.299293, -0.190492, -0.139037, -0.176644 ],
			"coeffs_50" : [ -0.145778, -0.032737, -0.216044, 0.159334 ],
			"coeffs_51" : [ 0.256944, 0.022827, -0.006752, 0.094173 ],
			"coeffs_52" : [ 0.005497, 0.116726, -0.001978, 0.154991 ],
			"coeffs_53" : [ 0.111793, -0.151962, -0.107975, -0.279819 ],
			"coeffs_54" : [ -0.179369, -0.203766, 0.101052, -0.066002 ],
			"coeffs_55" : [ -0.120360, -0.268608, 0.272328, -0.111468 ],
			"coeffs_56" : [ -0.095388, 0.073567, 0.137762, 0.106176 ],
			"coeffs_57" : [ -0.293925, 0.192176, 0.289771, 0.197045 ],
			"coeffs_58" : [ -0.005841, 0.270310, 0.213138, 0.057654 ],
			"coeffs_59" : [ -0.124146, 0.236444, -0.308258, -0.298650 ],
			"coeffs_60" : [ -0.055125, -0.043598, 0.090156, 0.220601 ],
			"coeffs_61" : [ 0.030320, -0.074832, -0.218577, -0.195610 ],
			"coeffs_62" : [ 0.053674, 0.083807, -0.242810, -0.059743 ],
			"coeffs_63" : [ 0.215113, -0.093293, 0.005261, -0.072528 ],
			"intercepts" : [ 0.080984, -0.178196, -0.025652, 0.179146 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.245516, 0.460738, 0.483940, 0.500495, 0.207351, -0.482540, -0.073451, -0.469820 ],
			"coeffs_1" : [ 0.291151, 0.170935, 0.669695, 0.380253, 0.623643, -0.375131, 0.136619, 0.433311 ],
			"coeffs_2" : [ 0.235853, 0.628908, -0.341594, 0.444128, 0.334126, 0.726802, -0.048545, 0.248787 ],
			"coeffs_3" : [ 0.439909, 0.374416, 0.417326, -0.670563, 0.233767, 0.616616, 0.134731, 0.577612 ],
			"intercepts" : [ -0.202136, 0.232265, -0.514895, 0.197103, -0.705470, 0.391429, 0.000051, 0.034664 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.292626, -0.574658, -0.474448, -0.196886, -0.456963, 0.262046 ],
			"coeffs_1" : [ -0.060282, -0.221255, -0.172889, 0.404107, 0.353595, -0.272955 ],
			"coeffs_2" : [ 0.325656, -0.557870, 0.522055, -0.152328, 0.160227, -0.401604 ],
			"coeffs_3" : [ -0.405995, 0.117362, -0.224890, 0.549532, -0.590324, -0.330454 ],
			"coeffs_4" : [ 0.267433, 0.044977, 0.425019, 0.403299, -0.394099, -0.446251 ],
			"coeffs_5" : [ -0.529935, 0.129291, 0.195065, 0.254770, -0.190328, 0.041223 ],
			"coeffs_6" : [ 0.596162, -0.495706, -0.203904, -0.206068, 0.012797, -0.212515 ],
			"coeffs_7" : [ -0.229642, -0.248821, -0.160378, 0.325162, 0.087162, -0.303818 ],
			"intercepts" : [ -0.220224, 0.010598, 0.544836, 0.049659, -0.514099, -0.314064 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 10 ,
			"coeffs_0" : [ -0.480950, 0.298996, -0.266631, -0.149180, -0.433969, 0.105552, -0.461217, -0.216545, 0.473519, -0.340167 ],
			"coeffs_1" : [ 0.578190, -0.353583, 0.222499, -0.414432, 0.287810, -0.300471, -0.349243, -0.340765, -0.595681, 0.137196 ],
			"coeffs_2" : [ -0.544157, 0.504067, -0.568559, -0.051077, 0.522786, 0.009926, -0.135802, -0.228073, 0.459990, -0.280637 ],
			"coeffs_3" : [ -0.368987, -0.270056, 0.049654, 0.404893, -0.043347, 0.198102, 0.360188, 0.309528, -0.404032, 0.280547 ],
			"coeffs_4" : [ -0.389083, 0.337891, -0.446701, -0.150599, 0.508040, -0.363815, -0.310573, 0.084499, 0.311561, 0.553982 ],
			"coeffs_5" : [ -0.288505, 0.013625, 0.608485, 0.500203, 0.465535, -0.136175, -0.291553, -0.266297, 0.116867, -0.521211 ],
			"intercepts" : [ -0.205104, -0.589861, -0.104577, -0.223243, -0.006699, -0.111442, 0.593925, 0.393669, -0.332480, 0.030241 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
	"dataset" : 	{
		"dataset_features" : 64,
		"dataset_rows" : 64
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 64,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 64,
			"NbOutputs" : 4,
			"coeffs_00" : [ -0.025613, 0.154095, -0.12124, -0.021865 ],
			"coeffs_01" : [ 0.030234, -0.232588, 0.112691, -0.014523 ],
			"coeffs_02" : [ 0.231388, 0.036272, 0.274432, -0.069421 ],
			"coeffs_03" : [ 0.271579, -0.289571, -0.140721, 0.088627 ],
			"coeffs_04" : [ 0.13203, -0.168356, -0.174758, -0.251924 ],
			"coeffs_05" : [ 0.109842, -0.317639, -0.070401, -0.011922 ],
			"coeffs_06" : [ -0.063779, -0.291206, -0.123858, 0.221444 ],
			"coeffs_07" : [ -0.040878, 0.00245, -0.265979, 0.02394 ],
			"coeffs_08" : [ -0.124905, 0.075821, -0.059769, 0.160034 ],
			"coeffs_09" : [ -0.218576, 0.237206, -0.190897, 0.136619 ],
			"coeffs_10" : [ -0.234435, 0.136307, 0.09753, 0.245513 ],
			"coeffs_11" : [ -0.210625, -0.256088, 0.076603, 0.085283 ],
			"coeffs_12" : [ 0.173174, 0.22738, 0.201201, -0.209871 ],
			"coeffs_13" : [ 0.153104, 0.213977, -0.199746, 0.107556 ],
			"coeffs_14" : [ 0.077887, -0.004224, 0.06541, 0.1391 ],
			"coeffs_15" : [ -0.273783, 0.037486, 0.121673, 0.17792 ],
			"coeffs_16" : [ -0.287708, 0.172113, -0.165366, -0.240427 ],
			"coeffs_17" : [ 0.270528, 0.25561, -0.012561, -0.266093 ],
			"coeffs_18" : [ -0.033439, 0.256497, -0.216161, 0.092256 ],
			"coeffs_19" : [ 0.105577, 0.151104, 0.237111, -0.146298 ],
			"coeffs_20" : [ 0.095401, 0.184229, 0.192212, -0.03503 ],
			"coeffs_21" : [ -0.28841, 0.11971, -0.022974, -0.082434 ],
			"coeffs_22" : [ -0.238345, -0.309816, -0.133598, 0.237663 ],
			"coeffs_23" : [ 0.028409, -0.066349, -0.068791, -0.298138 ],
			"coeffs_24" : [ 0.098972, -0.090357, -0.115281, -0.060358 ],
			"coeffs_25" : [ 0.100235, -0.237791, -0.117939, 0.146649 ],
			"coeffs_26" : [ 0.171819, 0.226024, 0.192532, 0.146 ],
			"coeffs_27" : [ -0.149248, 0.011451, 0.059973, 0.185705 ],
			"coeffs_28" : [ 0.123298, -0.021857, 0.146425, 0.185822 ],
			"coeffs_29" : [ 0.02539, -0.130186, -0.106712, -0.171952 ],
			"coeffs_30" : [ 0.128875, 0.136181, -0.229532, 0.069551 ],
			"coeffs_31" : [ -0.189299, -0.000784, 0.055791, -0.119526 ],
			"coeffs_32" : [ 0.135719, -0.280731, -0.267053, 0.221463 ],
			"coeffs_33" : [ 0.241377, -0.225272, -0.136924, -0.230105 ],
			"coeffs_34" : [ -0.252145, -0.253858, -0.12371, -0.060794 ],
			"coeffs_35" : [ -0.215187, -0.229082, -0.286925, 0.055933 ],
			"coeffs_36" : [ -0.213572, -0.252264, 0.033932, 0.086943 ],
			"coeffs_37" : [ -0.068988, 0.053384, 0.01024, -0.222088 ],
			"coeffs_38" : [ -0.073839, 0.217653, 0.269446, -0.072489 ],
			"coeffs_39" : [ -0.252666, -0.144333, 0.123827, -0.245958 ],
			"coeffs_40" : [ 0.102492, -0.157461, 0.273531, 0.285498 ],
			"coeffs_41" : [ -0.163601, 0.125124, -0.17076, 0.193602 ],
			"coeffs_42" : [ -0.278172, 0.149643, 0.034522, -0.185361 ],
			"coeffs_43" : [ 0.113496, 0.11298, -0.017462, -0.140093 ],
			"coeffs_44" : [ 0.224103, 0.231489, -0.144934, 0.032223 ],
			"coeffs_45" : [ 0.13941, 0.008517, -0.031286, 0.245081 ],
			"coeffs_46" : [ 0.085649, 0.094504, -0.237496, -0.065266 ],
			"coeffs_47" : [ 0.241957, 0.164243, -0.086117, -0.078452 ],
			"coeffs_48" : [ 0.184052, -0.183593, 0.038748, 0.21935 ],
			"coeffs_49" : [ -0.299293, -0.190492, -0.139037, -0.176644 ],
			"coeffs_50" : [ -0.145778, -0.032737, -0.216044, 0.159334 ],
			"coeffs_51" : [ 0.256944, 0.022827, -0.006752, 0.094173 ],
			"coeffs_52" : [ 0.005497, 0.116726, -0.001978, 0.154991 ],
			"coeffs_53" : [ 0.111793, -0.151962, -0.107975, -0.279819 ],
			"coeffs_54" : [ -0.179369, -0.203766, 0.101052, -0.066002 ],
			"coeffs_55" : [ -0.12036, -0.268608, 0.272328, -0.111468 ],
			"coeffs_56" : [ -0.095388, 0.073567, 0.137762, 0.106176 ],
			"coeffs_57" : [ -0.293925, 0.192176, 0.289771, 0.197045 ],
			"coeffs_58" : [ -0.005841, 0.27031, 0.213138, 0.057654 ],
			"coeffs_59" : [ -0.124146, 0.236444, -0.308258, -0.29865 ],
			"coeffs_60" : [ -0.055125, -0.043598, 0.090156, 0.220601 ],
			"coeffs_61" : [ 0.03032, -0.074832, -0.218577, -0.19561 ],
			"coeffs_62" : [ 0.053674, 0.083807, -0.24281, -0.059743 ],
			"coeffs_63" : [ 0.215113, -0.093293, 0.005261, -0.072528 ],
			"intercepts" : [ 0.080984, -0.178196, -0.025652, 0.179146 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.245516, 0.460738, 0.48394, 0.500495, 0.207351, -0.48254, -0.073451, -0.46982 ],
			"coeffs_1" : [ 0.291151, 0.170935, 0.669695, 0.380253, 0.623643, -0.375131, 0.136619, 0.433311 ],
			"coeffs_2" : [ 0.235853, 0.628908, -0.341594, 0.444128, 0.334126, 0.726802, -0.048545, 0.248787 ],
			"coeffs_3" : [ 0.439909, 0.374416, 0.417326, -0.670563, 0.233767, 0.616616, 0.134731, 0.577612 ],
			"intercepts" : [ -0.202136, 0.232265, -0.514895, 0.197103, -0.70547, 0.391429, 5.1e-05, 0.034664 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ 0.292626, -0.574658, -0.474448, -0.196886, -0.456963, 0.262046 ],
			"coeffs_1" : [ -0.060282, -0.221255, -0.172889, 0.404107, 0.353595, -0.272955 ],
			"coeffs_2" : [ 0.325656, -0.55787, 0.522055, -0.152328, 0.160227, -0.401604 ],
			"coeffs_3" : [ -0.405995, 0.117362, -0.22489, 0.549532, -0.590324, -0.330454 ],
			"coeffs_4" : [ 0.267433, 0.044977, 0.425019, 0.403299, -0.394099, -0.446251 ],
			"coeffs_5" : [ -0.529935, 0.129291, 0.195065, 0.25477, -0.190328, 0.041223 ],
			"coeffs_6" : [ 0.596162, -0.495706, -0.203904, -0.206068, 0.012797, -0.212515 ],
			"coeffs_7" : [ -0.229642, -0.248821, -0.160378, 0.325162, 0.087162, -0.303818 ],
			"intercepts" : [ -0.220224, 0.010598, 0.544836, 0.049659, -0.514099, -0.314064 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 10,
			"coeffs_0" : [ -0.48095, 0.298996, -0.266631, -0.14918, -0.433969, 0.105552, -0.461217, -0.216545, 0.473519, -0.340167 ],
			"coeffs_1" : [ 0.57819, -0.353583, 0.222499, -0.414432, 0.28781, -0.300471, -0.349243, -0.340765, -0.595681, 0.137196 ],
			"coeffs_2" : [ -0.544157, 0.504067, -0.568559, -0.051077, 0.522786, 0.009926, -0.135802, -0.228073, 0.45999, -0.280637 ],
			"coeffs_3" : [ -0.368987, -0.270056, 0.049654, 0.404893, -0.043347, 0.198102, 0.360188, 0.309528, -0.404032, 0.280547 ],
			"coeffs_4" : [ -0.389083, 0.337891, -0.446701, -0.150599, 0.50804, -0.363815, -0.310573, 0.084499, 0.311561, 0.553982 ],
			"coeffs_5" : [ -0.288505, 0.013625, 0.608485, 0.500203, 0.465535, -0.136175, -0.291553, -0.266297, 0.116867, -0.521211 ],
			"intercepts" : [ -0.205104, -0.589861, -0.104577, -0.223243, -0.006699, -0.111442, 0.593925, 0.393669, -0.33248, 0.030241 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 64, 4, 8, 6, 10 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[5.330e-02 6.420e-02 6.710e-02 8.790e-02 1.280e-01 9.450e-02 1.875e-01
  1.435e-01 7.680e-02 9.720e-02]
 [2.500e-03 1.298e-01 1.650e-02 1.443e-01 6.050e-02 1.997e-01 1.033e-01
  1.224e-01 1.706e-01 5.040e-02]
 [1.390e-02 3.140e-02 4.590e-02 1.451e-01 7.880e-02 1.098e-01 2.506e-01
  1.842e-01 2.990e-02 1.105e-01]
 [3.000e-04 6.300e-02 6.100e-03 2.583e-01 6.820e-02 2.034e-01 1.601e-01
  1.381e-01 5.170e-02 5.090e-02]
 [1.000e-04 2.137e-01 2.500e-03 1.147e-01 2.520e-02 2.256e-01 3.110e-02
  5.370e-02 3.191e-01 1.440e-02]
 [7.400e-03 5.050e-02 3.330e-02 1.623e-01 7.600e-02 1.443e-01 2.067e-01
  1.754e-01 5.200e-02 9.210e-02]
 [1.810e-02 3.550e-02 4.720e-02 1.316e-01 9.940e-02 1.019e-01 2.502e-01
  1.738e-01 3.390e-02 1.085e-01]
 [7.400e-03 5.450e-02 2.920e-02 1.552e-01 1.018e-01 1.330e-01 2.139e-01
  1.637e-01 5.310e-02 8.830e-02]
 [1.910e-02 2.340e-02 5.560e-02 1.354e-01 7.170e-02 9.530e-02 2.682e-01
  1.889e-01 2.180e-02 1.206e-01]
 [1.990e-02 3.240e-02 5.080e-02 1.300e-01 9.340e-02 9.910e-02 2.543e-01
  1.769e-01 3.100e-02 1.121e-01]
 [5.210e-02 5.840e-02 6.960e-02 9.150e-02 1.176e-01 9.520e-02 1.954e-01
  1.501e-01 6.960e-02 1.006e-01]
 [2.550e-02 2.850e-02 6.170e-02 1.250e-01 7.870e-02 9.620e-02 2.536e-01
  1.836e-01 2.820e-02 1.190e-01]
 [3.000e-04 6.640e-02 5.400e-03 2.625e-01 6.660e-02 2.101e-01 1.523e-01
  1.339e-01 5.470e-02 4.790e-02]
 [1.570e-02 2.060e-02 5.180e-02 1.420e-01 6.730e-02 9.440e-02 2.770e-01
  1.917e-01 1.840e-02 1.211e-01]
 [2.390e-02 6.750e-02 5.030e-02 1.141e-01 1.068e-01 1.193e-01 1.899e-01
  1.562e-01 7.860e-02 9.330e-02]
 [3.000e-03 1.095e-01 1.800e-02 1.552e-01 7.470e-02 1.872e-01 1.289e-01
  1.343e-01 1.306e-01 5.860e-02]
 [5.330e-02 6.420e-02 6.710e-02 8.790e-02 1.280e-01 9.450e-02 1.875e-01
  1.435e-01 7.680e-02 9.720e-02]
 [6.000e-04 5.780e-02 8.500e-03 2.419e-01 7.100e-02 1.894e-01 1.755e-01
  1.479e-01 4.860e-02 5.880e-02]
 [2.000e-04 6.100e-02 4.200e-03 2.846e-01 6.050e-02 2.162e-01 1.495e-01
  1.313e-01 4.780e-02 4.470e-02]
 [3.000e-02 4.590e-02 5.660e-02 1.121e-01 1.120e-01 9.940e-02 2.265e-01
  1.634e-01 4.830e-02 1.057e-01]
 [3.000e-03 1.540e-02 2.380e-02 2.001e-01 5.540e-02 1.063e-01 2.904e-01
  1.909e-01 1.120e-02 1.035e-01]
 [2.100e-02 2.500e-02 5.770e-02 1.319e-01 7.410e-02 9.570e-02 2.634e-01
  1.872e-01 2.380e-02 1.201e-01]
 [4.600e-03 5.340e-02 2.350e-02 1.715e-01 9.590e-02 1.418e-01 2.121e-01
  1.634e-01 5.010e-02 8.360e-02]
 [5.330e-02 6.420e-02 6.710e-02 8.790e-02 1.280e-01 9.450e-02 1.875e-01
  1.435e-01 7.680e-02 9.720e-02]
 [9.000e-04 7.990e-02 1.020e-02 2.131e-01 7.020e-02 2.013e-01 1.498e-01
  1.412e-01 7.730e-02 5.600e-02]
 [0.000e+00 1.616e-01 2.000e-03 1.958e-01 3.030e-02 2.795e-01 5.010e-02
  7.370e-02 1.881e-01 1.880e-02]
 [2.900e-03 1.134e-01 1.740e-02 1.532e-01 7.560e-02 1.872e-01 1.258e-01
  1.315e-01 1.359e-01 5.710e-02]
 [5.330e-02 6.420e-02 6.710e-02 8.790e-02 1.280e-01 9.450e-02 1.875e-01
  1.435e-01 7.680e-02 9.720e-02]
 [2.810e-02 2.610e-02 6.730e-02 1.230e-01 7.140e-02 9.450e-02 2.538e-01
  1.870e-01 2.620e-02 1.224e-01]
 [5.000e-03 7.860e-02 2.690e-02 1.613e-01 6.800e-02 1.759e-01 1.587e-01
  1.591e-01 9.140e-02 7.510e-02]
 [1.660e-02 5.960e-02 4.300e-02 1.278e-01 1.059e-01 1.220e-01 2.047e-01
  1.616e-01 6.450e-02 9.420e-02]
 [5.330e-02 6.420e-02 6.710e-02 8.790e-02 1.280e-01 9.450e-02 1.875e-01
  1.435e-01 7.680e-02 9.720e-02]
 [3.000e-04 1.159e-01 6.000e-03 2.089e-01 4.430e-02 2.511e-01 9.280e-02
  1.140e-01 1.294e-01 3.730e-02]
 [7.500e-03 1.000e-02 4.140e-02 1.666e-01 4.300e-02 8.540e-02 3.102e-01
  2.036e-01 7.600e-03 1.248e-01]
 [2.140e-02 3.300e-02 5.270e-02 1.277e-01 9.310e-02 9.890e-02 2.519e-01
  1.767e-01 3.200e-02 1.125e-01]
 [2.940e-02 4.570e-02 5.610e-02 1.127e-01 1.122e-01 9.950e-02 2.272e-01
  1.635e-01 4.800e-02 1.056e-01]
 [6.600e-03 1.192e-01 2.730e-02 1.272e-01 6.800e-02 1.768e-01 1.173e-01
  1.329e-01 1.631e-01 6.170e-02]
 [3.200e-03 5.860e-02 1.930e-02 1.815e-01 9.330e-02 1.528e-01 2.004e-01
  1.589e-01 5.470e-02 7.710e-02]
 [0.000e+00 2.402e-01 3.000e-04 9.820e-02 7.800e-03 2.418e-01 9.300e-03
  2.330e-02 3.752e-01 3.900e-03]
 [6.700e-03 1.140e-02 3.720e-02 1.697e-01 4.970e-02 8.790e-02 3.096e-01
  1.988e-01 8.600e-03 1.203e-01]
 [2.100e-03 4.090e-02 1.670e-02 2.061e-01 8.020e-02 1.477e-01 2.238e-01
  1.679e-01 3.420e-02 8.020e-02]
 [5.330e-02 6.420e-02 6.710e-02 8.790e-02 1.280e-01 9.450e-02 1.875e-01
  1.435e-01 7.680e-02 9.720e-02]
 [5.330e-02 6.420e-02 6.710e-02 8.790e-02 1.280e-01 9.450e-02 1.875e-01
  1.435e-01 7.680e-02 9.720e-02]
 [4.780e-02 4.400e-02 7.500e-02 1.004e-01 9.590e-02 9.540e-02 2.150e-01
  1.653e-01 5.030e-02 1.109e-01]
 [4.400e-03 4.890e-02 2.340e-02 1.748e-01 9.360e-02 1.393e-01 2.193e-01
  1.661e-01 4.480e-02 8.540e-02]
 [1.890e-02 9.750e-02 4.390e-02 1.097e-01 9.430e-02 1.387e-01 1.485e-01
  1.423e-01 1.281e-01 7.830e-02]
 [0.000e+00 2.069e-01 6.000e-04 1.128e-01 6.700e-03 2.757e-01 1.230e-02
  3.280e-02 3.462e-01 5.900e-03]
 [1.120e-02 5.210e-02 3.560e-02 1.423e-01 1.056e-01 1.230e-01 2.195e-01
  1.649e-01 5.200e-02 9.380e-02]
 [5.330e-02 6.420e-02 6.710e-02 8.790e-02 1.280e-01 9.450e-02 1.875e-01
  1.435e-01 7.680e-02 9.720e-02]
 [2.000e-03 3.430e-02 1.770e-02 2.143e-01 6.640e-02 1.483e-01 2.286e-01
  1.761e-01 2.860e-02 8.370e-02]
 [1.660e-02 4.770e-02 4.320e-02 1.309e-01 1.077e-01 1.123e-01 2.271e-01
  1.664e-01 4.810e-02 1.000e-01]
 [2.900e-03 5.040e-02 1.910e-02 1.885e-01 8.950e-02 1.487e-01 2.124e-01
  1.635e-01 4.510e-02 7.990e-02]
 [0.000e+00 5.270e-02 1.500e-03 3.621e-01 4.150e-02 2.467e-01 1.196e-01
  1.100e-01 3.590e-02 3.000e-02]
 [2.800e-03 5.930e-02 1.800e-02 1.862e-01 9.180e-02 1.563e-01 1.979e-01
  1.578e-01 5.490e-02 7.520e-02]
 [5.190e-02 5.660e-02 7.050e-02 9.240e-02 1.147e-01 9.520e-02 1.977e-01
  1.519e-01 6.710e-02 1.019e-01]
 [1.000e-04 5.760e-02 2.400e-03 3.258e-01 4.780e-02 2.374e-01 1.305e-01
  1.200e-01 4.250e-02 3.590e-02]
 [4.450e-02 4.190e-02 7.350e-02 1.034e-01 9.390e-02 9.570e-02 2.199e-01
  1.679e-01 4.710e-02 1.122e-01]
 [4.300e-03 5.720e-02 2.250e-02 1.719e-01 9.650e-02 1.456e-01 2.056e-01
  1.609e-01 5.420e-02 8.120e-02]
 [0.000e+00 9.210e-02 3.000e-04 3.633e-01 1.860e-02 3.389e-01 4.500e-02
  6.090e-02 7.020e-02 1.070e-02]
 [3.360e-02 4.680e-02 6.000e-02 1.086e-01 1.106e-01 9.870e-02 2.224e-01
  1.627e-01 5.040e-02 1.061e-01]
 [2.520e-02 3.300e-02 5.820e-02 1.232e-01 8.930e-02 9.800e-02 2.479e-01
  1.777e-01 3.290e-02 1.146e-01]
 [1.540e-02 2.350e-02 4.900e-02 1.413e-01 7.570e-02 9.630e-02 2.731e-01
  1.871e-01 2.110e-02 1.175e-01]
 [1.300e-03 8.820e-02 1.190e-02 1.948e-01 7.620e-02 1.949e-01 1.468e-01
  1.392e-01 8.950e-02 5.720e-02]
 [0.000e+00 1.684e-01 1.000e-04 1.546e-01 1.900e-03 3.810e-01 6.000e-03
  2.230e-02 2.632e-01 2.500e-03]]
(64, 10)
(64, 10) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'digits_small', 'size': 64, 'accuracy': 0.15625, 'auc': 0.5119934322497149}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'digits_small', 'training_time_in_sec': 0.023, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('digits_small', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('digits_small', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('digits_small', 'MLPClassifier', 'duckdb')
ore_6" AS "Score_6",
  arg_max_cte."Proba_6" AS "Proba_6",
  CASE WHEN (arg_max_cte."Proba_6" IS NULL OR arg_max_cte."Proba_6" > 0.0) THEN LN( arg_max_cte."Proba_6" ) ELSE -1.79769313486231e+308 END AS "LogProba_6",
  arg_max_cte."Score_7" AS "Score_7",
  arg_max_cte."Proba_7" AS "Proba_7",
  CASE WHEN (arg_max_cte."Proba_7" IS NULL OR arg_max_cte."Proba_7" > 0.0) THEN LN( arg_max_cte."Proba_7" ) ELSE -1.79769313486231e+308 END AS "LogProba_7",
  arg_max_cte."Score_8" AS "Score_8",
  arg_max_cte."Proba_8" AS "Proba_8",
  CASE WHEN (arg_max_cte."Proba_8" IS NULL OR arg_max_cte."Proba_8" > 0.0) THEN LN( arg_max_cte."Proba_8" ) ELSE -1.79769313486231e+308 END AS "LogProba_8",
  arg_max_cte."Score_9" AS "Score_9",
  arg_max_cte."Proba_9" AS "Proba_9",
  CASE WHEN (arg_max_cte."Proba_9" IS NULL OR arg_max_cte."Proba_9" > 0.0) THEN LN( arg_max_cte."Proba_9" ) ELSE -1.79769313486231e+308 END AS "LogProba_9",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('digits_small', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 64 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
 14  X_14    64 non-null     float32
 15  X_15    64 non-null     float32
 16  X_16    64 non-null     float32
 17  X_17    64 non-null     float32
 18  X_18    64 non-null     float32
 19  X_19    64 non-null     float32
 20  X_20    64 non-null     float32
 21  X_21    64 non-null     float32
 22  X_22    64 non-null     float32
 23  X_23    64 non-null     float32
 24  X_24    64 non-null     float32
 25  X_25    64 non-null     float32
 26  X_26    64 non-null     float32
 27  X_27    64 non-null     float32
 28  X_28    64 non-null     float32
 29  X_29    64 non-null     float32
 30  X_30    64 non-null     float32
 31  X_31    64 non-null     float32
 32  X_32    64 non-null     float32
 33  X_33    64 non-null     float32
 34  X_34    64 non-null     float32
 35  X_35    64 non-null     float32
 36  X_36    64 non-null     float32
 37  X_37    64 non-null     float32
 38  X_38    64 non-null     float32
 39  X_39    64 non-null     float32
 40  X_40    64 non-null     float32
 41  X_41    64 non-null     float32
 42  X_42    64 non-null     float32
 43  X_43    64 non-null     float32
 44  X_44    64 non-null     float32
 45  X_45    64 non-null     float32
 46  X_46    64 non-null     float32
 47  X_47    64 non-null     float32
 48  X_48    64 non-null     float32
 49  X_49    64 non-null     float32
 50  X_50    64 non-null     float32
 51  X_51    64 non-null     float32
 52  X_52    64 non-null     float32
 53  X_53    64 non-null     float32
 54  X_54    64 non-null     float32
 55  X_55    64 non-null     float32
 56  X_56    64 non-null     float32
 57  X_57    64 non-null     float32
 58  X_58    64 non-null     float32
 59  X_59    64 non-null     float32
 60  X_60    64 non-null     float32
 61  X_61    64 non-null     float32
 62  X_62    64 non-null     float32
 63  X_63    64 non-null     float32
dtypes: float32(64)
memory usage: 16.5 KB
       X_0  X_1   X_2   X_3   X_4   X_5  ...  X_58  X_59  X_60  X_61  X_62  X_63
index                                    ...                                    
0      0.0  0.0   0.0   3.0  15.0  10.0  ...   0.0   4.0   9.0  14.0   7.0   0.0
1      0.0  0.0  11.0  10.0   0.0   0.0  ...   8.0  16.0  16.0  16.0  16.0  12.0
2      0.0  0.0   0.0  15.0  11.0   0.0  ...   0.0  14.0   4.0   0.0   0.0   0.0
3      0.0  0.0   7.0  13.0  10.0   1.0  ...   7.0  13.0  16.0  15.0   4.0   0.0
4      0.0  0.0   5.0  12.0  13.0   2.0  ...   6.0  16.0  13.0   3.0   0.0   0.0
...    ...  ...   ...   ...   ...   ...  ...   ...   ...   ...   ...   ...   ...
59     0.0  0.0   0.0   0.0  13.0  11.0  ...   0.0   0.0  12.0  11.0   0.0   0.0
60     0.0  0.0  12.0  16.0  16.0   7.0  ...  10.0  12.0  12.0   4.0   0.0   0.0
61     0.0  0.0   1.0   7.0   6.0  11.0  ...   1.0  10.0   8.0   1.0   0.0   0.0
62     0.0  0.0  10.0   7.0  13.0   9.0  ...  11.0  14.0   5.0   0.0   0.0   0.0
63     0.0  3.0  15.0   8.0   8.0   6.0  ...  15.0  14.0   1.0   0.0   0.0   0.0

[64 rows x 64 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 33 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Score_2        64 non-null     float64
 8   Proba_2        64 non-null     float64
 9   LogProba_2     64 non-null     float64
 10  Score_3        64 non-null     float64
 11  Proba_3        64 non-null     float64
 12  LogProba_3     64 non-null     float64
 13  Score_4        64 non-null     float64
 14  Proba_4        64 non-null     float64
 15  LogProba_4     64 non-null     float64
 16  Score_5        64 non-null     float64
 17  Proba_5        64 non-null     float64
 18  LogProba_5     64 non-null     float64
 19  Score_6        64 non-null     float64
 20  Proba_6        64 non-null     float64
 21  LogProba_6     64 non-null     float64
 22  Score_7        64 non-null     float64
 23  Proba_7        64 non-null     float64
 24  LogProba_7     64 non-null     float64
 25  Score_8        64 non-null     float64
 26  Proba_8        64 non-null     float64
 27  LogProba_8     64 non-null     float64
 28  Score_9        64 non-null     float64
 29  Proba_9        64 non-null     float64
 30  LogProba_9     64 non-null     float64
 31  Decision       64 non-null     int64  
 32  DecisionProba  64 non-null     float64
dtypes: float64(31), int64(2)
memory usage: 16.6 KB
    index    Score_0       Proba_0  ...  LogProba_9  Decision  DecisionProba
0       0  -0.613953  5.330431e-02  ...   -2.331480         6       0.187534
1       1  -3.594113  2.515152e-03  ...   -2.987027         5       0.199744
2       2  -1.646188  1.385492e-02  ...   -2.203073         6       0.250600
3       3  -5.148741  3.181534e-04  ...   -2.977641         3       0.258263
4       4  -6.227901  1.093435e-04  ...   -4.243113         8       0.319087
..    ...        ...           ...  ...         ...       ...            ...
59     59  -0.949395  3.363724e-02  ...   -2.243349         6       0.222379
60     60  -1.111188  2.520179e-02  ...   -2.166458         6       0.247896
61     61  -1.432875  1.542345e-02  ...   -2.141185         6       0.273058
62     62  -4.076744  1.264217e-03  ...   -2.860902         5       0.194937
63     63 -11.623697  1.624623e-07  ...   -5.988315         5       0.381036

[64 rows x 33 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Score_4', 'Proba_4', 'LogProba_4', 'Score_5', 'Proba_5',
       'LogProba_5', 'Score_6', 'Proba_6', 'LogProba_6', 'Score_7', 'Proba_7',
       'LogProba_7', 'Score_8', 'Proba_8', 'LogProba_8', 'Score_9', 'Proba_9',
       'LogProba_9', 'Decision', 'DecisionProba'],
      dtype='object')
    index    Score_0   SQL_Proba_0  ...  Py_Proba_8  Py_Proba_9  Py_Decision
48     48  -0.613953  5.330431e-02  ...    0.076765    0.097152            6
49     49  -3.400089  1.964726e-03  ...    0.028588    0.083719            6
50     50  -1.596456  1.656703e-02  ...    0.048104    0.100013            6
51     51  -3.152125  2.941784e-03  ...    0.045133    0.079862            6
52     52  -7.441414  1.981799e-05  ...    0.035891    0.029955            3
53     53  -3.263164  2.750855e-03  ...    0.054892    0.075244            6
54     54  -0.612099  5.194217e-02  ...    0.067128    0.101907            6
55     55  -6.682459  5.090024e-05  ...    0.042478    0.035923            3
56     56  -0.683319  4.445078e-02  ...    0.047055    0.112219            6
57     57  -2.855477  4.319301e-03  ...    0.054248    0.081163            6
58     58 -10.103500  9.782497e-07  ...    0.070238    0.010707            3
59     59  -0.949395  3.363724e-02  ...    0.050444    0.106103            6
60     60  -1.111188  2.520179e-02  ...    0.032914    0.114583            6
61     61  -1.432875  1.542345e-02  ...    0.021080    0.117516            6
62     62  -4.076744  1.264217e-03  ...    0.089494    0.057217            5
63     63 -11.623697  1.624623e-07  ...    0.263201    0.002508            5

[16 rows x 44 columns]
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 2.5630373770359854e-08
      Py_Proba_0   SQL_Proba_0   SQL_Error_0
48  5.330433e-02  5.330431e-02  2.035906e-08
49  1.964737e-03  1.964726e-03  1.054548e-08
50  1.656708e-02  1.656703e-02  4.200556e-08
51  2.941784e-03  2.941784e-03 -3.992923e-11
52  1.981820e-05  1.981799e-05  2.044235e-10
53  2.750883e-03  2.750855e-03  2.810113e-08
54  5.194219e-02  5.194217e-02  1.914551e-08
55  5.090038e-05  5.090024e-05  1.367073e-10
56  4.445074e-02  4.445078e-02 -3.183011e-08
57  4.319328e-03  4.319301e-03  2.654849e-08
58  9.782547e-07  9.782497e-07  4.941915e-12
59  3.363738e-02  3.363724e-02  1.400472e-07
60  2.520177e-02  2.520179e-02 -1.674958e-08
61  1.542340e-02  1.542345e-02 -4.634685e-08
62  1.264218e-03  1.264217e-03  1.249679e-09
63  1.624624e-07  1.624623e-07  7.229639e-14
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 2.0496388537728956e-07
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
48    0.064153     0.064153  1.336685e-08
49    0.034339     0.034339 -1.397251e-07
50    0.047705     0.047705 -6.704253e-08
51    0.050391     0.050391 -7.759134e-08
52    0.052684     0.052685 -2.098641e-07
53    0.059251     0.059251 -1.203893e-07
54    0.056575     0.056575  2.155022e-07
55    0.057649     0.057649  1.694396e-07
56    0.041853     0.041854 -1.171854e-07
57    0.057211     0.057211 -8.732493e-08
58    0.092058     0.092058  6.175821e-07
59    0.046806     0.046806  3.491983e-08
60    0.032972     0.032973 -1.718216e-07
61    0.023473     0.023473 -1.402238e-07
62    0.088233     0.088232  3.411884e-07
63    0.168353     0.168352  1.439447e-06
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 5.2719615627532027e-08
    Py_Proba_2  SQL_Proba_2   SQL_Error_2
48    0.067143     0.067143 -5.292227e-08
49    0.017715     0.017715  3.664515e-08
50    0.043247     0.043247 -2.368952e-08
51    0.019107     0.019108 -4.077117e-08
52    0.001476     0.001476  4.065286e-09
53    0.017983     0.017983  4.818016e-08
54    0.070499     0.070500 -1.724924e-07
55    0.002425     0.002425 -3.878349e-09
56    0.073540     0.073540 -2.467424e-08
57    0.022479     0.022479  2.398156e-08
58    0.000273     0.000273 -1.717090e-10
59    0.059973     0.059973  4.296198e-08
60    0.058173     0.058173 -3.154755e-08
61    0.048969     0.048969 -1.099558e-07
62    0.011908     0.011908 -1.353000e-08
63    0.000103     0.000103 -5.448252e-10
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_3', 'SQL_Proba_3') 3.37906138318236e-07
    Py_Proba_3  SQL_Proba_3   SQL_Error_3
48    0.087920     0.087920  5.583607e-08
49    0.214252     0.214252  4.793018e-07
50    0.130850     0.130850  9.865187e-08
51    0.188532     0.188531  5.827976e-07
52    0.362114     0.362112  1.415546e-06
53    0.186154     0.186154  1.321506e-07
54    0.092408     0.092408 -4.372021e-08
55    0.325787     0.325786  1.024908e-06
56    0.103355     0.103355  1.557527e-07
57    0.171870     0.171870  2.649085e-07
58    0.363319     0.363318  5.517113e-07
59    0.108650     0.108650  1.765448e-08
60    0.123245     0.123245  2.642540e-07
61    0.141341     0.141341  3.866052e-07
62    0.194756     0.194755  3.224332e-07
63    0.154600     0.154601 -9.693701e-07
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_4', 'SQL_Proba_4') 1.3994944885912936e-07
    Py_Proba_4  SQL_Proba_4   SQL_Error_4
48    0.128023     0.128023 -7.467510e-10
49    0.066394     0.066394 -3.864952e-07
50    0.107742     0.107742 -4.850125e-08
51    0.089476     0.089476 -1.243545e-07
52    0.041470     0.041470 -9.772327e-08
53    0.091778     0.091778 -1.695235e-08
54    0.114721     0.114720  2.977779e-07
55    0.047793     0.047793 -2.628738e-07
56    0.093924     0.093924 -2.222272e-07
57    0.096501     0.096501 -1.379921e-08
58    0.018613     0.018613 -1.532463e-07
59    0.110624     0.110624 -5.264771e-08
60    0.089293     0.089294 -4.008030e-07
61    0.075718     0.075719 -3.489373e-07
62    0.076182     0.076182 -2.513219e-07
63    0.001895     0.001895 -2.136823e-08
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_5', 'SQL_Proba_5') 2.684425276927582e-07
    Py_Proba_5  SQL_Proba_5   SQL_Error_5
48    0.094479     0.094479 -4.512027e-08
49    0.148262     0.148262 -2.871781e-07
50    0.112260     0.112260 -2.306695e-07
51    0.148673     0.148674 -2.400060e-07
52    0.246738     0.246739 -1.091404e-06
53    0.156266     0.156266 -5.238785e-07
54    0.095236     0.095236 -5.882679e-08
55    0.237435     0.237435 -2.649395e-07
56    0.095736     0.095736 -6.033565e-08
57    0.145633     0.145633 -3.292736e-07
58    0.338934     0.338935 -7.073182e-07
59    0.098684     0.098684 -7.452183e-08
60    0.097974     0.097974 -1.333616e-07
61    0.096328     0.096328 -1.929379e-07
62    0.194937     0.194937  2.696611e-08
63    0.381034     0.381036 -2.012945e-06
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_6', 'SQL_Proba_6') 2.1223687266422818e-07
    Py_Proba_6  SQL_Proba_6   SQL_Error_6
48    0.187534     0.187534 -2.627993e-09
49    0.228634     0.228634 -2.360512e-07
50    0.227146     0.227146  3.804560e-09
51    0.212369     0.212369 -7.409881e-08
52    0.119616     0.119616 -1.003342e-07
53    0.197851     0.197851  3.805052e-08
54    0.197659     0.197660 -2.342287e-07
55    0.130493     0.130493 -6.948198e-07
56    0.219931     0.219931  1.801474e-07
57    0.205630     0.205630  4.568905e-08
58    0.044998     0.044999 -4.265414e-07
59    0.222379     0.222379 -1.302784e-07
60    0.247896     0.247896  1.894150e-07
61    0.273058     0.273058  1.762744e-07
62    0.146844     0.146844 -5.851195e-07
63    0.005983     0.005983 -1.086592e-07
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_7', 'SQL_Proba_7') 1.3845701846729131e-07
    Py_Proba_7  SQL_Proba_7   SQL_Error_7
48    0.143527     0.143527 -2.552134e-08
49    0.176132     0.176132  2.166738e-07
50    0.166363     0.166363 -5.209072e-09
51    0.163515     0.163515  7.593189e-08
52    0.110037     0.110036  1.663933e-07
53    0.157829     0.157829  6.593744e-08
54    0.151924     0.151925 -2.339140e-07
55    0.119967     0.119967 -7.785853e-08
56    0.167935     0.167935  1.191837e-07
57    0.160944     0.160944  9.407236e-08
58    0.060859     0.060859 -1.430407e-07
59    0.162700     0.162700 -1.460382e-08
60    0.177747     0.177747  1.680009e-07
61    0.187094     0.187093  1.369436e-07
62    0.139165     0.139166 -9.143840e-08
63    0.022323     0.022323 -2.293889e-07
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_8', 'SQL_Proba_8') 3.4045971071457745e-07
    Py_Proba_8  SQL_Proba_8   SQL_Error_8
48    0.076765     0.076765 -6.157318e-08
49    0.028588     0.028588 -1.681663e-07
50    0.048104     0.048104 -1.474673e-07
51    0.045133     0.045133 -1.818299e-07
52    0.035891     0.035892 -2.694241e-07
53    0.054892     0.054892 -2.141204e-07
54    0.067128     0.067128  2.255556e-07
55    0.042478     0.042478  4.268779e-08
56    0.047055     0.047055 -1.960691e-07
57    0.054248     0.054248 -1.815085e-07
58    0.070238     0.070237  3.358746e-07
59    0.050444     0.050444  7.125986e-09
60    0.032914     0.032915 -2.414514e-07
61    0.021080     0.021080 -1.905984e-07
62    0.089494     0.089494  3.049035e-07
63    0.263201     0.263199  2.125689e-06
MLLITE_CLASS_SQL_ERROR ('digits_small', 'MLPClassifier', 'duckdb') ('Py_Proba_9', 'SQL_Proba_9') 1.818947813114603e-07
    Py_Proba_9  SQL_Proba_9   SQL_Error_9
48    0.097152     0.097152  4.307048e-08
49    0.083719     0.083718  3.347514e-07
50    0.100013     0.100013  1.527372e-07
51    0.079862     0.079862  1.900910e-07
52    0.029955     0.029955  2.108336e-07
53    0.075244     0.075244  2.926043e-07
54    0.101907     0.101907 -8.557969e-08
55    0.035923     0.035923  8.081137e-08
56    0.112219     0.112219  1.823367e-07
57    0.081163     0.081163  2.507699e-07
58    0.010707     0.010707  1.579127e-08
59    0.106103     0.106103  1.187493e-07
60    0.114583     0.114583  2.734820e-07
61    0.117516     0.117516  2.695722e-07
62    0.057217     0.057217  3.733552e-08
63    0.002508     0.002508 -1.753541e-08
MLLITE_CLASS_SQL_EXECUTION_STATUS ('digits_small', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
48            6             6
49            6             6
50            6             6
51            6             6
52            3             3
53            6             6
54            6             6
55            3             3
56            6             6
57            6             6
58            3             3
59            6             6
60            6             6
61            6             6
62            5             5
63            5             5
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('digits_small', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('digits_small', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('digits_small', 'MLPClassifier', 'sqlite')
ore_6" AS "Score_6",
  arg_max_cte."Proba_6" AS "Proba_6",
  CASE WHEN (arg_max_cte."Proba_6" IS NULL OR arg_max_cte."Proba_6" > 0.0) THEN LN( arg_max_cte."Proba_6" ) ELSE -1.79769313486231e+308 END AS "LogProba_6",
  arg_max_cte."Score_7" AS "Score_7",
  arg_max_cte."Proba_7" AS "Proba_7",
  CASE WHEN (arg_max_cte."Proba_7" IS NULL OR arg_max_cte."Proba_7" > 0.0) THEN LN( arg_max_cte."Proba_7" ) ELSE -1.79769313486231e+308 END AS "LogProba_7",
  arg_max_cte."Score_8" AS "Score_8",
  arg_max_cte."Proba_8" AS "Proba_8",
  CASE WHEN (arg_max_cte."Proba_8" IS NULL OR arg_max_cte."Proba_8" > 0.0) THEN LN( arg_max_cte."Proba_8" ) ELSE -1.79769313486231e+308 END AS "LogProba_8",
  arg_max_cte."Score_9" AS "Score_9",
  arg_max_cte."Proba_9" AS "Proba_9",
  CASE WHEN (arg_max_cte."Proba_9" IS NULL OR arg_max_cte."Proba_9" > 0.0) THEN LN( arg_max_cte."Proba_9" ) ELSE -1.79769313486231e+308 END AS "LogProba_9",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('digits_small', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 64 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
 14  X_14    64 non-null     float32
 15  X_15    64 non-null     float32
 16  X_16    64 non-null     float32
 17  X_17    64 non-null     float32
 18  X_18    64 non-null     float32
 19  X_19    64 non-null     float32
 20  X_20    64 non-null     float32
 21  X_21    64 non-null     float32
 22  X_22    64 non-null     float32
 23  X_23    64 non-null     float32
 24  X_24    64 non-null     float32
 25  X_25    64 non-null     float32
 26  X_26    64 non-null     float32
 27  X_27    64 non-null     float32
 28  X_28    64 non-null     float32
 29  X_29    64 non-null     float32
 30  X_30    64 non-null     float32
 31  X_31    64 non-null     float32
 32  X_32    64 non-null     float32
 33  X_33    64 non-null     float32
 34  X_34    64 non-null     float32
 35  X_35    64 non-null     float32
 36  X_36    64 non-null     float32
 37  X_37    64 non-null     float32
 38  X_38    64 non-null     float32
 39  X_39    64 non-null     float32
 40  X_40    64 non-null     float32
 41  X_41    64 non-null     float32
 42  X_42    64 non-null     float32
 43  X_43    64 non-null     float32
 44  X_44    64 non-null     float32
 45  X_45    64 non-null     float32
 46  X_46    64 non-null     float32
 47  X_47    64 non-null     float32
 48  X_48    64 non-null     float32
 49  X_49    64 non-null     float32
 50  X_50    64 non-null     float32
 51  X_51    64 non-null     float32
 52  X_52    64 non-null     float32
 53  X_53    64 non-null     float32
 54  X_54    64 non-null     float32
 55  X_55    64 non-null     float32
 56  X_56    64 non-null     float32
 57  X_57    64 non-null     float32
 58  X_58    64 non-null     float32
 59  X_59    64 non-null     float32
 60  X_60    64 non-null     float32
 61  X_61    64 non-null     float32
 62  X_62    64 non-null     float32
 63  X_63    64 non-null     float32
dtypes: float32(64)
memory usage: 16.5 KB
       X_0  X_1   X_2   X_3   X_4   X_5  ...  X_58  X_59  X_60  X_61  X_62  X_63
index                                    ...                                    
0      0.0  0.0   0.0   3.0  15.0  10.0  ...   0.0   4.0   9.0  14.0   7.0   0.0
1      0.0  0.0  11.0  10.0   0.0   0.0  ...   8.0  16.0  16.0  16.0  16.0  12.0
2      0.0  0.0   0.0  15.0  11.0   0.0  ...   0.0  14.0   4.0   0.0   0.0   0.0
3      0.0  0.0   7.0  13.0  10.0   1.0  ...   7.0  13.0  16.0  15.0   4.0   0.0
4      0.0  0.0   5.0  12.0  13.0   2.0  ...   6.0  16.0  13.0   3.0   0.0   0.0
...    ...  ...   ...   ...   ...   ...  ...   ...   ...   ...   ...   ...   ...
59     0.0  0.0   0.0   0.0  13.0  11.0  ...   0.0   0.0  12.0  11.0   0.0   0.0
60     0.0  0.0  12.0  16.0  16.0   7.0  ...  10.0  12.0  12.0   4.0   0.0   0.0
61     0.0  0.0   1.0   7.0   6.0  11.0  ...   1.0  10.0   8.0   1.0   0.0   0.0
62     0.0  0.0  10.0   7.0  13.0   9.0  ...  11.0  14.0   5.0   0.0   0.0   0.0
63     0.0  3.0  15.0   8.0   8.0   6.0  ...  15.0  14.0   1.0   0.0   0.0   0.0

[64 rows x 64 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('digits_small', 'MLPClassifier', 'sqlite', '')
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_small_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('digits_small', 'MLPClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('digits_small', 'MLPClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('digits_small', 'MLPClassifier', 'pgsql')
ore_6" AS "Score_6",
  arg_max_cte."Proba_6" AS "Proba_6",
  CASE WHEN (arg_max_cte."Proba_6" IS NULL OR arg_max_cte."Proba_6" > 0.0) THEN LN( arg_max_cte."Proba_6" ) ELSE -1.79769313486231e+308 END AS "LogProba_6",
  arg_max_cte."Score_7" AS "Score_7",
  arg_max_cte."Proba_7" AS "Proba_7",
  CASE WHEN (arg_max_cte."Proba_7" IS NULL OR arg_max_cte."Proba_7" > 0.0) THEN LN( arg_max_cte."Proba_7" ) ELSE -1.79769313486231e+308 END AS "LogProba_7",
  arg_max_cte."Score_8" AS "Score_8",
  arg_max_cte."Proba_8" AS "Proba_8",
  CASE WHEN (arg_max_cte."Proba_8" IS NULL OR arg_max_cte."Proba_8" > 0.0) THEN LN( arg_max_cte."Proba_8" ) ELSE -1.79769313486231e+308 END AS "LogProba_8",
  arg_max_cte."Score_9" AS "Score_9",
  arg_max_cte."Proba_9" AS "Proba_9",
  CASE WHEN (arg_max_cte."Proba_9" IS NULL OR arg_max_cte."Proba_9" > 0.0) THEN LN( arg_max_cte."Proba_9" ) ELSE -1.79769313486231e+308 END AS "LogProba_9",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('digits_small', 'MLPClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
