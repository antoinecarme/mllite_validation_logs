         X_0       X_1       X_2  ...       X_8       X_9  target
0  -1.064559 -0.820872 -0.723270  ... -0.319080 -0.383915       0
1  -0.960957 -1.294560 -0.778172  ...  0.207019 -0.945521       0
2  -1.406136 -0.242116  1.301289  ... -1.426875  1.876952       1
3  -1.954561 -1.845000  0.508844  ... -1.374292  2.746056       0
4  -0.098659 -1.731538  2.272469  ...  1.740497  0.199837       1
..       ...       ...       ...  ...       ...       ...     ...
59  1.123207  0.820741  0.307790  ... -2.114189  0.674955       0
60  0.648423 -0.244695 -0.012258  ...  1.591133  0.415493       0
61 -1.537976 -0.863574 -0.339109  ... -0.932955 -0.606641       0
62  1.719474 -0.751864 -1.224318  ... -0.611486  0.366529       0
63 -0.263412  1.788292  0.201192  ...  1.138708 -1.061928       0

[64 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[-1.0645586  -0.8208718  -0.72327    -0.09642018 -0.40463343 -0.81522477
  -0.8386918   0.65200984 -0.31908    -0.3839149 ]
 [-0.9609572  -1.2945602  -0.77817184  0.8359748  -1.0189681  -0.12086504
  -0.68072116 -0.5189585   0.20701888 -0.9455213 ]
 [-1.4061359  -0.24211647  1.301289   -0.49436462  1.0264262   1.0800456
   1.3956257  -1.0432675  -1.426875    1.8769516 ]
 [-1.9545612  -1.8449999   0.5088439  -0.224022    0.66320896  0.0830382
   0.446295    0.53221494 -1.3742915   2.7460556 ]
 [-0.09865901 -1.7315376   2.2724695   0.11809641  1.0834117   2.8048902
   2.7064822   0.84583855  1.7404972   0.19983661]] [0 0 1 0 1]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.02, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"classes" : [ 0, 1 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.028945, 0.320245, -0.240343, -0.020679 ],
			"coeffs_1" : [ 0.148922, -0.428118, 0.157738, 0.012377 ],
			"coeffs_2" : [ 0.528552, 0.108835, 0.513059, -0.129960 ],
			"coeffs_3" : [ 0.682523, -0.611359, -0.243452, 0.262280 ],
			"coeffs_4" : [ 0.317586, -0.284791, -0.301309, -0.477448 ],
			"coeffs_5" : [ 0.253232, -0.676195, -0.135887, 0.000870 ],
			"coeffs_6" : [ -0.159950, -0.624751, -0.366572, 0.506571 ],
			"coeffs_7" : [ -0.076920, -0.025585, -0.555058, 0.005560 ],
			"coeffs_8" : [ -0.230923, 0.249304, -0.163006, 0.245923 ],
			"coeffs_9" : [ -0.401846, 0.548746, -0.509767, 0.323726 ],
			"intercepts" : [ -0.498634, 0.333562, 0.124075, 0.565054 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.414124, -0.571225, 0.208713, 0.226926, 0.506359, 0.576761, 0.510514, -0.427938 ],
			"coeffs_1" : [ 0.419535, 0.610041, -0.404080, 0.347542, 0.237268, 0.085404, 0.060578, 0.433607 ],
			"coeffs_2" : [ -0.575574, 0.061683, 0.259782, 0.439537, -0.576240, 0.460100, -0.423645, -0.624048 ],
			"coeffs_3" : [ 0.725988, 0.644113, -0.066343, -0.542009, -0.030885, 0.646590, -0.537752, 0.267293 ],
			"intercepts" : [ 0.347818, 0.386922, 0.648893, -0.325761, 0.324354, 0.467526, 0.488607, -0.063532 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.610739, 0.295983, -0.013462, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.269021, 0.559774, 0.011921, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.187506, -0.230424, -0.276114, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.180173, 0.410173, 0.463206, 0.557300, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.308302, 0.031086, 0.176267, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.346660, 0.423948, 0.087599, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313824, 0.335130, -0.426020, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.100558, -0.292984, 0.286161, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.562908, -0.464268, -0.264176, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.277210 ],
			"coeffs_1" : [ -0.181720 ],
			"coeffs_2" : [ -0.617984 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.789899 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576409 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"classes" : [ 0, 1 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.028945, 0.320245, -0.240343, -0.020679 ],
			"coeffs_1" : [ 0.148922, -0.428118, 0.157738, 0.012377 ],
			"coeffs_2" : [ 0.528552, 0.108835, 0.513059, -0.129960 ],
			"coeffs_3" : [ 0.682523, -0.611359, -0.243452, 0.262280 ],
			"coeffs_4" : [ 0.317586, -0.284791, -0.301309, -0.477448 ],
			"coeffs_5" : [ 0.253232, -0.676195, -0.135887, 0.000870 ],
			"coeffs_6" : [ -0.159950, -0.624751, -0.366572, 0.506571 ],
			"coeffs_7" : [ -0.076920, -0.025585, -0.555058, 0.005560 ],
			"coeffs_8" : [ -0.230923, 0.249304, -0.163006, 0.245923 ],
			"coeffs_9" : [ -0.401846, 0.548746, -0.509767, 0.323726 ],
			"intercepts" : [ -0.498634, 0.333562, 0.124075, 0.565054 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.414124, -0.571225, 0.208713, 0.226926, 0.506359, 0.576761, 0.510514, -0.427938 ],
			"coeffs_1" : [ 0.419535, 0.610041, -0.404080, 0.347542, 0.237268, 0.085404, 0.060578, 0.433607 ],
			"coeffs_2" : [ -0.575574, 0.061683, 0.259782, 0.439537, -0.576240, 0.460100, -0.423645, -0.624048 ],
			"coeffs_3" : [ 0.725988, 0.644113, -0.066343, -0.542009, -0.030885, 0.646590, -0.537752, 0.267293 ],
			"intercepts" : [ 0.347818, 0.386922, 0.648893, -0.325761, 0.324354, 0.467526, 0.488607, -0.063532 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.610739, 0.295983, -0.013462, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.269021, 0.559774, 0.011921, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.187506, -0.230424, -0.276114, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.180173, 0.410173, 0.463206, 0.557300, 0.475690, 0.371699 ],
			"coeffs_4" : [ -0.308302, 0.031086, 0.176267, 0.443776, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.346660, 0.423948, 0.087599, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313824, 0.335130, -0.426020, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.100558, -0.292984, 0.286161, -0.618701, -0.588556, 0.488080 ],
			"intercepts" : [ 0.562908, -0.464268, -0.264176, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.277210 ],
			"coeffs_1" : [ -0.181720 ],
			"coeffs_2" : [ -0.617984 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.789899 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576409 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 64
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.028945, 0.320245, -0.240343, -0.020679 ],
			"coeffs_1" : [ 0.148922, -0.428118, 0.157738, 0.012377 ],
			"coeffs_2" : [ 0.528552, 0.108835, 0.513059, -0.12996 ],
			"coeffs_3" : [ 0.682523, -0.611359, -0.243452, 0.26228 ],
			"coeffs_4" : [ 0.317586, -0.284791, -0.301309, -0.477448 ],
			"coeffs_5" : [ 0.253232, -0.676195, -0.135887, 0.00087 ],
			"coeffs_6" : [ -0.15995, -0.624751, -0.366572, 0.506571 ],
			"coeffs_7" : [ -0.07692, -0.025585, -0.555058, 0.00556 ],
			"coeffs_8" : [ -0.230923, 0.249304, -0.163006, 0.245923 ],
			"coeffs_9" : [ -0.401846, 0.548746, -0.509767, 0.323726 ],
			"intercepts" : [ -0.498634, 0.333562, 0.124075, 0.565054 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.414124, -0.571225, 0.208713, 0.226926, 0.506359, 0.576761, 0.510514, -0.427938 ],
			"coeffs_1" : [ 0.419535, 0.610041, -0.40408, 0.347542, 0.237268, 0.085404, 0.060578, 0.433607 ],
			"coeffs_2" : [ -0.575574, 0.061683, 0.259782, 0.439537, -0.57624, 0.4601, -0.423645, -0.624048 ],
			"coeffs_3" : [ 0.725988, 0.644113, -0.066343, -0.542009, -0.030885, 0.64659, -0.537752, 0.267293 ],
			"intercepts" : [ 0.347818, 0.386922, 0.648893, -0.325761, 0.324354, 0.467526, 0.488607, -0.063532 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.610739, 0.295983, -0.013462, -0.124039, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.269021, 0.559774, 0.011921, -0.133482, -0.151607, -0.586402 ],
			"coeffs_2" : [ 0.187506, -0.230424, -0.276114, -0.133022, 0.269611, -0.462554 ],
			"coeffs_3" : [ -0.180173, 0.410173, 0.463206, 0.5573, 0.47569, 0.371699 ],
			"coeffs_4" : [ -0.308302, 0.031086, 0.176267, 0.443776, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.34666, 0.423948, 0.087599, -0.225065, -0.178974, -0.324393 ],
			"coeffs_6" : [ 0.313824, 0.33513, -0.42602, 0.212193, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.100558, -0.292984, 0.286161, -0.618701, -0.588556, 0.48808 ],
			"intercepts" : [ 0.562908, -0.464268, -0.264176, -0.494865, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.27721 ],
			"coeffs_1" : [ -0.18172 ],
			"coeffs_2" : [ -0.617984 ],
			"coeffs_3" : [ -0.667527 ],
			"coeffs_4" : [ -0.789899 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576409 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.6785 0.3215]
 [0.7032 0.2968]
 [0.6768 0.3232]
 [0.7079 0.2921]
 [0.6923 0.3077]
 [0.7011 0.2989]
 [0.6877 0.3123]
 [0.7183 0.2817]
 [0.688  0.312 ]
 [0.6856 0.3144]
 [0.7145 0.2855]
 [0.6912 0.3088]
 [0.7839 0.2161]
 [0.7456 0.2544]
 [0.7284 0.2716]
 [0.7352 0.2648]
 [0.689  0.311 ]
 [0.6821 0.3179]
 [0.7272 0.2728]
 [0.7061 0.2939]
 [0.6756 0.3244]
 [0.6971 0.3029]
 [0.7259 0.2741]
 [0.678  0.322 ]
 [0.6944 0.3056]
 [0.6736 0.3264]
 [0.7255 0.2745]
 [0.728  0.272 ]
 [0.6749 0.3251]
 [0.6889 0.3111]
 [0.7031 0.2969]
 [0.6752 0.3248]
 [0.6823 0.3177]
 [0.6887 0.3113]
 [0.6975 0.3025]
 [0.6996 0.3004]
 [0.6768 0.3232]
 [0.7402 0.2598]
 [0.6945 0.3055]
 [0.677  0.323 ]
 [0.6941 0.3059]
 [0.6768 0.3232]
 [0.6963 0.3037]
 [0.7595 0.2405]
 [0.6787 0.3213]
 [0.7264 0.2736]
 [0.6821 0.3179]
 [0.691  0.309 ]
 [0.6848 0.3152]
 [0.7439 0.2561]
 [0.6922 0.3078]
 [0.7514 0.2486]
 [0.7163 0.2837]
 [0.7535 0.2465]
 [0.674  0.326 ]
 [0.7323 0.2677]
 [0.6738 0.3262]
 [0.7068 0.2932]
 [0.7159 0.2841]
 [0.6973 0.3027]
 [0.6915 0.3085]
 [0.7254 0.2746]
 [0.7707 0.2293]
 [0.6997 0.3003]]
(64, 2)
(64,) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'BinaryClass_10_small', 'size': 64, 'accuracy': 0.5, 'auc': 0.611328125}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'BinaryClass_10_small', 'training_time_in_sec': 0.02, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_10_small', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498634 + -0.028945 * t."OUT_0"  + 0.148922 * t."OUT_1"  + 0.528552 * t."OUT_2"  + 0.682523 * t."OUT_3"  + 0.317586 * t."OUT_4"  + 0.253232 * t."OUT_5"  + -0.159950 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_10_small', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_10_small', 'MLPClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_10_small', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.064559 -0.820872 -0.723270  ...  0.652010 -0.319080 -0.383915
1     -0.960957 -1.294560 -0.778172  ... -0.518959  0.207019 -0.945521
2     -1.406136 -0.242116  1.301289  ... -1.043267 -1.426875  1.876952
3     -1.954561 -1.845000  0.508844  ...  0.532215 -1.374292  2.746056
4     -0.098659 -1.731538  2.272470  ...  0.845839  1.740497  0.199837
...         ...       ...       ...  ...       ...       ...       ...
59     1.123207  0.820741  0.307790  ... -0.348400 -2.114189  0.674955
60     0.648423 -0.244695 -0.012258  ...  0.520360  1.591133  0.415493
61    -1.537976 -0.863574 -0.339109  ... -1.807600 -0.932955 -0.606641
62     1.719474 -0.751864 -1.224318  ...  0.148196 -0.611486  0.366529
63    -0.263412  1.788292  0.201192  ... -0.413903  1.138708 -1.061929

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Decision       64 non-null     int64  
 8   DecisionProba  64 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 4.6 KB
    index   Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0  0.373412  0.678486  ...   -1.134715         0       0.678486
1       1  0.431329  0.703216  ...   -1.214749         0       0.703216
2       2  0.369539  0.676794  ...   -1.129466         0       0.676794
3       3  0.442562  0.707883  ...   -1.230600         0       0.707883
4       4  0.405536  0.692338  ...   -1.178753         0       0.692338
..    ...       ...       ...  ...         ...       ...            ...
59     59  0.417203  0.697286  ...   -1.194966         0       0.697286
60     60  0.403461  0.691453  ...   -1.175882         0       0.691453
61     61  0.485705  0.725401  ...   -1.292442         0       0.725401
62     62  0.606000  0.770653  ...   -1.472517         0       0.770653
63     63  0.422923  0.699695  ...   -1.202956         0       0.699695

[64 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
48     48  0.387950     0.684796  ...    0.684796    0.315204            0
49     49  0.533193     0.743909  ...    0.743909    0.256091            0
50     50  0.405249     0.692216  ...    0.692216    0.307784            0
51     51  0.552995     0.751381  ...    0.751381    0.248619            0
52     52  0.463210     0.716348  ...    0.716349    0.283651            0
53     53  0.558777     0.753535  ...    0.753535    0.246465            0
54     54  0.363266     0.674044  ...    0.674044    0.325956            0
55     55  0.503058     0.732260  ...    0.732260    0.267740            0
56     56  0.362629     0.673764  ...    0.673764    0.326236            0
57     57  0.440053     0.706844  ...    0.706844    0.293156            0
58     58  0.461988     0.715852  ...    0.715852    0.284148            0
59     59  0.417203     0.697286  ...    0.697286    0.302714            0
60     60  0.403461     0.691453  ...    0.691453    0.308547            0
61     61  0.485705     0.725401  ...    0.725401    0.274599            0
62     62  0.606000     0.770653  ...    0.770652    0.229348            0
63     63  0.422923     0.699695  ...    0.699695    0.300305            0

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_small', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 5.702156487784327e-08
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
48    0.684796     0.684796  3.602276e-08
49    0.743909     0.743909 -1.830738e-07
50    0.692216     0.692216 -7.336941e-08
51    0.751381     0.751381 -9.564913e-08
52    0.716349     0.716348  3.248227e-08
53    0.753535     0.753535 -5.632504e-08
54    0.674044     0.674044 -5.689887e-08
55    0.732260     0.732260  8.740030e-09
56    0.673764     0.673764 -7.279929e-08
57    0.706844     0.706844 -4.790515e-08
58    0.715852     0.715852 -3.174391e-08
59    0.697286     0.697286 -2.290425e-10
60    0.691453     0.691453 -4.996277e-08
61    0.725401     0.725401  1.778226e-09
62    0.770652     0.770653 -1.602966e-07
63    0.699695     0.699695 -2.310964e-08
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_small', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 5.1892748659330273e-08
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
48    0.315204     0.315204 -3.602276e-08
49    0.256091     0.256091  1.830738e-07
50    0.307784     0.307784  1.031717e-07
51    0.248619     0.248619  6.584681e-08
52    0.283651     0.283652 -3.248227e-08
53    0.246465     0.246465  4.142388e-08
54    0.325956     0.325956  2.709655e-08
55    0.267740     0.267740 -3.854235e-08
56    0.326236     0.326236  4.299697e-08
57    0.293156     0.293156  4.790515e-08
58    0.284148     0.284148  1.941590e-09
59    0.302714     0.302714  3.003136e-08
60    0.308547     0.308547  2.016044e-08
61    0.274599     0.274599 -1.778226e-09
62    0.229348     0.229347  1.453955e-07
63    0.300305     0.300305 -6.692679e-09
MLLITE_CLASS_SQL_EXECUTION_STATUS ('BinaryClass_10_small', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
48            0             0
49            0             0
50            0             0
51            0             0
52            0             0
53            0             0
54            0             0
55            0             0
56            0             0
57            0             0
58            0             0
59            0             0
60            0             0
61            0             0
62            0             0
63            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_10_small', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498634 + -0.028945 * t."OUT_0"  + 0.148922 * t."OUT_1"  + 0.528552 * t."OUT_2"  + 0.682523 * t."OUT_3"  + 0.317586 * t."OUT_4"  + 0.253232 * t."OUT_5"  + -0.159950 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_10_small', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_10_small', 'MLPClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_10_small', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.064559 -0.820872 -0.723270  ...  0.652010 -0.319080 -0.383915
1     -0.960957 -1.294560 -0.778172  ... -0.518959  0.207019 -0.945521
2     -1.406136 -0.242116  1.301289  ... -1.043267 -1.426875  1.876952
3     -1.954561 -1.845000  0.508844  ...  0.532215 -1.374292  2.746056
4     -0.098659 -1.731538  2.272470  ...  0.845839  1.740497  0.199837
...         ...       ...       ...  ...       ...       ...       ...
59     1.123207  0.820741  0.307790  ... -0.348400 -2.114189  0.674955
60     0.648423 -0.244695 -0.012258  ...  0.520360  1.591133  0.415493
61    -1.537976 -0.863574 -0.339109  ... -1.807600 -0.932955 -0.606641
62     1.719474 -0.751864 -1.224318  ...  0.148196 -0.611486  0.366529
63    -0.263412  1.788292  0.201192  ... -0.413903  1.138708 -1.061929

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Decision       64 non-null     int64  
 8   DecisionProba  64 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 4.6 KB
    index   Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0  0.373412  0.678486  ...   -1.134715         0       0.678486
1       1  0.431329  0.703216  ...   -1.214749         0       0.703216
2       2  0.369539  0.676794  ...   -1.129466         0       0.676794
3       3  0.442562  0.707883  ...   -1.230600         0       0.707883
4       4  0.405536  0.692338  ...   -1.178753         0       0.692338
..    ...       ...       ...  ...         ...       ...            ...
59     59  0.417203  0.697286  ...   -1.194966         0       0.697286
60     60  0.403461  0.691453  ...   -1.175882         0       0.691453
61     61  0.485705  0.725401  ...   -1.292442         0       0.725401
62     62  0.606000  0.770653  ...   -1.472517         0       0.770653
63     63  0.422923  0.699695  ...   -1.202956         0       0.699695

[64 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
48     48  0.387950     0.684796  ...    0.684796    0.315204            0
49     49  0.533193     0.743909  ...    0.743909    0.256091            0
50     50  0.405249     0.692216  ...    0.692216    0.307784            0
51     51  0.552995     0.751381  ...    0.751381    0.248619            0
52     52  0.463210     0.716349  ...    0.716349    0.283651            0
53     53  0.558777     0.753535  ...    0.753535    0.246465            0
54     54  0.363266     0.674044  ...    0.674044    0.325956            0
55     55  0.503058     0.732260  ...    0.732260    0.267740            0
56     56  0.362629     0.673764  ...    0.673764    0.326236            0
57     57  0.440053     0.706844  ...    0.706844    0.293156            0
58     58  0.461988     0.715852  ...    0.715852    0.284148            0
59     59  0.417203     0.697286  ...    0.697286    0.302714            0
60     60  0.403461     0.691453  ...    0.691453    0.308547            0
61     61  0.485705     0.725401  ...    0.725401    0.274599            0
62     62  0.606000     0.770653  ...    0.770652    0.229348            0
63     63  0.422923     0.699695  ...    0.699695    0.300305            0

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_small', 'MLPClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 5.868168543622654e-08
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
48    0.684796     0.684796  2.391346e-08
49    0.743909     0.743909 -1.771163e-07
50    0.692216     0.692216 -6.026656e-08
51    0.751381     0.751381 -1.051998e-07
52    0.716349     0.716349  2.867146e-08
53    0.753535     0.753535 -8.392179e-08
54    0.674044     0.674044 -5.163531e-08
55    0.732260     0.732260 -2.786693e-09
56    0.673764     0.673764 -7.979544e-08
57    0.706844     0.706844 -4.657935e-08
58    0.715852     0.715852 -3.882647e-08
59    0.697286     0.697286 -1.658841e-09
60    0.691453     0.691453 -5.509246e-08
61    0.725401     0.725401 -9.388771e-09
62    0.770652     0.770653 -1.659257e-07
63    0.699695     0.699695 -2.207986e-08
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_small', 'MLPClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 5.369251578155737e-08
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
48    0.315204     0.315204 -2.391346e-08
49    0.256091     0.256091  1.771163e-07
50    0.307784     0.307784  9.006888e-08
51    0.248619     0.248619  7.539743e-08
52    0.283651     0.283651 -2.867146e-08
53    0.246465     0.246465  6.902063e-08
54    0.325956     0.325956  2.183299e-08
55    0.267740     0.267740 -2.701563e-08
56    0.326236     0.326236  4.999312e-08
57    0.293156     0.293156  4.657935e-08
58    0.284148     0.284148  9.024145e-09
59    0.302714     0.302714  3.146116e-08
60    0.308547     0.308547  2.529014e-08
61    0.274599     0.274599  9.388771e-09
62    0.229348     0.229347  1.510245e-07
63    0.300305     0.300305 -7.722466e-09
MLLITE_CLASS_SQL_EXECUTION_STATUS ('BinaryClass_10_small', 'MLPClassifier', 'sqlite', 'Success')
    Py_Decision  SQL_Decision
48            0             0
49            0             0
50            0             0
51            0             0
52            0             0
53            0             0
54            0             0
55            0             0
56            0             0
57            0             0
58            0             0
59            0             0
60            0             0
61            0             0
62            0             0
63            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_small_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_10_small', 'MLPClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498634 + -0.028945 * t."OUT_0"  + 0.148922 * t."OUT_1"  + 0.528552 * t."OUT_2"  + 0.682523 * t."OUT_3"  + 0.317586 * t."OUT_4"  + 0.253232 * t."OUT_5"  + -0.159950 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_10_small', 'MLPClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_10_small', 'MLPClassifier', 'pgsql')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_10_small', 'MLPClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
