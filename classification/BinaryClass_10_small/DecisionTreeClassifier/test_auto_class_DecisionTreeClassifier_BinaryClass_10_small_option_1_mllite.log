READING_CSV BinaryClass_10_small ['data/small/BinaryClass_10_small.csv']
         X_0       X_1       X_2  ...       X_8       X_9  target
0  -1.064559 -0.820872 -0.723270  ... -0.319080 -0.383915       0
1  -0.960957 -1.294560 -0.778172  ...  0.207019 -0.945521       0
2  -1.406136 -0.242116  1.301289  ... -1.426875  1.876952       1
3  -1.954561 -1.845000  0.508844  ... -1.374292  2.746056       0
4  -0.098659 -1.731538  2.272469  ...  1.740497  0.199837       1
..       ...       ...       ...  ...       ...       ...     ...
59  1.123207  0.820741  0.307790  ... -2.114189  0.674955       0
60  0.648423 -0.244695 -0.012258  ...  1.591133  0.415493       0
61 -1.537976 -0.863574 -0.339109  ... -0.932955 -0.606641       0
62  1.719474 -0.751864 -1.224318  ... -0.611486  0.366529       0
63 -0.263412  1.788292  0.201192  ...  1.138708 -1.061928       0

[64 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS DecisionTreeClassifier {"max_depth" : 6, "max_leaf_nodes" : 32}
MLLITE_MODEL_OPTIONS_DEFAULT DecisionTreeClassifier { "max_leaf_nodes" : 64}
MLLITE_MODEL_OPTIONS_AFTER_SETTING DecisionTreeClassifier { "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
MLLITE_MODEL_JSON_AFTER_SETTING DecisionTreeClassifier None
('OPERATION_START', 'TRAINING')
[[-1.0645586  -0.8208718  -0.72327    -0.09642018 -0.40463343 -0.81522477
  -0.8386918   0.65200984 -0.31908    -0.3839149 ]
 [-0.9609572  -1.2945602  -0.77817184  0.8359748  -1.0189681  -0.12086504
  -0.68072116 -0.5189585   0.20701888 -0.9455213 ]
 [-1.4061359  -0.24211647  1.301289   -0.49436462  1.0264262   1.0800456
   1.3956257  -1.0432675  -1.426875    1.8769516 ]
 [-1.9545612  -1.8449999   0.5088439  -0.224022    0.66320896  0.0830382
   0.446295    0.53221494 -1.3742915   2.7460556 ]
 [-0.09865901 -1.7315376   2.2724695   0.11809641  1.0834117   2.8048902
   2.7064822   0.84583855  1.7404972   0.19983661]] [0 0 1 0 1]
MLLITE_FIT_USING_MODEL mllite_decision_tree_class.DecisionTreeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 0 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 4 4
('OPERATION_END_ELAPSED', 0.007, 'TRAINING')
{ "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
{ "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
{
	"metadata" : { "model" : "Breiman_CART", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "ccp_alpha" : 0.000000, "criterion" : "", "max_depth" : 6, "max_features" : null, "max_leaf_nodes" : 32, "min_impurity_decrease" : 0.000000, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.000000, "random_state" : 1789, "splitter" : "best" },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"classes" : [ 0, 1 ],
	"tree" : {
	"features" : 10,
	"outputs" : 2,
	"max_depth" : 5,
	"node_count" : 23,
	"nodes" : {
		"node_00" : {"left" : 1, "right" : 2, "feature" : 5, "threshold" : 0.347646, "impurity" : 0.500000, "n_samples" : 64, "w_samples" : 64.000000, "value" : [0.500000, 0.500000]},
		"node_01" : {"left" : 3, "right" : 4, "feature" : 3, "threshold" : -0.906461, "impurity" : 0.300554, "n_samples" : 38, "w_samples" : 38.000000, "value" : [0.815789, 0.184211]},
		"node_02" : {"left" : 11, "right" : 12, "feature" : 0, "threshold" : -1.760986, "impurity" : 0.073964, "n_samples" : 26, "w_samples" : 26.000000, "value" : [0.038462, 0.961538]},
		"node_03" : {"left" : 5, "right" : 6, "feature" : 2, "threshold" : -0.451156, "impurity" : 0.375000, "n_samples" : 4, "w_samples" : 4.000000, "value" : [0.250000, 0.750000]},
		"node_04" : {"left" : 7, "right" : 8, "feature" : 8, "threshold" : 0.956837, "impurity" : 0.207612, "n_samples" : 34, "w_samples" : 34.000000, "value" : [0.882353, 0.117647]},
		"node_05" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [1.000000, 0.000000]},
		"node_06" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 1.000000]},
		"node_07" : {"left" : 15, "right" : 16, "feature" : 1, "threshold" : -1.901256, "impurity" : 0.128419, "n_samples" : 29, "w_samples" : 29.000000, "value" : [0.931035, 0.068966]},
		"node_08" : {"left" : 9, "right" : 10, "feature" : 0, "threshold" : -0.449138, "impurity" : 0.480000, "n_samples" : 5, "w_samples" : 5.000000, "value" : [0.600000, 0.400000]},
		"node_09" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 1.000000]},
		"node_10" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [1.000000, 0.000000]},
		"node_11" : {"left" : 13, "right" : 14, "feature" : 0, "threshold" : -2.275254, "impurity" : 0.444444, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.333333, 0.666667]},
		"node_12" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 23, "w_samples" : 23.000000, "value" : [0.000000, 1.000000]},
		"node_13" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 1.000000]},
		"node_14" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [1.000000, 0.000000]},
		"node_15" : {"left" : 17, "right" : 18, "feature" : 3, "threshold" : 0.353989, "impurity" : 0.444444, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.666667, 0.333333]},
		"node_16" : {"left" : 19, "right" : 20, "feature" : 9, "threshold" : 0.453250, "impurity" : 0.073964, "n_samples" : 26, "w_samples" : 26.000000, "value" : [0.961538, 0.038462]},
		"node_17" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [1.000000, 0.000000]},
		"node_18" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 1.000000]},
		"node_19" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 20, "w_samples" : 20.000000, "value" : [1.000000, 0.000000]},
		"node_20" : {"left" : 21, "right" : 22, "feature" : 9, "threshold" : 0.564435, "impurity" : 0.277778, "n_samples" : 6, "w_samples" : 6.000000, "value" : [0.833333, 0.166667]},
		"node_21" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 1.000000]},
		"node_22" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 5, "w_samples" : 5.000000, "value" : [1.000000, 0.000000]}
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_BinaryClass_10_small_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('BinaryClass_10_small', 'DecisionTreeClassifier')
MLLITE_MODEL_SET_OPTIONS DecisionTreeClassifier {"max_depth" : 6, "max_leaf_nodes" : 32}
MLLITE_MODEL_OPTIONS_DEFAULT DecisionTreeClassifier { "max_leaf_nodes" : 64}
MLLITE_MODEL_OPTIONS_AFTER_SETTING DecisionTreeClassifier { "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
MLLITE_MODEL_JSON_AFTER_SETTING DecisionTreeClassifier None
MLLITE_RELOADING_MODEL mllite_decision_tree_class.DecisionTreeClassifier_ff4_il8
{
	"metadata" : { "model" : "Breiman_CART", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "ccp_alpha" : 0.000000, "criterion" : "", "max_depth" : 6, "max_features" : null, "max_leaf_nodes" : 32, "min_impurity_decrease" : 0.000000, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.000000, "random_state" : 1789, "splitter" : "best" },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"classes" : [ 0, 1 ],
	"tree" : {
	"features" : 10,
	"outputs" : 2,
	"max_depth" : 5,
	"node_count" : 23,
	"nodes" : {
		"node_00" : {"left" : 1, "right" : 2, "feature" : 5, "threshold" : 0.347646, "impurity" : 0.500000, "n_samples" : 64, "w_samples" : 64.000000, "value" : [0.500000, 0.500000]},
		"node_01" : {"left" : 3, "right" : 4, "feature" : 3, "threshold" : -0.906461, "impurity" : 0.300554, "n_samples" : 38, "w_samples" : 38.000000, "value" : [0.815789, 0.184211]},
		"node_02" : {"left" : 11, "right" : 12, "feature" : 0, "threshold" : -1.760986, "impurity" : 0.073964, "n_samples" : 26, "w_samples" : 26.000000, "value" : [0.038462, 0.961538]},
		"node_03" : {"left" : 5, "right" : 6, "feature" : 2, "threshold" : -0.451156, "impurity" : 0.375000, "n_samples" : 4, "w_samples" : 4.000000, "value" : [0.250000, 0.750000]},
		"node_04" : {"left" : 7, "right" : 8, "feature" : 8, "threshold" : 0.956837, "impurity" : 0.207612, "n_samples" : 34, "w_samples" : 34.000000, "value" : [0.882353, 0.117647]},
		"node_05" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [1.000000, 0.000000]},
		"node_06" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 1.000000]},
		"node_07" : {"left" : 15, "right" : 16, "feature" : 1, "threshold" : -1.901256, "impurity" : 0.128419, "n_samples" : 29, "w_samples" : 29.000000, "value" : [0.931035, 0.068966]},
		"node_08" : {"left" : 9, "right" : 10, "feature" : 0, "threshold" : -0.449138, "impurity" : 0.480000, "n_samples" : 5, "w_samples" : 5.000000, "value" : [0.600000, 0.400000]},
		"node_09" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 1.000000]},
		"node_10" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [1.000000, 0.000000]},
		"node_11" : {"left" : 13, "right" : 14, "feature" : 0, "threshold" : -2.275254, "impurity" : 0.444444, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.333333, 0.666667]},
		"node_12" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 23, "w_samples" : 23.000000, "value" : [0.000000, 1.000000]},
		"node_13" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 1.000000]},
		"node_14" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [1.000000, 0.000000]},
		"node_15" : {"left" : 17, "right" : 18, "feature" : 3, "threshold" : 0.353989, "impurity" : 0.444444, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.666667, 0.333333]},
		"node_16" : {"left" : 19, "right" : 20, "feature" : 9, "threshold" : 0.453250, "impurity" : 0.073964, "n_samples" : 26, "w_samples" : 26.000000, "value" : [0.961538, 0.038462]},
		"node_17" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [1.000000, 0.000000]},
		"node_18" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 1.000000]},
		"node_19" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 20, "w_samples" : 20.000000, "value" : [1.000000, 0.000000]},
		"node_20" : {"left" : 21, "right" : 22, "feature" : 9, "threshold" : 0.564435, "impurity" : 0.277778, "n_samples" : 6, "w_samples" : 6.000000, "value" : [0.833333, 0.166667]},
		"node_21" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 1.000000]},
		"node_22" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 5, "w_samples" : 5.000000, "value" : [1.000000, 0.000000]}
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 64
	},
	"metadata" :  { "model" : "Breiman_CART", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "ccp_alpha" : 0.0, "criterion" : "", "max_depth" : 6, "max_features" : null, "max_leaf_nodes" : 32, "min_impurity_decrease" : 0.0, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.0, "random_state" : 1789, "splitter" : "best" },
	"tree" : 	{
		"features" : 10,
		"max_depth" : 5,
		"node_count" : 23,
		"nodes" : 	{
			"node_00" :  { "feature" : 5, "impurity" : 0.5, "left" : 1, "n_samples" : 64, "right" : 2, "threshold" : 0.347646, "value" : [ 0.5, 0.5 ], "w_samples" : 64.0 },
			"node_01" :  { "feature" : 3, "impurity" : 0.300554, "left" : 3, "n_samples" : 38, "right" : 4, "threshold" : -0.906461, "value" : [ 0.815789, 0.184211 ], "w_samples" : 38.0 },
			"node_02" :  { "feature" : 0, "impurity" : 0.073964, "left" : 11, "n_samples" : 26, "right" : 12, "threshold" : -1.760986, "value" : [ 0.038462, 0.961538 ], "w_samples" : 26.0 },
			"node_03" :  { "feature" : 2, "impurity" : 0.375, "left" : 5, "n_samples" : 4, "right" : 6, "threshold" : -0.451156, "value" : [ 0.25, 0.75 ], "w_samples" : 4.0 },
			"node_04" :  { "feature" : 8, "impurity" : 0.207612, "left" : 7, "n_samples" : 34, "right" : 8, "threshold" : 0.956837, "value" : [ 0.882353, 0.117647 ], "w_samples" : 34.0 },
			"node_05" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 1.0, 0.0 ], "w_samples" : 1.0 },
			"node_06" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 3, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0 ], "w_samples" : 3.0 },
			"node_07" :  { "feature" : 1, "impurity" : 0.128419, "left" : 15, "n_samples" : 29, "right" : 16, "threshold" : -1.901256, "value" : [ 0.931035, 0.068966 ], "w_samples" : 29.0 },
			"node_08" :  { "feature" : 0, "impurity" : 0.48, "left" : 9, "n_samples" : 5, "right" : 10, "threshold" : -0.449138, "value" : [ 0.6, 0.4 ], "w_samples" : 5.0 },
			"node_09" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 2, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0 ], "w_samples" : 2.0 },
			"node_10" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 3, "right" : null, "threshold" : null, "value" : [ 1.0, 0.0 ], "w_samples" : 3.0 },
			"node_11" :  { "feature" : 0, "impurity" : 0.444444, "left" : 13, "n_samples" : 3, "right" : 14, "threshold" : -2.275254, "value" : [ 0.333333, 0.666667 ], "w_samples" : 3.0 },
			"node_12" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 23, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0 ], "w_samples" : 23.0 },
			"node_13" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 2, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0 ], "w_samples" : 2.0 },
			"node_14" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 1.0, 0.0 ], "w_samples" : 1.0 },
			"node_15" :  { "feature" : 3, "impurity" : 0.444444, "left" : 17, "n_samples" : 3, "right" : 18, "threshold" : 0.353989, "value" : [ 0.666667, 0.333333 ], "w_samples" : 3.0 },
			"node_16" :  { "feature" : 9, "impurity" : 0.073964, "left" : 19, "n_samples" : 26, "right" : 20, "threshold" : 0.45325, "value" : [ 0.961538, 0.038462 ], "w_samples" : 26.0 },
			"node_17" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 2, "right" : null, "threshold" : null, "value" : [ 1.0, 0.0 ], "w_samples" : 2.0 },
			"node_18" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0 ], "w_samples" : 1.0 },
			"node_19" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 20, "right" : null, "threshold" : null, "value" : [ 1.0, 0.0 ], "w_samples" : 20.0 },
			"node_20" :  { "feature" : 9, "impurity" : 0.277778, "left" : 21, "n_samples" : 6, "right" : 22, "threshold" : 0.564435, "value" : [ 0.833333, 0.166667 ], "w_samples" : 6.0 },
			"node_21" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0 ], "w_samples" : 1.0 },
			"node_22" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 5, "right" : null, "threshold" : null, "value" : [ 1.0, 0.0 ], "w_samples" : 5.0 }
		},
		"outputs" : 2
	}
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('BinaryClass_10_small', 'DecisionTreeClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[1. 0.]
 [1. 0.]
 [0. 1.]
 [1. 0.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [0. 1.]
 [1. 0.]
 [0. 1.]
 [1. 0.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [1. 0.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [1. 0.]
 [0. 1.]
 [1. 0.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [1. 0.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [0. 1.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [0. 1.]
 [1. 0.]
 [1. 0.]
 [0. 1.]
 [0. 1.]
 [1. 0.]
 [0. 1.]
 [1. 0.]
 [0. 1.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [0. 1.]
 [0. 1.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]]
(64, 2)
(64,) float32
MODEL_PERFS {'class_name': 'mllite.DecisionTreeClassifier', 'model_name': 'DecisionTreeClassifier', 'options': '{"max_depth" : 6, "max_leaf_nodes" : 32}', 'dataset': 'BinaryClass_10_small', 'size': 64, 'accuracy': 1.0, 'auc': 1.0}
WRITING_PERF_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_BinaryClass_10_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.DecisionTreeClassifier', 'model_name': 'DecisionTreeClassifier', 'options': '{"max_depth" : 6, "max_leaf_nodes" : 32}', 'dataset': 'BinaryClass_10_small', 'training_time_in_sec': 0.007, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -0.012207, 0.012207 ],
      "X_1" : [ 0.026367, -0.026367 ],
      "X_2" : [ -0.001465, 0.001465 ],
      "X_3" : [ -0.043457, 0.043457 ],
      "X_4" : [ 0.000000, 0.000000 ],
      "X_5" : [ -0.032227, 0.032227 ],
      "X_6" : [ 0.000000, 0.000000 ],
      "X_7" : [ 0.000000, 0.000000 ],
      "X_8" : [ 0.004395, -0.004395 ],
      "X_9" : [ -0.013672, 0.013672 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 3, 5, 1, 9, 0, 8, 2 ],
      "class_1" : [ 3, 5, 1, 9, 0, 8, 2 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_BinaryClass_10_small_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_BinaryClass_10_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_10_small', 'DecisionTreeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "BinaryClass_10_small" AS "ADS" 
 ),
"DT_node_lookup" AS 
 (SELECT
    t."index" AS "index",
    COALESCE( t1."Leaf_5", t1."Leaf_6", t1."Leaf_9", t1."Leaf_10", t1."Leaf_12", t1."Leaf_13", t1."Leaf_14", t1."Leaf_17", t1."Leaf_18", t1."Leaf_19", t1."Leaf_21", t1."Leaf_22" ) AS node_id
  FROM
    "model_input" AS t
    LEFT OUTER JOIN
   (SELECT
      t."index" AS "index",
      CASE WHEN((t."X_5" <= 0.347646) AND (t."X_3" <= -0.906461) AND (t."X_2" <= -0.451156)) THEN 5 ELSE NULL END AS "Leaf_5",
      CASE WHEN((t."X_5" <= 0.347646) AND (t."X_3" <= -0.906461) AND (t."X_2" > -0.45115
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_10_small', 'DecisionTreeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_10_small', 'DecisionTreeClassifier', 'duckdb')
S "P_0", 1.000000 AS "P_1", 1 AS "D", 1.000000 AS "DP"
    UNION ALL
    SELECT 22 AS nid,  1.000000 AS "P_0", 0.000000 AS "P_1", 0 AS "D", 1.000000 AS "DP"
  ) AS "Values"),
"DT_Output" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t2."P_0" AS "P_0", t2."P_1" AS "P_1", 
   t2."D" AS "D", 
   t2."DP" AS "DP"
  FROM
   "DT_node_lookup" AS t1
   LEFT OUTER JOIN
   "DT_node_data" AS t2
   ON t1.node_id = t2.nid
 )
SELECT
   "DT_Output"."index" AS "index",
   CAST(NULL AS FLOAT)  AS "Score_0",
   "DT_Output"."P_0" AS "Proba_0",
   CASE WHEN ("DT_Output"."P_0" IS NULL OR "DT_Output"."P_0" > 0.0) THEN LN( "DT_Output"."P_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
   CAST(NULL AS FLOAT)  AS "Score_1",
   "DT_Output"."P_1" AS "Proba_1",
   CASE WHEN ("DT_Output"."P_1" IS NULL OR "DT_Output"."P_1" > 0.0) THEN LN( "DT_Output"."P_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
   "DT_Output"."D" AS "Decision",
   "DT_Output"."DP" AS "DecisionProba"
FROM "DT_Output"
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_10_small', 'DecisionTreeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.064559 -0.820872 -0.723270  ...  0.652010 -0.319080 -0.383915
1     -0.960957 -1.294560 -0.778172  ... -0.518959  0.207019 -0.945521
2     -1.406136 -0.242116  1.301289  ... -1.043267 -1.426875  1.876952
3     -1.954561 -1.845000  0.508844  ...  0.532215 -1.374292  2.746056
4     -0.098659 -1.731538  2.272470  ...  0.845839  1.740497  0.199837
...         ...       ...       ...  ...       ...       ...       ...
59     1.123207  0.820741  0.307790  ... -0.348400 -2.114189  0.674955
60     0.648423 -0.244695 -0.012258  ...  0.520360  1.591133  0.415493
61    -1.537976 -0.863574 -0.339109  ... -1.807600 -0.932955 -0.606641
62     1.719474 -0.751864 -1.224318  ...  0.148196 -0.611486  0.366529
63    -0.263412  1.788292  0.201192  ... -0.413903  1.138708 -1.061929

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        0 non-null      object 
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        0 non-null      object 
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Decision       64 non-null     int64  
 8   DecisionProba  64 non-null     float64
dtypes: float64(5), int64(2), object(2)
memory usage: 4.6+ KB
    index Score_0  Proba_0  ...     LogProba_1 Decision  DecisionProba
0       0    None      1.0  ... -1.797693e+308        0            1.0
1       1    None      1.0  ... -1.797693e+308        0            1.0
2       2    None      0.0  ...   0.000000e+00        1            1.0
3       3    None      1.0  ... -1.797693e+308        0            1.0
4       4    None      0.0  ...   0.000000e+00        1            1.0
..    ...     ...      ...  ...            ...      ...            ...
59     59    None      1.0  ... -1.797693e+308        0            1.0
60     60    None      1.0  ... -1.797693e+308        0            1.0
61     61    None      1.0  ... -1.797693e+308        0            1.0
62     62    None      1.0  ... -1.797693e+308        0            1.0
63     63    None      1.0  ... -1.797693e+308        0            1.0

[64 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index Score_0  SQL_Proba_0  ...  Py_Proba_0 Py_Proba_1  Py_Decision
48     48    None          0.0  ...         0.0        1.0            1
49     49    None          1.0  ...         1.0        0.0            0
50     50    None          0.0  ...         0.0        1.0            1
51     51    None          1.0  ...         1.0        0.0            0
52     52    None          1.0  ...         1.0        0.0            0
53     53    None          1.0  ...         1.0        0.0            0
54     54    None          1.0  ...         1.0        0.0            0
55     55    None          0.0  ...         0.0        1.0            1
56     56    None          0.0  ...         0.0        1.0            1
57     57    None          1.0  ...         1.0        0.0            0
58     58    None          1.0  ...         1.0        0.0            0
59     59    None          1.0  ...         1.0        0.0            0
60     60    None          1.0  ...         1.0        0.0            0
61     61    None          1.0  ...         1.0        0.0            0
62     62    None          1.0  ...         1.0        0.0            0
63     63    None          1.0  ...         1.0        0.0            0

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_small', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 0.0
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
48         0.0          0.0          0.0
49         1.0          1.0          0.0
50         0.0          0.0          0.0
51         1.0          1.0          0.0
52         1.0          1.0          0.0
53         1.0          1.0          0.0
54         1.0          1.0          0.0
55         0.0          0.0          0.0
56         0.0          0.0          0.0
57         1.0          1.0          0.0
58         1.0          1.0          0.0
59         1.0          1.0          0.0
60         1.0          1.0          0.0
61         1.0          1.0          0.0
62         1.0          1.0          0.0
63         1.0          1.0          0.0
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_small', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 0.0
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
48         1.0          1.0          0.0
49         0.0          0.0          0.0
50         1.0          1.0          0.0
51         0.0          0.0          0.0
52         0.0          0.0          0.0
53         0.0          0.0          0.0
54         0.0          0.0          0.0
55         1.0          1.0          0.0
56         1.0          1.0          0.0
57         0.0          0.0          0.0
58         0.0          0.0          0.0
59         0.0          0.0          0.0
60         0.0          0.0          0.0
61         0.0          0.0          0.0
62         0.0          0.0          0.0
63         0.0          0.0          0.0
MLLITE_CLASS_SQL_EXECUTION_STATUS ('BinaryClass_10_small', 'DecisionTreeClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
48            1             1
49            0             0
50            1             1
51            0             0
52            0             0
53            0             0
54            0             0
55            1             1
56            1             1
57            0             0
58            0             0
59            0             0
60            0             0
61            0             0
62            0             0
63            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_BinaryClass_10_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_10_small', 'DecisionTreeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "BinaryClass_10_small" AS "ADS" 
 ),
"DT_node_lookup" AS 
 (SELECT
    t."index" AS "index",
    COALESCE( t1."Leaf_5", t1."Leaf_6", t1."Leaf_9", t1."Leaf_10", t1."Leaf_12", t1."Leaf_13", t1."Leaf_14", t1."Leaf_17", t1."Leaf_18", t1."Leaf_19", t1."Leaf_21", t1."Leaf_22" ) AS node_id
  FROM
    "model_input" AS t
    LEFT OUTER JOIN
   (SELECT
      t."index" AS "index",
      CASE WHEN((t."X_5" <= 0.347646) AND (t."X_3" <= -0.906461) AND (t."X_2" <= -0.451156)) THEN 5 ELSE NULL END AS "Leaf_5",
      CASE WHEN((t."X_5" <= 0.347646) AND (t."X_3" <= -0.906461) AND (t."X_2" > -0.45115
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_10_small', 'DecisionTreeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_10_small', 'DecisionTreeClassifier', 'sqlite')
S "P_0", 1.000000 AS "P_1", 1 AS "D", 1.000000 AS "DP"
    UNION ALL
    SELECT 22 AS nid,  1.000000 AS "P_0", 0.000000 AS "P_1", 0 AS "D", 1.000000 AS "DP"
  ) AS "Values"),
"DT_Output" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t2."P_0" AS "P_0", t2."P_1" AS "P_1", 
   t2."D" AS "D", 
   t2."DP" AS "DP"
  FROM
   "DT_node_lookup" AS t1
   LEFT OUTER JOIN
   "DT_node_data" AS t2
   ON t1.node_id = t2.nid
 )
SELECT
   "DT_Output"."index" AS "index",
   CAST(NULL AS FLOAT)  AS "Score_0",
   "DT_Output"."P_0" AS "Proba_0",
   CASE WHEN ("DT_Output"."P_0" IS NULL OR "DT_Output"."P_0" > 0.0) THEN LN( "DT_Output"."P_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
   CAST(NULL AS FLOAT)  AS "Score_1",
   "DT_Output"."P_1" AS "Proba_1",
   CASE WHEN ("DT_Output"."P_1" IS NULL OR "DT_Output"."P_1" > 0.0) THEN LN( "DT_Output"."P_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
   "DT_Output"."D" AS "Decision",
   "DT_Output"."DP" AS "DecisionProba"
FROM "DT_Output"
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_10_small', 'DecisionTreeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.064559 -0.820872 -0.723270  ...  0.652010 -0.319080 -0.383915
1     -0.960957 -1.294560 -0.778172  ... -0.518959  0.207019 -0.945521
2     -1.406136 -0.242116  1.301289  ... -1.043267 -1.426875  1.876952
3     -1.954561 -1.845000  0.508844  ...  0.532215 -1.374292  2.746056
4     -0.098659 -1.731538  2.272470  ...  0.845839  1.740497  0.199837
...         ...       ...       ...  ...       ...       ...       ...
59     1.123207  0.820741  0.307790  ... -0.348400 -2.114189  0.674955
60     0.648423 -0.244695 -0.012258  ...  0.520360  1.591133  0.415493
61    -1.537976 -0.863574 -0.339109  ... -1.807600 -0.932955 -0.606641
62     1.719474 -0.751864 -1.224318  ...  0.148196 -0.611486  0.366529
63    -0.263412  1.788292  0.201192  ... -0.413903  1.138708 -1.061929

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        0 non-null      object 
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        0 non-null      object 
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Decision       64 non-null     int64  
 8   DecisionProba  64 non-null     float64
dtypes: float64(5), int64(2), object(2)
memory usage: 4.6+ KB
    index Score_0  Proba_0  ...     LogProba_1 Decision  DecisionProba
0       0    None      1.0  ... -1.797693e+308        0            1.0
1       1    None      1.0  ... -1.797693e+308        0            1.0
2       2    None      0.0  ...   0.000000e+00        1            1.0
3       3    None      1.0  ... -1.797693e+308        0            1.0
4       4    None      0.0  ...   0.000000e+00        1            1.0
..    ...     ...      ...  ...            ...      ...            ...
59     59    None      1.0  ... -1.797693e+308        0            1.0
60     60    None      1.0  ... -1.797693e+308        0            1.0
61     61    None      1.0  ... -1.797693e+308        0            1.0
62     62    None      1.0  ... -1.797693e+308        0            1.0
63     63    None      1.0  ... -1.797693e+308        0            1.0

[64 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index Score_0  SQL_Proba_0  ...  Py_Proba_0 Py_Proba_1  Py_Decision
48     48    None          0.0  ...         0.0        1.0            1
49     49    None          1.0  ...         1.0        0.0            0
50     50    None          0.0  ...         0.0        1.0            1
51     51    None          1.0  ...         1.0        0.0            0
52     52    None          1.0  ...         1.0        0.0            0
53     53    None          1.0  ...         1.0        0.0            0
54     54    None          1.0  ...         1.0        0.0            0
55     55    None          0.0  ...         0.0        1.0            1
56     56    None          0.0  ...         0.0        1.0            1
57     57    None          1.0  ...         1.0        0.0            0
58     58    None          1.0  ...         1.0        0.0            0
59     59    None          1.0  ...         1.0        0.0            0
60     60    None          1.0  ...         1.0        0.0            0
61     61    None          1.0  ...         1.0        0.0            0
62     62    None          1.0  ...         1.0        0.0            0
63     63    None          1.0  ...         1.0        0.0            0

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_small', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 0.0
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
48         0.0          0.0          0.0
49         1.0          1.0          0.0
50         0.0          0.0          0.0
51         1.0          1.0          0.0
52         1.0          1.0          0.0
53         1.0          1.0          0.0
54         1.0          1.0          0.0
55         0.0          0.0          0.0
56         0.0          0.0          0.0
57         1.0          1.0          0.0
58         1.0          1.0          0.0
59         1.0          1.0          0.0
60         1.0          1.0          0.0
61         1.0          1.0          0.0
62         1.0          1.0          0.0
63         1.0          1.0          0.0
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_small', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 0.0
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
48         1.0          1.0          0.0
49         0.0          0.0          0.0
50         1.0          1.0          0.0
51         0.0          0.0          0.0
52         0.0          0.0          0.0
53         0.0          0.0          0.0
54         0.0          0.0          0.0
55         1.0          1.0          0.0
56         1.0          1.0          0.0
57         0.0          0.0          0.0
58         0.0          0.0          0.0
59         0.0          0.0          0.0
60         0.0          0.0          0.0
61         0.0          0.0          0.0
62         0.0          0.0          0.0
63         0.0          0.0          0.0
MLLITE_CLASS_SQL_EXECUTION_STATUS ('BinaryClass_10_small', 'DecisionTreeClassifier', 'sqlite', 'Success')
    Py_Decision  SQL_Decision
48            1             1
49            0             0
50            1             1
51            0             0
52            0             0
53            0             0
54            0             0
55            1             1
56            1             1
57            0             0
58            0             0
59            0             0
60            0             0
61            0             0
62            0             0
63            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
