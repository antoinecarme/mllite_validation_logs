         X_0       X_1       X_2  ...       X_8       X_9  target
0  -1.064559 -0.820872 -0.723270  ... -0.319080 -0.383915       0
1  -0.960957 -1.294560 -0.778172  ...  0.207019 -0.945521       0
2  -1.406136 -0.242116  1.301289  ... -1.426875  1.876952       1
3  -1.954561 -1.845000  0.508844  ... -1.374292  2.746056       0
4  -0.098659 -1.731538  2.272469  ...  1.740497  0.199837       1
..       ...       ...       ...  ...       ...       ...     ...
59  1.123207  0.820741  0.307790  ... -2.114189  0.674955       0
60  0.648423 -0.244695 -0.012258  ...  1.591133  0.415493       0
61 -1.537976 -0.863574 -0.339109  ... -0.932955 -0.606641       0
62  1.719474 -0.751864 -1.224318  ... -0.611486  0.366529       0
63 -0.263412  1.788292  0.201192  ...  1.138708 -1.061928       0

[64 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
('OPERATION_START', 'TRAINING')
[[-1.0645586  -0.8208718  -0.72327    -0.09642018 -0.40463343 -0.81522477
  -0.8386918   0.65200984 -0.31908    -0.3839149 ]
 [-0.9609572  -1.2945602  -0.77817184  0.8359748  -1.0189681  -0.12086504
  -0.68072116 -0.5189585   0.20701888 -0.9455213 ]
 [-1.4061359  -0.24211647  1.301289   -0.49436462  1.0264262   1.0800456
   1.3956257  -1.0432675  -1.426875    1.8769516 ]
 [-1.9545612  -1.8449999   0.5088439  -0.224022    0.66320896  0.0830382
   0.446295    0.53221494 -1.3742915   2.7460556 ]
 [-0.09865901 -1.7315376   2.2724695   0.11809641  1.0834117   2.8048902
   2.7064822   0.84583855  1.7404972   0.19983661]] [0 0 1 0 1]
MLLITE_FIT_USING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 4 4
('OPERATION_END_ELAPSED', 0.008, 'TRAINING')
{ ,   }
{ ,   }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W12", "signature" : "ff4_il8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"classes" : [ 0, 1 ],
	"equations" : {
		"class_1" : {
			"intercept" : 0.007230,
			"coeffs" : [ 0.044161, 0.038447, 0.138790, -0.093395, -0.204561, 0.291774, 0.228267, -0.013539, -0.041317, -0.021006 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_BinaryClass_10_small.json'

MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
MLLITE_RELOADING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W12", "signature" : "ff4_il8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"classes" : [ 0, 1 ],
	"equations" : {
		"class_1" : {
			"intercept" : 0.007230,
			"coeffs" : [ 0.044161, 0.038447, 0.138790, -0.093395, -0.204561, 0.291774, 0.228267, -0.013539, -0.041317, -0.021006 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 64
	},
	"equations" : 	{
		"class_1" : 	{
			"coeffs" : [ 0.044161, 0.038447, 0.13879, -0.093395, -0.204561, 0.291774, 0.228267, -0.013539, -0.041317, -0.021006 ],
			"intercept" : 0.00723
		}
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_il8", "version" : "2024-W12" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.7298 0.2702]
 [0.6154 0.3846]
 [0.2244 0.7756]
 [0.538  0.462 ]
 [0.0609 0.9391]
 [0.661  0.339 ]
 [0.3926 0.6074]
 [0.0652 0.9348]
 [0.9174 0.0826]
 [0.8077 0.1923]
 [0.8023 0.1977]
 [0.2779 0.7221]
 [0.7572 0.2428]
 [0.0929 0.9071]
 [0.5007 0.4993]
 [0.2564 0.7436]
 [0.0577 0.9423]
 [0.3583 0.6417]
 [0.2564 0.7436]
 [0.0546 0.9454]
 [0.3228 0.6772]
 [0.784  0.216 ]
 [0.1058 0.8942]
 [0.3571 0.6429]
 [0.4175 0.5825]
 [0.6031 0.3969]
 [0.2479 0.7521]
 [0.8443 0.1557]
 [0.1567 0.8433]
 [0.3378 0.6622]
 [0.1143 0.8857]
 [0.4997 0.5003]
 [0.2709 0.7291]
 [0.1686 0.8314]
 [0.2776 0.7224]
 [0.3343 0.6657]
 [0.0605 0.9395]
 [0.8353 0.1647]
 [0.6262 0.3738]
 [0.8225 0.1775]
 [0.5882 0.4118]
 [0.7426 0.2574]
 [0.5353 0.4647]
 [0.9579 0.0421]
 [0.8119 0.1881]
 [0.6692 0.3308]
 [0.3579 0.6421]
 [0.902  0.098 ]
 [0.2301 0.7699]
 [0.7282 0.2718]
 [0.8391 0.1609]
 [0.7665 0.2335]
 [0.881  0.119 ]
 [0.9093 0.0907]
 [0.5832 0.4168]
 [0.361  0.639 ]
 [0.655  0.345 ]
 [0.5721 0.4279]
 [0.7356 0.2644]
 [0.6801 0.3199]
 [0.5566 0.4434]
 [0.4563 0.5437]
 [0.5654 0.4346]
 [0.7334 0.2666]]
(64, 2)
(64,) float32
MODEL_PERFS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'BinaryClass_10_small', 'size': 64, 'accuracy': 0.890625, 'auc': 0.923828125}
WRITING_PERF_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_BinaryClass_10_small.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'BinaryClass_10_small', 'training_time_in_sec': 0.008, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_BinaryClass_10_small.sql'



SQL_OUT_PUT_FIRST_LINES_START
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT model_input."index" AS "index",
   0.007230 + 0.044161 * X_0 + 0.038447 * X_1 + 0.138790 * X_2 + -0.093395 * X_3 + -0.204561 * X_4 + 0.291774 * X_5 + 0.228267 * X_6 + -0.013539 * X_7 + -0.041317 * X_8 + -0.021006 * X_9 AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1"
  FROM model_input
 ),
soft_max_orig_cte AS 
( SELECT t."index" AS "index", 
   -t."Score_1" AS "Score_0",
   1.0 - t."Proba_1" AS "Proba_0",
   CAST(NULL AS FLOAT) AS "LogProba_0",
   t."Score_1" AS "Score_1",
   t."Pro
SQL_OUT_PUT_FIRST_LINES_END
SQL_OUT_PUT_LAST_LINES_START
S t
),
arg_max_cte_with_max_proba_idx AS 
( SELECT t.*,
   CASE WHEN(t."Proba_0" = t."Max_Proba") THEN 0 else NULL END AS "max_idx_0",
   CASE WHEN(t."Proba_1" = t."Max_Proba") THEN 1 else NULL END AS "max_idx_1"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
 (SELECT t.*,
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.064559 -0.820872 -0.723270  ...  0.652010 -0.319080 -0.383915
1     -0.960957 -1.294560 -0.778172  ... -0.518959  0.207019 -0.945521
2     -1.406136 -0.242116  1.301289  ... -1.043267 -1.426875  1.876952
3     -1.954561 -1.845000  0.508844  ...  0.532215 -1.374292  2.746056
4     -0.098659 -1.731538  2.272470  ...  0.845839  1.740497  0.199837
...         ...       ...       ...  ...       ...       ...       ...
59     1.123207  0.820741  0.307790  ... -0.348400 -2.114189  0.674955
60     0.648423 -0.244695 -0.012258  ...  0.520360  1.591133  0.415493
61    -1.537976 -0.863574 -0.339109  ... -1.807600 -0.932955 -0.606641
62     1.719474 -0.751864 -1.224318  ...  0.148196 -0.611486  0.366529
63    -0.263412  1.788292  0.201192  ... -0.413903  1.138708 -1.061929

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
