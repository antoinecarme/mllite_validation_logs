READING_CSV digits_tiny ['data/tiny/digits_tiny.csv']
    pixel_0_0  pixel_0_1  pixel_0_2  ...  pixel_7_6  pixel_7_7  target
0           0          0          0  ...          7          0       2
1           0          0         11  ...         16         12       1
2           0          0          0  ...          0          0       1
3           0          0          7  ...          4          0       9
4           0          0          5  ...          0          0       8
5           0          0          1  ...          0          0       8
6           0          0          2  ...          0          0       7
7           0          0          4  ...          0          0       0
8           0          0          1  ...          1          0       9
9           0          0          2  ...          0          0       7
10          0          0          0  ...          0          0       4
11          0          0          5  ...          0          0       3
12          0          1         11  ...          3          0       9
13          0          0          0  ...          0          0       7
14          0          0          1  ...          0          0       0
15          0          0          5  ...          0          0       0

[16 rows x 65 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[ 0.  0.  0.  3. 15. 10.  1.  0.  0.  0.  0. 11. 10. 16.  4.  0.  0.  0.
   0. 12.  1. 15.  6.  0.  0.  0.  0.  3.  4. 15.  4.  0.  0.  0.  0.  6.
  15.  6.  0.  0.  0.  4. 15. 16.  9.  0.  0.  0.  0.  0. 13. 16. 15.  9.
   3.  0.  0.  0.  0.  4.  9. 14.  7.  0.]
 [ 0.  0. 11. 10.  0.  0.  0.  0.  0.  0. 11. 15.  0.  0.  0.  0.  0.  0.
  11. 16.  5.  0.  0.  0.  0.  0. 13. 16. 11.  0.  0.  0.  0.  0.  2.  7.
  16.  2.  0.  0.  0.  0.  0.  2. 14.  6.  0.  0.  0.  0.  6. 10. 15. 13.
   8.  3.  0.  0.  8. 16. 16. 16. 16. 12.]
 [ 0.  0.  0. 15. 11.  0.  0.  0.  0.  0.  6. 16. 16.  2.  0.  0.  0.  0.
  10. 16. 16.  1.  0.  0.  0.  2. 16. 16. 16.  3.  0.  0.  0.  7. 16. 16.
  14.  0.  0.  0.  0.  0.  3. 15. 10.  0.  0.  0.  0.  0.  0. 15.  7.  0.
   0.  0.  0.  0.  0. 14.  4.  0.  0.  0.]
 [ 0.  0.  7. 13. 10.  1.  0.  0.  0.  1. 15.  3.  9. 10.  0.  0.  0.  3.
  16.  4. 13. 11.  0.  0.  0.  0.  6. 12. 12. 16.  0.  0.  0.  0.  0.  0.
   0. 12.  5.  0.  0.  0.  0.  0.  0.  5. 11.  0.  0.  1. 11.  2.  0.  7.
  11.  0.  0.  0.  7. 13. 16. 15.  4.  0.]
 [ 0.  0.  5. 12. 13.  2.  0.  0.  0.  3. 16. 14. 16. 13.  1.  0.  0.  4.
  16.  9. 16. 12.  1.  0.  0.  1.  9. 16. 15.  1.  0.  0.  0.  1. 13. 16.
  16.  5.  0.  0.  0.  3. 16.  5. 12. 16.  0.  0.  0.  3. 15.  7. 14. 12.
   0.  0.  0.  0.  6. 16. 13.  3.  0.  0.]] [2 1 1 9 8]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.014, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 64 },
	"classes" : [ 0, 1, 2, 3, 4, 7, 8, 9 ],
	"layers" : {
		"sizes" : [ 64, 4, 8, 6, 8 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 64 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 64,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.025613, 0.154095, -0.121240, -0.021865 ],
			"coeffs_01" : [ 0.024167, -0.238174, 0.086099, -0.008862 ],
			"coeffs_02" : [ 0.230192, 0.035436, 0.270026, -0.062873 ],
			"coeffs_03" : [ 0.271518, -0.287191, -0.147398, 0.107039 ],
			"coeffs_04" : [ 0.137308, -0.165063, -0.177486, -0.254066 ],
			"coeffs_05" : [ 0.116098, -0.312458, -0.047361, -0.012991 ],
			"coeffs_06" : [ -0.032596, -0.279391, -0.152094, 0.211560 ],
			"coeffs_07" : [ 0.005568, 0.002450, -0.235949, -0.015191 ],
			"coeffs_08" : [ -0.090739, 0.109609, -0.059769, 0.125770 ],
			"coeffs_09" : [ -0.212950, 0.232234, -0.187887, 0.131357 ],
			"coeffs_10" : [ -0.234712, 0.137927, 0.067859, 0.248193 ],
			"coeffs_11" : [ -0.205485, -0.252456, 0.080041, 0.090333 ],
			"coeffs_12" : [ 0.177378, 0.229972, 0.199743, -0.204304 ],
			"coeffs_13" : [ 0.153239, 0.217395, -0.205685, 0.112275 ],
			"coeffs_14" : [ 0.090442, 0.004971, 0.037700, 0.139095 ],
			"coeffs_15" : [ -0.227347, 0.037486, 0.121673, 0.138755 ],
			"coeffs_16" : [ -0.223610, 0.176425, -0.165366, -0.244600 ],
			"coeffs_17" : [ 0.270323, 0.255727, -0.039153, -0.266227 ],
			"coeffs_18" : [ -0.035043, 0.258588, -0.231317, 0.102259 ],
			"coeffs_19" : [ 0.113063, 0.148706, 0.243258, -0.141627 ],
			"coeffs_20" : [ 0.103666, 0.180486, 0.191340, -0.016392 ],
			"coeffs_21" : [ -0.288507, 0.123867, -0.023023, -0.074826 ],
			"coeffs_22" : [ -0.220268, -0.303342, -0.108648, 0.238089 ],
			"coeffs_23" : [ 0.012365, -0.060567, -0.068791, -0.236045 ],
			"coeffs_24" : [ 0.098972, -0.090357, -0.115281, -0.060358 ],
			"coeffs_25" : [ 0.097418, -0.230409, -0.123944, 0.150585 ],
			"coeffs_26" : [ 0.170979, 0.227505, 0.194863, 0.154191 ],
			"coeffs_27" : [ -0.145971, 0.001214, 0.064516, 0.180144 ],
			"coeffs_28" : [ 0.123601, -0.025137, 0.148114, 0.196989 ],
			"coeffs_29" : [ 0.022559, -0.125243, -0.107525, -0.166749 ],
			"coeffs_30" : [ 0.161074, 0.139941, -0.176012, 0.069661 ],
			"coeffs_31" : [ -0.162469, -0.000784, 0.055791, -0.119526 ],
			"coeffs_32" : [ 0.135719, -0.250599, -0.237015, 0.191819 ],
			"coeffs_33" : [ 0.245188, -0.222709, -0.137898, -0.200331 ],
			"coeffs_34" : [ -0.247763, -0.254354, -0.124969, -0.078507 ],
			"coeffs_35" : [ -0.209869, -0.236798, -0.289070, 0.041432 ],
			"coeffs_36" : [ -0.212975, -0.257250, 0.042672, 0.098651 ],
			"coeffs_37" : [ -0.060526, 0.056778, 0.058157, -0.216760 ],
			"coeffs_38" : [ -0.045673, 0.222814, 0.265785, -0.065969 ],
			"coeffs_39" : [ -0.222738, -0.144333, 0.123827, -0.216086 ],
			"coeffs_40" : [ 0.102492, -0.157461, 0.243448, 0.255335 ],
			"coeffs_41" : [ -0.148093, 0.126673, -0.142933, 0.207061 ],
			"coeffs_42" : [ -0.273365, 0.149389, 0.035414, -0.183145 ],
			"coeffs_43" : [ 0.112015, 0.119239, -0.017999, -0.118843 ],
			"coeffs_44" : [ 0.242849, 0.231776, -0.131837, 0.032723 ],
			"coeffs_45" : [ 0.142930, 0.009308, 0.016942, 0.245084 ],
			"coeffs_46" : [ 0.078393, 0.096123, -0.179652, -0.057848 ],
			"coeffs_47" : [ 0.212118, 0.164243, -0.086117, -0.078452 ],
			"coeffs_48" : [ 0.179172, -0.154059, 0.038748, 0.212617 ],
			"coeffs_49" : [ -0.288473, -0.192842, -0.167123, -0.178488 ],
			"coeffs_50" : [ -0.141459, -0.033072, -0.220139, 0.160042 ],
			"coeffs_51" : [ 0.253924, 0.028576, -0.010626, 0.113613 ],
			"coeffs_52" : [ 0.014583, 0.117876, 0.025993, 0.152092 ],
			"coeffs_53" : [ 0.114623, -0.150497, -0.061871, -0.283646 ],
			"coeffs_54" : [ -0.186561, -0.204034, 0.105197, -0.064283 ],
			"coeffs_55" : [ -0.099307, -0.230410, 0.284006, -0.140035 ],
			"coeffs_56" : [ -0.070765, 0.103100, 0.137762, 0.129285 ],
			"coeffs_57" : [ -0.296063, 0.192222, 0.233171, 0.203987 ],
			"coeffs_58" : [ -0.005362, 0.268547, 0.208750, 0.066528 ],
			"coeffs_59" : [ -0.123967, 0.238399, -0.311241, -0.286425 ],
			"coeffs_60" : [ -0.050065, -0.041679, 0.131804, 0.217320 ],
			"coeffs_61" : [ 0.033735, -0.072432, -0.169780, -0.200842 ],
			"coeffs_62" : [ 0.058466, 0.086036, -0.239198, -0.059012 ],
			"coeffs_63" : [ 0.213796, -0.096881, 0.016932, -0.075751 ],
			"intercepts" : [ 0.082071, -0.175792, -0.019852, 0.185997 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.241595, 0.442287, 0.491537, 0.478910, 0.205650, -0.489465, -0.049779, -0.492196 ],
			"coeffs_1" : [ 0.281933, 0.179401, 0.669087, 0.374365, 0.624949, -0.349319, 0.131023, 0.438880 ],
			"coeffs_2" : [ 0.282440, 0.626504, -0.339840, 0.441947, 0.349262, 0.677131, -0.001542, 0.249485 ],
			"coeffs_3" : [ 0.433303, 0.357252, 0.413214, -0.670744, 0.228754, 0.643638, 0.121380, 0.576142 ],
			"intercepts" : [ -0.214143, 0.229807, -0.514996, 0.194459, -0.705166, 0.424940, -0.008643, 0.035034 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.287134, -0.546086, -0.474302, -0.210799, -0.426106, 0.232046 ],
			"coeffs_1" : [ -0.064456, -0.166256, -0.172591, 0.387102, 0.323079, -0.242876 ],
			"coeffs_2" : [ 0.321966, -0.526800, 0.522738, -0.158466, 0.160227, -0.370909 ],
			"coeffs_3" : [ -0.391331, 0.148242, -0.210419, 0.563269, -0.559200, -0.300043 ],
			"coeffs_4" : [ 0.264090, 0.044977, 0.425745, 0.405154, -0.363429, -0.415423 ],
			"coeffs_5" : [ -0.573973, 0.158576, 0.212295, 0.248759, -0.163486, 0.041223 ],
			"coeffs_6" : [ 0.590878, -0.450284, -0.203710, -0.203721, 0.012797, -0.182967 ],
			"coeffs_7" : [ -0.236258, -0.194230, -0.160988, 0.333603, 0.087162, -0.273546 ],
			"intercepts" : [ -0.225960, 0.042236, 0.548039, 0.046850, -0.514099, -0.314064 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.522463, 0.316747, -0.298095, -0.120349, -0.519252, 0.069310, -0.452619, -0.191357 ],
			"coeffs_1" : [ 0.490698, -0.371423, 0.625569, -0.351080, 0.225405, -0.393987, 0.305651, -0.278541 ],
			"coeffs_2" : [ -0.386022, -0.363099, -0.588153, 0.182507, -0.637921, 0.539415, -0.608064, 0.005322 ],
			"coeffs_3" : [ 0.529959, -0.030008, -0.104461, -0.219700, 0.473359, -0.351350, -0.395583, -0.236596 ],
			"coeffs_4" : [ 0.023167, 0.433681, -0.073574, 0.177218, 0.382514, 0.318210, -0.391339, 0.238592 ],
			"coeffs_5" : [ -0.385207, 0.330673, -0.446636, -0.160997, 0.512074, -0.358282, -0.301597, 0.090333 ],
			"intercepts" : [ 0.328218, 0.562413, -0.277629, 0.034966, 0.619958, 0.513062, 0.529132, -0.114182 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_tiny_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('digits_tiny', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 64 },
	"classes" : [ 0, 1, 2, 3, 4, 7, 8, 9 ],
	"layers" : {
		"sizes" : [ 64, 4, 8, 6, 8 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 64 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 64,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.025613, 0.154095, -0.121240, -0.021865 ],
			"coeffs_01" : [ 0.024167, -0.238174, 0.086099, -0.008862 ],
			"coeffs_02" : [ 0.230192, 0.035436, 0.270026, -0.062873 ],
			"coeffs_03" : [ 0.271518, -0.287191, -0.147398, 0.107039 ],
			"coeffs_04" : [ 0.137308, -0.165063, -0.177486, -0.254066 ],
			"coeffs_05" : [ 0.116098, -0.312458, -0.047361, -0.012991 ],
			"coeffs_06" : [ -0.032596, -0.279391, -0.152094, 0.211560 ],
			"coeffs_07" : [ 0.005568, 0.002450, -0.235949, -0.015191 ],
			"coeffs_08" : [ -0.090739, 0.109609, -0.059769, 0.125770 ],
			"coeffs_09" : [ -0.212950, 0.232234, -0.187887, 0.131357 ],
			"coeffs_10" : [ -0.234712, 0.137927, 0.067859, 0.248193 ],
			"coeffs_11" : [ -0.205485, -0.252456, 0.080041, 0.090333 ],
			"coeffs_12" : [ 0.177378, 0.229972, 0.199743, -0.204304 ],
			"coeffs_13" : [ 0.153239, 0.217395, -0.205685, 0.112275 ],
			"coeffs_14" : [ 0.090442, 0.004971, 0.037700, 0.139095 ],
			"coeffs_15" : [ -0.227347, 0.037486, 0.121673, 0.138755 ],
			"coeffs_16" : [ -0.223610, 0.176425, -0.165366, -0.244600 ],
			"coeffs_17" : [ 0.270323, 0.255727, -0.039153, -0.266227 ],
			"coeffs_18" : [ -0.035043, 0.258588, -0.231317, 0.102259 ],
			"coeffs_19" : [ 0.113063, 0.148706, 0.243258, -0.141627 ],
			"coeffs_20" : [ 0.103666, 0.180486, 0.191340, -0.016392 ],
			"coeffs_21" : [ -0.288507, 0.123867, -0.023023, -0.074826 ],
			"coeffs_22" : [ -0.220268, -0.303342, -0.108648, 0.238089 ],
			"coeffs_23" : [ 0.012365, -0.060567, -0.068791, -0.236045 ],
			"coeffs_24" : [ 0.098972, -0.090357, -0.115281, -0.060358 ],
			"coeffs_25" : [ 0.097418, -0.230409, -0.123944, 0.150585 ],
			"coeffs_26" : [ 0.170979, 0.227505, 0.194863, 0.154191 ],
			"coeffs_27" : [ -0.145971, 0.001214, 0.064516, 0.180144 ],
			"coeffs_28" : [ 0.123601, -0.025137, 0.148114, 0.196989 ],
			"coeffs_29" : [ 0.022559, -0.125243, -0.107525, -0.166749 ],
			"coeffs_30" : [ 0.161074, 0.139941, -0.176012, 0.069661 ],
			"coeffs_31" : [ -0.162469, -0.000784, 0.055791, -0.119526 ],
			"coeffs_32" : [ 0.135719, -0.250599, -0.237015, 0.191819 ],
			"coeffs_33" : [ 0.245188, -0.222709, -0.137898, -0.200331 ],
			"coeffs_34" : [ -0.247763, -0.254354, -0.124969, -0.078507 ],
			"coeffs_35" : [ -0.209869, -0.236798, -0.289070, 0.041432 ],
			"coeffs_36" : [ -0.212975, -0.257250, 0.042672, 0.098651 ],
			"coeffs_37" : [ -0.060526, 0.056778, 0.058157, -0.216760 ],
			"coeffs_38" : [ -0.045673, 0.222814, 0.265785, -0.065969 ],
			"coeffs_39" : [ -0.222738, -0.144333, 0.123827, -0.216086 ],
			"coeffs_40" : [ 0.102492, -0.157461, 0.243448, 0.255335 ],
			"coeffs_41" : [ -0.148093, 0.126673, -0.142933, 0.207061 ],
			"coeffs_42" : [ -0.273365, 0.149389, 0.035414, -0.183145 ],
			"coeffs_43" : [ 0.112015, 0.119239, -0.017999, -0.118843 ],
			"coeffs_44" : [ 0.242849, 0.231776, -0.131837, 0.032723 ],
			"coeffs_45" : [ 0.142930, 0.009308, 0.016942, 0.245084 ],
			"coeffs_46" : [ 0.078393, 0.096123, -0.179652, -0.057848 ],
			"coeffs_47" : [ 0.212118, 0.164243, -0.086117, -0.078452 ],
			"coeffs_48" : [ 0.179172, -0.154059, 0.038748, 0.212617 ],
			"coeffs_49" : [ -0.288473, -0.192842, -0.167123, -0.178488 ],
			"coeffs_50" : [ -0.141459, -0.033072, -0.220139, 0.160042 ],
			"coeffs_51" : [ 0.253924, 0.028576, -0.010626, 0.113613 ],
			"coeffs_52" : [ 0.014583, 0.117876, 0.025993, 0.152092 ],
			"coeffs_53" : [ 0.114623, -0.150497, -0.061871, -0.283646 ],
			"coeffs_54" : [ -0.186561, -0.204034, 0.105197, -0.064283 ],
			"coeffs_55" : [ -0.099307, -0.230410, 0.284006, -0.140035 ],
			"coeffs_56" : [ -0.070765, 0.103100, 0.137762, 0.129285 ],
			"coeffs_57" : [ -0.296063, 0.192222, 0.233171, 0.203987 ],
			"coeffs_58" : [ -0.005362, 0.268547, 0.208750, 0.066528 ],
			"coeffs_59" : [ -0.123967, 0.238399, -0.311241, -0.286425 ],
			"coeffs_60" : [ -0.050065, -0.041679, 0.131804, 0.217320 ],
			"coeffs_61" : [ 0.033735, -0.072432, -0.169780, -0.200842 ],
			"coeffs_62" : [ 0.058466, 0.086036, -0.239198, -0.059012 ],
			"coeffs_63" : [ 0.213796, -0.096881, 0.016932, -0.075751 ],
			"intercepts" : [ 0.082071, -0.175792, -0.019852, 0.185997 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.241595, 0.442287, 0.491537, 0.478910, 0.205650, -0.489465, -0.049779, -0.492196 ],
			"coeffs_1" : [ 0.281933, 0.179401, 0.669087, 0.374365, 0.624949, -0.349319, 0.131023, 0.438880 ],
			"coeffs_2" : [ 0.282440, 0.626504, -0.339840, 0.441947, 0.349262, 0.677131, -0.001542, 0.249485 ],
			"coeffs_3" : [ 0.433303, 0.357252, 0.413214, -0.670744, 0.228754, 0.643638, 0.121380, 0.576142 ],
			"intercepts" : [ -0.214143, 0.229807, -0.514996, 0.194459, -0.705166, 0.424940, -0.008643, 0.035034 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.287134, -0.546086, -0.474302, -0.210799, -0.426106, 0.232046 ],
			"coeffs_1" : [ -0.064456, -0.166256, -0.172591, 0.387102, 0.323079, -0.242876 ],
			"coeffs_2" : [ 0.321966, -0.526800, 0.522738, -0.158466, 0.160227, -0.370909 ],
			"coeffs_3" : [ -0.391331, 0.148242, -0.210419, 0.563269, -0.559200, -0.300043 ],
			"coeffs_4" : [ 0.264090, 0.044977, 0.425745, 0.405154, -0.363429, -0.415423 ],
			"coeffs_5" : [ -0.573973, 0.158576, 0.212295, 0.248759, -0.163486, 0.041223 ],
			"coeffs_6" : [ 0.590878, -0.450284, -0.203710, -0.203721, 0.012797, -0.182967 ],
			"coeffs_7" : [ -0.236258, -0.194230, -0.160988, 0.333603, 0.087162, -0.273546 ],
			"intercepts" : [ -0.225960, 0.042236, 0.548039, 0.046850, -0.514099, -0.314064 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.522463, 0.316747, -0.298095, -0.120349, -0.519252, 0.069310, -0.452619, -0.191357 ],
			"coeffs_1" : [ 0.490698, -0.371423, 0.625569, -0.351080, 0.225405, -0.393987, 0.305651, -0.278541 ],
			"coeffs_2" : [ -0.386022, -0.363099, -0.588153, 0.182507, -0.637921, 0.539415, -0.608064, 0.005322 ],
			"coeffs_3" : [ 0.529959, -0.030008, -0.104461, -0.219700, 0.473359, -0.351350, -0.395583, -0.236596 ],
			"coeffs_4" : [ 0.023167, 0.433681, -0.073574, 0.177218, 0.382514, 0.318210, -0.391339, 0.238592 ],
			"coeffs_5" : [ -0.385207, 0.330673, -0.446636, -0.160997, 0.512074, -0.358282, -0.301597, 0.090333 ],
			"intercepts" : [ 0.328218, 0.562413, -0.277629, 0.034966, 0.619958, 0.513062, 0.529132, -0.114182 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2, 3, 4, 7, 8, 9 ],
	"dataset" : 	{
		"dataset_features" : 64,
		"dataset_rows" : 16
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 64,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 64,
			"NbOutputs" : 4,
			"coeffs_00" : [ -0.025613, 0.154095, -0.12124, -0.021865 ],
			"coeffs_01" : [ 0.024167, -0.238174, 0.086099, -0.008862 ],
			"coeffs_02" : [ 0.230192, 0.035436, 0.270026, -0.062873 ],
			"coeffs_03" : [ 0.271518, -0.287191, -0.147398, 0.107039 ],
			"coeffs_04" : [ 0.137308, -0.165063, -0.177486, -0.254066 ],
			"coeffs_05" : [ 0.116098, -0.312458, -0.047361, -0.012991 ],
			"coeffs_06" : [ -0.032596, -0.279391, -0.152094, 0.21156 ],
			"coeffs_07" : [ 0.005568, 0.00245, -0.235949, -0.015191 ],
			"coeffs_08" : [ -0.090739, 0.109609, -0.059769, 0.12577 ],
			"coeffs_09" : [ -0.21295, 0.232234, -0.187887, 0.131357 ],
			"coeffs_10" : [ -0.234712, 0.137927, 0.067859, 0.248193 ],
			"coeffs_11" : [ -0.205485, -0.252456, 0.080041, 0.090333 ],
			"coeffs_12" : [ 0.177378, 0.229972, 0.199743, -0.204304 ],
			"coeffs_13" : [ 0.153239, 0.217395, -0.205685, 0.112275 ],
			"coeffs_14" : [ 0.090442, 0.004971, 0.0377, 0.139095 ],
			"coeffs_15" : [ -0.227347, 0.037486, 0.121673, 0.138755 ],
			"coeffs_16" : [ -0.22361, 0.176425, -0.165366, -0.2446 ],
			"coeffs_17" : [ 0.270323, 0.255727, -0.039153, -0.266227 ],
			"coeffs_18" : [ -0.035043, 0.258588, -0.231317, 0.102259 ],
			"coeffs_19" : [ 0.113063, 0.148706, 0.243258, -0.141627 ],
			"coeffs_20" : [ 0.103666, 0.180486, 0.19134, -0.016392 ],
			"coeffs_21" : [ -0.288507, 0.123867, -0.023023, -0.074826 ],
			"coeffs_22" : [ -0.220268, -0.303342, -0.108648, 0.238089 ],
			"coeffs_23" : [ 0.012365, -0.060567, -0.068791, -0.236045 ],
			"coeffs_24" : [ 0.098972, -0.090357, -0.115281, -0.060358 ],
			"coeffs_25" : [ 0.097418, -0.230409, -0.123944, 0.150585 ],
			"coeffs_26" : [ 0.170979, 0.227505, 0.194863, 0.154191 ],
			"coeffs_27" : [ -0.145971, 0.001214, 0.064516, 0.180144 ],
			"coeffs_28" : [ 0.123601, -0.025137, 0.148114, 0.196989 ],
			"coeffs_29" : [ 0.022559, -0.125243, -0.107525, -0.166749 ],
			"coeffs_30" : [ 0.161074, 0.139941, -0.176012, 0.069661 ],
			"coeffs_31" : [ -0.162469, -0.000784, 0.055791, -0.119526 ],
			"coeffs_32" : [ 0.135719, -0.250599, -0.237015, 0.191819 ],
			"coeffs_33" : [ 0.245188, -0.222709, -0.137898, -0.200331 ],
			"coeffs_34" : [ -0.247763, -0.254354, -0.124969, -0.078507 ],
			"coeffs_35" : [ -0.209869, -0.236798, -0.28907, 0.041432 ],
			"coeffs_36" : [ -0.212975, -0.25725, 0.042672, 0.098651 ],
			"coeffs_37" : [ -0.060526, 0.056778, 0.058157, -0.21676 ],
			"coeffs_38" : [ -0.045673, 0.222814, 0.265785, -0.065969 ],
			"coeffs_39" : [ -0.222738, -0.144333, 0.123827, -0.216086 ],
			"coeffs_40" : [ 0.102492, -0.157461, 0.243448, 0.255335 ],
			"coeffs_41" : [ -0.148093, 0.126673, -0.142933, 0.207061 ],
			"coeffs_42" : [ -0.273365, 0.149389, 0.035414, -0.183145 ],
			"coeffs_43" : [ 0.112015, 0.119239, -0.017999, -0.118843 ],
			"coeffs_44" : [ 0.242849, 0.231776, -0.131837, 0.032723 ],
			"coeffs_45" : [ 0.14293, 0.009308, 0.016942, 0.245084 ],
			"coeffs_46" : [ 0.078393, 0.096123, -0.179652, -0.057848 ],
			"coeffs_47" : [ 0.212118, 0.164243, -0.086117, -0.078452 ],
			"coeffs_48" : [ 0.179172, -0.154059, 0.038748, 0.212617 ],
			"coeffs_49" : [ -0.288473, -0.192842, -0.167123, -0.178488 ],
			"coeffs_50" : [ -0.141459, -0.033072, -0.220139, 0.160042 ],
			"coeffs_51" : [ 0.253924, 0.028576, -0.010626, 0.113613 ],
			"coeffs_52" : [ 0.014583, 0.117876, 0.025993, 0.152092 ],
			"coeffs_53" : [ 0.114623, -0.150497, -0.061871, -0.283646 ],
			"coeffs_54" : [ -0.186561, -0.204034, 0.105197, -0.064283 ],
			"coeffs_55" : [ -0.099307, -0.23041, 0.284006, -0.140035 ],
			"coeffs_56" : [ -0.070765, 0.1031, 0.137762, 0.129285 ],
			"coeffs_57" : [ -0.296063, 0.192222, 0.233171, 0.203987 ],
			"coeffs_58" : [ -0.005362, 0.268547, 0.20875, 0.066528 ],
			"coeffs_59" : [ -0.123967, 0.238399, -0.311241, -0.286425 ],
			"coeffs_60" : [ -0.050065, -0.041679, 0.131804, 0.21732 ],
			"coeffs_61" : [ 0.033735, -0.072432, -0.16978, -0.200842 ],
			"coeffs_62" : [ 0.058466, 0.086036, -0.239198, -0.059012 ],
			"coeffs_63" : [ 0.213796, -0.096881, 0.016932, -0.075751 ],
			"intercepts" : [ 0.082071, -0.175792, -0.019852, 0.185997 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.241595, 0.442287, 0.491537, 0.47891, 0.20565, -0.489465, -0.049779, -0.492196 ],
			"coeffs_1" : [ 0.281933, 0.179401, 0.669087, 0.374365, 0.624949, -0.349319, 0.131023, 0.43888 ],
			"coeffs_2" : [ 0.28244, 0.626504, -0.33984, 0.441947, 0.349262, 0.677131, -0.001542, 0.249485 ],
			"coeffs_3" : [ 0.433303, 0.357252, 0.413214, -0.670744, 0.228754, 0.643638, 0.12138, 0.576142 ],
			"intercepts" : [ -0.214143, 0.229807, -0.514996, 0.194459, -0.705166, 0.42494, -0.008643, 0.035034 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ 0.287134, -0.546086, -0.474302, -0.210799, -0.426106, 0.232046 ],
			"coeffs_1" : [ -0.064456, -0.166256, -0.172591, 0.387102, 0.323079, -0.242876 ],
			"coeffs_2" : [ 0.321966, -0.5268, 0.522738, -0.158466, 0.160227, -0.370909 ],
			"coeffs_3" : [ -0.391331, 0.148242, -0.210419, 0.563269, -0.5592, -0.300043 ],
			"coeffs_4" : [ 0.26409, 0.044977, 0.425745, 0.405154, -0.363429, -0.415423 ],
			"coeffs_5" : [ -0.573973, 0.158576, 0.212295, 0.248759, -0.163486, 0.041223 ],
			"coeffs_6" : [ 0.590878, -0.450284, -0.20371, -0.203721, 0.012797, -0.182967 ],
			"coeffs_7" : [ -0.236258, -0.19423, -0.160988, 0.333603, 0.087162, -0.273546 ],
			"intercepts" : [ -0.22596, 0.042236, 0.548039, 0.04685, -0.514099, -0.314064 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.522463, 0.316747, -0.298095, -0.120349, -0.519252, 0.06931, -0.452619, -0.191357 ],
			"coeffs_1" : [ 0.490698, -0.371423, 0.625569, -0.35108, 0.225405, -0.393987, 0.305651, -0.278541 ],
			"coeffs_2" : [ -0.386022, -0.363099, -0.588153, 0.182507, -0.637921, 0.539415, -0.608064, 0.005322 ],
			"coeffs_3" : [ 0.529959, -0.030008, -0.104461, -0.2197, 0.473359, -0.35135, -0.395583, -0.236596 ],
			"coeffs_4" : [ 0.023167, 0.433681, -0.073574, 0.177218, 0.382514, 0.31821, -0.391339, 0.238592 ],
			"coeffs_5" : [ -0.385207, 0.330673, -0.446636, -0.160997, 0.512074, -0.358282, -0.301597, 0.090333 ],
			"intercepts" : [ 0.328218, 0.562413, -0.277629, 0.034966, 0.619958, 0.513062, 0.529132, -0.114182 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 64, 4, 8, 6, 8 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('digits_tiny', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.1612 0.1454 0.0582 0.0963 0.1869 0.1662 0.1089 0.0769]
 [0.1073 0.303  0.0106 0.0909 0.0707 0.3705 0.006  0.0412]
 [0.1709 0.2428 0.0274 0.0935 0.1527 0.2299 0.0258 0.057 ]
 [0.3678 0.1598 0.0042 0.0591 0.1539 0.2329 0.001  0.0213]
 [0.1105 0.3111 0.0027 0.0673 0.0453 0.4419 0.0006 0.0206]
 [0.2613 0.1821 0.021  0.0806 0.2033 0.1896 0.0158 0.0463]
 [0.3135 0.1249 0.0262 0.0695 0.2679 0.1287 0.0243 0.0451]
 [0.2862 0.1489 0.02   0.0811 0.2132 0.1888 0.0155 0.0464]
 [0.3482 0.0976 0.0304 0.0466 0.3478 0.064  0.0306 0.0347]
 [0.194  0.2005 0.0282 0.0955 0.17   0.2245 0.0283 0.059 ]
 [0.2017 0.1448 0.055  0.0797 0.2407 0.122  0.0912 0.0648]
 [0.3116 0.1108 0.0362 0.0552 0.3246 0.0783 0.0413 0.042 ]
 [0.375  0.1584 0.0038 0.0575 0.1519 0.2323 0.0009 0.0202]
 [0.347  0.0981 0.0298 0.0501 0.3363 0.0721 0.03   0.0366]
 [0.1709 0.1848 0.0311 0.1055 0.1536 0.2504 0.0367 0.0669]
 [0.2221 0.2136 0.012  0.0861 0.1391 0.2799 0.0065 0.0407]]
(16, 8)
(16, 8) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'digits_tiny', 'size': 16, 'accuracy': 0.25, 'auc': 0.46467490842490844}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'digits_tiny', 'training_time_in_sec': 0.014, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 10 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 11 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 12 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 13 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 14 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 15 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 16 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 17 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 18 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 19 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 20 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 21 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 22 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 23 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 24 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 25 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 26 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 27 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 28 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 29 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 30 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 31 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 32 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 33 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 34 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 35 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 36 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 37 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 38 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 39 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 40 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 41 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 42 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 43 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 44 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 45 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 46 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 47 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 48 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 49 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 50 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 51 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 52 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 53 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 54 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 55 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 56 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 57 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 58 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 59 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 60 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 61 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 62 64
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 63 64
{
   "Contributions" : {
      "X_0" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_1" : [ 0.000122, -0.000030, -0.000015, -0.000024, 0.000088, -0.000095, -0.000026, -0.000022 ],
      "X_2" : [ 0.001451, -0.001087, 0.000022, -0.000095, 0.001432, -0.001561, -0.000104, -0.000057 ],
      "X_3" : [ -0.000383, 0.000385, -0.000058, 0.000072, -0.000022, 0.000097, -0.000091, -0.000000 ],
      "X_4" : [ -0.007600, 0.003714, 0.000430, 0.001669, -0.005169, 0.004878, 0.001064, 0.001014 ],
      "X_5" : [ -0.001371, 0.001324, -0.000213, -0.000026, -0.002299, 0.003129, -0.000353, -0.000192 ],
      "X_6" : [ 0.000284, 0.000850, -0.000274, -0.000467, -0.000527, 0.001167, -0.000562, -0.000470 ],
      "X_7" : [ -0.000121, 0.000020, 0.000014, 0.000032, -0.000077, 0.000073, 0.000033, 0.000024 ],
      "X_8" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_9" : [ -0.003642, 0.001676, 0.000190, 0.000562, -0.002178, 0.002490, 0.000493, 0.000409 ],
      "X_10" : [ -0.004995, 0.002519, 0.000500, 0.000849, -0.002245, 0.001845, 0.000846, 0.000680 ],
      "X_11" : [ 0.002806, -0.002265, 0.000102, -0.000820, 0.002310, -0.002021, 0.000218, -0.000329 ],
      "X_12" : [ -0.002402, 0.001633, -0.000194, 0.000815, -0.005014, 0.005122, -0.000142, 0.000183 ],
      "X_13" : [ 0.006537, -0.004446, 0.000010, -0.000389, 0.005642, -0.006757, -0.000547, -0.000049 ],
      "X_14" : [ 0.002807, -0.001791, -0.000111, -0.000327, 0.002513, -0.002450, -0.000433, -0.000207 ],
      "X_15" : [ 0.000456, -0.000081, -0.000048, -0.000141, 0.000333, -0.000303, -0.000119, -0.000096 ],
      "X_16" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_17" : [ 0.000538, -0.001221, 0.000379, 0.000038, 0.000461, -0.001263, 0.000795, 0.000273 ],
      "X_18" : [ 0.000469, -0.000336, 0.000204, -0.000526, 0.000846, -0.001067, 0.000578, -0.000169 ],
      "X_19" : [ -0.004097, 0.002707, -0.000102, -0.000013, -0.001303, 0.002987, -0.000024, -0.000155 ],
      "X_20" : [ -0.000947, 0.000497, 0.000327, 0.000127, -0.001518, 0.000485, 0.000817, 0.000212 ],
      "X_21" : [ -0.001270, 0.000600, 0.000035, 0.000502, -0.002017, 0.001422, 0.000413, 0.000314 ],
      "X_22" : [ 0.002656, 0.000515, -0.000863, -0.001049, -0.000477, 0.001786, -0.001437, -0.001132 ],
      "X_23" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_24" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_25" : [ -0.000491, -0.000091, 0.000070, 0.000315, -0.000340, 0.000345, 0.000011, 0.000182 ],
      "X_26" : [ -0.002429, -0.001654, 0.001052, 0.000265, 0.002656, -0.002670, 0.002007, 0.000773 ],
      "X_27" : [ 0.004957, -0.002633, -0.000182, -0.000769, 0.002515, -0.003154, -0.000294, -0.000439 ],
      "X_28" : [ 0.002982, -0.001161, 0.000096, -0.000283, 0.001181, -0.002878, 0.000062, 0.000000 ],
      "X_29" : [ 0.000482, 0.001234, -0.000550, 0.000281, -0.001159, 0.001149, -0.001206, -0.000231 ],
      "X_30" : [ 0.001467, -0.001650, 0.000131, -0.000016, 0.001458, -0.001727, 0.000212, 0.000125 ],
      "X_31" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_32" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_33" : [ 0.003428, -0.003842, 0.000745, -0.000339, 0.003650, -0.005515, 0.001499, 0.000373 ],
      "X_34" : [ 0.003836, -0.001195, -0.000292, -0.000348, 0.001940, -0.002981, -0.000682, -0.000279 ],
      "X_35" : [ -0.000182, -0.000844, -0.000006, -0.000085, 0.000643, 0.000673, -0.000086, -0.000113 ],
      "X_36" : [ 0.010481, -0.009733, 0.000830, -0.000813, 0.007321, -0.010254, 0.001829, 0.000340 ],
      "X_37" : [ 0.002984, -0.002781, 0.000135, -0.000128, 0.002521, -0.002881, 0.000137, 0.000012 ],
      "X_38" : [ -0.000221, -0.000575, 0.000078, -0.000084, 0.000525, 0.000072, 0.000219, -0.000014 ],
      "X_39" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_40" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_41" : [ -0.002038, 0.001814, -0.000118, 0.000659, -0.002925, 0.002608, -0.000222, 0.000222 ],
      "X_42" : [ -0.001629, 0.001790, -0.000582, 0.000519, -0.003093, 0.004400, -0.001265, -0.000140 ],
      "X_43" : [ -0.003244, 0.003946, -0.000392, 0.000190, -0.002399, 0.003077, -0.000902, -0.000278 ],
      "X_44" : [ -0.002123, 0.003682, -0.000901, 0.001656, -0.002932, 0.002802, -0.002543, 0.000358 ],
      "X_45" : [ 0.004545, -0.004023, 0.000115, -0.000228, 0.003788, -0.004359, 0.000161, 0.000002 ],
      "X_46" : [ 0.002607, -0.001291, -0.000040, -0.000602, 0.001447, -0.001822, 0.000007, -0.000307 ],
      "X_47" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_48" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_49" : [ -0.000063, -0.000075, 0.000001, 0.000079, 0.000483, -0.000361, -0.000103, 0.000040 ],
      "X_50" : [ -0.006810, 0.004689, 0.000461, 0.001106, -0.003667, 0.002839, 0.000645, 0.000738 ],
      "X_51" : [ -0.000997, 0.001543, -0.000301, -0.000262, -0.000591, 0.001791, -0.000818, -0.000367 ],
      "X_52" : [ 0.004759, -0.002196, -0.000366, -0.000226, 0.002933, -0.003562, -0.001048, -0.000294 ],
      "X_53" : [ 0.001651, 0.002061, -0.001476, -0.000897, -0.002587, 0.004946, -0.002472, -0.001224 ],
      "X_54" : [ 0.000475, 0.001722, -0.000807, 0.000039, -0.001338, 0.002099, -0.001677, -0.000512 ],
      "X_55" : [ -0.000080, 0.000171, -0.000058, -0.000084, -0.000206, 0.000423, -0.000066, -0.000100 ],
      "X_56" : [ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 ],
      "X_57" : [ -0.000082, 0.000037, 0.000025, 0.000009, -0.000043, -0.000022, 0.000049, 0.000028 ],
      "X_58" : [ -0.001963, 0.000174, 0.000476, 0.000399, -0.001385, 0.000707, 0.001103, 0.000489 ],
      "X_59" : [ -0.004855, 0.001629, 0.000554, 0.000462, -0.001290, 0.001626, 0.001371, 0.000504 ],
      "X_60" : [ -0.001299, -0.000893, 0.000390, 0.000610, -0.000232, 0.000306, 0.000614, 0.000503 ],
      "X_61" : [ -0.000062, 0.001669, -0.000962, -0.000463, -0.000644, 0.003259, -0.001949, -0.000848 ],
      "X_62" : [ -0.001609, 0.000861, 0.000024, 0.000142, -0.000415, 0.000977, -0.000055, 0.000075 ],
      "X_63" : [ -0.000565, 0.000566, -0.000115, -0.000107, 0.000154, 0.000487, -0.000267, -0.000154 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 36, 4, 50, 13, 10, 27, 59, 52, 45, 19 ],
      "class_1" : [ 36, 50, 13, 45, 43, 33, 4, 44, 37, 19 ],
      "class_2" : [ 53, 26, 61, 44, 22, 36, 54, 33, 42, 59 ],
      "class_3" : [ 4, 44, 50, 22, 53, 10, 11, 12, 36, 27 ],
      "class_4" : [ 36, 13, 4, 12, 45, 50, 33, 42, 52, 44 ],
      "class_5" : [ 36, 13, 33, 12, 53, 4, 42, 45, 52, 61 ],
      "class_6" : [ 44, 53, 26, 61, 36, 54, 33, 22, 59, 42 ],
      "class_7" : [ 53, 22, 4, 61, 26, 50, 10, 54, 59, 60 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_tiny_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('digits_tiny', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('digits_tiny', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('digits_tiny', 'MLPClassifier', 'duckdb')
ore_4" AS "Score_4",
  arg_max_cte."Proba_4" AS "Proba_4",
  CASE WHEN (arg_max_cte."Proba_4" IS NULL OR arg_max_cte."Proba_4" > 0.0) THEN LN( arg_max_cte."Proba_4" ) ELSE -1.79769313486231e+308 END AS "LogProba_4",
  arg_max_cte."Score_5" AS "Score_5",
  arg_max_cte."Proba_5" AS "Proba_5",
  CASE WHEN (arg_max_cte."Proba_5" IS NULL OR arg_max_cte."Proba_5" > 0.0) THEN LN( arg_max_cte."Proba_5" ) ELSE -1.79769313486231e+308 END AS "LogProba_5",
  arg_max_cte."Score_6" AS "Score_6",
  arg_max_cte."Proba_6" AS "Proba_6",
  CASE WHEN (arg_max_cte."Proba_6" IS NULL OR arg_max_cte."Proba_6" > 0.0) THEN LN( arg_max_cte."Proba_6" ) ELSE -1.79769313486231e+308 END AS "LogProba_6",
  arg_max_cte."Score_7" AS "Score_7",
  arg_max_cte."Proba_7" AS "Proba_7",
  CASE WHEN (arg_max_cte."Proba_7" IS NULL OR arg_max_cte."Proba_7" > 0.0) THEN LN( arg_max_cte."Proba_7" ) ELSE -1.79769313486231e+308 END AS "LogProba_7",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('digits_tiny', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 64 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
 10  X_10    16 non-null     float32
 11  X_11    16 non-null     float32
 12  X_12    16 non-null     float32
 13  X_13    16 non-null     float32
 14  X_14    16 non-null     float32
 15  X_15    16 non-null     float32
 16  X_16    16 non-null     float32
 17  X_17    16 non-null     float32
 18  X_18    16 non-null     float32
 19  X_19    16 non-null     float32
 20  X_20    16 non-null     float32
 21  X_21    16 non-null     float32
 22  X_22    16 non-null     float32
 23  X_23    16 non-null     float32
 24  X_24    16 non-null     float32
 25  X_25    16 non-null     float32
 26  X_26    16 non-null     float32
 27  X_27    16 non-null     float32
 28  X_28    16 non-null     float32
 29  X_29    16 non-null     float32
 30  X_30    16 non-null     float32
 31  X_31    16 non-null     float32
 32  X_32    16 non-null     float32
 33  X_33    16 non-null     float32
 34  X_34    16 non-null     float32
 35  X_35    16 non-null     float32
 36  X_36    16 non-null     float32
 37  X_37    16 non-null     float32
 38  X_38    16 non-null     float32
 39  X_39    16 non-null     float32
 40  X_40    16 non-null     float32
 41  X_41    16 non-null     float32
 42  X_42    16 non-null     float32
 43  X_43    16 non-null     float32
 44  X_44    16 non-null     float32
 45  X_45    16 non-null     float32
 46  X_46    16 non-null     float32
 47  X_47    16 non-null     float32
 48  X_48    16 non-null     float32
 49  X_49    16 non-null     float32
 50  X_50    16 non-null     float32
 51  X_51    16 non-null     float32
 52  X_52    16 non-null     float32
 53  X_53    16 non-null     float32
 54  X_54    16 non-null     float32
 55  X_55    16 non-null     float32
 56  X_56    16 non-null     float32
 57  X_57    16 non-null     float32
 58  X_58    16 non-null     float32
 59  X_59    16 non-null     float32
 60  X_60    16 non-null     float32
 61  X_61    16 non-null     float32
 62  X_62    16 non-null     float32
 63  X_63    16 non-null     float32
dtypes: float32(64)
memory usage: 4.1 KB
       X_0  X_1   X_2   X_3   X_4   X_5  ...  X_58  X_59  X_60  X_61  X_62  X_63
index                                    ...                                    
0      0.0  0.0   0.0   3.0  15.0  10.0  ...   0.0   4.0   9.0  14.0   7.0   0.0
1      0.0  0.0  11.0  10.0   0.0   0.0  ...   8.0  16.0  16.0  16.0  16.0  12.0
2      0.0  0.0   0.0  15.0  11.0   0.0  ...   0.0  14.0   4.0   0.0   0.0   0.0
3      0.0  0.0   7.0  13.0  10.0   1.0  ...   7.0  13.0  16.0  15.0   4.0   0.0
4      0.0  0.0   5.0  12.0  13.0   2.0  ...   6.0  16.0  13.0   3.0   0.0   0.0
5      0.0  0.0   1.0   8.0  15.0  11.0  ...   0.0  11.0  15.0   8.0   0.0   0.0
6      0.0  0.0   2.0  13.0  16.0  13.0  ...   3.0  15.0   2.0   0.0   0.0   0.0
7      0.0  0.0   4.0  12.0   5.0   0.0  ...   2.0  11.0  16.0  11.0   0.0   0.0
8      0.0  0.0   1.0  12.0  16.0  14.0  ...   3.0  12.0  16.0  11.0   1.0   0.0
9      0.0  0.0   2.0  13.0  16.0  14.0  ...   5.0  15.0   4.0   0.0   0.0   0.0
10     0.0  0.0   0.0   3.0  14.0   9.0  ...   0.0   3.0  16.0   9.0   0.0   0.0
11     0.0  0.0   5.0  13.0  16.0  10.0  ...   5.0  14.0  15.0   9.0   0.0   0.0
12     0.0  1.0  11.0  13.0  10.0   1.0  ...   9.0  15.0  16.0  13.0   3.0   0.0
13     0.0  0.0   0.0   8.0  16.0  16.0  ...   0.0  12.0   9.0   0.0   0.0   0.0
14     0.0  0.0   1.0   9.0  15.0  11.0  ...   1.0  10.0  13.0   3.0   0.0   0.0
15     0.0  0.0   5.0  12.0   1.0   6.0  ...   4.0  12.0  12.0   3.0   0.0   0.0

[16 rows x 64 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 27 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        16 non-null     float64
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        16 non-null     float64
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Score_2        16 non-null     float64
 8   Proba_2        16 non-null     float64
 9   LogProba_2     16 non-null     float64
 10  Score_3        16 non-null     float64
 11  Proba_3        16 non-null     float64
 12  LogProba_3     16 non-null     float64
 13  Score_4        16 non-null     float64
 14  Proba_4        16 non-null     float64
 15  LogProba_4     16 non-null     float64
 16  Score_5        16 non-null     float64
 17  Proba_5        16 non-null     float64
 18  LogProba_5     16 non-null     float64
 19  Score_6        16 non-null     float64
 20  Proba_6        16 non-null     float64
 21  LogProba_6     16 non-null     float64
 22  Score_7        16 non-null     float64
 23  Proba_7        16 non-null     float64
 24  LogProba_7     16 non-null     float64
 25  Decision       16 non-null     int64  
 26  DecisionProba  16 non-null     float64
dtypes: float64(25), int64(2)
memory usage: 3.5 KB
    index   Score_0   Proba_0  ...  LogProba_7  Decision  DecisionProba
0       0  0.486318  0.161243  ...   -2.565054         4       0.186905
1       1 -0.425183  0.107255  ...   -3.190383         5       0.370453
2       2  0.206629  0.170885  ...   -2.865401         1       0.242793
3       3  0.843168  0.367807  ...   -3.850151         0       0.367807
4       4 -0.524269  0.110480  ...   -3.881014         5       0.441910
5       5  0.681664  0.261277  ...   -3.071850         0       0.261277
6       6  1.105890  0.313524  ...   -3.099370         0       0.313524
7       7  0.817061  0.286173  ...   -3.071259         0       0.286173
8       8  1.551893  0.348162  ...   -3.359737         0       0.348162
9       9  0.374975  0.194026  ...   -2.830074         5       0.224452
10     10  0.780539  0.201687  ...   -2.735736         4       0.240660
11     11  1.352449  0.311633  ...   -3.170491         4       0.324599
12     12  0.858494  0.374978  ...   -3.901892         0       0.374978
13     13  1.499146  0.346977  ...   -3.307357         0       0.346977
14     14  0.270913  0.170946  ...   -2.705253         5       0.250383
15     15  0.336257  0.222050  ...   -3.201809         5       0.279940

[16 rows x 27 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Score_4', 'Proba_4', 'LogProba_4', 'Score_5', 'Proba_5',
       'LogProba_5', 'Score_6', 'Proba_6', 'LogProba_6', 'Score_7', 'Proba_7',
       'LogProba_7', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_6  Py_Proba_7  Py_Decision
0       0  0.486318     0.161243  ...    0.108859    0.076915            4
1       1 -0.425183     0.107255  ...    0.005956    0.041156            7
2       2  0.206629     0.170885  ...    0.025833    0.056961            1
3       3  0.843168     0.367807  ...    0.001041    0.021277            0
4       4 -0.524269     0.110480  ...    0.000600    0.020630            7
5       5  0.681664     0.261277  ...    0.015835    0.046335            0
6       6  1.105890     0.313524  ...    0.024260    0.045078            0
7       7  0.817061     0.286173  ...    0.015457    0.046363            0
8       8  1.551893     0.348162  ...    0.030611    0.034744            0
9       9  0.374975     0.194026  ...    0.028303    0.059009            7
10     10  0.780539     0.201687  ...    0.091246    0.064847            4
11     11  1.352449     0.311633  ...    0.041310    0.041983            4
12     12  0.858494     0.374978  ...    0.000891    0.020204            0
13     13  1.499146     0.346977  ...    0.029965    0.036613            0
14     14  0.270913     0.170946  ...    0.036694    0.066853            7
15     15  0.336257     0.222050  ...    0.006485    0.040689            7

[16 rows x 36 columns]
MLLITE_CLASS_SQL_ERROR ('digits_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 7.719905116172765e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
0     0.161243     0.161243 -5.843566e-07
1     0.107256     0.107255  7.816291e-07
2     0.170884     0.170885 -1.554376e-06
3     0.367806     0.367807 -3.932121e-07
4     0.110480     0.110480  6.602867e-07
5     0.261279     0.261277  2.512102e-06
6     0.313523     0.313524 -8.200705e-07
7     0.286173     0.286173 -1.189958e-07
8     0.348162     0.348162  3.308415e-07
9     0.194024     0.194026 -1.120966e-06
10    0.201686     0.201687 -9.165771e-07
11    0.311633     0.311633  3.369183e-07
12    0.374977     0.374978 -2.543720e-07
13    0.346977     0.346977  5.194958e-07
14    0.170947     0.170946  6.312698e-07
15    0.222051     0.222050  8.163779e-07
MLLITE_CLASS_SQL_ERROR ('digits_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 4.2153554624668743e-07
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
0     0.145417     0.145417 -1.614911e-07
1     0.302992     0.302992  1.757763e-07
2     0.242793     0.242793  7.578788e-07
3     0.159759     0.159758  6.744674e-07
4     0.311072     0.311071  1.430907e-06
5     0.182072     0.182074 -1.368945e-06
6     0.124897     0.124897  1.004828e-07
7     0.148949     0.148949  1.684668e-07
8     0.097633     0.097633  2.241404e-08
9     0.200487     0.200487  4.746497e-07
10    0.144792     0.144792  1.714838e-07
11    0.110814     0.110814  4.059213e-09
12    0.158353     0.158352  6.119570e-07
13    0.098128     0.098128 -5.415347e-08
14    0.184849     0.184849 -3.779611e-07
15    0.213557     0.213557  1.894742e-07
MLLITE_CLASS_SQL_ERROR ('digits_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 4.7663142979014134e-08
    Py_Proba_2  SQL_Proba_2   SQL_Error_2
0     0.058231     0.058231 -3.360539e-08
1     0.010582     0.010582  1.808114e-08
2     0.027402     0.027402  1.081693e-07
3     0.004211     0.004212 -2.263892e-08
4     0.002685     0.002685 -1.015632e-08
5     0.020989     0.020989 -3.275010e-08
6     0.026174     0.026174  1.033129e-07
7     0.019959     0.019959 -1.408335e-08
8     0.030415     0.030416 -6.583417e-08
9     0.028246     0.028246  2.145863e-08
10    0.055042     0.055042  6.024197e-08
11    0.036199     0.036199 -6.890148e-08
12    0.003845     0.003845 -2.446204e-08
13    0.029759     0.029759 -8.398876e-08
14    0.031126     0.031126  6.057059e-08
15    0.012050     0.012050 -3.435530e-08
MLLITE_CLASS_SQL_ERROR ('digits_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_3', 'SQL_Proba_3') 1.7383359477134847e-07
    Py_Proba_3  SQL_Proba_3   SQL_Error_3
0     0.096251     0.096250  3.229911e-07
1     0.090860     0.090860  9.250705e-08
2     0.093522     0.093521  3.932044e-07
3     0.059126     0.059125  1.079125e-07
4     0.067307     0.067307 -2.274536e-09
5     0.080561     0.080561 -3.860367e-07
6     0.069490     0.069490  2.308721e-07
7     0.081149     0.081148  1.024418e-07
8     0.046566     0.046566 -5.970428e-08
9     0.095520     0.095520  3.196061e-07
10    0.079738     0.079738  3.372263e-07
11    0.055180     0.055180 -7.669527e-08
12    0.057542     0.057542  9.761721e-08
13    0.050141     0.050141 -1.543314e-07
14    0.105513     0.105513 -4.332300e-08
15    0.086148     0.086149 -5.459378e-08
MLLITE_CLASS_SQL_ERROR ('digits_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_4', 'SQL_Proba_4') 6.11446914233673e-07
    Py_Proba_4  SQL_Proba_4   SQL_Error_4
0     0.186904     0.186905 -9.834872e-07
1     0.070747     0.070747  4.615900e-07
2     0.152698     0.152699 -1.135247e-06
3     0.153910     0.153911 -5.993185e-07
4     0.045318     0.045318  1.505818e-07
5     0.203339     0.203337  1.734319e-06
6     0.267888     0.267888 -4.528534e-07
7     0.213169     0.213170 -2.706704e-07
8     0.347848     0.347848  7.631601e-08
9     0.169958     0.169959 -9.630524e-07
10    0.240659     0.240660 -1.147549e-06
11    0.324600     0.324599  1.448072e-07
12    0.151920     0.151921 -5.664687e-07
13    0.336299     0.336299  2.718447e-07
14    0.153636     0.153635  5.689375e-07
15    0.139081     0.139081  2.561069e-07
MLLITE_CLASS_SQL_ERROR ('digits_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_5', 'SQL_Proba_5') 7.774273767758785e-07
    Py_Proba_5  SQL_Proba_5   SQL_Error_5
0     0.166180     0.166179  9.468787e-07
1     0.370451     0.370453 -1.562781e-06
2     0.229908     0.229907  8.779736e-07
3     0.232870     0.232870  4.258683e-08
4     0.441908     0.441910 -2.253327e-06
5     0.189590     0.189593 -2.166632e-06
6     0.128689     0.128689  1.437289e-07
7     0.188780     0.188780 -6.635035e-08
8     0.064020     0.064020 -1.752102e-07
9     0.224453     0.224452  7.182318e-07
10    0.121989     0.121988  7.022621e-07
11    0.078283     0.078283 -2.165461e-07
12    0.232268     0.232268  6.383365e-08
13    0.072118     0.072119 -3.689306e-07
14    0.250382     0.250383 -1.059335e-06
15    0.279938     0.279940 -1.074230e-06
MLLITE_CLASS_SQL_ERROR ('digits_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_6', 'SQL_Proba_6') 1.0145233334342738e-07
    Py_Proba_6  SQL_Proba_6   SQL_Error_6
0     0.108859     0.108859  8.946766e-08
1     0.005956     0.005956  2.590199e-08
2     0.025833     0.025833  2.854257e-07
3     0.001041     0.001041 -3.079901e-09
4     0.000600     0.000600 -2.545913e-09
5     0.015835     0.015835 -1.139404e-08
6     0.024260     0.024260  2.472683e-07
7     0.015457     0.015457  2.952342e-08
8     0.030611     0.030611 -6.517933e-08
9     0.028303     0.028303  1.400439e-07
10    0.091246     0.091246  3.738278e-07
11    0.041310     0.041310 -9.025891e-08
12    0.000891     0.000891 -4.012976e-09
13    0.029965     0.029965 -9.858566e-08
14    0.036694     0.036694  1.363247e-07
15    0.006485     0.006485 -2.039707e-08
MLLITE_CLASS_SQL_ERROR ('digits_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_7', 'SQL_Proba_7') 1.2586444168784412e-07
    Py_Proba_7  SQL_Proba_7   SQL_Error_7
0     0.076915     0.076915  2.210635e-07
1     0.041156     0.041156  1.306952e-07
2     0.056961     0.056960  3.452031e-07
3     0.021277     0.021277  3.856669e-08
4     0.020630     0.020630  2.914732e-08
5     0.046335     0.046335 -1.260639e-07
6     0.045078     0.045078  2.256041e-07
7     0.046363     0.046363  1.016813e-07
8     0.034744     0.034744 -3.756656e-08
9     0.059009     0.059008  2.479786e-07
10    0.064847     0.064846  2.663473e-07
11    0.041983     0.041983 -4.083358e-08
12    0.020204     0.020204  3.388189e-08
13    0.036613     0.036613 -8.909263e-08
14    0.066853     0.066853  7.420331e-08
15    0.040689     0.040689  5.902204e-09
MLLITE_CLASS_SQL_EXECUTION_STATUS ('digits_tiny', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
0             4             4
1             7             5
2             1             1
3             0             0
4             7             5
5             0             0
6             0             0
7             0             0
8             0             0
9             7             5
10            4             4
11            4             4
12            0             0
13            0             0
14            7             5
15            7             5
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_digits_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('digits_tiny', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('digits_tiny', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('digits_tiny', 'MLPClassifier', 'sqlite')
ore_4" AS "Score_4",
  arg_max_cte."Proba_4" AS "Proba_4",
  CASE WHEN (arg_max_cte."Proba_4" IS NULL OR arg_max_cte."Proba_4" > 0.0) THEN LN( arg_max_cte."Proba_4" ) ELSE -1.79769313486231e+308 END AS "LogProba_4",
  arg_max_cte."Score_5" AS "Score_5",
  arg_max_cte."Proba_5" AS "Proba_5",
  CASE WHEN (arg_max_cte."Proba_5" IS NULL OR arg_max_cte."Proba_5" > 0.0) THEN LN( arg_max_cte."Proba_5" ) ELSE -1.79769313486231e+308 END AS "LogProba_5",
  arg_max_cte."Score_6" AS "Score_6",
  arg_max_cte."Proba_6" AS "Proba_6",
  CASE WHEN (arg_max_cte."Proba_6" IS NULL OR arg_max_cte."Proba_6" > 0.0) THEN LN( arg_max_cte."Proba_6" ) ELSE -1.79769313486231e+308 END AS "LogProba_6",
  arg_max_cte."Score_7" AS "Score_7",
  arg_max_cte."Proba_7" AS "Proba_7",
  CASE WHEN (arg_max_cte."Proba_7" IS NULL OR arg_max_cte."Proba_7" > 0.0) THEN LN( arg_max_cte."Proba_7" ) ELSE -1.79769313486231e+308 END AS "LogProba_7",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('digits_tiny', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 64 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
 10  X_10    16 non-null     float32
 11  X_11    16 non-null     float32
 12  X_12    16 non-null     float32
 13  X_13    16 non-null     float32
 14  X_14    16 non-null     float32
 15  X_15    16 non-null     float32
 16  X_16    16 non-null     float32
 17  X_17    16 non-null     float32
 18  X_18    16 non-null     float32
 19  X_19    16 non-null     float32
 20  X_20    16 non-null     float32
 21  X_21    16 non-null     float32
 22  X_22    16 non-null     float32
 23  X_23    16 non-null     float32
 24  X_24    16 non-null     float32
 25  X_25    16 non-null     float32
 26  X_26    16 non-null     float32
 27  X_27    16 non-null     float32
 28  X_28    16 non-null     float32
 29  X_29    16 non-null     float32
 30  X_30    16 non-null     float32
 31  X_31    16 non-null     float32
 32  X_32    16 non-null     float32
 33  X_33    16 non-null     float32
 34  X_34    16 non-null     float32
 35  X_35    16 non-null     float32
 36  X_36    16 non-null     float32
 37  X_37    16 non-null     float32
 38  X_38    16 non-null     float32
 39  X_39    16 non-null     float32
 40  X_40    16 non-null     float32
 41  X_41    16 non-null     float32
 42  X_42    16 non-null     float32
 43  X_43    16 non-null     float32
 44  X_44    16 non-null     float32
 45  X_45    16 non-null     float32
 46  X_46    16 non-null     float32
 47  X_47    16 non-null     float32
 48  X_48    16 non-null     float32
 49  X_49    16 non-null     float32
 50  X_50    16 non-null     float32
 51  X_51    16 non-null     float32
 52  X_52    16 non-null     float32
 53  X_53    16 non-null     float32
 54  X_54    16 non-null     float32
 55  X_55    16 non-null     float32
 56  X_56    16 non-null     float32
 57  X_57    16 non-null     float32
 58  X_58    16 non-null     float32
 59  X_59    16 non-null     float32
 60  X_60    16 non-null     float32
 61  X_61    16 non-null     float32
 62  X_62    16 non-null     float32
 63  X_63    16 non-null     float32
dtypes: float32(64)
memory usage: 4.1 KB
       X_0  X_1   X_2   X_3   X_4   X_5  ...  X_58  X_59  X_60  X_61  X_62  X_63
index                                    ...                                    
0      0.0  0.0   0.0   3.0  15.0  10.0  ...   0.0   4.0   9.0  14.0   7.0   0.0
1      0.0  0.0  11.0  10.0   0.0   0.0  ...   8.0  16.0  16.0  16.0  16.0  12.0
2      0.0  0.0   0.0  15.0  11.0   0.0  ...   0.0  14.0   4.0   0.0   0.0   0.0
3      0.0  0.0   7.0  13.0  10.0   1.0  ...   7.0  13.0  16.0  15.0   4.0   0.0
4      0.0  0.0   5.0  12.0  13.0   2.0  ...   6.0  16.0  13.0   3.0   0.0   0.0
5      0.0  0.0   1.0   8.0  15.0  11.0  ...   0.0  11.0  15.0   8.0   0.0   0.0
6      0.0  0.0   2.0  13.0  16.0  13.0  ...   3.0  15.0   2.0   0.0   0.0   0.0
7      0.0  0.0   4.0  12.0   5.0   0.0  ...   2.0  11.0  16.0  11.0   0.0   0.0
8      0.0  0.0   1.0  12.0  16.0  14.0  ...   3.0  12.0  16.0  11.0   1.0   0.0
9      0.0  0.0   2.0  13.0  16.0  14.0  ...   5.0  15.0   4.0   0.0   0.0   0.0
10     0.0  0.0   0.0   3.0  14.0   9.0  ...   0.0   3.0  16.0   9.0   0.0   0.0
11     0.0  0.0   5.0  13.0  16.0  10.0  ...   5.0  14.0  15.0   9.0   0.0   0.0
12     0.0  1.0  11.0  13.0  10.0   1.0  ...   9.0  15.0  16.0  13.0   3.0   0.0
13     0.0  0.0   0.0   8.0  16.0  16.0  ...   0.0  12.0   9.0   0.0   0.0   0.0
14     0.0  0.0   1.0   9.0  15.0  11.0  ...   1.0  10.0  13.0   3.0   0.0   0.0
15     0.0  0.0   5.0  12.0   1.0   6.0  ...   4.0  12.0  12.0   3.0   0.0   0.0

[16 rows x 64 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('digits_tiny', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('digits_tiny', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
