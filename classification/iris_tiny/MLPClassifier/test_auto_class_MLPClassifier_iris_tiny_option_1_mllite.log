READING_CSV iris_tiny ['data/tiny/iris_tiny.csv']
    sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                 6.4               3.2  ...               2.3       2
1                 6.3               3.3  ...               1.6       1
2                 7.1               3.0  ...               2.1       2
3                 6.1               2.6  ...               1.4       2
4                 6.8               3.2  ...               2.3       2
5                 5.8               2.7  ...               1.0       1
6                 6.1               2.8  ...               1.3       1
7                 6.0               3.4  ...               1.6       1
8                 5.4               3.7  ...               0.2       0
9                 4.8               3.4  ...               0.2       0
10                5.4               3.4  ...               0.4       0
11                5.9               3.0  ...               1.5       1
12                5.1               2.5  ...               1.1       1
13                5.8               2.6  ...               1.2       1
14                6.7               3.3  ...               2.1       2
15                5.0               3.3  ...               0.2       0

[16 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[6.4 3.2 5.3 2.3]
 [6.3 3.3 4.7 1.6]
 [7.1 3.  5.9 2.1]
 [6.1 2.6 5.6 1.4]
 [6.8 3.2 5.9 2.3]] [2 1 2 2 2]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.008, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 3 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.105248, 0.422699, -0.383683, -0.063746 ],
			"coeffs_1" : [ 0.128558, -0.633852, 0.220779, 0.027581 ],
			"coeffs_2" : [ 0.708217, 0.157383, 0.689827, -0.135730 ],
			"coeffs_3" : [ 0.831033, -0.791359, -0.392924, 0.291824 ],
			"intercepts" : [ 0.421896, -0.441437, -0.470878, -0.672035 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.338883, -0.666807, -0.112743, 0.002553, -0.139892, -0.611199, -0.331507, 0.547919 ],
			"coeffs_1" : [ -0.022495, 0.005832, -0.601970, 0.014216, -0.186417, 0.230930, -0.142278, 0.273577 ],
			"coeffs_2" : [ -0.439108, 0.588118, -0.486733, 0.351785, -0.476964, 0.358392, 0.166551, 0.615219 ],
			"coeffs_3" : [ -0.413093, -0.513921, 0.206758, 0.225049, 0.444683, 0.575409, 0.507096, -0.428481 ],
			"intercepts" : [ 0.454942, 0.576270, -0.426981, 0.285096, 0.209979, 0.053026, 0.089744, 0.372750 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530362, 0.117986, 0.247371, 0.344866, -0.591463, 0.480562 ],
			"coeffs_1" : [ -0.333889, -0.574244, 0.614701, 0.593625, -0.086289, -0.501364 ],
			"coeffs_2" : [ -0.023593, 0.594791, -0.441472, 0.228110, 0.264562, 0.356072 ],
			"coeffs_3" : [ 0.545714, -0.308358, 0.251745, 0.431485, 0.449085, -0.032532 ],
			"coeffs_4" : [ -0.550089, 0.296755, 0.007818, -0.123499, -0.449891, -0.588543 ],
			"coeffs_5" : [ -0.209633, 0.559141, 0.027252, -0.133482, -0.151607, -0.555284 ],
			"coeffs_6" : [ 0.188515, -0.169748, -0.224128, -0.133022, 0.239555, -0.431684 ],
			"coeffs_7" : [ -0.185583, 0.399414, 0.406164, 0.526800, 0.444034, 0.399200 ],
			"intercepts" : [ -0.278179, 0.096825, 0.175898, 0.412542, 0.289481, 0.017514 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 3 ,
			"coeffs_0" : [ 0.438692, 0.535775, 0.134588 ],
			"coeffs_1" : [ -0.311476, -0.191231, -0.378021 ],
			"coeffs_2" : [ 0.399590, 0.485511, -0.539218 ],
			"coeffs_3" : [ 0.234642, -0.489036, 0.023166 ],
			"coeffs_4" : [ 0.124860, -0.298906, 0.398867 ],
			"coeffs_5" : [ -0.802440, -0.702071, 0.635013 ],
			"intercepts" : [ 0.709414, -0.508368, -0.292843 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_tiny_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('iris_tiny', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 3 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.105248, 0.422699, -0.383683, -0.063746 ],
			"coeffs_1" : [ 0.128558, -0.633852, 0.220779, 0.027581 ],
			"coeffs_2" : [ 0.708217, 0.157383, 0.689827, -0.135730 ],
			"coeffs_3" : [ 0.831033, -0.791359, -0.392924, 0.291824 ],
			"intercepts" : [ 0.421896, -0.441437, -0.470878, -0.672035 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.338883, -0.666807, -0.112743, 0.002553, -0.139892, -0.611199, -0.331507, 0.547919 ],
			"coeffs_1" : [ -0.022495, 0.005832, -0.601970, 0.014216, -0.186417, 0.230930, -0.142278, 0.273577 ],
			"coeffs_2" : [ -0.439108, 0.588118, -0.486733, 0.351785, -0.476964, 0.358392, 0.166551, 0.615219 ],
			"coeffs_3" : [ -0.413093, -0.513921, 0.206758, 0.225049, 0.444683, 0.575409, 0.507096, -0.428481 ],
			"intercepts" : [ 0.454942, 0.576270, -0.426981, 0.285096, 0.209979, 0.053026, 0.089744, 0.372750 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530362, 0.117986, 0.247371, 0.344866, -0.591463, 0.480562 ],
			"coeffs_1" : [ -0.333889, -0.574244, 0.614701, 0.593625, -0.086289, -0.501364 ],
			"coeffs_2" : [ -0.023593, 0.594791, -0.441472, 0.228110, 0.264562, 0.356072 ],
			"coeffs_3" : [ 0.545714, -0.308358, 0.251745, 0.431485, 0.449085, -0.032532 ],
			"coeffs_4" : [ -0.550089, 0.296755, 0.007818, -0.123499, -0.449891, -0.588543 ],
			"coeffs_5" : [ -0.209633, 0.559141, 0.027252, -0.133482, -0.151607, -0.555284 ],
			"coeffs_6" : [ 0.188515, -0.169748, -0.224128, -0.133022, 0.239555, -0.431684 ],
			"coeffs_7" : [ -0.185583, 0.399414, 0.406164, 0.526800, 0.444034, 0.399200 ],
			"intercepts" : [ -0.278179, 0.096825, 0.175898, 0.412542, 0.289481, 0.017514 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 3 ,
			"coeffs_0" : [ 0.438692, 0.535775, 0.134588 ],
			"coeffs_1" : [ -0.311476, -0.191231, -0.378021 ],
			"coeffs_2" : [ 0.399590, 0.485511, -0.539218 ],
			"coeffs_3" : [ 0.234642, -0.489036, 0.023166 ],
			"coeffs_4" : [ 0.124860, -0.298906, 0.398867 ],
			"coeffs_5" : [ -0.802440, -0.702071, 0.635013 ],
			"intercepts" : [ 0.709414, -0.508368, -0.292843 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 16
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.105248, 0.422699, -0.383683, -0.063746 ],
			"coeffs_1" : [ 0.128558, -0.633852, 0.220779, 0.027581 ],
			"coeffs_2" : [ 0.708217, 0.157383, 0.689827, -0.13573 ],
			"coeffs_3" : [ 0.831033, -0.791359, -0.392924, 0.291824 ],
			"intercepts" : [ 0.421896, -0.441437, -0.470878, -0.672035 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.338883, -0.666807, -0.112743, 0.002553, -0.139892, -0.611199, -0.331507, 0.547919 ],
			"coeffs_1" : [ -0.022495, 0.005832, -0.60197, 0.014216, -0.186417, 0.23093, -0.142278, 0.273577 ],
			"coeffs_2" : [ -0.439108, 0.588118, -0.486733, 0.351785, -0.476964, 0.358392, 0.166551, 0.615219 ],
			"coeffs_3" : [ -0.413093, -0.513921, 0.206758, 0.225049, 0.444683, 0.575409, 0.507096, -0.428481 ],
			"intercepts" : [ 0.454942, 0.57627, -0.426981, 0.285096, 0.209979, 0.053026, 0.089744, 0.37275 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.530362, 0.117986, 0.247371, 0.344866, -0.591463, 0.480562 ],
			"coeffs_1" : [ -0.333889, -0.574244, 0.614701, 0.593625, -0.086289, -0.501364 ],
			"coeffs_2" : [ -0.023593, 0.594791, -0.441472, 0.22811, 0.264562, 0.356072 ],
			"coeffs_3" : [ 0.545714, -0.308358, 0.251745, 0.431485, 0.449085, -0.032532 ],
			"coeffs_4" : [ -0.550089, 0.296755, 0.007818, -0.123499, -0.449891, -0.588543 ],
			"coeffs_5" : [ -0.209633, 0.559141, 0.027252, -0.133482, -0.151607, -0.555284 ],
			"coeffs_6" : [ 0.188515, -0.169748, -0.224128, -0.133022, 0.239555, -0.431684 ],
			"coeffs_7" : [ -0.185583, 0.399414, 0.406164, 0.5268, 0.444034, 0.3992 ],
			"intercepts" : [ -0.278179, 0.096825, 0.175898, 0.412542, 0.289481, 0.017514 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 3,
			"coeffs_0" : [ 0.438692, 0.535775, 0.134588 ],
			"coeffs_1" : [ -0.311476, -0.191231, -0.378021 ],
			"coeffs_2" : [ 0.39959, 0.485511, -0.539218 ],
			"coeffs_3" : [ 0.234642, -0.489036, 0.023166 ],
			"coeffs_4" : [ 0.12486, -0.298906, 0.398867 ],
			"coeffs_5" : [ -0.80244, -0.702071, 0.635013 ],
			"intercepts" : [ 0.709414, -0.508368, -0.292843 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 3 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('iris_tiny', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.5184 0.017  0.4645]
 [0.554  0.0234 0.4226]
 [0.5159 0.015  0.4691]
 [0.5498 0.0151 0.435 ]
 [0.5087 0.0135 0.4778]
 [0.5837 0.0315 0.3847]
 [0.5724 0.035  0.3926]
 [0.5575 0.0241 0.4184]
 [0.6412 0.0693 0.2895]
 [0.6391 0.0676 0.2932]
 [0.6384 0.0671 0.2945]
 [0.5646 0.0292 0.4062]
 [0.5969 0.0447 0.3584]
 [0.5775 0.0338 0.3887]
 [0.5199 0.0147 0.4654]
 [0.6435 0.0708 0.2857]]
(16, 3)
(16, 3) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'iris_tiny', 'size': 16, 'accuracy': 0.25, 'auc': 0.8518518518518517}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'iris_tiny', 'training_time_in_sec': 0.008, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ -0.000634, 0.000319, 0.000315 ],
      "X_1" : [ -0.000023, -0.000030, 0.000053 ],
      "X_2" : [ -0.002630, -0.001658, 0.004288 ],
      "X_3" : [ -0.002426, -0.000060, 0.002486 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 2, 3, 0, 1 ],
      "class_1" : [ 2, 0, 3, 1 ],
      "class_2" : [ 2, 3, 0, 1 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_tiny_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_tiny', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_tiny" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    0.421896 + -0.105248 * t."OUT_0"  + 0.128558 * t."OUT_1"  + 0.708217 * t."OUT_2"  + 0.831033 * t."OUT_3" AS "OUT_0",
    -0.441437 + 0.422699 * t."OUT_0"  + -0.633852 * t."OUT_1"  + 0.157383 * t."OUT_2"  + -0.791359 * t."OUT_3" AS "OUT_1",
    -0.470878 + -0.383683 * t."OUT_0"  + 0.220779 * t."OUT_1"  + 0.689827 * t."OUT_2"  + -0.392924 * t."OUT_3" AS "OUT_2",
    -0.672035 + -0.063746 * t."OUT_0"  + 0.027581 * t."OUT_1"  + -0.135730 * t."OUT_2"  + 0.291824 * t."OUT_3" AS "OUT_3"
 FROM "Input_Layer_BA" AS t
),
"Hidden_Layer_1_Activation" AS
 ( 
SQL_OUT_PUT_FIRST_LINES_END ('iris_tiny', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('iris_tiny', 'MLPClassifier', 'duckdb')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_tiny', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
dtypes: float32(4)
memory usage: 384.0 bytes
       X_0  X_1  X_2  X_3
index                    
0      6.4  3.2  5.3  2.3
1      6.3  3.3  4.7  1.6
2      7.1  3.0  5.9  2.1
3      6.1  2.6  5.6  1.4
4      6.8  3.2  5.9  2.3
5      5.8  2.7  4.1  1.0
6      6.1  2.8  4.0  1.3
7      6.0  3.4  4.5  1.6
8      5.4  3.7  1.5  0.2
9      4.8  3.4  1.6  0.2
10     5.4  3.4  1.5  0.4
11     5.9  3.0  4.2  1.5
12     5.1  2.5  3.0  1.1
13     5.8  2.6  4.0  1.2
14     6.7  3.3  5.7  2.1
15     5.0  3.3  1.4  0.2
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        16 non-null     float64
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        16 non-null     float64
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Score_2        16 non-null     float64
 8   Proba_2        16 non-null     float64
 9   LogProba_2     16 non-null     float64
 10  Decision       16 non-null     int64  
 11  DecisionProba  16 non-null     float64
dtypes: float64(10), int64(2)
memory usage: 1.6 KB
    index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0       0 -0.043375  0.518443  ...   -0.766740         0       0.518443
1       1  0.100430  0.553989  ...   -0.861362         0       0.553989
2       2 -0.031758  0.515891  ...   -0.756871         0       0.515891
3       3  0.160709  0.549836  ...   -0.832326         0       0.549836
4       4 -0.051305  0.508693  ...   -0.738585         0       0.508693
5       5  0.227654  0.583738  ...   -0.955193         0       0.583738
6       6  0.145521  0.572418  ...   -0.934993         0       0.572418
7       7  0.116105  0.557533  ...   -0.871366         0       0.557533
8       8  0.540489  0.641224  ...   -1.239594         0       0.641224
9       9  0.524945  0.639123  ...   -1.226746         0       0.639123
10     10  0.519693  0.638402  ...   -1.222426         0       0.638402
11     11  0.125433  0.564597  ...   -0.900970         0       0.564597
12     12  0.265550  0.596865  ...   -1.025990         0       0.596865
13     13  0.180487  0.577501  ...   -0.944965         0       0.577501
14     14 -0.004736  0.519930  ...   -0.764898         0       0.519930
15     15  0.554521  0.643492  ...   -1.252787         0       0.643492

[16 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
0       0 -0.043375     0.518443  ...    0.017032    0.464526            0
1       1  0.100430     0.553989  ...    0.023425    0.422587            0
2       2 -0.031758     0.515891  ...    0.014977    0.469133            0
3       3  0.160709     0.549836  ...    0.015128    0.435038            0
4       4 -0.051305     0.508693  ...    0.013517    0.477791            0
5       5  0.227654     0.583738  ...    0.031524    0.384739            0
6       6  0.145521     0.572418  ...    0.034993    0.392589            0
7       7  0.116105     0.557533  ...    0.024087    0.418381            0
8       8  0.540489     0.641224  ...    0.069274    0.289502            0
9       9  0.524945     0.639123  ...    0.067631    0.293246            0
10     10  0.519693     0.638402  ...    0.067084    0.294515            0
11     11  0.125433     0.564597  ...    0.029227    0.406177            0
12     12  0.265550     0.596865  ...    0.044694    0.358442            0
13     13  0.180487     0.577501  ...    0.033806    0.388694            0
14     14 -0.004736     0.519930  ...    0.014689    0.465383            0
15     15  0.554521     0.643492  ...    0.070800    0.285708            0

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 8.614227242492722e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
0     0.518442     0.518443 -1.049502e-06
1     0.553988     0.553989 -9.248483e-07
2     0.515890     0.515891 -1.191281e-06
3     0.549834     0.549836 -1.216006e-06
4     0.508692     0.508693 -1.333430e-06
5     0.583737     0.583738 -9.561308e-07
6     0.572417     0.572418 -8.487817e-07
7     0.557532     0.557533 -1.007532e-06
8     0.641223     0.641224 -3.402612e-07
9     0.639123     0.639123 -5.186470e-07
10    0.638401     0.638402 -3.887509e-07
11    0.564596     0.564597 -9.043074e-07
12    0.596864     0.596865 -6.689591e-07
13    0.577500     0.577501 -6.950851e-07
14    0.519929     0.519930 -1.372195e-06
15    0.643492     0.643492 -3.670457e-07
MLLITE_CLASS_SQL_ERROR ('iris_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 4.377877229017144e-08
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
0     0.017032     0.017032 -3.794504e-08
1     0.023425     0.023425 -4.443308e-08
2     0.014977     0.014977 -3.727349e-08
3     0.015128     0.015128 -3.172988e-08
4     0.013517     0.013517 -3.030075e-08
5     0.031524     0.031525 -4.487705e-08
6     0.034993     0.034994 -5.222696e-08
7     0.024087     0.024087 -4.144538e-08
8     0.069274     0.069275 -3.809426e-08
9     0.067631     0.067632 -4.809972e-08
10    0.067084     0.067084 -4.853353e-08
11    0.029227     0.029227 -4.823936e-08
12    0.044694     0.044694 -5.592651e-08
13    0.033806     0.033806 -6.353180e-08
14    0.014689     0.014689 -3.345880e-08
15    0.070800     0.070800 -4.434476e-08
MLLITE_CLASS_SQL_ERROR ('iris_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 9.076462182816547e-07
    Py_Proba_2  SQL_Proba_2   SQL_Error_2
0     0.464526     0.464525  1.096760e-06
1     0.422587     0.422586  9.711440e-07
2     0.469133     0.469132  1.200615e-06
3     0.435038     0.435036  1.223522e-06
4     0.477791     0.477790  1.387013e-06
5     0.384739     0.384738  9.488538e-07
6     0.392589     0.392588  8.600305e-07
7     0.418381     0.418380  1.091818e-06
8     0.289502     0.289502  4.603118e-07
9     0.293246     0.293245  4.549880e-07
10    0.294515     0.294515  4.521856e-07
11    0.406177     0.406176  9.842117e-07
12    0.358442     0.358441  7.509626e-07
13    0.388694     0.388693  7.772434e-07
14    0.465383     0.465381  1.414036e-06
15    0.285708     0.285707  4.486433e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_tiny', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
0             0             0
1             0             0
2             0             0
3             0             0
4             0             0
5             0             0
6             0             0
7             0             0
8             0             0
9             0             0
10            0             0
11            0             0
12            0             0
13            0             0
14            0             0
15            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_tiny', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_tiny" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    0.421896 + -0.105248 * t."OUT_0"  + 0.128558 * t."OUT_1"  + 0.708217 * t."OUT_2"  + 0.831033 * t."OUT_3" AS "OUT_0",
    -0.441437 + 0.422699 * t."OUT_0"  + -0.633852 * t."OUT_1"  + 0.157383 * t."OUT_2"  + -0.791359 * t."OUT_3" AS "OUT_1",
    -0.470878 + -0.383683 * t."OUT_0"  + 0.220779 * t."OUT_1"  + 0.689827 * t."OUT_2"  + -0.392924 * t."OUT_3" AS "OUT_2",
    -0.672035 + -0.063746 * t."OUT_0"  + 0.027581 * t."OUT_1"  + -0.135730 * t."OUT_2"  + 0.291824 * t."OUT_3" AS "OUT_3"
 FROM "Input_Layer_BA" AS t
),
"Hidden_Layer_1_Activation" AS
 ( 
SQL_OUT_PUT_FIRST_LINES_END ('iris_tiny', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('iris_tiny', 'MLPClassifier', 'sqlite')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_tiny', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
dtypes: float32(4)
memory usage: 384.0 bytes
       X_0  X_1  X_2  X_3
index                    
0      6.4  3.2  5.3  2.3
1      6.3  3.3  4.7  1.6
2      7.1  3.0  5.9  2.1
3      6.1  2.6  5.6  1.4
4      6.8  3.2  5.9  2.3
5      5.8  2.7  4.1  1.0
6      6.1  2.8  4.0  1.3
7      6.0  3.4  4.5  1.6
8      5.4  3.7  1.5  0.2
9      4.8  3.4  1.6  0.2
10     5.4  3.4  1.5  0.4
11     5.9  3.0  4.2  1.5
12     5.1  2.5  3.0  1.1
13     5.8  2.6  4.0  1.2
14     6.7  3.3  5.7  2.1
15     5.0  3.3  1.4  0.2
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('iris_tiny', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_tiny', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
