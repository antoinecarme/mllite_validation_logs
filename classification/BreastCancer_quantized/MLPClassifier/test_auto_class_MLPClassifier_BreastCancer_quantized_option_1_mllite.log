     mean radius  mean texture  ...  worst fractal dimension  target
0              8             0  ...                        9       0
1              9             3  ...                        7       0
2              8             7  ...                        6       0
3              2             6  ...                        9       0
4              9             1  ...                        4       0
..           ...           ...  ...                      ...     ...
564            9             7  ...                        2       0
565            9             9  ...                        1       0
566            7             9  ...                        4       0
567            9             9  ...                        9       0
568            0             8  ...                        2       1

[569 rows x 31 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[ 8.  0.  8.  8.  8.  9.  9.  9.  9.  9.  9.  3.  9.  9.  5.  8.  8.  7.
   8.  8.  9.  0.  9.  9.  8.  9.  9.  9.  9.  9.]
 [ 9.  3.  8.  9.  2.  3.  6.  7.  5.  1.  7.  1.  7.  8.  2.  2.  3.  6.
   1.  5.  9.  3.  8.  9.  3.  4.  5.  8.  4.  7.]
 [ 8.  7.  8.  8.  8.  8.  8.  9.  8.  3.  8.  2.  8.  8.  4.  8.  7.  8.
   7.  7.  8.  5.  8.  8.  7.  8.  8.  9.  8.  6.]
 [ 2.  6.  3.  1.  9.  9.  9.  8.  9. 10.  7.  5.  7.  5.  8.  9.  8.  8.
   9.  9.  4.  5.  5.  3.  9.  9.  9.  9. 10.  9.]
 [ 9.  1.  9.  9.  6.  7.  8.  8.  5.  3.  8.  2.  8.  8.  8.  5.  8.  8.
   4.  8.  8.  0.  8.  8.  5.  4.  7.  7.  1.  4.]] [0 0 0 0 0]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.086, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 569, "dataset_features" : 30 },
	"classes" : [ 0, 1 ],
	"layers" : {
		"sizes" : [ 30, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 30 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 30,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.011441, 0.185158, -0.152609, -0.034354 ],
			"coeffs_01" : [ 0.096055, -0.329646, 0.172682, 0.045800 ],
			"coeffs_02" : [ 0.383955, 0.057689, 0.370173, -0.070913 ],
			"coeffs_03" : [ 0.441050, -0.404021, -0.157549, 0.154069 ],
			"coeffs_04" : [ 0.238954, -0.255539, -0.175278, -0.295772 ],
			"coeffs_05" : [ 0.211256, -0.459111, -0.013336, 0.021499 ],
			"coeffs_06" : [ -0.041195, -0.424672, -0.147746, 0.331272 ],
			"coeffs_07" : [ 0.012424, -0.040401, -0.319701, 0.003731 ],
			"coeffs_08" : [ -0.102308, 0.106019, -0.037503, 0.213467 ],
			"coeffs_09" : [ -0.280224, 0.316355, -0.273677, 0.289549 ],
			"coeffs_10" : [ -0.266664, 0.181912, 0.159296, 0.397664 ],
			"coeffs_11" : [ -0.262204, -0.369202, 0.168016, 0.214940 ],
			"coeffs_12" : [ 0.315315, 0.313236, 0.379792, -0.259119 ],
			"coeffs_13" : [ 0.289808, 0.296307, -0.195770, 0.187804 ],
			"coeffs_14" : [ 0.117170, -0.018391, 0.074785, 0.312769 ],
			"coeffs_15" : [ -0.346451, 0.007462, 0.220227, 0.274961 ],
			"coeffs_16" : [ -0.335561, 0.242618, -0.175269, -0.365210 ],
			"coeffs_17" : [ 0.438001, 0.346953, -0.002101, -0.318564 ],
			"coeffs_18" : [ -0.011283, 0.349070, -0.281668, 0.235825 ],
			"coeffs_19" : [ 0.193456, 0.200035, 0.410142, -0.163966 ],
			"coeffs_20" : [ 0.205836, 0.272306, 0.335981, -0.048058 ],
			"coeffs_21" : [ -0.355471, 0.180253, 0.057992, -0.049694 ],
			"coeffs_22" : [ -0.277752, -0.417914, -0.122069, 0.365728 ],
			"coeffs_23" : [ 0.045130, -0.108751, -0.069566, -0.385402 ],
			"coeffs_24" : [ 0.156528, -0.175179, -0.114081, -0.056775 ],
			"coeffs_25" : [ 0.192964, -0.330402, -0.088523, 0.249638 ],
			"coeffs_26" : [ 0.308870, 0.323380, 0.365136, 0.234851 ],
			"coeffs_27" : [ -0.139504, 0.013095, 0.173805, 0.265746 ],
			"coeffs_28" : [ 0.230268, -0.048022, 0.288421, 0.320378 ],
			"coeffs_29" : [ 0.074803, -0.191267, -0.065530, -0.169438 ],
			"intercepts" : [ 0.200926, 0.181417, -0.292865, 0.213484 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.496289, 0.073644, 0.135499, -0.284529, 0.316853, -0.673079, -0.685691, 0.509180 ],
			"coeffs_1" : [ 0.597849, -0.492698, -0.234846, -0.534516, -0.512143, -0.503881, -0.235502, -0.226884 ],
			"coeffs_2" : [ -0.518175, -0.402798, -0.679642, 0.136479, -0.519155, -0.525280, 0.161286, 0.213427 ],
			"coeffs_3" : [ -0.155004, 0.236167, 0.094420, -0.467854, -0.131217, 0.582325, 0.696142, -0.135574 ],
			"intercepts" : [ -0.642911, -0.376219, 0.362313, -0.585498, 0.296885, -0.355344, 0.685947, 0.608494 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.249651, 0.306374, -0.310297, 0.445629, -0.515450, 0.356956 ],
			"coeffs_1" : [ 0.118296, -0.337110, 0.395130, 0.333579, -0.011376, -0.237239 ],
			"coeffs_2" : [ 0.578977, 0.530395, -0.198609, 0.044665, 0.383793, 0.056403 ],
			"coeffs_3" : [ -0.013455, 0.598982, 0.231906, 0.268682, -0.460970, -0.088915 ],
			"coeffs_4" : [ 0.550397, 0.349916, -0.124484, -0.185678, 0.475201, -0.350399 ],
			"coeffs_5" : [ 0.164808, 0.456435, -0.603413, -0.443492, -0.281347, -0.379539 ],
			"coeffs_6" : [ -0.217663, -0.045930, -0.446488, 0.341380, 0.682782, 0.066596 ],
			"coeffs_7" : [ 0.055148, 0.244748, 0.092391, 0.300370, 0.031971, 0.375974 ],
			"intercepts" : [ 0.370243, -0.334630, -0.203419, -0.632586, -0.281216, -0.457801 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.297378 ],
			"coeffs_1" : [ -0.094469 ],
			"coeffs_2" : [ -0.464814 ],
			"coeffs_3" : [ -0.753029 ],
			"coeffs_4" : [ 0.863664 ],
			"coeffs_5" : [ -0.341652 ],
			"intercepts" : [ -0.148240 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 569, "dataset_features" : 30 },
	"classes" : [ 0, 1 ],
	"layers" : {
		"sizes" : [ 30, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 30 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 30,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.011441, 0.185158, -0.152609, -0.034354 ],
			"coeffs_01" : [ 0.096055, -0.329646, 0.172682, 0.045800 ],
			"coeffs_02" : [ 0.383955, 0.057689, 0.370173, -0.070913 ],
			"coeffs_03" : [ 0.441050, -0.404021, -0.157549, 0.154069 ],
			"coeffs_04" : [ 0.238954, -0.255539, -0.175278, -0.295772 ],
			"coeffs_05" : [ 0.211256, -0.459111, -0.013336, 0.021499 ],
			"coeffs_06" : [ -0.041195, -0.424672, -0.147746, 0.331272 ],
			"coeffs_07" : [ 0.012424, -0.040401, -0.319701, 0.003731 ],
			"coeffs_08" : [ -0.102308, 0.106019, -0.037503, 0.213467 ],
			"coeffs_09" : [ -0.280224, 0.316355, -0.273677, 0.289549 ],
			"coeffs_10" : [ -0.266664, 0.181912, 0.159296, 0.397664 ],
			"coeffs_11" : [ -0.262204, -0.369202, 0.168016, 0.214940 ],
			"coeffs_12" : [ 0.315315, 0.313236, 0.379792, -0.259119 ],
			"coeffs_13" : [ 0.289808, 0.296307, -0.195770, 0.187804 ],
			"coeffs_14" : [ 0.117170, -0.018391, 0.074785, 0.312769 ],
			"coeffs_15" : [ -0.346451, 0.007462, 0.220227, 0.274961 ],
			"coeffs_16" : [ -0.335561, 0.242618, -0.175269, -0.365210 ],
			"coeffs_17" : [ 0.438001, 0.346953, -0.002101, -0.318564 ],
			"coeffs_18" : [ -0.011283, 0.349070, -0.281668, 0.235825 ],
			"coeffs_19" : [ 0.193456, 0.200035, 0.410142, -0.163966 ],
			"coeffs_20" : [ 0.205836, 0.272306, 0.335981, -0.048058 ],
			"coeffs_21" : [ -0.355471, 0.180253, 0.057992, -0.049694 ],
			"coeffs_22" : [ -0.277752, -0.417914, -0.122069, 0.365728 ],
			"coeffs_23" : [ 0.045130, -0.108751, -0.069566, -0.385402 ],
			"coeffs_24" : [ 0.156528, -0.175179, -0.114081, -0.056775 ],
			"coeffs_25" : [ 0.192964, -0.330402, -0.088523, 0.249638 ],
			"coeffs_26" : [ 0.308870, 0.323380, 0.365136, 0.234851 ],
			"coeffs_27" : [ -0.139504, 0.013095, 0.173805, 0.265746 ],
			"coeffs_28" : [ 0.230268, -0.048022, 0.288421, 0.320378 ],
			"coeffs_29" : [ 0.074803, -0.191267, -0.065530, -0.169438 ],
			"intercepts" : [ 0.200926, 0.181417, -0.292865, 0.213484 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.496289, 0.073644, 0.135499, -0.284529, 0.316853, -0.673079, -0.685691, 0.509180 ],
			"coeffs_1" : [ 0.597849, -0.492698, -0.234846, -0.534516, -0.512143, -0.503881, -0.235502, -0.226884 ],
			"coeffs_2" : [ -0.518175, -0.402798, -0.679642, 0.136479, -0.519155, -0.525280, 0.161286, 0.213427 ],
			"coeffs_3" : [ -0.155004, 0.236167, 0.094420, -0.467854, -0.131217, 0.582325, 0.696142, -0.135574 ],
			"intercepts" : [ -0.642911, -0.376219, 0.362313, -0.585498, 0.296885, -0.355344, 0.685947, 0.608494 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.249651, 0.306374, -0.310297, 0.445629, -0.515450, 0.356956 ],
			"coeffs_1" : [ 0.118296, -0.337110, 0.395130, 0.333579, -0.011376, -0.237239 ],
			"coeffs_2" : [ 0.578977, 0.530395, -0.198609, 0.044665, 0.383793, 0.056403 ],
			"coeffs_3" : [ -0.013455, 0.598982, 0.231906, 0.268682, -0.460970, -0.088915 ],
			"coeffs_4" : [ 0.550397, 0.349916, -0.124484, -0.185678, 0.475201, -0.350399 ],
			"coeffs_5" : [ 0.164808, 0.456435, -0.603413, -0.443492, -0.281347, -0.379539 ],
			"coeffs_6" : [ -0.217663, -0.045930, -0.446488, 0.341380, 0.682782, 0.066596 ],
			"coeffs_7" : [ 0.055148, 0.244748, 0.092391, 0.300370, 0.031971, 0.375974 ],
			"intercepts" : [ 0.370243, -0.334630, -0.203419, -0.632586, -0.281216, -0.457801 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.297378 ],
			"coeffs_1" : [ -0.094469 ],
			"coeffs_2" : [ -0.464814 ],
			"coeffs_3" : [ -0.753029 ],
			"coeffs_4" : [ 0.863664 ],
			"coeffs_5" : [ -0.341652 ],
			"intercepts" : [ -0.148240 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1 ],
	"dataset" : 	{
		"dataset_features" : 30,
		"dataset_rows" : 569
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 30,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 30,
			"NbOutputs" : 4,
			"coeffs_00" : [ -0.011441, 0.185158, -0.152609, -0.034354 ],
			"coeffs_01" : [ 0.096055, -0.329646, 0.172682, 0.0458 ],
			"coeffs_02" : [ 0.383955, 0.057689, 0.370173, -0.070913 ],
			"coeffs_03" : [ 0.44105, -0.404021, -0.157549, 0.154069 ],
			"coeffs_04" : [ 0.238954, -0.255539, -0.175278, -0.295772 ],
			"coeffs_05" : [ 0.211256, -0.459111, -0.013336, 0.021499 ],
			"coeffs_06" : [ -0.041195, -0.424672, -0.147746, 0.331272 ],
			"coeffs_07" : [ 0.012424, -0.040401, -0.319701, 0.003731 ],
			"coeffs_08" : [ -0.102308, 0.106019, -0.037503, 0.213467 ],
			"coeffs_09" : [ -0.280224, 0.316355, -0.273677, 0.289549 ],
			"coeffs_10" : [ -0.266664, 0.181912, 0.159296, 0.397664 ],
			"coeffs_11" : [ -0.262204, -0.369202, 0.168016, 0.21494 ],
			"coeffs_12" : [ 0.315315, 0.313236, 0.379792, -0.259119 ],
			"coeffs_13" : [ 0.289808, 0.296307, -0.19577, 0.187804 ],
			"coeffs_14" : [ 0.11717, -0.018391, 0.074785, 0.312769 ],
			"coeffs_15" : [ -0.346451, 0.007462, 0.220227, 0.274961 ],
			"coeffs_16" : [ -0.335561, 0.242618, -0.175269, -0.36521 ],
			"coeffs_17" : [ 0.438001, 0.346953, -0.002101, -0.318564 ],
			"coeffs_18" : [ -0.011283, 0.34907, -0.281668, 0.235825 ],
			"coeffs_19" : [ 0.193456, 0.200035, 0.410142, -0.163966 ],
			"coeffs_20" : [ 0.205836, 0.272306, 0.335981, -0.048058 ],
			"coeffs_21" : [ -0.355471, 0.180253, 0.057992, -0.049694 ],
			"coeffs_22" : [ -0.277752, -0.417914, -0.122069, 0.365728 ],
			"coeffs_23" : [ 0.04513, -0.108751, -0.069566, -0.385402 ],
			"coeffs_24" : [ 0.156528, -0.175179, -0.114081, -0.056775 ],
			"coeffs_25" : [ 0.192964, -0.330402, -0.088523, 0.249638 ],
			"coeffs_26" : [ 0.30887, 0.32338, 0.365136, 0.234851 ],
			"coeffs_27" : [ -0.139504, 0.013095, 0.173805, 0.265746 ],
			"coeffs_28" : [ 0.230268, -0.048022, 0.288421, 0.320378 ],
			"coeffs_29" : [ 0.074803, -0.191267, -0.06553, -0.169438 ],
			"intercepts" : [ 0.200926, 0.181417, -0.292865, 0.213484 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.496289, 0.073644, 0.135499, -0.284529, 0.316853, -0.673079, -0.685691, 0.50918 ],
			"coeffs_1" : [ 0.597849, -0.492698, -0.234846, -0.534516, -0.512143, -0.503881, -0.235502, -0.226884 ],
			"coeffs_2" : [ -0.518175, -0.402798, -0.679642, 0.136479, -0.519155, -0.52528, 0.161286, 0.213427 ],
			"coeffs_3" : [ -0.155004, 0.236167, 0.09442, -0.467854, -0.131217, 0.582325, 0.696142, -0.135574 ],
			"intercepts" : [ -0.642911, -0.376219, 0.362313, -0.585498, 0.296885, -0.355344, 0.685947, 0.608494 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.249651, 0.306374, -0.310297, 0.445629, -0.51545, 0.356956 ],
			"coeffs_1" : [ 0.118296, -0.33711, 0.39513, 0.333579, -0.011376, -0.237239 ],
			"coeffs_2" : [ 0.578977, 0.530395, -0.198609, 0.044665, 0.383793, 0.056403 ],
			"coeffs_3" : [ -0.013455, 0.598982, 0.231906, 0.268682, -0.46097, -0.088915 ],
			"coeffs_4" : [ 0.550397, 0.349916, -0.124484, -0.185678, 0.475201, -0.350399 ],
			"coeffs_5" : [ 0.164808, 0.456435, -0.603413, -0.443492, -0.281347, -0.379539 ],
			"coeffs_6" : [ -0.217663, -0.04593, -0.446488, 0.34138, 0.682782, 0.066596 ],
			"coeffs_7" : [ 0.055148, 0.244748, 0.092391, 0.30037, 0.031971, 0.375974 ],
			"intercepts" : [ 0.370243, -0.33463, -0.203419, -0.632586, -0.281216, -0.457801 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.297378 ],
			"coeffs_1" : [ -0.094469 ],
			"coeffs_2" : [ -0.464814 ],
			"coeffs_3" : [ -0.753029 ],
			"coeffs_4" : [ 0.863664 ],
			"coeffs_5" : [ -0.341652 ],
			"intercepts" : [ -0.14824 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 30, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
[[0.7376 0.2624]
 [0.8582 0.1418]
 [0.924  0.076 ]
 ...
 [0.7585 0.2415]
 [0.6718 0.3282]
 [0.0818 0.9182]]
(569, 2)
(569,) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'BreastCancer_quantized', 'size': 569, 'accuracy': 0.8471001757469244, 'auc': 0.9192167433010939}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'BreastCancer_quantized', 'training_time_in_sec': 0.086, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BreastCancer_quantized', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('BreastCancer_quantized', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('BreastCancer_quantized', 'MLPClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BreastCancer_quantized', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 569 entries, 0 to 568
Data columns (total 30 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     569 non-null    float32
 1   X_1     569 non-null    float32
 2   X_2     569 non-null    float32
 3   X_3     569 non-null    float32
 4   X_4     569 non-null    float32
 5   X_5     569 non-null    float32
 6   X_6     569 non-null    float32
 7   X_7     569 non-null    float32
 8   X_8     569 non-null    float32
 9   X_9     569 non-null    float32
 10  X_10    569 non-null    float32
 11  X_11    569 non-null    float32
 12  X_12    569 non-null    float32
 13  X_13    569 non-null    float32
 14  X_14    569 non-null    float32
 15  X_15    569 non-null    float32
 16  X_16    569 non-null    float32
 17  X_17    569 non-null    float32
 18  X_18    569 non-null    float32
 19  X_19    569 non-null    float32
 20  X_20    569 non-null    float32
 21  X_21    569 non-null    float32
 22  X_22    569 non-null    float32
 23  X_23    569 non-null    float32
 24  X_24    569 non-null    float32
 25  X_25    569 non-null    float32
 26  X_26    569 non-null    float32
 27  X_27    569 non-null    float32
 28  X_28    569 non-null    float32
 29  X_29    569 non-null    float32
dtypes: float32(30)
memory usage: 71.1 KB
       X_0  X_1  X_2  X_3  X_4  X_5  ...  X_24  X_25  X_26  X_27  X_28  X_29
index                                ...                                    
0      8.0  0.0  8.0  8.0  8.0  9.0  ...   8.0   9.0   9.0   9.0   9.0   9.0
1      9.0  3.0  8.0  9.0  2.0  3.0  ...   3.0   4.0   5.0   8.0   4.0   7.0
2      8.0  7.0  8.0  8.0  8.0  8.0  ...   7.0   8.0   8.0   9.0   8.0   6.0
3      2.0  6.0  3.0  1.0  9.0  9.0  ...   9.0   9.0   9.0   9.0  10.0   9.0
4      9.0  1.0  9.0  9.0  6.0  7.0  ...   5.0   4.0   7.0   7.0   1.0   4.0
...    ...  ...  ...  ...  ...  ...  ...   ...   ...   ...   ...   ...   ...
564    9.0  7.0  9.0  9.0  8.0  6.0  ...   6.0   4.0   7.0   9.0   0.0   2.0
565    9.0  9.0  8.0  8.0  5.0  5.0  ...   2.0   4.0   6.0   7.0   3.0   1.0
566    7.0  9.0  7.0  7.0  2.0  5.0  ...   2.0   7.0   6.0   6.0   1.0   4.0
567    9.0  9.0  9.0  8.0  8.0  9.0  ...   8.0   9.0   9.0   9.0   9.0   9.0
568    0.0  8.0  0.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   0.0   5.0   2.0

[569 rows x 30 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 569 entries, 0 to 568
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          569 non-null    int64  
 1   Score_0        569 non-null    float64
 2   Proba_0        569 non-null    float64
 3   LogProba_0     569 non-null    float64
 4   Score_1        569 non-null    float64
 5   Proba_1        569 non-null    float64
 6   LogProba_1     569 non-null    float64
 7   Decision       569 non-null    int64  
 8   DecisionProba  569 non-null    float64
dtypes: float64(7), int64(2)
memory usage: 40.1 KB
     index   Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0        0  0.516728  0.737585  ...   -1.337830         0       0.737585
1        1  0.900054  0.858162  ...   -1.953070         0       0.858162
2        2  1.249095  0.924015  ...   -2.577216         0       0.924015
3        3 -0.583054  0.237559  ...   -0.271231         1       0.762441
4        4  0.785099  0.827812  ...   -1.759168         0       0.827812
..     ...       ...       ...  ...         ...       ...            ...
564    564  1.318268  0.933176  ...   -2.705697         0       0.933176
565    565  0.399273  0.689664  ...   -1.170098         0       0.689664
566    566  0.572142  0.758465  ...   -1.420742         0       0.758465
567    567  0.358243  0.671833  ...   -1.114232         0       0.671833
568    568 -1.208902  0.081825  ...   -0.085367         1       0.918175

[569 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
     index   Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
553    553 -0.348632     0.332419  ...    0.332421    0.667579            1
554    554 -0.857405     0.152541  ...    0.152541    0.847459            1
555    555 -0.744806     0.183980  ...    0.183980    0.816020            1
556    556 -1.366688     0.061032  ...    0.061032    0.938968            1
557    557 -1.300750     0.069042  ...    0.069042    0.930958            1
558    558  0.674213     0.793872  ...    0.793873    0.206127            0
559    559 -0.825693     0.160922  ...    0.160921    0.839079            1
560    560  0.482492     0.724119  ...    0.724120    0.275880            0
561    561 -1.050768     0.108948  ...    0.108947    0.891053            1
562    562  0.368663     0.676411  ...    0.676412    0.323588            0
563    563  0.956346     0.871321  ...    0.871322    0.128678            0
564    564  1.318268     0.933176  ...    0.933177    0.066823            0
565    565  0.399273     0.689664  ...    0.689665    0.310335            0
566    566  0.572142     0.758465  ...    0.758466    0.241534            0
567    567  0.358243     0.671833  ...    0.671834    0.328166            0
568    568 -1.208902     0.081825  ...    0.081825    0.918175            1

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('BreastCancer_quantized', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 9.61470510981997e-07
     Py_Proba_0  SQL_Proba_0   SQL_Error_0
553    0.332421     0.332419  1.444728e-06
554    0.152541     0.152541 -2.027595e-07
555    0.183980     0.183980 -6.314849e-08
556    0.061032     0.061032 -1.824512e-07
557    0.069042     0.069042 -1.255232e-07
558    0.793873     0.793872  6.163837e-07
559    0.160921     0.160922 -3.839599e-07
560    0.724120     0.724119  1.279770e-06
561    0.108947     0.108948 -1.835552e-07
562    0.676412     0.676411  1.198158e-06
563    0.871322     0.871321  8.618367e-07
564    0.933177     0.933176  3.797711e-07
565    0.689665     0.689664  1.156115e-06
566    0.758466     0.758465  1.070836e-06
567    0.671834     0.671833  7.463386e-07
568    0.081825     0.081825 -1.362798e-07
MLLITE_CLASS_SQL_ERROR ('BreastCancer_quantized', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 9.613853989020412e-07
     Py_Proba_1  SQL_Proba_1   SQL_Error_1
553    0.667579     0.667581 -1.444728e-06
554    0.847459     0.847459  2.027595e-07
555    0.816020     0.816020  6.314849e-08
556    0.938968     0.938968  1.824512e-07
557    0.930958     0.930958  1.255232e-07
558    0.206127     0.206128 -6.312848e-07
559    0.839079     0.839078  3.839599e-07
560    0.275880     0.275881 -1.279770e-06
561    0.891053     0.891052  1.835552e-07
562    0.323588     0.323589 -1.198158e-06
563    0.128678     0.128679 -8.469355e-07
564    0.066823     0.066824 -3.872217e-07
565    0.310335     0.310336 -1.185917e-06
566    0.241534     0.241535 -1.070836e-06
567    0.328166     0.328167 -7.463386e-07
568    0.918175     0.918175  1.362798e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('BreastCancer_quantized', 'MLPClassifier', 'duckdb', 'Success')
     Py_Decision  SQL_Decision
553            1             1
554            1             1
555            1             1
556            1             1
557            1             1
558            0             0
559            1             1
560            0             0
561            1             1
562            0             0
563            0             0
564            0             0
565            0             0
566            0             0
567            0             0
568            1             1
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BreastCancer_quantized', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('BreastCancer_quantized', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('BreastCancer_quantized', 'MLPClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BreastCancer_quantized', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 569 entries, 0 to 568
Data columns (total 30 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     569 non-null    float32
 1   X_1     569 non-null    float32
 2   X_2     569 non-null    float32
 3   X_3     569 non-null    float32
 4   X_4     569 non-null    float32
 5   X_5     569 non-null    float32
 6   X_6     569 non-null    float32
 7   X_7     569 non-null    float32
 8   X_8     569 non-null    float32
 9   X_9     569 non-null    float32
 10  X_10    569 non-null    float32
 11  X_11    569 non-null    float32
 12  X_12    569 non-null    float32
 13  X_13    569 non-null    float32
 14  X_14    569 non-null    float32
 15  X_15    569 non-null    float32
 16  X_16    569 non-null    float32
 17  X_17    569 non-null    float32
 18  X_18    569 non-null    float32
 19  X_19    569 non-null    float32
 20  X_20    569 non-null    float32
 21  X_21    569 non-null    float32
 22  X_22    569 non-null    float32
 23  X_23    569 non-null    float32
 24  X_24    569 non-null    float32
 25  X_25    569 non-null    float32
 26  X_26    569 non-null    float32
 27  X_27    569 non-null    float32
 28  X_28    569 non-null    float32
 29  X_29    569 non-null    float32
dtypes: float32(30)
memory usage: 71.1 KB
       X_0  X_1  X_2  X_3  X_4  X_5  ...  X_24  X_25  X_26  X_27  X_28  X_29
index                                ...                                    
0      8.0  0.0  8.0  8.0  8.0  9.0  ...   8.0   9.0   9.0   9.0   9.0   9.0
1      9.0  3.0  8.0  9.0  2.0  3.0  ...   3.0   4.0   5.0   8.0   4.0   7.0
2      8.0  7.0  8.0  8.0  8.0  8.0  ...   7.0   8.0   8.0   9.0   8.0   6.0
3      2.0  6.0  3.0  1.0  9.0  9.0  ...   9.0   9.0   9.0   9.0  10.0   9.0
4      9.0  1.0  9.0  9.0  6.0  7.0  ...   5.0   4.0   7.0   7.0   1.0   4.0
...    ...  ...  ...  ...  ...  ...  ...   ...   ...   ...   ...   ...   ...
564    9.0  7.0  9.0  9.0  8.0  6.0  ...   6.0   4.0   7.0   9.0   0.0   2.0
565    9.0  9.0  8.0  8.0  5.0  5.0  ...   2.0   4.0   6.0   7.0   3.0   1.0
566    7.0  9.0  7.0  7.0  2.0  5.0  ...   2.0   7.0   6.0   6.0   1.0   4.0
567    9.0  9.0  9.0  8.0  8.0  9.0  ...   8.0   9.0   9.0   9.0   9.0   9.0
568    0.0  8.0  0.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   0.0   5.0   2.0

[569 rows x 30 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('BreastCancer_quantized', 'MLPClassifier', 'sqlite', '')
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_quantized_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BreastCancer_quantized', 'MLPClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('BreastCancer_quantized', 'MLPClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('BreastCancer_quantized', 'MLPClassifier', 'pgsql')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BreastCancer_quantized', 'MLPClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
