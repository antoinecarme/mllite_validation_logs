    sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                 6.4               3.2  ...               2.3       2
1                 6.3               3.3  ...               1.6       1
2                 7.1               3.0  ...               2.1       2
3                 6.1               2.6  ...               1.4       2
4                 6.8               3.2  ...               2.3       2
5                 5.8               2.7  ...               1.0       1
6                 6.1               2.8  ...               1.3       1
7                 6.0               3.4  ...               1.6       1
8                 5.4               3.7  ...               0.2       0
9                 4.8               3.4  ...               0.2       0
10                5.4               3.4  ...               0.4       0
11                5.9               3.0  ...               1.5       1
12                5.1               2.5  ...               1.1       1
13                5.8               2.6  ...               1.2       1
14                6.7               3.3  ...               2.1       2
15                5.0               3.3  ...               0.2       0
16                6.2               2.9  ...               1.3       1
17                4.7               3.2  ...               0.2       0

[18 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS XGBClassifier {"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }
MLLITE_MODEL_OPTIONS_DEFAULT XGBClassifier { "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING XGBClassifier { "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  }
MLLITE_MODEL_JSON_AFTER_SETTING XGBClassifier None
('OPERATION_START', 'TRAINING')
[[6.4 3.2 5.3 2.3]
 [6.3 3.3 4.7 1.6]
 [7.1 3.  5.9 2.1]
 [6.1 2.6 5.6 1.4]
 [6.8 3.2 5.9 2.3]] [2 1 2 2 2]
MLLITE_FIT_USING_MODEL mllite_xgb_class.XGBClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_CLASSIFIER_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_CLASSIFIER_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 1 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 2 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 3 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 4 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 5 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 6 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_MODEL_FIT' 7 7
PROGRESS_REPORT_ELAPSED_TOTAL 'XGB_CLASSIFIER_FIT' 3 3
('OPERATION_END_ELAPSED', 0.014, 'TRAINING')
{ "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  }
{ "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  }
{
	"metadata" : { "model" : "Friedman_XGB", "version" : "2024-W12", "signature" : "ff4_il8"},
	"options" : { "base_score" : [ ], "early_stopping_rounds" : 0, "eval_metric" : "", "gamma" : 0.000000, "grow_policy" : 0, "learning_rate" : 0.300000, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 32, "min_child_weight" : 5.000000, "n_estimators" : 5, "objective" : "reg:squarederror", "reg_alpha" : 0.000000, "reg_lambda" : 1.000000, "tree_method" : "auto" },
	"dataset" : { "dataset_rows" : 18, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"booster" : {
		"BaseScore" : [ 0.277778, 0.444444, 0.277778 ],
		"Trees" : 5,
		"Tree_0" : {
			"Node_0" : { "leaf_value" : [ 0.277778, 0.444445, 0.277778 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_1" : {
			"Node_0" : { "leaf_value" : [ 0.555555, 0.888889, 0.555555 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_2" : {
			"Node_0" : { "leaf_value" : [ 1.111111, 1.777778, 1.111111 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_3" : {
			"Node_0" : { "leaf_value" : [ 2.222222, 3.555557, 2.222222 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_4" : {
			"Node_0" : { "leaf_value" : [ 4.444443, 7.111114, 4.444443 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/XGBClassifier/mllite.XGBClassifier_iris_sampled_option_1.json'

MLLITE_MODEL_SET_OPTIONS XGBClassifier {"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }
MLLITE_MODEL_OPTIONS_DEFAULT XGBClassifier { "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32 }
MLLITE_MODEL_OPTIONS_AFTER_SETTING XGBClassifier { "max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 ,  "nthread" : 1, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 64, "n_estimators" : 32  }
MLLITE_MODEL_JSON_AFTER_SETTING XGBClassifier None
MLLITE_RELOADING_MODEL mllite_xgb_class.XGBClassifier_ff4_il8
{
	"metadata" : { "model" : "Friedman_XGB", "version" : "2024-W12", "signature" : "ff4_il8"},
	"options" : { "base_score" : [ ], "early_stopping_rounds" : 0, "eval_metric" : "", "gamma" : 0.000000, "grow_policy" : 0, "learning_rate" : 0.300000, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 32, "min_child_weight" : 5.000000, "n_estimators" : 5, "objective" : "reg:squarederror", "reg_alpha" : 0.000000, "reg_lambda" : 1.000000, "tree_method" : "auto" },
	"dataset" : { "dataset_rows" : 18, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"booster" : {
		"BaseScore" : [ 0.277778, 0.444444, 0.277778 ],
		"Trees" : 5,
		"Tree_0" : {
			"Node_0" : { "leaf_value" : [ 0.277778, 0.444445, 0.277778 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_1" : {
			"Node_0" : { "leaf_value" : [ 0.555555, 0.888889, 0.555555 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_2" : {
			"Node_0" : { "leaf_value" : [ 1.111111, 1.777778, 1.111111 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_3" : {
			"Node_0" : { "leaf_value" : [ 2.222222, 3.555557, 2.222222 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		},
		"Tree_4" : {
			"Node_0" : { "leaf_value" : [ 4.444443, 7.111114, 4.444443 ], "parent" : null, "left" : null, "right" : null, "svalue" : 0.000000, "sindex" : 0 }
		}
	}
}
BEAUTIFIED_JSON_START
{
	"booster" : 	{
		"BaseScore" : [ 0.277778, 0.444444, 0.277778 ],
		"Tree_0" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 0.277778, 0.444445, 0.277778 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_1" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 0.555555, 0.888889, 0.555555 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_2" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 1.111111, 1.777778, 1.111111 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_3" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 2.222222, 3.555557, 2.222222 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Tree_4" : 	{
			"Node_0" : 	{
				"leaf_value" : [ 4.444443, 7.111114, 4.444443 ],
				"left" : null,
				"parent" : null,
				"right" : null,
				"sindex" : 0,
				"svalue" : 0.0
			}
		},
		"Trees" : 5
	},
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 18
	},
	"metadata" :  { "model" : "Friedman_XGB", "signature" : "ff4_il8", "version" : "2024-W12" },
	"options" :  { "base_score" : [ ], "early_stopping_rounds" : 0, "eval_metric" : "", "gamma" : 0.0, "grow_policy" : 0, "learning_rate" : 0.3, "max_bin" : 10, "max_depth" : 6, "max_leaves" : 32, "min_child_weight" : 5.0, "n_estimators" : 5, "objective" : "reg:squarederror", "reg_alpha" : 0.0, "reg_lambda" : 1.0, "tree_method" : "auto" }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]
 [0.0048 0.9904 0.0048]]
(18, 3)
(18, 3) float32
MODEL_PERFS {'class_name': 'mllite.XGBClassifier', 'model_name': 'XGBClassifier', 'options': '{"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }', 'dataset': 'iris_sampled', 'size': 18, 'accuracy': 0.4444444444444444, 'auc': 0.5}
WRITING_PERF_CODE 'logs/auto_tests/classification/XGBClassifier/mllite.XGBClassifier_iris_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.XGBClassifier', 'model_name': 'XGBClassifier', 'options': '{"max_depth" : 6, "n_estimators" : 5, "max_bin" : 10, "min_child_weight" : 5, "max_leaves" : 32 }', 'dataset': 'iris_sampled', 'training_time_in_sec': 0.014, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/XGBClassifier/mllite.XGBClassifier_iris_sampled_option_1.sql'



SQL_OUT_PUT_FIRST_LINES_START
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"DT_node_lookup_0" AS 
 (SELECT
    t."index" AS "index",
    0 AS node_id
  FROM model_input t
 )
,
"DT_node_data_0" AS 
 (SELECT
    "Values".nid AS nid,
    "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2"
  FROM (
    SELECT 0 AS nid,  0.277778 AS "P_0", 0.444445 AS "P_1", 0.277778 AS "P_2"
  ) AS "Values")
,
"DT_output_0" AS 
 (SELECT
   t1."index" AS "index",
   t1.node_id AS node_id,
   t2.nid AS nid,
   t2."P_0" AS "P_0", t2."P_1" AS "P_1", t2."P_2" AS "P_2"
  FROM
   "DT_node_lookup_0" AS t1
   LEFT OUTER JOIN
   "DT_node_data_0" AS t2
   ON t1.node_id = t2.nid
 )
,
"DT_node_lookup_1" AS 
 (SELECT
    t."index" AS "index",
    0 AS node_id
  FROM model_input t
 )
,
"DT_node_data_1" AS 
 (SELECT
    "Values".nid AS nid,
    "Values"
SQL_OUT_PUT_FIRST_LINES_END
SQL_OUT_PUT_LAST_LINES_START
ba" AS t
),
arg_max_cte AS 
 (SELECT t.*,
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 18 entries, 0 to 17
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     18 non-null     float32
 1   X_1     18 non-null     float32
 2   X_2     18 non-null     float32
 3   X_3     18 non-null     float32
dtypes: float32(4)
memory usage: 432.0 bytes
       X_0  X_1  X_2  X_3
index                    
0      6.4  3.2  5.3  2.3
1      6.3  3.3  4.7  1.6
2      7.1  3.0  5.9  2.1
3      6.1  2.6  5.6  1.4
4      6.8  3.2  5.9  2.3
5      5.8  2.7  4.1  1.0
6      6.1  2.8  4.0  1.3
7      6.0  3.4  4.5  1.6
8      5.4  3.7  1.5  0.2
9      4.8  3.4  1.6  0.2
10     5.4  3.4  1.5  0.4
11     5.9  3.0  4.2  1.5
12     5.1  2.5  3.0  1.1
13     5.8  2.6  4.0  1.2
14     6.7  3.3  5.7  2.1
15     5.0  3.3  1.4  0.2
16     6.2  2.9  4.3  1.3
17     4.7  3.2  1.3  0.2
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 18 entries, 0 to 17
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          18 non-null     int64  
 1   Score_0        18 non-null     float64
 2   Proba_0        18 non-null     float64
 3   LogProba_0     18 non-null     float64
 4   Score_1        18 non-null     float64
 5   Proba_1        18 non-null     float64
 6   LogProba_1     18 non-null     float64
 7   Score_2        18 non-null     float64
 8   Proba_2        18 non-null     float64
 9   LogProba_2     18 non-null     float64
 10  Decision       18 non-null     int64  
 11  DecisionProba  18 non-null     float64
dtypes: float64(10), int64(2)
memory usage: 1.8 KB
    index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0       0  8.888887  0.004782  ...    -5.34295         1       0.990437
1       1  8.888887  0.004782  ...    -5.34295         1       0.990437
2       2  8.888887  0.004782  ...    -5.34295         1       0.990437
3       3  8.888887  0.004782  ...    -5.34295         1       0.990437
4       4  8.888887  0.004782  ...    -5.34295         1       0.990437
5       5  8.888887  0.004782  ...    -5.34295         1       0.990437
6       6  8.888887  0.004782  ...    -5.34295         1       0.990437
7       7  8.888887  0.004782  ...    -5.34295         1       0.990437
8       8  8.888887  0.004782  ...    -5.34295         1       0.990437
9       9  8.888887  0.004782  ...    -5.34295         1       0.990437
10     10  8.888887  0.004782  ...    -5.34295         1       0.990437
11     11  8.888887  0.004782  ...    -5.34295         1       0.990437
12     12  8.888887  0.004782  ...    -5.34295         1       0.990437
13     13  8.888887  0.004782  ...    -5.34295         1       0.990437
14     14  8.888887  0.004782  ...    -5.34295         1       0.990437
15     15  8.888887  0.004782  ...    -5.34295         1       0.990437
16     16  8.888887  0.004782  ...    -5.34295         1       0.990437
17     17  8.888887  0.004782  ...    -5.34295         1       0.990437

[18 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
2       2  8.888887     0.004782  ...    0.990437    0.004782            1
3       3  8.888887     0.004782  ...    0.990437    0.004782            1
4       4  8.888887     0.004782  ...    0.990437    0.004782            1
5       5  8.888887     0.004782  ...    0.990437    0.004782            1
6       6  8.888887     0.004782  ...    0.990437    0.004782            1
7       7  8.888887     0.004782  ...    0.990437    0.004782            1
8       8  8.888887     0.004782  ...    0.990437    0.004782            1
9       9  8.888887     0.004782  ...    0.990437    0.004782            1
10     10  8.888887     0.004782  ...    0.990437    0.004782            1
11     11  8.888887     0.004782  ...    0.990437    0.004782            1
12     12  8.888887     0.004782  ...    0.990437    0.004782            1
13     13  8.888887     0.004782  ...    0.990437    0.004782            1
14     14  8.888887     0.004782  ...    0.990437    0.004782            1
15     15  8.888887     0.004782  ...    0.990437    0.004782            1
16     16  8.888887     0.004782  ...    0.990437    0.004782            1
17     17  8.888887     0.004782  ...    0.990437    0.004782            1

[16 rows x 16 columns]
MLLITE_SQL_ERROR ('Py_Proba_0', 'SQL_Proba_0') 6.369504677995597e-07
    Py_Proba_0  SQL_Proba_0
2     0.004782     0.004782
3     0.004782     0.004782
4     0.004782     0.004782
5     0.004782     0.004782
6     0.004782     0.004782
7     0.004782     0.004782
8     0.004782     0.004782
9     0.004782     0.004782
10    0.004782     0.004782
11    0.004782     0.004782
12    0.004782     0.004782
13    0.004782     0.004782
14    0.004782     0.004782
15    0.004782     0.004782
16    0.004782     0.004782
17    0.004782     0.004782
MLLITE_SQL_ERROR ('Py_Proba_1', 'SQL_Proba_1') 2.872280326774716e-07
    Py_Proba_1  SQL_Proba_1
2     0.990437     0.990437
3     0.990437     0.990437
4     0.990437     0.990437
5     0.990437     0.990437
6     0.990437     0.990437
7     0.990437     0.990437
8     0.990437     0.990437
9     0.990437     0.990437
10    0.990437     0.990437
11    0.990437     0.990437
12    0.990437     0.990437
13    0.990437     0.990437
14    0.990437     0.990437
15    0.990437     0.990437
16    0.990437     0.990437
17    0.990437     0.990437
MLLITE_SQL_ERROR ('Py_Proba_2', 'SQL_Proba_2') 6.369504677995597e-07
    Py_Proba_2  SQL_Proba_2
2     0.004782     0.004782
3     0.004782     0.004782
4     0.004782     0.004782
5     0.004782     0.004782
6     0.004782     0.004782
7     0.004782     0.004782
8     0.004782     0.004782
9     0.004782     0.004782
10    0.004782     0.004782
11    0.004782     0.004782
12    0.004782     0.004782
13    0.004782     0.004782
14    0.004782     0.004782
15    0.004782     0.004782
16    0.004782     0.004782
17    0.004782     0.004782
    Py_Decision  SQL_Decision
2             1             1
3             1             1
4             1             1
5             1             1
6             1             1
7             1             1
8             1             1
9             1             1
10            1             1
11            1             1
12            1             1
13            1             1
14            1             1
15            1             1
16            1             1
17            1             1
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
