READING_CSV iris_sampled ['data/sampled/iris_sampled.csv']
    sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                 6.4               3.2  ...               2.3       2
1                 6.3               3.3  ...               1.6       1
2                 7.1               3.0  ...               2.1       2
3                 6.1               2.6  ...               1.4       2
4                 6.8               3.2  ...               2.3       2
5                 5.8               2.7  ...               1.0       1
6                 6.1               2.8  ...               1.3       1
7                 6.0               3.4  ...               1.6       1
8                 5.4               3.7  ...               0.2       0
9                 4.8               3.4  ...               0.2       0
10                5.4               3.4  ...               0.4       0
11                5.9               3.0  ...               1.5       1
12                5.1               2.5  ...               1.1       1
13                5.8               2.6  ...               1.2       1
14                6.7               3.3  ...               2.1       2
15                5.0               3.3  ...               0.2       0
16                6.2               2.9  ...               1.3       1
17                4.7               3.2  ...               0.2       0

[18 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[6.4 3.2 5.3 2.3]
 [6.3 3.3 4.7 1.6]
 [7.1 3.  5.9 2.1]
 [6.1 2.6 5.6 1.4]
 [6.8 3.2 5.9 2.3]] [2 1 2 2 2]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.009, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 18, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 3 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.105349, 0.421718, -0.383811, -0.063746 ],
			"coeffs_1" : [ 0.128462, -0.634918, 0.220660, 0.027581 ],
			"coeffs_2" : [ 0.708088, 0.156332, 0.689705, -0.135730 ],
			"coeffs_3" : [ 0.830896, -0.792608, -0.393051, 0.292005 ],
			"intercepts" : [ 0.421806, -0.442373, -0.471010, -0.672035 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.339078, -0.666899, -0.112743, 0.002495, -0.134116, -0.611299, -0.331670, 0.547855 ],
			"coeffs_1" : [ -0.022259, 0.005832, -0.602071, 0.014562, -0.186668, 0.231146, -0.142278, 0.273910 ],
			"coeffs_2" : [ -0.438995, 0.588220, -0.486853, 0.351753, -0.477086, 0.358545, 0.166551, 0.615033 ],
			"coeffs_3" : [ -0.413230, -0.514036, 0.206992, 0.225269, 0.444812, 0.575514, 0.507212, -0.428614 ],
			"intercepts" : [ 0.455171, 0.576270, -0.426981, 0.285063, 0.215759, 0.053026, 0.089744, 0.372717 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530473, 0.117944, 0.253030, 0.344825, -0.591402, 0.478838 ],
			"coeffs_1" : [ -0.334052, -0.574349, 0.614800, 0.593727, -0.086289, -0.501481 ],
			"coeffs_2" : [ -0.023593, 0.594893, -0.441602, 0.228327, 0.264757, 0.356226 ],
			"coeffs_3" : [ 0.545824, -0.296683, 0.253421, 0.431469, 0.449203, -0.033248 ],
			"coeffs_4" : [ -0.550197, 0.302519, 0.012187, -0.119120, -0.457680, -0.598545 ],
			"coeffs_5" : [ -0.209864, 0.559249, 0.027252, -0.133482, -0.151607, -0.555392 ],
			"coeffs_6" : [ 0.188764, -0.199137, -0.224348, -0.133022, 0.239765, -0.431816 ],
			"coeffs_7" : [ -0.185835, 0.409807, 0.407741, 0.526771, 0.444147, 0.398641 ],
			"intercepts" : [ -0.278179, 0.096536, 0.187176, 0.412516, 0.289548, 0.009494 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 3 ,
			"coeffs_0" : [ 0.438823, 0.535886, 0.134588 ],
			"coeffs_1" : [ -0.311613, -0.191171, -0.379102 ],
			"coeffs_2" : [ 0.399529, 0.485521, -0.540593 ],
			"coeffs_3" : [ 0.234609, -0.489055, 0.021606 ],
			"coeffs_4" : [ 0.124854, -0.298942, 0.398185 ],
			"coeffs_5" : [ -0.802472, -0.702097, 0.633574 ],
			"intercepts" : [ 0.709400, -0.508382, -0.303277 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_sampled_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('iris_sampled', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 18, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 3 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.105349, 0.421718, -0.383811, -0.063746 ],
			"coeffs_1" : [ 0.128462, -0.634918, 0.220660, 0.027581 ],
			"coeffs_2" : [ 0.708088, 0.156332, 0.689705, -0.135730 ],
			"coeffs_3" : [ 0.830896, -0.792608, -0.393051, 0.292005 ],
			"intercepts" : [ 0.421806, -0.442373, -0.471010, -0.672035 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.339078, -0.666899, -0.112743, 0.002495, -0.134116, -0.611299, -0.331670, 0.547855 ],
			"coeffs_1" : [ -0.022259, 0.005832, -0.602071, 0.014562, -0.186668, 0.231146, -0.142278, 0.273910 ],
			"coeffs_2" : [ -0.438995, 0.588220, -0.486853, 0.351753, -0.477086, 0.358545, 0.166551, 0.615033 ],
			"coeffs_3" : [ -0.413230, -0.514036, 0.206992, 0.225269, 0.444812, 0.575514, 0.507212, -0.428614 ],
			"intercepts" : [ 0.455171, 0.576270, -0.426981, 0.285063, 0.215759, 0.053026, 0.089744, 0.372717 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.530473, 0.117944, 0.253030, 0.344825, -0.591402, 0.478838 ],
			"coeffs_1" : [ -0.334052, -0.574349, 0.614800, 0.593727, -0.086289, -0.501481 ],
			"coeffs_2" : [ -0.023593, 0.594893, -0.441602, 0.228327, 0.264757, 0.356226 ],
			"coeffs_3" : [ 0.545824, -0.296683, 0.253421, 0.431469, 0.449203, -0.033248 ],
			"coeffs_4" : [ -0.550197, 0.302519, 0.012187, -0.119120, -0.457680, -0.598545 ],
			"coeffs_5" : [ -0.209864, 0.559249, 0.027252, -0.133482, -0.151607, -0.555392 ],
			"coeffs_6" : [ 0.188764, -0.199137, -0.224348, -0.133022, 0.239765, -0.431816 ],
			"coeffs_7" : [ -0.185835, 0.409807, 0.407741, 0.526771, 0.444147, 0.398641 ],
			"intercepts" : [ -0.278179, 0.096536, 0.187176, 0.412516, 0.289548, 0.009494 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 3 ,
			"coeffs_0" : [ 0.438823, 0.535886, 0.134588 ],
			"coeffs_1" : [ -0.311613, -0.191171, -0.379102 ],
			"coeffs_2" : [ 0.399529, 0.485521, -0.540593 ],
			"coeffs_3" : [ 0.234609, -0.489055, 0.021606 ],
			"coeffs_4" : [ 0.124854, -0.298942, 0.398185 ],
			"coeffs_5" : [ -0.802472, -0.702097, 0.633574 ],
			"intercepts" : [ 0.709400, -0.508382, -0.303277 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 18
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.105349, 0.421718, -0.383811, -0.063746 ],
			"coeffs_1" : [ 0.128462, -0.634918, 0.22066, 0.027581 ],
			"coeffs_2" : [ 0.708088, 0.156332, 0.689705, -0.13573 ],
			"coeffs_3" : [ 0.830896, -0.792608, -0.393051, 0.292005 ],
			"intercepts" : [ 0.421806, -0.442373, -0.47101, -0.672035 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.339078, -0.666899, -0.112743, 0.002495, -0.134116, -0.611299, -0.33167, 0.547855 ],
			"coeffs_1" : [ -0.022259, 0.005832, -0.602071, 0.014562, -0.186668, 0.231146, -0.142278, 0.27391 ],
			"coeffs_2" : [ -0.438995, 0.58822, -0.486853, 0.351753, -0.477086, 0.358545, 0.166551, 0.615033 ],
			"coeffs_3" : [ -0.41323, -0.514036, 0.206992, 0.225269, 0.444812, 0.575514, 0.507212, -0.428614 ],
			"intercepts" : [ 0.455171, 0.57627, -0.426981, 0.285063, 0.215759, 0.053026, 0.089744, 0.372717 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.530473, 0.117944, 0.25303, 0.344825, -0.591402, 0.478838 ],
			"coeffs_1" : [ -0.334052, -0.574349, 0.6148, 0.593727, -0.086289, -0.501481 ],
			"coeffs_2" : [ -0.023593, 0.594893, -0.441602, 0.228327, 0.264757, 0.356226 ],
			"coeffs_3" : [ 0.545824, -0.296683, 0.253421, 0.431469, 0.449203, -0.033248 ],
			"coeffs_4" : [ -0.550197, 0.302519, 0.012187, -0.11912, -0.45768, -0.598545 ],
			"coeffs_5" : [ -0.209864, 0.559249, 0.027252, -0.133482, -0.151607, -0.555392 ],
			"coeffs_6" : [ 0.188764, -0.199137, -0.224348, -0.133022, 0.239765, -0.431816 ],
			"coeffs_7" : [ -0.185835, 0.409807, 0.407741, 0.526771, 0.444147, 0.398641 ],
			"intercepts" : [ -0.278179, 0.096536, 0.187176, 0.412516, 0.289548, 0.009494 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 3,
			"coeffs_0" : [ 0.438823, 0.535886, 0.134588 ],
			"coeffs_1" : [ -0.311613, -0.191171, -0.379102 ],
			"coeffs_2" : [ 0.399529, 0.485521, -0.540593 ],
			"coeffs_3" : [ 0.234609, -0.489055, 0.021606 ],
			"coeffs_4" : [ 0.124854, -0.298942, 0.398185 ],
			"coeffs_5" : [ -0.802472, -0.702097, 0.633574 ],
			"intercepts" : [ 0.7094, -0.508382, -0.303277 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 3 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('iris_sampled', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.5368 0.0178 0.4454]
 [0.5704 0.0243 0.4053]
 [0.5346 0.0157 0.4497]
 [0.5676 0.0158 0.4166]
 [0.5279 0.0142 0.4579]
 [0.5982 0.0326 0.3692]
 [0.5869 0.0361 0.3769]
 [0.5737 0.025  0.4013]
 [0.6516 0.0707 0.2777]
 [0.6485 0.0688 0.2827]
 [0.6478 0.0683 0.2839]
 [0.58   0.0302 0.3898]
 [0.6096 0.0459 0.3445]
 [0.592  0.035  0.373 ]
 [0.5386 0.0154 0.446 ]
 [0.6549 0.0725 0.2726]
 [0.5848 0.0313 0.3839]
 [0.657  0.0737 0.2693]]
(18, 3)
(18, 3) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'iris_sampled', 'size': 18, 'accuracy': 0.2777777777777778, 'auc': 0.8333333333333334}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'iris_sampled', 'training_time_in_sec': 0.009, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ -0.000312, 0.000203, 0.000108 ],
      "X_1" : [ -0.000217, -0.000019, 0.000236 ],
      "X_2" : [ -0.001422, -0.000186, 0.001608 ],
      "X_3" : [ -0.001734, 0.000533, 0.001202 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 3, 2, 0, 1 ],
      "class_1" : [ 3, 0, 2, 1 ],
      "class_2" : [ 2, 3, 1, 0 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_sampled_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_sampled_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_sampled', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_sampled" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    0.421806 + -0.105349 * t."OUT_0"  + 0.128462 * t."OUT_1"  + 0.708088 * t."OUT_2"  + 0.830896 * t."OUT_3" AS "OUT_0",
    -0.442373 + 0.421718 * t."OUT_0"  + -0.634918 * t."OUT_1"  + 0.156332 * t."OUT_2"  + -0.792608 * t."OUT_3" AS "OUT_1",
    -0.471010 + -0.383811 * t."OUT_0"  + 0.220660 * t."OUT_1"  + 0.689705 * t."OUT_2"  + -0.393051 * t."OUT_3" AS "OUT_2",
    -0.672035 + -0.063746 * t."OUT_0"  + 0.027581 * t."OUT_1"  + -0.135730 * t."OUT_2"  + 0.292005 * t."OUT_3" AS "OUT_3"
 FROM "Input_Layer_BA" AS t
),
"Hidden_Layer_1_Activation" AS

SQL_OUT_PUT_FIRST_LINES_END ('iris_sampled', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('iris_sampled', 'MLPClassifier', 'duckdb')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_sampled', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 18 entries, 0 to 17
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     18 non-null     float32
 1   X_1     18 non-null     float32
 2   X_2     18 non-null     float32
 3   X_3     18 non-null     float32
dtypes: float32(4)
memory usage: 432.0 bytes
       X_0  X_1  X_2  X_3
index                    
0      6.4  3.2  5.3  2.3
1      6.3  3.3  4.7  1.6
2      7.1  3.0  5.9  2.1
3      6.1  2.6  5.6  1.4
4      6.8  3.2  5.9  2.3
5      5.8  2.7  4.1  1.0
6      6.1  2.8  4.0  1.3
7      6.0  3.4  4.5  1.6
8      5.4  3.7  1.5  0.2
9      4.8  3.4  1.6  0.2
10     5.4  3.4  1.5  0.4
11     5.9  3.0  4.2  1.5
12     5.1  2.5  3.0  1.1
13     5.8  2.6  4.0  1.2
14     6.7  3.3  5.7  2.1
15     5.0  3.3  1.4  0.2
16     6.2  2.9  4.3  1.3
17     4.7  3.2  1.3  0.2
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 18 entries, 0 to 17
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          18 non-null     int64  
 1   Score_0        18 non-null     float64
 2   Proba_0        18 non-null     float64
 3   LogProba_0     18 non-null     float64
 4   Score_1        18 non-null     float64
 5   Proba_1        18 non-null     float64
 6   LogProba_1     18 non-null     float64
 7   Score_2        18 non-null     float64
 8   Proba_2        18 non-null     float64
 9   LogProba_2     18 non-null     float64
 10  Decision       18 non-null     int64  
 11  DecisionProba  18 non-null     float64
dtypes: float64(10), int64(2)
memory usage: 1.8 KB
    index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0       0 -0.035133  0.536822  ...   -0.808831         0       0.536822
1       1  0.109080  0.570375  ...   -0.903099         0       0.570375
2       2 -0.024229  0.534650  ...   -0.799227         0       0.534650
3       3  0.167035  0.567564  ...   -0.875536         0       0.567564
4       4 -0.044108  0.527897  ...   -0.781031         0       0.527897
5       5  0.237010  0.598229  ...   -0.996474         0       0.598229
6       6  0.155791  0.586937  ...   -0.975662         0       0.586937
7       7  0.124770  0.573717  ...   -0.913047         0       0.573717
8       8  0.553684  0.651555  ...   -1.281177         0       0.651555
9       9  0.535978  0.648474  ...   -1.263412         0       0.648474
10     10  0.530735  0.647821  ...   -1.259178         0       0.647821
11     11  0.134974  0.579969  ...   -0.942148         0       0.579969
12     12  0.276458  0.609637  ...   -1.065678         0       0.609637
13     13  0.190566  0.592023  ...   -0.986122         0       0.592023
14     14  0.002488  0.538610  ...   -0.807380         0       0.538610
15     15  0.570019  0.654873  ...   -1.299787         0       0.654873
16     16  0.159897  0.584814  ...   -0.957331         0       0.584814
17     17  0.580639  0.656984  ...   -1.311972         0       0.656984

[18 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
2       2 -0.024229     0.534650  ...    0.015673    0.449677            0
3       3  0.167035     0.567564  ...    0.015797    0.416639            0
4       4 -0.044108     0.527897  ...    0.014169    0.457934            0
5       5  0.237010     0.598229  ...    0.032592    0.369179            0
6       6  0.155791     0.586937  ...    0.036120    0.376943            0
7       7  0.124770     0.573717  ...    0.024984    0.401300            0
8       8  0.553684     0.651555  ...    0.070735    0.277710            0
9       9  0.535978     0.648474  ...    0.068838    0.282688            0
10     10  0.530735     0.647821  ...    0.068292    0.283887            0
11     11  0.134974     0.579969  ...    0.030241    0.389790            0
12     12  0.276458     0.609637  ...    0.045869    0.344494            0
13     13  0.190566     0.592023  ...    0.034957    0.373021            0
14     14  0.002488     0.538610  ...    0.015365    0.446026            0
15     15  0.570019     0.654873  ...    0.072537    0.272590            0
16     16  0.159897     0.584814  ...    0.031270    0.383917            0
17     17  0.580639     0.656984  ...    0.073727    0.269289            0

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 3.7011398819187926e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
2     0.534650     0.534650 -6.463843e-07
3     0.567564     0.567564 -5.888773e-07
4     0.527897     0.527897 -4.726420e-07
5     0.598229     0.598229 -4.732789e-07
6     0.586937     0.586937 -5.128840e-07
7     0.573716     0.573717 -5.072741e-07
8     0.651555     0.651555  3.275973e-08
9     0.648474     0.648474 -1.377142e-07
10    0.647821     0.647821 -9.998116e-08
11    0.579969     0.579969 -4.377615e-07
12    0.609637     0.609637 -2.451124e-07
13    0.592022     0.592023 -2.829899e-07
14    0.538609     0.538610 -5.351393e-07
15    0.654873     0.654873  6.501709e-08
16    0.584814     0.584814 -4.145135e-07
17    0.656984     0.656984  6.954638e-08
MLLITE_CLASS_SQL_ERROR ('iris_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 6.060243363647383e-08
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
2     0.015673     0.015673 -4.250772e-08
3     0.015797     0.015797 -5.180545e-08
4     0.014169     0.014169 -5.131473e-08
5     0.032592     0.032592 -6.086739e-08
6     0.036120     0.036120 -6.522207e-08
7     0.024984     0.024984 -5.669851e-08
8     0.070735     0.070735 -5.910437e-08
9     0.068838     0.068838 -9.927054e-08
10    0.068292     0.068292 -9.644327e-08
11    0.030241     0.030242 -4.718456e-08
12    0.045869     0.045869 -9.368209e-08
13    0.034957     0.034957 -6.590449e-08
14    0.015365     0.015365 -4.224052e-08
15    0.072537     0.072537 -4.578931e-08
16    0.031270     0.031270 -4.378684e-08
17    0.073727     0.073727 -5.682769e-08
MLLITE_CLASS_SQL_ERROR ('iris_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 4.2157874176483743e-07
    Py_Proba_2  SQL_Proba_2   SQL_Error_2
2     0.449677     0.449677  7.112438e-07
3     0.416639     0.416638  6.146057e-07
4     0.457934     0.457933  5.453771e-07
5     0.369179     0.369179  5.155198e-07
6     0.376943     0.376943  5.706555e-07
7     0.401300     0.401300  5.975002e-07
8     0.277710     0.277710 -1.090827e-08
9     0.282688     0.282688  2.444353e-07
10    0.283887     0.283887  2.336773e-07
11    0.389790     0.389790  4.514184e-07
12    0.344494     0.344494  3.499704e-07
13    0.373021     0.373020  3.488944e-07
14    0.446026     0.446025  5.857617e-07
15    0.272590     0.272590 -2.667836e-08
16    0.383917     0.383916  4.806520e-07
17    0.269289     0.269288  3.943538e-08
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_sampled', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
2             0             0
3             0             0
4             0             0
5             0             0
6             0             0
7             0             0
8             0             0
9             0             0
10            0             0
11            0             0
12            0             0
13            0             0
14            0             0
15            0             0
16            0             0
17            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_sampled_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_sampled', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_sampled" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    0.421806 + -0.105349 * t."OUT_0"  + 0.128462 * t."OUT_1"  + 0.708088 * t."OUT_2"  + 0.830896 * t."OUT_3" AS "OUT_0",
    -0.442373 + 0.421718 * t."OUT_0"  + -0.634918 * t."OUT_1"  + 0.156332 * t."OUT_2"  + -0.792608 * t."OUT_3" AS "OUT_1",
    -0.471010 + -0.383811 * t."OUT_0"  + 0.220660 * t."OUT_1"  + 0.689705 * t."OUT_2"  + -0.393051 * t."OUT_3" AS "OUT_2",
    -0.672035 + -0.063746 * t."OUT_0"  + 0.027581 * t."OUT_1"  + -0.135730 * t."OUT_2"  + 0.292005 * t."OUT_3" AS "OUT_3"
 FROM "Input_Layer_BA" AS t
),
"Hidden_Layer_1_Activation" AS

SQL_OUT_PUT_FIRST_LINES_END ('iris_sampled', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('iris_sampled', 'MLPClassifier', 'sqlite')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_sampled', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 18 entries, 0 to 17
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     18 non-null     float32
 1   X_1     18 non-null     float32
 2   X_2     18 non-null     float32
 3   X_3     18 non-null     float32
dtypes: float32(4)
memory usage: 432.0 bytes
       X_0  X_1  X_2  X_3
index                    
0      6.4  3.2  5.3  2.3
1      6.3  3.3  4.7  1.6
2      7.1  3.0  5.9  2.1
3      6.1  2.6  5.6  1.4
4      6.8  3.2  5.9  2.3
5      5.8  2.7  4.1  1.0
6      6.1  2.8  4.0  1.3
7      6.0  3.4  4.5  1.6
8      5.4  3.7  1.5  0.2
9      4.8  3.4  1.6  0.2
10     5.4  3.4  1.5  0.4
11     5.9  3.0  4.2  1.5
12     5.1  2.5  3.0  1.1
13     5.8  2.6  4.0  1.2
14     6.7  3.3  5.7  2.1
15     5.0  3.3  1.4  0.2
16     6.2  2.9  4.3  1.3
17     4.7  3.2  1.3  0.2
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('iris_sampled', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_sampled', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
