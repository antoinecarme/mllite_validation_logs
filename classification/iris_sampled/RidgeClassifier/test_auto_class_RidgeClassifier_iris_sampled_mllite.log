    sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                 6.4               3.2  ...               2.3       2
1                 6.3               3.3  ...               1.6       1
2                 7.1               3.0  ...               2.1       2
3                 6.1               2.6  ...               1.4       2
4                 6.8               3.2  ...               2.3       2
5                 5.8               2.7  ...               1.0       1
6                 6.1               2.8  ...               1.3       1
7                 6.0               3.4  ...               1.6       1
8                 5.4               3.7  ...               0.2       0
9                 4.8               3.4  ...               0.2       0
10                5.4               3.4  ...               0.4       0
11                5.9               3.0  ...               1.5       1
12                5.1               2.5  ...               1.1       1
13                5.8               2.6  ...               1.2       1
14                6.7               3.3  ...               2.1       2
15                5.0               3.3  ...               0.2       0
16                6.2               2.9  ...               1.3       1
17                4.7               3.2  ...               0.2       0

[18 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
('OPERATION_START', 'TRAINING')
[[6.4 3.2 5.3 2.3]
 [6.3 3.3 4.7 1.6]
 [7.1 3.  5.9 2.1]
 [6.1 2.6 5.6 1.4]
 [6.8 3.2 5.9 2.3]] [2 1 2 2 2]
MLLITE_FIT_USING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 1 5
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 2 5
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 3 5
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 4 5
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 5 5
('OPERATION_END_ELAPSED', 0.019, 'TRAINING')
{ ,   }
{ ,   }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W12", "signature" : "ff4_il8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 18, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"equations" : {
		"class_0" : {
			"intercept" : -1.957747,
			"coeffs" : [ -0.038377, 0.992181, -0.188127, -0.494877 ]
		},
		"class_1" : {
			"intercept" : 4.843588,
			"coeffs" : [ -0.102291, -1.434411, -0.051340, 0.215633 ]
		},
		"class_2" : {
			"intercept" : -3.885842,
			"coeffs" : [ 0.140668, 0.442230, 0.239467, 0.279243 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_sampled.json'

MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
MLLITE_RELOADING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W12", "signature" : "ff4_il8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 18, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"equations" : {
		"class_0" : {
			"intercept" : -1.957747,
			"coeffs" : [ -0.038377, 0.992181, -0.188127, -0.494877 ]
		},
		"class_1" : {
			"intercept" : 4.843588,
			"coeffs" : [ -0.102291, -1.434411, -0.051340, 0.215633 ]
		},
		"class_2" : {
			"intercept" : -3.885842,
			"coeffs" : [ 0.140668, 0.442230, 0.239467, 0.279243 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 18
	},
	"equations" : 	{
		"class_0" : 	{
			"coeffs" : [ -0.038377, 0.992181, -0.188127, -0.494877 ],
			"intercept" : -1.957747
		},
		"class_1" : 	{
			"coeffs" : [ -0.102291, -1.434411, -0.05134, 0.215633 ],
			"intercept" : 4.843588
		},
		"class_2" : 	{
			"coeffs" : [ 0.140668, 0.44223, 0.239467, 0.279243 ],
			"intercept" : -3.885842
		}
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_il8", "version" : "2024-W12" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.1222 0.3276 0.5502]
 [0.2457 0.2914 0.4629]
 [0.089  0.3493 0.5616]
 [0.0925 0.5963 0.3111]
 [0.0991 0.2812 0.6197]
 [0.1878 0.5933 0.2188]
 [0.1861 0.5522 0.2617]
 [0.2878 0.2656 0.4465]
 [0.8167 0.0928 0.0905]
 [0.7297 0.1809 0.0894]
 [0.7023 0.1905 0.1072]
 [0.2111 0.4627 0.3263]
 [0.1486 0.7364 0.1151]
 [0.1438 0.6582 0.198 ]
 [0.134  0.2534 0.6125]
 [0.7009 0.2127 0.0863]
 [0.202  0.4869 0.3112]
 [0.6635 0.2581 0.0784]]
(18, 3)
(18, 3) float32
MODEL_PERFS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'iris_sampled', 'size': 18, 'accuracy': 0.8333333333333334, 'auc': 0.9336538461538462}
WRITING_PERF_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_sampled.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'iris_sampled', 'training_time_in_sec': 0.019, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_sampled.sql'



SQL_OUT_PUT_FIRST_LINES_START
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT model_input."index" AS "index",
   -1.957747 + -0.038377 * X_0 + 0.992181 * X_1 + -0.188127 * X_2 + -0.494877 * X_3 AS "Score_0", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "LogProba_0",
   4.843588 + -0.102291 * X_0 + -1.434411 * X_1 + -0.051340 * X_2 + 0.215633 * X_3 AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1",
   -3.885842 + 0.140668 * X_0 + 0.442230 * X_1 + 0.239467 * X_2 + 0.279243 * X_3 AS "Score_2", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "LogProba_2"
  FROM model_input
 )
,
soft_max_orig_cte AS 
 (SELECT t."index" AS "index", 
   t."Score_0" AS "Score_0",
   t."Proba_0" AS "Proba_0",
   t."LogProba_0" AS "LogProba_0",
   t."Score_1" AS "Score_1",
   t."Proba
SQL_OUT_PUT_FIRST_LINES_END
SQL_OUT_PUT_LAST_LINES_START
x_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."arg_max_Score" AS "Decision",
  CASE
   WHEN (arg_max_cte."arg_max_Score" = 0) THEN arg_max_cte."Proba_0"
   WHEN (arg_max_cte."arg_max_Score" = 1) THEN arg_max_cte."Proba_1"
   WHEN (arg_max_cte."arg_max_Score" = 2) THEN arg_max_cte."Proba_2"
 END AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END




COPY_TRAINING_DATA_TO_SQLITE_START
    X_0  X_1  X_2  X_3  KEY
0   6.4  3.2  5.3  2.3    0
1   6.3  3.3  4.7  1.6    1
2   7.1  3.0  5.9  2.1    2
3   6.1  2.6  5.6  1.4    3
4   6.8  3.2  5.9  2.3    4
5   5.8  2.7  4.1  1.0    5
6   6.1  2.8  4.0  1.3    6
7   6.0  3.4  4.5  1.6    7
8   5.4  3.7  1.5  0.2    8
9   4.8  3.4  1.6  0.2    9
10  5.4  3.4  1.5  0.4   10
11  5.9  3.0  4.2  1.5   11
12  5.1  2.5  3.0  1.1   12
13  5.8  2.6  4.0  1.2   13
14  6.7  3.3  5.7  2.1   14
15  5.0  3.3  1.4  0.2   15
16  6.2  2.9  4.3  1.3   16
17  4.7  3.2  1.3  0.2   17
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
    index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0       0 -1.163671  0.122189  ...   -0.597516         2       0.550177
1       1 -0.601325  0.245704  ...   -0.770295         2       0.462877
2       2 -1.402872  0.089043  ...   -0.576908         2       0.561632
3       3 -1.358515  0.092548  ...   -1.167525         1       0.596316
4       4 -1.291898  0.099118  ...   -0.478591         2       0.619656
5       5 -0.767643  0.187837  ...   -1.519429         1       0.593326
6       6 -0.809588  0.186079  ...   -1.340635         1       0.552241
7       7 -0.452968  0.287832  ...   -0.806272         2       0.446520
8       8  1.124921  0.816701  ...   -2.402337         0       0.816701
9       9  0.831480  0.729730  ...   -2.414619         0       0.729730
10     10  0.728291  0.702345  ...   -2.233377         0       0.702345
11     11 -0.740077  0.211079  ...   -1.120029         1       0.462650
12     12 -0.781763  0.148554  ...   -2.162339         1       0.736391
13     13 -0.947024  0.143785  ...   -1.619624         1       0.658242
14     14 -1.052241  0.134022  ...   -0.490143         2       0.612539
15     15  0.762212  0.700938  ...   -2.449588         0       0.700938
16     16 -0.770646  0.201981  ...   -1.167445         1       0.486858
17     17  0.693320  0.663510  ...   -2.545942         0       0.663510

[18 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
2       2 -1.402872     0.089043  ...    0.349325    0.561632            2
3       3 -1.358515     0.092548  ...    0.596316    0.311136            1
4       4 -1.291898     0.099118  ...    0.281226    0.619656            2
5       5 -0.767643     0.187837  ...    0.593327    0.218837            1
6       6 -0.809588     0.186079  ...    0.552241    0.261680            1
7       7 -0.452968     0.287832  ...    0.265648    0.446520            2
8       8  1.124921     0.816701  ...    0.092792    0.090506            0
9       9  0.831480     0.729730  ...    0.180869    0.089401            0
10     10  0.728291     0.702345  ...    0.190489    0.107166            0
11     11 -0.740077     0.211079  ...    0.462650    0.326270            1
12     12 -0.781763     0.148554  ...    0.736391    0.115056            1
13     13 -0.947024     0.143785  ...    0.658242    0.197973            1
14     14 -1.052241     0.134022  ...    0.253439    0.612539            2
15     15  0.762212     0.700938  ...    0.212732    0.086329            0
16     16 -0.770646     0.201981  ...    0.486858    0.311161            1
17     17  0.693320     0.663510  ...    0.258091    0.078399            0

[16 rows x 16 columns]
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
