         X_0       X_1       X_2  ...       X_8       X_9  target
0  -1.064559 -0.820872 -0.723270  ... -0.319080 -0.383915       0
1  -0.960957 -1.294560 -0.778172  ...  0.207019 -0.945521       0
2  -1.406136 -0.242116  1.301289  ... -1.426875  1.876952       1
3  -1.954561 -1.845000  0.508844  ... -1.374292  2.746056       0
4  -0.098659 -1.731538  2.272469  ...  1.740497  0.199837       1
5  -2.816561 -1.091985 -0.089846  ...  0.481645 -0.115846       1
6  -2.525895 -0.477894 -0.273729  ... -0.136594  0.296252       1
7  -2.810322  0.803423  0.052149  ...  1.221721  1.307240       1
8   0.509511 -0.339445 -0.100619  ...  0.213285 -1.199707       0
9  -0.366856 -2.698274  0.045788  ...  0.057282 -0.702300       0
10 -1.388256 -0.178366  0.039211  ... -1.172041 -0.253551       0
11  0.444082 -0.224036 -0.126428  ...  1.706341 -0.190966       1
12  1.360494  0.682985 -1.812859  ...  2.206119 -1.293514       0
13 -0.143033 -0.745429  1.941176  ...  0.532632 -2.605754       1
14  0.983214 -0.343181 -0.498688  ...  0.430213  0.588898       0
15 -0.890672  0.398898 -0.046821  ...  0.973574 -0.299585       1

[16 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[-1.0645586  -0.8208718  -0.72327    -0.09642018 -0.40463343 -0.81522477
  -0.8386918   0.65200984 -0.31908    -0.3839149 ]
 [-0.9609572  -1.2945602  -0.77817184  0.8359748  -1.0189681  -0.12086504
  -0.68072116 -0.5189585   0.20701888 -0.9455213 ]
 [-1.4061359  -0.24211647  1.301289   -0.49436462  1.0264262   1.0800456
   1.3956257  -1.0432675  -1.426875    1.8769516 ]
 [-1.9545612  -1.8449999   0.5088439  -0.224022    0.66320896  0.0830382
   0.446295    0.53221494 -1.3742915   2.7460556 ]
 [-0.09865901 -1.7315376   2.2724695   0.11809641  1.0834117   2.8048902
   2.7064822   0.84583855  1.7404972   0.19983661]] [0 0 1 0 1]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.016, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"classes" : [ 0, 1 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.034769, 0.309389, -0.235953, -0.019116 ],
			"coeffs_1" : [ 0.148818, -0.436272, 0.157477, -0.007374 ],
			"coeffs_2" : [ 0.528887, 0.106884, 0.513168, -0.133321 ],
			"coeffs_3" : [ 0.674840, -0.611984, -0.242869, 0.265854 ],
			"coeffs_4" : [ 0.315087, -0.319848, -0.310504, -0.477278 ],
			"coeffs_5" : [ 0.253872, -0.677459, -0.135007, -0.000940 ],
			"coeffs_6" : [ -0.159496, -0.627185, -0.366159, 0.504042 ],
			"coeffs_7" : [ -0.077724, 0.009232, -0.556377, 0.064059 ],
			"coeffs_8" : [ -0.228809, 0.214886, -0.140920, 0.244477 ],
			"coeffs_9" : [ -0.404952, 0.605833, -0.510667, 0.385776 ],
			"intercepts" : [ -0.498061, 0.363866, 0.126535, 0.564194 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.413645, -0.572073, 0.208149, 0.225715, 0.506842, 0.576235, 0.509723, -0.431621 ],
			"coeffs_1" : [ 0.449178, 0.607933, -0.400520, 0.348463, 0.241244, 0.085223, 0.058212, 0.437376 ],
			"coeffs_2" : [ -0.576361, 0.061211, 0.261769, 0.439322, -0.580374, 0.460264, -0.423557, -0.621289 ],
			"coeffs_3" : [ 0.723767, 0.643497, -0.067013, -0.542984, 0.000380, 0.646812, -0.537074, 0.275692 ],
			"intercepts" : [ 0.344324, 0.386212, 0.648548, -0.324391, 0.325255, 0.467868, 0.488724, -0.060765 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.608492, 0.295654, 0.005272, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.267695, 0.559778, 0.032623, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.187762, -0.230280, -0.277464, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.241921, 0.410062, 0.464478, 0.526231, 0.444787, 0.341110 ],
			"coeffs_4" : [ -0.308605, 0.030413, 0.197061, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.347085, 0.423954, 0.100958, -0.195384, -0.154200, -0.294011 ],
			"coeffs_6" : [ 0.313559, 0.333367, -0.425588, 0.182649, -0.386450, -0.001729 ],
			"coeffs_7" : [ 0.128315, -0.233041, 0.312596, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.563688, -0.464393, -0.249017, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.277193 ],
			"coeffs_1" : [ -0.181648 ],
			"coeffs_2" : [ -0.639792 ],
			"coeffs_3" : [ -0.636297 ],
			"coeffs_4" : [ -0.788203 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576308 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_tiny_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 16, "dataset_features" : 10 },
	"classes" : [ 0, 1 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.034769, 0.309389, -0.235953, -0.019116 ],
			"coeffs_1" : [ 0.148818, -0.436272, 0.157477, -0.007374 ],
			"coeffs_2" : [ 0.528887, 0.106884, 0.513168, -0.133321 ],
			"coeffs_3" : [ 0.674840, -0.611984, -0.242869, 0.265854 ],
			"coeffs_4" : [ 0.315087, -0.319848, -0.310504, -0.477278 ],
			"coeffs_5" : [ 0.253872, -0.677459, -0.135007, -0.000940 ],
			"coeffs_6" : [ -0.159496, -0.627185, -0.366159, 0.504042 ],
			"coeffs_7" : [ -0.077724, 0.009232, -0.556377, 0.064059 ],
			"coeffs_8" : [ -0.228809, 0.214886, -0.140920, 0.244477 ],
			"coeffs_9" : [ -0.404952, 0.605833, -0.510667, 0.385776 ],
			"intercepts" : [ -0.498061, 0.363866, 0.126535, 0.564194 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.413645, -0.572073, 0.208149, 0.225715, 0.506842, 0.576235, 0.509723, -0.431621 ],
			"coeffs_1" : [ 0.449178, 0.607933, -0.400520, 0.348463, 0.241244, 0.085223, 0.058212, 0.437376 ],
			"coeffs_2" : [ -0.576361, 0.061211, 0.261769, 0.439322, -0.580374, 0.460264, -0.423557, -0.621289 ],
			"coeffs_3" : [ 0.723767, 0.643497, -0.067013, -0.542984, 0.000380, 0.646812, -0.537074, 0.275692 ],
			"intercepts" : [ 0.344324, 0.386212, 0.648548, -0.324391, 0.325255, 0.467868, 0.488724, -0.060765 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.608492, 0.295654, 0.005272, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.267695, 0.559778, 0.032623, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.187762, -0.230280, -0.277464, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.241921, 0.410062, 0.464478, 0.526231, 0.444787, 0.341110 ],
			"coeffs_4" : [ -0.308605, 0.030413, 0.197061, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.347085, 0.423954, 0.100958, -0.195384, -0.154200, -0.294011 ],
			"coeffs_6" : [ 0.313559, 0.333367, -0.425588, 0.182649, -0.386450, -0.001729 ],
			"coeffs_7" : [ 0.128315, -0.233041, 0.312596, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.563688, -0.464393, -0.249017, -0.494865, -0.500519, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ -0.277193 ],
			"coeffs_1" : [ -0.181648 ],
			"coeffs_2" : [ -0.639792 ],
			"coeffs_3" : [ -0.636297 ],
			"coeffs_4" : [ -0.788203 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576308 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 16
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.034769, 0.309389, -0.235953, -0.019116 ],
			"coeffs_1" : [ 0.148818, -0.436272, 0.157477, -0.007374 ],
			"coeffs_2" : [ 0.528887, 0.106884, 0.513168, -0.133321 ],
			"coeffs_3" : [ 0.67484, -0.611984, -0.242869, 0.265854 ],
			"coeffs_4" : [ 0.315087, -0.319848, -0.310504, -0.477278 ],
			"coeffs_5" : [ 0.253872, -0.677459, -0.135007, -0.00094 ],
			"coeffs_6" : [ -0.159496, -0.627185, -0.366159, 0.504042 ],
			"coeffs_7" : [ -0.077724, 0.009232, -0.556377, 0.064059 ],
			"coeffs_8" : [ -0.228809, 0.214886, -0.14092, 0.244477 ],
			"coeffs_9" : [ -0.404952, 0.605833, -0.510667, 0.385776 ],
			"intercepts" : [ -0.498061, 0.363866, 0.126535, 0.564194 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.413645, -0.572073, 0.208149, 0.225715, 0.506842, 0.576235, 0.509723, -0.431621 ],
			"coeffs_1" : [ 0.449178, 0.607933, -0.40052, 0.348463, 0.241244, 0.085223, 0.058212, 0.437376 ],
			"coeffs_2" : [ -0.576361, 0.061211, 0.261769, 0.439322, -0.580374, 0.460264, -0.423557, -0.621289 ],
			"coeffs_3" : [ 0.723767, 0.643497, -0.067013, -0.542984, 0.00038, 0.646812, -0.537074, 0.275692 ],
			"intercepts" : [ 0.344324, 0.386212, 0.648548, -0.324391, 0.325255, 0.467868, 0.488724, -0.060765 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.608492, 0.295654, 0.005272, -0.124039, -0.449854, -0.588194 ],
			"coeffs_1" : [ -0.267695, 0.559778, 0.032623, -0.133482, -0.151607, -0.555284 ],
			"coeffs_2" : [ 0.187762, -0.23028, -0.277464, -0.133022, 0.239555, -0.431684 ],
			"coeffs_3" : [ -0.241921, 0.410062, 0.464478, 0.526231, 0.444787, 0.34111 ],
			"coeffs_4" : [ -0.308605, 0.030413, 0.197061, 0.412954, 0.291422, -0.001604 ],
			"coeffs_5" : [ 0.347085, 0.423954, 0.100958, -0.195384, -0.1542, -0.294011 ],
			"coeffs_6" : [ 0.313559, 0.333367, -0.425588, 0.182649, -0.38645, -0.001729 ],
			"coeffs_7" : [ 0.128315, -0.233041, 0.312596, -0.587535, -0.557435, 0.457149 ],
			"intercepts" : [ 0.563688, -0.464393, -0.249017, -0.494865, -0.500519, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ -0.277193 ],
			"coeffs_1" : [ -0.181648 ],
			"coeffs_2" : [ -0.639792 ],
			"coeffs_3" : [ -0.636297 ],
			"coeffs_4" : [ -0.788203 ],
			"coeffs_5" : [ 0.178692 ],
			"intercepts" : [ -0.576308 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.6797 0.3203]
 [0.7032 0.2968]
 [0.6754 0.3246]
 [0.7559 0.2441]
 [0.6931 0.3069]
 [0.6994 0.3006]
 [0.6915 0.3085]
 [0.7192 0.2808]
 [0.6871 0.3129]
 [0.689  0.311 ]
 [0.7135 0.2865]
 [0.6907 0.3093]
 [0.7964 0.2036]
 [0.7451 0.2549]
 [0.7525 0.2475]
 [0.732  0.268 ]]
(16, 2)
(16,) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'BinaryClass_10_tiny', 'size': 16, 'accuracy': 0.5, 'auc': 0.578125}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_tiny_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'BinaryClass_10_tiny', 'training_time_in_sec': 0.016, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_tiny_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_10_tiny', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498061 + -0.034769 * t."OUT_0"  + 0.148818 * t."OUT_1"  + 0.528887 * t."OUT_2"  + 0.674840 * t."OUT_3"  + 0.315087 * t."OUT_4"  + 0.253872 * t."OUT_5"  + -0.159496 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_10_tiny', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_10_tiny', 'MLPClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_10_tiny', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.064559 -0.820872 -0.723270  ...  0.652010 -0.319080 -0.383915
1     -0.960957 -1.294560 -0.778172  ... -0.518959  0.207019 -0.945521
2     -1.406136 -0.242116  1.301289  ... -1.043267 -1.426875  1.876952
3     -1.954561 -1.845000  0.508844  ...  0.532215 -1.374292  2.746056
4     -0.098659 -1.731538  2.272470  ...  0.845839  1.740497  0.199837
5     -2.816561 -1.091985 -0.089846  ... -0.176273  0.481645 -0.115846
6     -2.525896 -0.477894 -0.273729  ...  1.096727 -0.136594  0.296252
7     -2.810322  0.803423  0.052149  ... -0.584702  1.221721  1.307240
8      0.509511 -0.339445 -0.100619  ...  0.303728  0.213285 -1.199707
9     -0.366856 -2.698274  0.045788  ... -0.850652  0.057282 -0.702300
10    -1.388256 -0.178366  0.039211  ... -0.225993 -1.172041 -0.253551
11     0.444082 -0.224036 -0.126428  ... -0.491621  1.706341 -0.190966
12     1.360494  0.682985 -1.812859  ... -0.935174  2.206119 -1.293514
13    -0.143033 -0.745429  1.941176  ...  1.262047  0.532632 -2.605754
14     0.983214 -0.343181 -0.498688  ... -0.797164  0.430213  0.588898
15    -0.890672  0.398898 -0.046821  ... -2.143014  0.973574 -0.299585

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 16 entries, 0 to 15
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          16 non-null     int64  
 1   Score_0        16 non-null     float64
 2   Proba_0        16 non-null     float64
 3   LogProba_0     16 non-null     float64
 4   Score_1        16 non-null     float64
 5   Proba_1        16 non-null     float64
 6   LogProba_1     16 non-null     float64
 7   Decision       16 non-null     int64  
 8   DecisionProba  16 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 1.3 KB
    index   Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0  0.376210  0.679706  ...   -1.138515         0       0.679706
1       1  0.431217  0.703169  ...   -1.214592         0       0.703169
2       2  0.366260  0.675358  ...   -1.125033         0       0.675358
3       3  0.565050  0.755857  ...   -1.410003         0       0.755857
4       4  0.407312  0.693094  ...   -1.181213         0       0.693094
5       5  0.422306  0.699436  ...   -1.202094         0       0.699436
6       6  0.403549  0.691491  ...   -1.176003         0       0.691491
7       7  0.470264  0.719206  ...   -1.270135         0       0.719206
8       8  0.393239  0.687075  ...   -1.161790         0       0.687075
9       9  0.397628  0.688959  ...   -1.167830         0       0.688959
10     10  0.456236  0.713506  ...   -1.250037         0       0.713506
11     11  0.401703  0.690703  ...   -1.173452         0       0.690703
12     12  0.681881  0.796370  ...   -1.591453         0       0.796370
13     13  0.536265  0.745078  ...   -1.366797         0       0.745078
14     14  0.555915  0.752470  ...   -1.396224         0       0.752470
15     15  0.502378  0.731993  ...   -1.316741         0       0.731993

[16 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
0       0  0.376210     0.679706  ...    0.679706    0.320294            0
1       1  0.431217     0.703169  ...    0.703169    0.296831            0
2       2  0.366260     0.675358  ...    0.675358    0.324642            0
3       3  0.565050     0.755857  ...    0.755857    0.244143            0
4       4  0.407312     0.693094  ...    0.693094    0.306906            0
5       5  0.422306     0.699436  ...    0.699436    0.300564            0
6       6  0.403549     0.691491  ...    0.691491    0.308509            0
7       7  0.470264     0.719206  ...    0.719206    0.280794            0
8       8  0.393239     0.687075  ...    0.687074    0.312926            0
9       9  0.397628     0.688959  ...    0.688959    0.311041            0
10     10  0.456236     0.713506  ...    0.713506    0.286494            0
11     11  0.401703     0.690703  ...    0.690702    0.309298            0
12     12  0.681881     0.796370  ...    0.796371    0.203629            0
13     13  0.536265     0.745078  ...    0.745078    0.254922            0
14     14  0.555915     0.752470  ...    0.752470    0.247530            0
15     15  0.502378     0.731993  ...    0.731992    0.268007            0

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 8.555094213602565e-08
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
0     0.679706     0.679706 -1.834015e-08
1     0.703169     0.703169 -2.311920e-08
2     0.675358     0.675358 -8.258937e-08
3     0.755857     0.755857  1.341992e-07
4     0.693094     0.693094 -9.492700e-08
5     0.699436     0.699436 -9.698747e-08
6     0.691491     0.691491 -7.152948e-08
7     0.719206     0.719206 -6.885422e-08
8     0.687074     0.687075 -1.113003e-07
9     0.688959     0.688959 -9.659849e-08
10    0.713506     0.713506 -1.080140e-07
11    0.690702     0.690703 -3.686399e-08
12    0.796371     0.796370  8.279003e-08
13    0.745078     0.745078 -9.036248e-08
14    0.752470     0.752470  1.038418e-07
15    0.731992     0.731993 -1.484979e-07
MLLITE_CLASS_SQL_ERROR ('BinaryClass_10_tiny', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 8.368829701108083e-08
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
0     0.320294     0.320294  1.834015e-08
1     0.296831     0.296831  5.292152e-08
2     0.324642     0.324642  1.123917e-07
3     0.244143     0.244143 -1.043969e-07
4     0.306906     0.306906  9.492700e-08
5     0.300564     0.300564  9.698747e-08
6     0.308509     0.308509  4.172715e-08
7     0.280794     0.280794  6.885422e-08
8     0.312926     0.312925  1.411026e-07
9     0.311041     0.311041  6.679617e-08
10    0.286494     0.286494  1.080140e-07
11    0.309298     0.309297  3.686399e-08
12    0.203629     0.203630 -9.769119e-08
13    0.254922     0.254922  9.036248e-08
14    0.247530     0.247530 -8.894059e-08
15    0.268007     0.268007  1.186956e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('BinaryClass_10_tiny', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
0             0             0
1             0             0
2             0             0
3             0             0
4             0             0
5             0             0
6             0             0
7             0             0
8             0             0
9             0             0
10            0             0
11            0             0
12            0             0
13            0             0
14            0             0
15            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_tiny_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_10_tiny', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498061 + -0.034769 * t."OUT_0"  + 0.148818 * t."OUT_1"  + 0.528887 * t."OUT_2"  + 0.674840 * t."OUT_3"  + 0.315087 * t."OUT_4"  + 0.253872 * t."OUT_5"  + -0.159496 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_10_tiny', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_10_tiny', 'MLPClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_10_tiny', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 16 entries, 0 to 15
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     16 non-null     float32
 1   X_1     16 non-null     float32
 2   X_2     16 non-null     float32
 3   X_3     16 non-null     float32
 4   X_4     16 non-null     float32
 5   X_5     16 non-null     float32
 6   X_6     16 non-null     float32
 7   X_7     16 non-null     float32
 8   X_8     16 non-null     float32
 9   X_9     16 non-null     float32
dtypes: float32(10)
memory usage: 768.0 bytes
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.064559 -0.820872 -0.723270  ...  0.652010 -0.319080 -0.383915
1     -0.960957 -1.294560 -0.778172  ... -0.518959  0.207019 -0.945521
2     -1.406136 -0.242116  1.301289  ... -1.043267 -1.426875  1.876952
3     -1.954561 -1.845000  0.508844  ...  0.532215 -1.374292  2.746056
4     -0.098659 -1.731538  2.272470  ...  0.845839  1.740497  0.199837
5     -2.816561 -1.091985 -0.089846  ... -0.176273  0.481645 -0.115846
6     -2.525896 -0.477894 -0.273729  ...  1.096727 -0.136594  0.296252
7     -2.810322  0.803423  0.052149  ... -0.584702  1.221721  1.307240
8      0.509511 -0.339445 -0.100619  ...  0.303728  0.213285 -1.199707
9     -0.366856 -2.698274  0.045788  ... -0.850652  0.057282 -0.702300
10    -1.388256 -0.178366  0.039211  ... -0.225993 -1.172041 -0.253551
11     0.444082 -0.224036 -0.126428  ... -0.491621  1.706341 -0.190966
12     1.360494  0.682985 -1.812859  ... -0.935174  2.206119 -1.293514
13    -0.143033 -0.745429  1.941176  ...  1.262047  0.532632 -2.605754
14     0.983214 -0.343181 -0.498688  ... -0.797164  0.430213  0.588898
15    -0.890672  0.398898 -0.046821  ... -2.143014  0.973574 -0.299585

[16 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('BinaryClass_10_tiny', 'MLPClassifier', 'sqlite', '')
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BinaryClass_10_tiny_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_10_tiny', 'MLPClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498061 + -0.034769 * t."OUT_0"  + 0.148818 * t."OUT_1"  + 0.528887 * t."OUT_2"  + 0.674840 * t."OUT_3"  + 0.315087 * t."OUT_4"  + 0.253872 * t."OUT_5"  + -0.159496 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_10_tiny', 'MLPClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_10_tiny', 'MLPClassifier', 'pgsql')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_10_tiny', 'MLPClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
