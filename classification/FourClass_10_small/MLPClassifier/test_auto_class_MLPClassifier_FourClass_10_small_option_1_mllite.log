READING_CSV FourClass_10_small ['data/small/FourClass_10_small.csv']
         X_0       X_1       X_2  ...       X_8       X_9  target
0  -1.050659  0.920640 -0.455125  ... -0.010797 -1.586949       2
1   1.869880 -2.312190 -1.153852  ... -1.648043  2.109906       3
2  -0.124049  0.768644 -1.040184  ...  1.247335 -1.413962       1
3   0.928858 -1.177375  0.542731  ...  0.485529  1.106564       0
4  -1.598324  1.482463  1.664691  ...  1.816533  0.637000       3
..       ...       ...       ...  ...       ...       ...     ...
59  1.914430 -1.187978 -1.908593  ...  1.147780 -0.640430       1
60 -2.300030  2.981089  1.310992  ...  0.000418  0.598406       0
61 -0.438059 -0.593217  0.535711  ... -0.652815 -1.264656       3
62  0.855164 -0.934582 -1.885349  ... -2.566222  0.077759       2
63  0.141928 -0.408314  0.402206  ...  0.317499 -0.049391       1

[64 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[-1.0506592   0.92064023 -0.4551253  -0.05012989 -0.19162714  0.5843286
   0.9430313   1.0213077  -0.01079692 -1.5869486 ]
 [ 1.86988    -2.3121896  -1.1538523   1.292078   -1.061729    2.0429258
   1.284271   -1.3353989  -1.6480426   2.1099062 ]
 [-0.1240493   0.7686444  -1.040184   -1.0419097  -0.5159428   1.4802165
  -1.7200696   0.34235197  1.2473352  -1.4139622 ]
 [ 0.9288579  -1.1773754   0.5427306   1.248167   -0.7323589   0.6922126
   0.362028   -0.05373104  0.48552942  1.1065644 ]
 [-1.5983242   1.4824632   1.6646907  -0.7911312  -0.3269162  -0.07355959
  -3.3526254  -1.3474813   1.8165325   0.6370003 ]] [2 3 1 0 3]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.013, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.086798, 0.307915, -0.236183, -0.078721 ],
			"coeffs_1" : [ 0.148685, -0.426197, 0.159084, 0.051336 ],
			"coeffs_2" : [ 0.529834, 0.108759, 0.516813, -0.071845 ],
			"coeffs_3" : [ 0.624398, -0.552306, -0.244177, 0.213134 ],
			"coeffs_4" : [ 0.311032, -0.347868, -0.363126, -0.478046 ],
			"coeffs_5" : [ 0.253595, -0.615058, -0.078840, 0.000875 ],
			"coeffs_6" : [ -0.159270, -0.564999, -0.305454, 0.504615 ],
			"coeffs_7" : [ -0.081717, 0.036055, -0.556728, 0.066994 ],
			"coeffs_8" : [ -0.172305, 0.221152, -0.161644, 0.308033 ],
			"coeffs_9" : [ -0.406848, 0.542252, -0.486040, 0.322941 ],
			"intercepts" : [ -0.498861, 0.330458, 0.124544, 0.565965 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.471963, -0.574999, 0.268198, 0.224104, 0.505064, 0.576720, 0.509838, -0.429758 ],
			"coeffs_1" : [ 0.393143, 0.546240, -0.395672, 0.286569, 0.177925, 0.023012, 0.061362, 0.434225 ],
			"coeffs_2" : [ -0.636778, 0.058886, 0.319981, 0.377936, -0.635449, 0.459877, -0.422901, -0.622321 ],
			"coeffs_3" : [ 0.669541, 0.645444, -0.062690, -0.602933, -0.045098, 0.646580, -0.537356, 0.310906 ],
			"intercepts" : [ 0.289402, 0.387703, 0.653999, -0.387040, 0.271135, 0.467627, 0.490174, -0.031782 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.610619, 0.298108, -0.021101, -0.097592, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.269248, 0.560411, -0.001707, -0.100262, -0.125109, -0.586402 ],
			"coeffs_2" : [ 0.187114, -0.230448, -0.281417, -0.105057, 0.298379, -0.462554 ],
			"coeffs_3" : [ -0.244826, 0.346398, 0.402403, 0.590205, 0.504059, 0.371699 ],
			"coeffs_4" : [ -0.306466, 0.033743, 0.160181, 0.470525, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.346718, 0.424452, 0.079716, -0.191755, -0.150564, -0.324393 ],
			"coeffs_6" : [ 0.334131, 0.336584, -0.478353, 0.238932, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.094493, -0.293021, 0.269269, -0.597796, -0.588556, 0.488080 ],
			"intercepts" : [ 0.563102, -0.463521, -0.274816, -0.461311, -0.473061, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.226933, -0.207617, -0.475935, -0.529458 ],
			"coeffs_1" : [ -0.657367, 0.119860, -0.478292, -0.583744 ],
			"coeffs_2" : [ 0.178648, 0.241014, -0.093599, 0.236689 ],
			"coeffs_3" : [ 0.113948, -0.537956, -0.153129, 0.628534 ],
			"coeffs_4" : [ 0.806565, -0.158581, -0.638478, -0.408787 ],
			"coeffs_5" : [ 0.322902, -0.641381, 0.267267, -0.410608 ],
			"intercepts" : [ 0.742500, 0.713810, -0.323141, 0.432246 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_small_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('FourClass_10_small', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.086798, 0.307915, -0.236183, -0.078721 ],
			"coeffs_1" : [ 0.148685, -0.426197, 0.159084, 0.051336 ],
			"coeffs_2" : [ 0.529834, 0.108759, 0.516813, -0.071845 ],
			"coeffs_3" : [ 0.624398, -0.552306, -0.244177, 0.213134 ],
			"coeffs_4" : [ 0.311032, -0.347868, -0.363126, -0.478046 ],
			"coeffs_5" : [ 0.253595, -0.615058, -0.078840, 0.000875 ],
			"coeffs_6" : [ -0.159270, -0.564999, -0.305454, 0.504615 ],
			"coeffs_7" : [ -0.081717, 0.036055, -0.556728, 0.066994 ],
			"coeffs_8" : [ -0.172305, 0.221152, -0.161644, 0.308033 ],
			"coeffs_9" : [ -0.406848, 0.542252, -0.486040, 0.322941 ],
			"intercepts" : [ -0.498861, 0.330458, 0.124544, 0.565965 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.471963, -0.574999, 0.268198, 0.224104, 0.505064, 0.576720, 0.509838, -0.429758 ],
			"coeffs_1" : [ 0.393143, 0.546240, -0.395672, 0.286569, 0.177925, 0.023012, 0.061362, 0.434225 ],
			"coeffs_2" : [ -0.636778, 0.058886, 0.319981, 0.377936, -0.635449, 0.459877, -0.422901, -0.622321 ],
			"coeffs_3" : [ 0.669541, 0.645444, -0.062690, -0.602933, -0.045098, 0.646580, -0.537356, 0.310906 ],
			"intercepts" : [ 0.289402, 0.387703, 0.653999, -0.387040, 0.271135, 0.467627, 0.490174, -0.031782 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.610619, 0.298108, -0.021101, -0.097592, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.269248, 0.560411, -0.001707, -0.100262, -0.125109, -0.586402 ],
			"coeffs_2" : [ 0.187114, -0.230448, -0.281417, -0.105057, 0.298379, -0.462554 ],
			"coeffs_3" : [ -0.244826, 0.346398, 0.402403, 0.590205, 0.504059, 0.371699 ],
			"coeffs_4" : [ -0.306466, 0.033743, 0.160181, 0.470525, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.346718, 0.424452, 0.079716, -0.191755, -0.150564, -0.324393 ],
			"coeffs_6" : [ 0.334131, 0.336584, -0.478353, 0.238932, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.094493, -0.293021, 0.269269, -0.597796, -0.588556, 0.488080 ],
			"intercepts" : [ 0.563102, -0.463521, -0.274816, -0.461311, -0.473061, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.226933, -0.207617, -0.475935, -0.529458 ],
			"coeffs_1" : [ -0.657367, 0.119860, -0.478292, -0.583744 ],
			"coeffs_2" : [ 0.178648, 0.241014, -0.093599, 0.236689 ],
			"coeffs_3" : [ 0.113948, -0.537956, -0.153129, 0.628534 ],
			"coeffs_4" : [ 0.806565, -0.158581, -0.638478, -0.408787 ],
			"coeffs_5" : [ 0.322902, -0.641381, 0.267267, -0.410608 ],
			"intercepts" : [ 0.742500, 0.713810, -0.323141, 0.432246 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2, 3 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 64
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.086798, 0.307915, -0.236183, -0.078721 ],
			"coeffs_1" : [ 0.148685, -0.426197, 0.159084, 0.051336 ],
			"coeffs_2" : [ 0.529834, 0.108759, 0.516813, -0.071845 ],
			"coeffs_3" : [ 0.624398, -0.552306, -0.244177, 0.213134 ],
			"coeffs_4" : [ 0.311032, -0.347868, -0.363126, -0.478046 ],
			"coeffs_5" : [ 0.253595, -0.615058, -0.07884, 0.000875 ],
			"coeffs_6" : [ -0.15927, -0.564999, -0.305454, 0.504615 ],
			"coeffs_7" : [ -0.081717, 0.036055, -0.556728, 0.066994 ],
			"coeffs_8" : [ -0.172305, 0.221152, -0.161644, 0.308033 ],
			"coeffs_9" : [ -0.406848, 0.542252, -0.48604, 0.322941 ],
			"intercepts" : [ -0.498861, 0.330458, 0.124544, 0.565965 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.471963, -0.574999, 0.268198, 0.224104, 0.505064, 0.57672, 0.509838, -0.429758 ],
			"coeffs_1" : [ 0.393143, 0.54624, -0.395672, 0.286569, 0.177925, 0.023012, 0.061362, 0.434225 ],
			"coeffs_2" : [ -0.636778, 0.058886, 0.319981, 0.377936, -0.635449, 0.459877, -0.422901, -0.622321 ],
			"coeffs_3" : [ 0.669541, 0.645444, -0.06269, -0.602933, -0.045098, 0.64658, -0.537356, 0.310906 ],
			"intercepts" : [ 0.289402, 0.387703, 0.653999, -0.38704, 0.271135, 0.467627, 0.490174, -0.031782 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.610619, 0.298108, -0.021101, -0.097592, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.269248, 0.560411, -0.001707, -0.100262, -0.125109, -0.586402 ],
			"coeffs_2" : [ 0.187114, -0.230448, -0.281417, -0.105057, 0.298379, -0.462554 ],
			"coeffs_3" : [ -0.244826, 0.346398, 0.402403, 0.590205, 0.504059, 0.371699 ],
			"coeffs_4" : [ -0.306466, 0.033743, 0.160181, 0.470525, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.346718, 0.424452, 0.079716, -0.191755, -0.150564, -0.324393 ],
			"coeffs_6" : [ 0.334131, 0.336584, -0.478353, 0.238932, -0.417195, -0.001729 ],
			"coeffs_7" : [ 0.094493, -0.293021, 0.269269, -0.597796, -0.588556, 0.48808 ],
			"intercepts" : [ 0.563102, -0.463521, -0.274816, -0.461311, -0.473061, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.226933, -0.207617, -0.475935, -0.529458 ],
			"coeffs_1" : [ -0.657367, 0.11986, -0.478292, -0.583744 ],
			"coeffs_2" : [ 0.178648, 0.241014, -0.093599, 0.236689 ],
			"coeffs_3" : [ 0.113948, -0.537956, -0.153129, 0.628534 ],
			"coeffs_4" : [ 0.806565, -0.158581, -0.638478, -0.408787 ],
			"coeffs_5" : [ 0.322902, -0.641381, 0.267267, -0.410608 ],
			"intercepts" : [ 0.7425, 0.71381, -0.323141, 0.432246 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 4 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('FourClass_10_small', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.2813 0.4292 0.0977 0.1919]
 [0.1932 0.5638 0.0858 0.1572]
 [0.3486 0.3609 0.0964 0.1941]
 [0.1836 0.5831 0.0824 0.1509]
 [0.1586 0.6643 0.0611 0.116 ]
 [0.2581 0.5079 0.0823 0.1517]
 [0.2289 0.512  0.09   0.169 ]
 [0.2613 0.4387 0.101  0.1991]
 [0.303  0.4204 0.0937 0.1829]
 [0.1754 0.6362 0.0649 0.1234]
 [0.153  0.6671 0.0617 0.1181]
 [0.1992 0.552  0.0874 0.1613]
 [0.2583 0.4521 0.0982 0.1915]
 [0.1343 0.6849 0.0644 0.1163]
 [0.3266 0.366  0.1014 0.206 ]
 [0.128  0.7021 0.0562 0.1138]
 [0.149  0.6524 0.0726 0.126 ]
 [0.2147 0.5221 0.0914 0.1717]
 [0.3509 0.4563 0.0653 0.1275]
 [0.2691 0.4814 0.0866 0.1628]
 [0.3146 0.474  0.0726 0.1388]
 [0.1872 0.6106 0.0706 0.1316]
 [0.2625 0.5131 0.0794 0.145 ]
 [0.2001 0.5553 0.0844 0.1602]
 [0.1612 0.6317 0.0727 0.1343]
 [0.2606 0.4463 0.0991 0.194 ]
 [0.3213 0.4456 0.0811 0.152 ]
 [0.2834 0.4103 0.1022 0.2041]
 [0.1702 0.61   0.0782 0.1415]
 [0.1769 0.596  0.0812 0.1459]
 [0.1843 0.6966 0.0392 0.0799]
 [0.2795 0.4145 0.1022 0.2038]
 [0.1993 0.5532 0.0854 0.1621]
 [0.1672 0.6182 0.0738 0.1407]
 [0.1043 0.7717 0.0398 0.0842]
 [0.3015 0.3947 0.1011 0.2027]
 [0.1477 0.655  0.0722 0.1251]
 [0.3201 0.4234 0.0878 0.1687]
 [0.1944 0.5634 0.0832 0.159 ]
 [0.2545 0.4629 0.0963 0.1864]
 [0.2659 0.4489 0.0968 0.1884]
 [0.2265 0.4998 0.0942 0.1795]
 [0.1528 0.6484 0.068  0.1308]
 [0.1742 0.6041 0.0761 0.1456]
 [0.1873 0.577  0.0831 0.1525]
 [0.1885 0.5982 0.0737 0.1396]
 [0.2558 0.5001 0.0853 0.1588]
 [0.2027 0.5744 0.0796 0.1433]
 [0.1782 0.5946 0.0798 0.1475]
 [0.2016 0.5482 0.0867 0.1634]
 [0.215  0.5215 0.0915 0.172 ]
 [0.1393 0.6725 0.0694 0.1189]
 [0.206  0.5389 0.0892 0.1659]
 [0.1528 0.6493 0.0665 0.1314]
 [0.3251 0.369  0.1011 0.2048]
 [0.3482 0.3671 0.0949 0.1899]
 [0.3288 0.3933 0.0935 0.1844]
 [0.1573 0.6632 0.0615 0.1179]
 [0.2657 0.4665 0.0919 0.1759]
 [0.1795 0.593  0.0787 0.1489]
 [0.3443 0.3741 0.0941 0.1875]
 [0.1853 0.603  0.0764 0.1353]
 [0.2883 0.4097 0.1009 0.2011]
 [0.3586 0.3572 0.0945 0.1897]]
(64, 4)
(64, 4) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_small', 'size': 64, 'accuracy': 0.28125, 'auc': 0.47233476892063286}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_small', 'training_time_in_sec': 0.013, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -0.004480, 0.003497, 0.000231, 0.000752 ],
      "X_1" : [ -0.003814, 0.002637, 0.000254, 0.000924 ],
      "X_2" : [ 0.000531, -0.002330, 0.000785, 0.001014 ],
      "X_3" : [ 0.002913, -0.004913, 0.000790, 0.001211 ],
      "X_4" : [ -0.004472, 0.008201, -0.001066, -0.002663 ],
      "X_5" : [ 0.000157, -0.000517, 0.000128, 0.000232 ],
      "X_6" : [ 0.001445, -0.004349, 0.001282, 0.001623 ],
      "X_7" : [ -0.001004, -0.001548, 0.000736, 0.001816 ],
      "X_8" : [ 0.006426, -0.010237, 0.001139, 0.002672 ],
      "X_9" : [ 0.000679, 0.000106, -0.000254, -0.000531 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 8, 0, 4, 1, 3, 6, 7, 9, 2, 5 ],
      "class_1" : [ 8, 4, 3, 6, 0, 1, 2, 7, 5, 9 ],
      "class_2" : [ 6, 8, 4, 3, 2, 7, 9, 1, 0, 5 ],
      "class_3" : [ 8, 4, 7, 6, 3, 2, 1, 0, 9, 5 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_small_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_small', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "FourClass_10_small" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498861 + -0.086798 * t."OUT_0"  + 0.148685 * t."OUT_1"  + 0.529834 * t."OUT_2"  + 0.624398 * t."OUT_3"  + 0.311032 * t."OUT_4"  + 0.253595 * t."OUT_5"  + -0.159270 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_small', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_small', 'MLPClassifier', 'duckdb')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_small', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.050659  0.920640 -0.455125  ...  1.021308 -0.010797 -1.586949
1      1.869880 -2.312190 -1.153852  ... -1.335399 -1.648043  2.109906
2     -0.124049  0.768644 -1.040184  ...  0.342352  1.247335 -1.413962
3      0.928858 -1.177375  0.542731  ... -0.053731  0.485529  1.106564
4     -1.598324  1.482463  1.664691  ... -1.347481  1.816532  0.637000
...         ...       ...       ...  ...       ...       ...       ...
59     1.914430 -1.187978 -1.908593  ...  0.100255  1.147780 -0.640430
60    -2.300030  2.981089  1.310992  ...  0.945393  0.000418  0.598406
61    -0.438059 -0.593217  0.535711  ...  1.507209 -0.652815 -1.264657
62     0.855164 -0.934582 -1.885349  ... -0.362082 -2.566222  0.077759
63     0.141928 -0.408314  0.402207  ... -0.685914  0.317499 -0.049391

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 15 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Score_2        64 non-null     float64
 8   Proba_2        64 non-null     float64
 9   LogProba_2     64 non-null     float64
 10  Score_3        64 non-null     float64
 11  Proba_3        64 non-null     float64
 12  LogProba_3     64 non-null     float64
 13  Decision       64 non-null     int64  
 14  DecisionProba  64 non-null     float64
dtypes: float64(13), int64(2)
memory usage: 7.6 KB
    index   Score_0   Proba_0  ...  LogProba_3  Decision  DecisionProba
0       0  0.281218  0.281277  ...   -1.651028         1       0.429179
1       1 -0.187467  0.193221  ...   -1.850021         1       0.563787
2       2  0.493982  0.348607  ...   -1.639626         1       0.360946
3       3 -0.251580  0.183649  ...   -1.891172         1       0.583097
4       4 -0.527472  0.158638  ...   -2.154515         1       0.664305
..    ...       ...       ...  ...         ...       ...            ...
59     59 -0.259559  0.179450  ...   -1.904686         1       0.593019
60     60  0.434788  0.344332  ...   -1.674226         1       0.374069
61     61 -0.361982  0.185294  ...   -2.000337         1       0.603024
62     62  0.361310  0.288316  ...   -1.604197         1       0.409729
63     63  0.494061  0.358575  ...   -1.662174         0       0.358575

[64 rows x 15 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_2  Py_Proba_3  Py_Decision
48     48 -0.282960     0.178189  ...    0.079771    0.147453            1
49     49 -0.115446     0.201639  ...    0.086724    0.163439            1
50     50 -0.031053     0.215048  ...    0.091464    0.171957            1
51     51 -0.613572     0.139257  ...    0.069414    0.118860            1
52     52 -0.095029     0.206019  ...    0.089165    0.165922            1
53     53 -0.419339     0.152803  ...    0.066472    0.131376            1
54     54  0.495958     0.325108  ...    0.101059    0.204831            1
55     55  0.463259     0.348169  ...    0.094897    0.189861            1
56     56  0.367432     0.328756  ...    0.093505    0.184390            1
57     57 -0.512276     0.157332  ...    0.061522    0.117918            1
58     58  0.132620     0.265746  ...    0.091933    0.175860            1
59     59 -0.259559     0.179450  ...    0.078662    0.148870            1
60     60  0.434788     0.344332  ...    0.094146    0.187453            1
61     61 -0.361982     0.185294  ...    0.076393    0.135290            1
62     62  0.361310     0.288316  ...    0.100904    0.201051            1
63     63  0.494061     0.358575  ...    0.094494    0.189726            0

[16 rows x 20 columns]
MLLITE_CLASS_SQL_ERROR ('FourClass_10_small', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 1.3311759532066807e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
48    0.178189     0.178189  2.178759e-07
49    0.201639     0.201639  7.092676e-08
50    0.215048     0.215048  3.313576e-08
51    0.139257     0.139257  3.023960e-07
52    0.206020     0.206019  3.086095e-07
53    0.152803     0.152803  7.853099e-08
54    0.325108     0.325108  1.928412e-08
55    0.348169     0.348169 -6.919929e-08
56    0.328756     0.328756  3.350981e-09
57    0.157332     0.157332  6.273372e-08
58    0.265746     0.265746  1.628162e-08
59    0.179451     0.179450  1.878206e-07
60    0.344331     0.344332 -9.767310e-08
61    0.185294     0.185294  2.212424e-07
62    0.288316     0.288316  1.268556e-07
63    0.358575     0.358575 -2.146787e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_10_small', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 3.041688346775914e-07
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
48    0.594586     0.594587 -5.443833e-07
49    0.548198     0.548199 -2.252542e-07
50    0.521531     0.521531 -2.254056e-07
51    0.672469     0.672470 -7.456152e-07
52    0.538893     0.538894 -7.820700e-07
53    0.649348     0.649349 -2.777676e-07
54    0.369002     0.369002 -6.969140e-08
55    0.367072     0.367072  6.719512e-08
56    0.393349     0.393349 -3.049890e-08
57    0.663228     0.663228 -2.888470e-07
58    0.466460     0.466460 -1.554172e-07
59    0.593018     0.593019 -4.708269e-07
60    0.374069     0.374069  5.520192e-10
61    0.603023     0.603024 -4.361373e-07
62    0.409729     0.409729 -2.158349e-07
63    0.357205     0.357205  9.980110e-08
MLLITE_CLASS_SQL_ERROR ('FourClass_10_small', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 5.1259668896997367e-08
    Py_Proba_2  SQL_Proba_2   SQL_Error_2
48    0.079771     0.079771  1.023810e-07
49    0.086724     0.086724  1.275766e-08
50    0.091464     0.091464 -2.412443e-08
51    0.069414     0.069414  8.041407e-08
52    0.089165     0.089165  4.600555e-08
53    0.066472     0.066472  4.875154e-08
54    0.101059     0.101059 -5.026737e-08
55    0.094897     0.094897 -7.344798e-08
56    0.093505     0.093505 -9.700531e-08
57    0.061522     0.061522  4.981457e-08
58    0.091933     0.091933 -6.526856e-08
59    0.078662     0.078662  6.408041e-08
60    0.094146     0.094146 -7.789427e-08
61    0.076393     0.076393  4.449238e-09
62    0.100904     0.100904 -4.933845e-08
63    0.094494     0.094494 -1.100956e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_10_small', 'MLPClassifier', 'duckdb') ('Py_Proba_3', 'SQL_Proba_3') 1.9986696899853412e-07
    Py_Proba_3  SQL_Proba_3   SQL_Error_3
48    0.147453     0.147453  2.613793e-07
49    0.163439     0.163439  1.639215e-07
50    0.171957     0.171957  1.642403e-07
51    0.118860     0.118859  3.255522e-07
52    0.165922     0.165922  3.603997e-07
53    0.131376     0.131376  1.802874e-07
54    0.204831     0.204831  1.453781e-07
55    0.189861     0.189861  1.499580e-07
56    0.184390     0.184390  7.199917e-08
57    0.117918     0.117918  2.023758e-07
58    0.175860     0.175860  1.298983e-07
59    0.148870     0.148869  2.636293e-07
60    0.187453     0.187453  1.899165e-07
61    0.135290     0.135290  2.402479e-07
62    0.201051     0.201051  1.830213e-07
63    0.189726     0.189726  9.831342e-08
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_small', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
48            1             1
49            1             1
50            1             1
51            1             1
52            1             1
53            1             1
54            1             1
55            1             1
56            1             1
57            1             1
58            1             1
59            1             1
60            1             1
61            1             1
62            1             1
63            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_small', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "FourClass_10_small" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498861 + -0.086798 * t."OUT_0"  + 0.148685 * t."OUT_1"  + 0.529834 * t."OUT_2"  + 0.624398 * t."OUT_3"  + 0.311032 * t."OUT_4"  + 0.253595 * t."OUT_5"  + -0.159270 * t."OUT
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_small', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_small', 'MLPClassifier', 'sqlite')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_small', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
dtypes: float32(10)
memory usage: 3.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.050659  0.920640 -0.455125  ...  1.021308 -0.010797 -1.586949
1      1.869880 -2.312190 -1.153852  ... -1.335399 -1.648043  2.109906
2     -0.124049  0.768644 -1.040184  ...  0.342352  1.247335 -1.413962
3      0.928858 -1.177375  0.542731  ... -0.053731  0.485529  1.106564
4     -1.598324  1.482463  1.664691  ... -1.347481  1.816532  0.637000
...         ...       ...       ...  ...       ...       ...       ...
59     1.914430 -1.187978 -1.908593  ...  0.100255  1.147780 -0.640430
60    -2.300030  2.981089  1.310992  ...  0.945393  0.000418  0.598406
61    -0.438059 -0.593217  0.535711  ...  1.507209 -0.652815 -1.264657
62     0.855164 -0.934582 -1.885349  ... -0.362082 -2.566222  0.077759
63     0.141928 -0.408314  0.402207  ... -0.685914  0.317499 -0.049391

[64 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('FourClass_10_small', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_small', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
