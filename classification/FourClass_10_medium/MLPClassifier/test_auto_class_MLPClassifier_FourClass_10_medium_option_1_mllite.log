READING_CSV FourClass_10_medium ['data/medium/FourClass_10_medium.csv']
          X_0       X_1       X_2  ...       X_8       X_9  target
0   -1.104915  0.852920  0.507679  ... -1.472978 -1.793182       0
1    1.845877 -1.230132  0.868872  ...  0.362403 -0.619445       3
2   -2.837179  1.477195  0.565303  ...  1.102744  1.483759       1
3   -0.817915  0.349464 -0.778337  ... -0.344547 -0.450057       3
4    2.867865 -1.912016  0.005109  ... -0.616466 -0.572385       0
..        ...       ...       ...  ...       ...       ...     ...
507  2.438772 -1.661028 -1.497360  ...  0.591629 -0.673836       2
508  2.240772 -0.702349  0.668354  ...  1.042002 -1.470823       1
509 -1.085291  0.783440 -0.493113  ...  1.430318 -0.063795       1
510  0.377241 -1.091754  0.032081  ...  1.357257 -0.465549       0
511 -0.376689  1.158867 -0.352004  ...  1.521553  1.011941       1

[512 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[-1.10491490e+00  8.52919877e-01  5.07678568e-01 -3.81407499e-01
  -6.32111073e-01  6.43055558e-01  1.64998901e+00  4.79870588e-01
  -1.47297835e+00 -1.79318225e+00]
 [ 1.84587657e+00 -1.23013234e+00  8.68871808e-01 -1.36471283e+00
   1.38019109e+00 -6.07883871e-01 -4.83270741e+00 -3.81645823e+00
   3.62403333e-01 -6.19445145e-01]
 [-2.83717918e+00  1.47719467e+00  5.65303147e-01  1.38211691e+00
   1.26869273e+00 -1.04379274e-01  2.91604996e-01 -1.22561082e-02
   1.10274434e+00  1.48375893e+00]
 [-8.17914605e-01  3.49463820e-01 -7.78337240e-01  3.11694108e-02
   1.09836125e+00 -2.34135496e-03 -4.48572785e-01 -1.05435896e+00
  -3.44547480e-01 -4.50056911e-01]
 [ 2.86786485e+00 -1.91201603e+00  5.10907173e-03 -8.97717237e-01
  -4.13689524e-01  1.13818514e+00 -1.69676435e+00 -1.53572273e+00
  -6.16465807e-01 -5.72385132e-01]] [0 3 1 3 0]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.083, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 512, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.064709, 0.360682, -0.209070, -0.126394 ],
			"coeffs_1" : [ 0.134049, -0.372973, 0.127885, 0.102566 ],
			"coeffs_2" : [ 0.513172, 0.120505, 0.557753, -0.149076 ],
			"coeffs_3" : [ 0.666337, -0.552560, -0.208348, 0.161815 ],
			"coeffs_4" : [ 0.286451, -0.243884, -0.263109, -0.432253 ],
			"coeffs_5" : [ 0.210532, -0.572668, -0.076051, 0.088475 ],
			"coeffs_6" : [ -0.205883, -0.528894, -0.271858, 0.462502 ],
			"coeffs_7" : [ -0.024238, 0.080915, -0.521421, 0.125843 ],
			"coeffs_8" : [ -0.128044, 0.235581, -0.054343, 0.353448 ],
			"coeffs_9" : [ -0.391444, 0.505050, -0.436384, 0.293297 ],
			"intercepts" : [ -0.510981, 0.298018, 0.090537, 0.535007 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.518513, -0.615434, 0.320917, 0.259116, 0.559508, 0.536624, 0.473100, -0.384688 ],
			"coeffs_1" : [ 0.366809, 0.511199, -0.347069, 0.267410, 0.156954, -0.013843, 0.068980, 0.460337 ],
			"coeffs_2" : [ -0.673997, 0.019600, 0.365550, 0.357175, -0.622802, 0.418840, -0.456327, -0.579717 ],
			"coeffs_3" : [ 0.636906, 0.613458, -0.020854, -0.620610, -0.043641, 0.614851, -0.557212, 0.352251 ],
			"intercepts" : [ 0.262955, 0.352409, 0.702527, -0.408216, 0.331107, 0.429210, 0.464426, 0.007813 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.640157, 0.273856, -0.036544, -0.083465, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.307089, 0.526321, -0.024395, -0.054880, -0.190053, -0.586402 ],
			"coeffs_2" : [ 0.136797, -0.278343, -0.309233, -0.024478, 0.339923, -0.462554 ],
			"coeffs_3" : [ -0.282031, 0.307514, 0.377877, 0.635181, 0.498530, 0.371699 ],
			"coeffs_4" : [ -0.327500, 0.011416, 0.143522, 0.526699, 0.313347, -0.001604 ],
			"coeffs_5" : [ 0.308139, 0.387117, 0.058780, -0.143966, -0.127937, -0.324393 ],
			"coeffs_6" : [ 0.287576, 0.316411, -0.487478, 0.289475, -0.387432, -0.001729 ],
			"coeffs_7" : [ 0.059113, -0.315720, 0.245381, -0.572776, -0.588556, 0.488080 ],
			"intercepts" : [ 0.519024, -0.502579, -0.298103, -0.405528, -0.452342, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.210469, -0.252737, -0.428348, -0.480036 ],
			"coeffs_1" : [ -0.644585, 0.087435, -0.435039, -0.553085 ],
			"coeffs_2" : [ 0.199652, 0.216717, -0.072958, 0.263197 ],
			"coeffs_3" : [ 0.142867, -0.608230, -0.179545, 0.730269 ],
			"coeffs_4" : [ 0.870596, -0.228568, -0.545261, -0.330702 ],
			"coeffs_5" : [ 0.322902, -0.641381, 0.267267, -0.410608 ],
			"intercepts" : [ 0.739574, 0.666837, -0.263977, 0.477599 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_medium_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('FourClass_10_medium', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 512, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.064709, 0.360682, -0.209070, -0.126394 ],
			"coeffs_1" : [ 0.134049, -0.372973, 0.127885, 0.102566 ],
			"coeffs_2" : [ 0.513172, 0.120505, 0.557753, -0.149076 ],
			"coeffs_3" : [ 0.666337, -0.552560, -0.208348, 0.161815 ],
			"coeffs_4" : [ 0.286451, -0.243884, -0.263109, -0.432253 ],
			"coeffs_5" : [ 0.210532, -0.572668, -0.076051, 0.088475 ],
			"coeffs_6" : [ -0.205883, -0.528894, -0.271858, 0.462502 ],
			"coeffs_7" : [ -0.024238, 0.080915, -0.521421, 0.125843 ],
			"coeffs_8" : [ -0.128044, 0.235581, -0.054343, 0.353448 ],
			"coeffs_9" : [ -0.391444, 0.505050, -0.436384, 0.293297 ],
			"intercepts" : [ -0.510981, 0.298018, 0.090537, 0.535007 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.518513, -0.615434, 0.320917, 0.259116, 0.559508, 0.536624, 0.473100, -0.384688 ],
			"coeffs_1" : [ 0.366809, 0.511199, -0.347069, 0.267410, 0.156954, -0.013843, 0.068980, 0.460337 ],
			"coeffs_2" : [ -0.673997, 0.019600, 0.365550, 0.357175, -0.622802, 0.418840, -0.456327, -0.579717 ],
			"coeffs_3" : [ 0.636906, 0.613458, -0.020854, -0.620610, -0.043641, 0.614851, -0.557212, 0.352251 ],
			"intercepts" : [ 0.262955, 0.352409, 0.702527, -0.408216, 0.331107, 0.429210, 0.464426, 0.007813 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.640157, 0.273856, -0.036544, -0.083465, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.307089, 0.526321, -0.024395, -0.054880, -0.190053, -0.586402 ],
			"coeffs_2" : [ 0.136797, -0.278343, -0.309233, -0.024478, 0.339923, -0.462554 ],
			"coeffs_3" : [ -0.282031, 0.307514, 0.377877, 0.635181, 0.498530, 0.371699 ],
			"coeffs_4" : [ -0.327500, 0.011416, 0.143522, 0.526699, 0.313347, -0.001604 ],
			"coeffs_5" : [ 0.308139, 0.387117, 0.058780, -0.143966, -0.127937, -0.324393 ],
			"coeffs_6" : [ 0.287576, 0.316411, -0.487478, 0.289475, -0.387432, -0.001729 ],
			"coeffs_7" : [ 0.059113, -0.315720, 0.245381, -0.572776, -0.588556, 0.488080 ],
			"intercepts" : [ 0.519024, -0.502579, -0.298103, -0.405528, -0.452342, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.210469, -0.252737, -0.428348, -0.480036 ],
			"coeffs_1" : [ -0.644585, 0.087435, -0.435039, -0.553085 ],
			"coeffs_2" : [ 0.199652, 0.216717, -0.072958, 0.263197 ],
			"coeffs_3" : [ 0.142867, -0.608230, -0.179545, 0.730269 ],
			"coeffs_4" : [ 0.870596, -0.228568, -0.545261, -0.330702 ],
			"coeffs_5" : [ 0.322902, -0.641381, 0.267267, -0.410608 ],
			"intercepts" : [ 0.739574, 0.666837, -0.263977, 0.477599 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2, 3 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 512
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.064709, 0.360682, -0.20907, -0.126394 ],
			"coeffs_1" : [ 0.134049, -0.372973, 0.127885, 0.102566 ],
			"coeffs_2" : [ 0.513172, 0.120505, 0.557753, -0.149076 ],
			"coeffs_3" : [ 0.666337, -0.55256, -0.208348, 0.161815 ],
			"coeffs_4" : [ 0.286451, -0.243884, -0.263109, -0.432253 ],
			"coeffs_5" : [ 0.210532, -0.572668, -0.076051, 0.088475 ],
			"coeffs_6" : [ -0.205883, -0.528894, -0.271858, 0.462502 ],
			"coeffs_7" : [ -0.024238, 0.080915, -0.521421, 0.125843 ],
			"coeffs_8" : [ -0.128044, 0.235581, -0.054343, 0.353448 ],
			"coeffs_9" : [ -0.391444, 0.50505, -0.436384, 0.293297 ],
			"intercepts" : [ -0.510981, 0.298018, 0.090537, 0.535007 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.518513, -0.615434, 0.320917, 0.259116, 0.559508, 0.536624, 0.4731, -0.384688 ],
			"coeffs_1" : [ 0.366809, 0.511199, -0.347069, 0.26741, 0.156954, -0.013843, 0.06898, 0.460337 ],
			"coeffs_2" : [ -0.673997, 0.0196, 0.36555, 0.357175, -0.622802, 0.41884, -0.456327, -0.579717 ],
			"coeffs_3" : [ 0.636906, 0.613458, -0.020854, -0.62061, -0.043641, 0.614851, -0.557212, 0.352251 ],
			"intercepts" : [ 0.262955, 0.352409, 0.702527, -0.408216, 0.331107, 0.42921, 0.464426, 0.007813 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.640157, 0.273856, -0.036544, -0.083465, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.307089, 0.526321, -0.024395, -0.05488, -0.190053, -0.586402 ],
			"coeffs_2" : [ 0.136797, -0.278343, -0.309233, -0.024478, 0.339923, -0.462554 ],
			"coeffs_3" : [ -0.282031, 0.307514, 0.377877, 0.635181, 0.49853, 0.371699 ],
			"coeffs_4" : [ -0.3275, 0.011416, 0.143522, 0.526699, 0.313347, -0.001604 ],
			"coeffs_5" : [ 0.308139, 0.387117, 0.05878, -0.143966, -0.127937, -0.324393 ],
			"coeffs_6" : [ 0.287576, 0.316411, -0.487478, 0.289475, -0.387432, -0.001729 ],
			"coeffs_7" : [ 0.059113, -0.31572, 0.245381, -0.572776, -0.588556, 0.48808 ],
			"intercepts" : [ 0.519024, -0.502579, -0.298103, -0.405528, -0.452342, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.210469, -0.252737, -0.428348, -0.480036 ],
			"coeffs_1" : [ -0.644585, 0.087435, -0.435039, -0.553085 ],
			"coeffs_2" : [ 0.199652, 0.216717, -0.072958, 0.263197 ],
			"coeffs_3" : [ 0.142867, -0.60823, -0.179545, 0.730269 ],
			"coeffs_4" : [ 0.870596, -0.228568, -0.545261, -0.330702 ],
			"coeffs_5" : [ 0.322902, -0.641381, 0.267267, -0.410608 ],
			"intercepts" : [ 0.739574, 0.666837, -0.263977, 0.477599 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 4 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('FourClass_10_medium', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
[[0.3462 0.3355 0.1068 0.2115]
 [0.1909 0.5126 0.0753 0.2212]
 [0.2768 0.3928 0.1121 0.2184]
 ...
 [0.2682 0.4003 0.1126 0.219 ]
 [0.3568 0.2979 0.1072 0.2381]
 [0.2143 0.5006 0.0985 0.1866]]
(512, 4)
(512, 4) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_medium', 'size': 512, 'accuracy': 0.34765625, 'auc': 0.5879365236217142}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_medium_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_medium', 'training_time_in_sec': 0.083, 'prediction_time_in_sec': 0.001}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ -0.000812, 0.001230, -0.000245, -0.000173 ],
      "X_1" : [ 0.000087, -0.000407, 0.000025, 0.000295 ],
      "X_2" : [ 0.002360, -0.001716, -0.000377, -0.000266 ],
      "X_3" : [ -0.000346, 0.000385, 0.000690, -0.000729 ],
      "X_4" : [ 0.004370, -0.007572, 0.000692, 0.002510 ],
      "X_5" : [ -0.002714, 0.002946, 0.000111, -0.000343 ],
      "X_6" : [ -0.005624, 0.007316, 0.000157, -0.001849 ],
      "X_7" : [ 0.000286, 0.001860, -0.000764, -0.001381 ],
      "X_8" : [ 0.001488, -0.002488, 0.000316, 0.000685 ],
      "X_9" : [ -0.007118, 0.007406, 0.000209, -0.000497 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 9, 6, 4, 5, 2, 8, 0, 3, 7, 1 ],
      "class_1" : [ 4, 9, 6, 5, 8, 7, 2, 0, 1, 3 ],
      "class_2" : [ 7, 4, 3, 2, 8, 0, 9, 6, 5, 1 ],
      "class_3" : [ 4, 6, 7, 3, 8, 9, 5, 1, 2, 0 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_medium_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_medium_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_medium', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "FourClass_10_medium" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.510981 + -0.064709 * t."OUT_0"  + 0.134049 * t."OUT_1"  + 0.513172 * t."OUT_2"  + 0.666337 * t."OUT_3"  + 0.286451 * t."OUT_4"  + 0.210532 * t."OUT_5"  + -0.205883 * t."OU
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_medium', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_medium', 'MLPClassifier', 'duckdb')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_medium', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 512 entries, 0 to 511
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     512 non-null    float32
 1   X_1     512 non-null    float32
 2   X_2     512 non-null    float32
 3   X_3     512 non-null    float32
 4   X_4     512 non-null    float32
 5   X_5     512 non-null    float32
 6   X_6     512 non-null    float32
 7   X_7     512 non-null    float32
 8   X_8     512 non-null    float32
 9   X_9     512 non-null    float32
dtypes: float32(10)
memory usage: 24.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.104915  0.852920  0.507679  ...  0.479871 -1.472978 -1.793182
1      1.845877 -1.230132  0.868872  ... -3.816458  0.362403 -0.619445
2     -2.837179  1.477195  0.565303  ... -0.012256  1.102744  1.483759
3     -0.817915  0.349464 -0.778337  ... -1.054359 -0.344547 -0.450057
4      2.867865 -1.912016  0.005109  ... -1.535723 -0.616466 -0.572385
...         ...       ...       ...  ...       ...       ...       ...
507    2.438772 -1.661028 -1.497360  ... -0.360560  0.591629 -0.673836
508    2.240772 -0.702349  0.668354  ...  1.595941  1.042002 -1.470823
509   -1.085291  0.783440 -0.493113  ...  1.308570  1.430318 -0.063795
510    0.377241 -1.091754  0.032081  ... -0.311330  1.357257 -0.465549
511   -0.376689  1.158867 -0.352004  ...  1.244896  1.521553  1.011941

[512 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 512 entries, 0 to 511
Data columns (total 15 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          512 non-null    int64  
 1   Score_0        512 non-null    float64
 2   Proba_0        512 non-null    float64
 3   LogProba_0     512 non-null    float64
 4   Score_1        512 non-null    float64
 5   Proba_1        512 non-null    float64
 6   LogProba_1     512 non-null    float64
 7   Score_2        512 non-null    float64
 8   Proba_2        512 non-null    float64
 9   LogProba_2     512 non-null    float64
 10  Score_3        512 non-null    float64
 11  Proba_3        512 non-null    float64
 12  LogProba_3     512 non-null    float64
 13  Decision       512 non-null    int64  
 14  DecisionProba  512 non-null    float64
dtypes: float64(13), int64(2)
memory usage: 60.1 KB
     index   Score_0   Proba_0  ...  LogProba_3  Decision  DecisionProba
0        0  0.481739  0.346167  ...   -1.553726         0       0.346167
1        1 -0.373094  0.190907  ...   -1.508643         1       0.512607
2        2  0.341134  0.276784  ...   -1.521559         1       0.392791
3        3  0.575779  0.352975  ...   -1.513120         0       0.352975
4        4  0.251328  0.258180  ...   -1.546767         1       0.417963
..     ...       ...       ...  ...         ...       ...            ...
507    507  0.234921  0.255889  ...   -1.553349         1       0.422046
508    508  0.403356  0.279467  ...   -1.489120         1       0.380684
509    509  0.322844  0.268184  ...   -1.518902         1       0.400292
510    510  0.590333  0.356806  ...   -1.435017         0       0.356806
511    511 -0.042426  0.214316  ...   -1.678829         1       0.500598

[512 rows x 15 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Decision', 'DecisionProba'],
      dtype='object')
     index   Score_0  SQL_Proba_0  ...  Py_Proba_2  Py_Proba_3  Py_Decision
496    496 -0.098661     0.242209  ...    0.083262    0.203576            1
497    497 -0.655556     0.141861  ...    0.081846    0.133075            1
498    498  0.635095     0.343326  ...    0.112953    0.231109            0
499    499  0.350988     0.292034  ...    0.110139    0.214362            1
500    500  0.527395     0.426481  ...    0.070701    0.167466            0
501    501  0.065801     0.250420  ...    0.103615    0.191400            1
502    502  0.491549     0.367476  ...    0.103651    0.204730            0
503    503  0.550393     0.357079  ...    0.107615    0.215655            0
504    504  0.161436     0.245664  ...    0.108675    0.205215            1
505    505  0.560919     0.355379  ...    0.108277    0.217542            0
506    506  0.551065     0.356971  ...    0.107658    0.215775            0
507    507  0.234921     0.255889  ...    0.110526    0.211538            1
508    508  0.403356     0.279467  ...    0.114278    0.225571            1
509    509  0.322844     0.268184  ...    0.112572    0.218952            1
510    510  0.590333     0.356806  ...    0.107176    0.238111            0
511    511 -0.042426     0.214316  ...    0.098494    0.186592            1

[16 rows x 20 columns]
MLLITE_CLASS_SQL_ERROR ('FourClass_10_medium', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 1.2806804730109344e-07
     Py_Proba_0  SQL_Proba_0   SQL_Error_0
496    0.242210     0.242209  4.703423e-07
497    0.141861     0.141861  2.058999e-07
498    0.343326     0.343326 -1.822249e-07
499    0.292034     0.292034 -5.834475e-09
500    0.426481     0.426481  5.020363e-07
501    0.250420     0.250420  9.783219e-08
502    0.367477     0.367476  6.624372e-08
503    0.357079     0.357079 -1.776681e-07
504    0.245664     0.245664  4.695950e-08
505    0.355379     0.355379 -1.598314e-07
506    0.356970     0.356971 -1.729855e-07
507    0.255889     0.255889  1.087546e-07
508    0.279467     0.279467  6.951916e-09
509    0.268184     0.268184  1.047633e-07
510    0.356806     0.356806 -2.309160e-07
511    0.214316     0.214316  1.857723e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_10_medium', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 1.542290018338114e-07
     Py_Proba_1  SQL_Proba_1   SQL_Error_1
496    0.470952     0.470953 -2.048849e-07
497    0.643218     0.643218 -1.183280e-07
498    0.312612     0.312612  1.570081e-07
499    0.383465     0.383465  6.699303e-08
500    0.335352     0.335352 -9.539080e-08
501    0.454565     0.454565  3.812111e-08
502    0.324143     0.324143  1.009573e-07
503    0.319650     0.319650  2.058410e-07
504    0.440446     0.440446  1.138270e-07
505    0.318802     0.318802  2.226960e-07
506    0.319597     0.319596  2.631948e-07
507    0.422046     0.422046 -1.518215e-09
508    0.380684     0.380684  9.893099e-08
509    0.400292     0.400292  3.273714e-09
510    0.297907     0.297907  1.191390e-07
511    0.500597     0.500598 -9.043510e-08
MLLITE_CLASS_SQL_ERROR ('FourClass_10_medium', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 4.4980907305876175e-08
     Py_Proba_2  SQL_Proba_2   SQL_Error_2
496    0.083262     0.083262 -7.753940e-08
497    0.081846     0.081846 -4.965741e-08
498    0.112953     0.112953 -2.668344e-08
499    0.110139     0.110140 -7.669584e-08
500    0.070701     0.070701 -1.272238e-07
501    0.103615     0.103615 -7.986970e-08
502    0.103651     0.103651 -7.633034e-08
503    0.107615     0.107615 -2.106678e-08
504    0.108675     0.108675 -6.178552e-08
505    0.108277     0.108277 -9.283644e-09
506    0.107658     0.107658  1.776648e-09
507    0.110526     0.110526 -5.066873e-08
508    0.114278     0.114278 -5.246203e-08
509    0.112572     0.112572 -3.585373e-08
510    0.107176     0.107176 -4.708312e-08
511    0.098494     0.098494 -5.650144e-09
MLLITE_CLASS_SQL_ERROR ('FourClass_10_medium', 'MLPClassifier', 'duckdb') ('Py_Proba_3', 'SQL_Proba_3') 8.726471540713402e-08
     Py_Proba_3  SQL_Proba_3   SQL_Error_3
496    0.203576     0.203576 -3.071273e-07
497    0.133075     0.133075 -1.556281e-08
498    0.231109     0.231109 -9.711142e-08
499    0.214362     0.214362 -1.260237e-07
500    0.167466     0.167467 -2.645205e-07
501    0.191400     0.191400 -1.082377e-07
502    0.204730     0.204730 -1.355741e-07
503    0.215655     0.215655 -5.180958e-08
504    0.205215     0.205215 -7.664923e-08
505    0.217542     0.217542 -4.613042e-08
506    0.215775     0.215775 -1.748009e-08
507    0.211538     0.211538 -4.166645e-08
508    0.225571     0.225571 -6.832204e-08
509    0.218952     0.218952 -3.493041e-08
510    0.238111     0.238111  3.965084e-08
511    0.186592     0.186592 -7.730716e-09
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_medium', 'MLPClassifier', 'duckdb', 'Success')
     Py_Decision  SQL_Decision
496            1             1
497            1             1
498            0             0
499            1             1
500            0             0
501            1             1
502            0             0
503            0             0
504            1             1
505            0             0
506            0             0
507            1             1
508            1             1
509            1             1
510            0             0
511            1             1
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_medium_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_medium', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "FourClass_10_medium" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.510981 + -0.064709 * t."OUT_0"  + 0.134049 * t."OUT_1"  + 0.513172 * t."OUT_2"  + 0.666337 * t."OUT_3"  + 0.286451 * t."OUT_4"  + 0.210532 * t."OUT_5"  + -0.205883 * t."OU
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_medium', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_medium', 'MLPClassifier', 'sqlite')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_medium', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 512 entries, 0 to 511
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     512 non-null    float32
 1   X_1     512 non-null    float32
 2   X_2     512 non-null    float32
 3   X_3     512 non-null    float32
 4   X_4     512 non-null    float32
 5   X_5     512 non-null    float32
 6   X_6     512 non-null    float32
 7   X_7     512 non-null    float32
 8   X_8     512 non-null    float32
 9   X_9     512 non-null    float32
dtypes: float32(10)
memory usage: 24.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.104915  0.852920  0.507679  ...  0.479871 -1.472978 -1.793182
1      1.845877 -1.230132  0.868872  ... -3.816458  0.362403 -0.619445
2     -2.837179  1.477195  0.565303  ... -0.012256  1.102744  1.483759
3     -0.817915  0.349464 -0.778337  ... -1.054359 -0.344547 -0.450057
4      2.867865 -1.912016  0.005109  ... -1.535723 -0.616466 -0.572385
...         ...       ...       ...  ...       ...       ...       ...
507    2.438772 -1.661028 -1.497360  ... -0.360560  0.591629 -0.673836
508    2.240772 -0.702349  0.668354  ...  1.595941  1.042002 -1.470823
509   -1.085291  0.783440 -0.493113  ...  1.308570  1.430318 -0.063795
510    0.377241 -1.091754  0.032081  ... -0.311330  1.357257 -0.465549
511   -0.376689  1.158867 -0.352004  ...  1.244896  1.521553  1.011941

[512 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('FourClass_10_medium', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_medium', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
