     sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                    2                 8  ...                 1       0
1                    1                 4  ...                 1       0
2                    0                 6  ...                 1       0
3                    0                 5  ...                 1       0
4                    1                 8  ...                 1       0
..                 ...               ...  ...               ...     ...
145                  8                 4  ...                 9       2
146                  6                 1  ...                 7       2
147                  7                 4  ...                 8       2
148                  6                 7  ...                 9       2
149                  5                 4  ...                 7       2

[150 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[2. 8. 1. 1.]
 [1. 4. 1. 1.]
 [0. 6. 0. 1.]
 [0. 5. 2. 1.]
 [1. 8. 1. 1.]] [0 0 0 0 0]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.029, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 150, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 3 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.105484, 0.424532, -0.380535, -0.091886 ],
			"coeffs_1" : [ 0.126969, -0.607619, 0.226357, -0.000797 ],
			"coeffs_2" : [ 0.707716, 0.159147, 0.692494, -0.163577 ],
			"coeffs_3" : [ 0.830466, -0.790187, -0.390401, 0.293815 ],
			"intercepts" : [ 0.421131, -0.440162, -0.467933, -0.700583 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.335410, -0.663286, -0.112743, 0.003435, -0.140474, -0.642397, -0.362057, 0.547655 ],
			"coeffs_1" : [ -0.072584, 0.005832, -0.633156, 0.019584, -0.216003, 0.260923, -0.142278, 0.278502 ],
			"coeffs_2" : [ -0.466964, 0.654076, -0.517727, 0.359613, -0.507938, 0.389044, 0.166551, 0.613963 ],
			"coeffs_3" : [ -0.419461, -0.544968, 0.236548, 0.233228, 0.475586, 0.606558, 0.538130, -0.476660 ],
			"intercepts" : [ 0.440458, 0.610894, -0.426981, 0.286000, 0.209398, 0.053026, 0.089744, 0.372490 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.095675, 0.247541, 0.345608, -0.592263, 0.477704 ],
			"coeffs_1" : [ -0.364449, -0.571587, 0.681008, 0.659780, -0.121782, -0.567637 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.576816, -0.315601, 0.265026, 0.433148, 0.447378, -0.045100 ],
			"coeffs_4" : [ -0.581198, 0.327138, 0.007260, -0.124039, -0.480768, -0.619361 ],
			"coeffs_5" : [ -0.239449, 0.590265, 0.027252, -0.133482, -0.151607, -0.586402 ],
			"coeffs_6" : [ 0.218124, -0.199137, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_7" : [ -0.215160, 0.386918, 0.411631, 0.527201, 0.442475, 0.394079 ],
			"intercepts" : [ -0.278179, 0.096773, 0.185769, 0.413076, 0.288821, 0.002380 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 3 ,
			"coeffs_0" : [ 0.469580, 0.566861, 0.134588 ],
			"coeffs_1" : [ -0.309773, -0.191330, -0.382955 ],
			"coeffs_2" : [ 0.401097, 0.485708, -0.544383 ],
			"coeffs_3" : [ 0.236203, -0.488888, 0.017838 ],
			"coeffs_4" : [ 0.127987, -0.299016, 0.388607 ],
			"coeffs_5" : [ -0.800982, -0.702020, 0.630595 ],
			"intercepts" : [ 0.711376, -0.508387, -0.306114 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_quantized_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 150, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 3 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.105484, 0.424532, -0.380535, -0.091886 ],
			"coeffs_1" : [ 0.126969, -0.607619, 0.226357, -0.000797 ],
			"coeffs_2" : [ 0.707716, 0.159147, 0.692494, -0.163577 ],
			"coeffs_3" : [ 0.830466, -0.790187, -0.390401, 0.293815 ],
			"intercepts" : [ 0.421131, -0.440162, -0.467933, -0.700583 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.335410, -0.663286, -0.112743, 0.003435, -0.140474, -0.642397, -0.362057, 0.547655 ],
			"coeffs_1" : [ -0.072584, 0.005832, -0.633156, 0.019584, -0.216003, 0.260923, -0.142278, 0.278502 ],
			"coeffs_2" : [ -0.466964, 0.654076, -0.517727, 0.359613, -0.507938, 0.389044, 0.166551, 0.613963 ],
			"coeffs_3" : [ -0.419461, -0.544968, 0.236548, 0.233228, 0.475586, 0.606558, 0.538130, -0.476660 ],
			"intercepts" : [ 0.440458, 0.610894, -0.426981, 0.286000, 0.209398, 0.053026, 0.089744, 0.372490 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.095675, 0.247541, 0.345608, -0.592263, 0.477704 ],
			"coeffs_1" : [ -0.364449, -0.571587, 0.681008, 0.659780, -0.121782, -0.567637 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.576816, -0.315601, 0.265026, 0.433148, 0.447378, -0.045100 ],
			"coeffs_4" : [ -0.581198, 0.327138, 0.007260, -0.124039, -0.480768, -0.619361 ],
			"coeffs_5" : [ -0.239449, 0.590265, 0.027252, -0.133482, -0.151607, -0.586402 ],
			"coeffs_6" : [ 0.218124, -0.199137, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_7" : [ -0.215160, 0.386918, 0.411631, 0.527201, 0.442475, 0.394079 ],
			"intercepts" : [ -0.278179, 0.096773, 0.185769, 0.413076, 0.288821, 0.002380 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 3 ,
			"coeffs_0" : [ 0.469580, 0.566861, 0.134588 ],
			"coeffs_1" : [ -0.309773, -0.191330, -0.382955 ],
			"coeffs_2" : [ 0.401097, 0.485708, -0.544383 ],
			"coeffs_3" : [ 0.236203, -0.488888, 0.017838 ],
			"coeffs_4" : [ 0.127987, -0.299016, 0.388607 ],
			"coeffs_5" : [ -0.800982, -0.702020, 0.630595 ],
			"intercepts" : [ 0.711376, -0.508387, -0.306114 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 150
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.105484, 0.424532, -0.380535, -0.091886 ],
			"coeffs_1" : [ 0.126969, -0.607619, 0.226357, -0.000797 ],
			"coeffs_2" : [ 0.707716, 0.159147, 0.692494, -0.163577 ],
			"coeffs_3" : [ 0.830466, -0.790187, -0.390401, 0.293815 ],
			"intercepts" : [ 0.421131, -0.440162, -0.467933, -0.700583 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.33541, -0.663286, -0.112743, 0.003435, -0.140474, -0.642397, -0.362057, 0.547655 ],
			"coeffs_1" : [ -0.072584, 0.005832, -0.633156, 0.019584, -0.216003, 0.260923, -0.142278, 0.278502 ],
			"coeffs_2" : [ -0.466964, 0.654076, -0.517727, 0.359613, -0.507938, 0.389044, 0.166551, 0.613963 ],
			"coeffs_3" : [ -0.419461, -0.544968, 0.236548, 0.233228, 0.475586, 0.606558, 0.53813, -0.47666 ],
			"intercepts" : [ 0.440458, 0.610894, -0.426981, 0.286, 0.209398, 0.053026, 0.089744, 0.37249 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.561438, 0.095675, 0.247541, 0.345608, -0.592263, 0.477704 ],
			"coeffs_1" : [ -0.364449, -0.571587, 0.681008, 0.65978, -0.121782, -0.567637 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.576816, -0.315601, 0.265026, 0.433148, 0.447378, -0.0451 ],
			"coeffs_4" : [ -0.581198, 0.327138, 0.00726, -0.124039, -0.480768, -0.619361 ],
			"coeffs_5" : [ -0.239449, 0.590265, 0.027252, -0.133482, -0.151607, -0.586402 ],
			"coeffs_6" : [ 0.218124, -0.199137, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_7" : [ -0.21516, 0.386918, 0.411631, 0.527201, 0.442475, 0.394079 ],
			"intercepts" : [ -0.278179, 0.096773, 0.185769, 0.413076, 0.288821, 0.00238 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 3,
			"coeffs_0" : [ 0.46958, 0.566861, 0.134588 ],
			"coeffs_1" : [ -0.309773, -0.19133, -0.382955 ],
			"coeffs_2" : [ 0.401097, 0.485708, -0.544383 ],
			"coeffs_3" : [ 0.236203, -0.488888, 0.017838 ],
			"coeffs_4" : [ 0.127987, -0.299016, 0.388607 ],
			"coeffs_5" : [ -0.800982, -0.70202, 0.630595 ],
			"intercepts" : [ 0.711376, -0.508387, -0.306114 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 3 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[6.695e-01 3.480e-02 2.957e-01]
 [6.607e-01 4.900e-02 2.903e-01]
 [6.732e-01 5.020e-02 2.765e-01]
 [6.792e-01 2.120e-02 2.996e-01]
 [6.789e-01 2.850e-02 2.926e-01]
 [6.312e-01 2.160e-02 3.472e-01]
 [6.499e-01 2.570e-02 3.245e-01]
 [6.771e-01 1.980e-02 3.031e-01]
 [6.667e-01 4.600e-02 2.873e-01]
 [7.432e-01 2.670e-02 2.302e-01]
 [6.670e-01 2.250e-02 3.105e-01]
 [6.848e-01 1.610e-02 2.991e-01]
 [7.751e-01 4.020e-02 1.847e-01]
 [7.635e-01 6.510e-02 1.715e-01]
 [6.547e-01 6.340e-02 2.819e-01]
 [6.259e-01 2.300e-02 3.511e-01]
 [6.351e-01 5.000e-02 3.149e-01]
 [6.351e-01 3.350e-02 3.314e-01]
 [6.226e-01 2.640e-02 3.510e-01]
 [6.393e-01 1.760e-02 3.431e-01]
 [6.601e-01 2.960e-02 3.103e-01]
 [6.393e-01 1.760e-02 3.431e-01]
 [6.836e-01 3.840e-02 2.780e-01]
 [6.334e-01 2.320e-02 3.434e-01]
 [6.848e-01 1.610e-02 2.991e-01]
 [6.671e-01 2.980e-02 3.031e-01]
 [6.417e-01 1.900e-02 3.394e-01]
 [6.721e-01 2.110e-02 3.068e-01]
 [6.650e-01 3.990e-02 2.951e-01]
 [6.821e-01 1.850e-02 2.994e-01]
 [6.792e-01 2.120e-02 2.996e-01]
 [6.246e-01 2.840e-02 3.470e-01]
 [7.693e-01 1.870e-02 2.120e-01]
 [6.638e-01 3.720e-02 2.990e-01]
 [6.708e-01 2.600e-02 3.032e-01]
 [6.607e-01 6.110e-02 2.782e-01]
 [6.551e-01 6.380e-02 2.811e-01]
 [8.019e-01 2.810e-02 1.701e-01]
 [6.605e-01 6.550e-02 2.740e-01]
 [6.689e-01 2.420e-02 3.069e-01]
 [6.398e-01 4.510e-02 3.151e-01]
 [6.526e-01 6.170e-02 2.857e-01]
 [6.732e-01 5.020e-02 2.765e-01]
 [6.444e-01 1.650e-02 3.391e-01]
 [6.393e-01 1.760e-02 3.431e-01]
 [6.381e-01 3.860e-02 3.233e-01]
 [6.750e-01 1.840e-02 3.066e-01]
 [6.805e-01 3.060e-02 2.889e-01]
 [6.750e-01 1.840e-02 3.066e-01]
 [6.750e-01 3.270e-02 2.923e-01]
 [4.548e-01 1.010e-02 5.351e-01]
 [4.429e-01 9.100e-03 5.480e-01]
 [4.260e-01 7.900e-03 5.662e-01]
 [5.378e-01 2.010e-02 4.421e-01]
 [4.611e-01 1.060e-02 5.283e-01]
 [5.193e-01 1.340e-02 4.673e-01]
 [4.268e-01 5.100e-03 5.681e-01]
 [5.822e-01 2.840e-02 3.893e-01]
 [5.187e-01 1.720e-02 4.641e-01]
 [5.013e-01 1.480e-02 4.838e-01]
 [5.822e-01 2.840e-02 3.893e-01]
 [4.697e-01 1.140e-02 5.189e-01]
 [5.715e-01 2.700e-02 4.015e-01]
 [4.677e-01 7.900e-03 5.243e-01]
 [5.285e-01 1.860e-02 4.529e-01]
 [4.808e-01 1.250e-02 5.067e-01]
 [4.417e-01 8.800e-03 5.495e-01]
 [5.642e-01 2.530e-02 4.105e-01]
 [4.664e-01 1.110e-02 5.226e-01]
 [5.642e-01 2.530e-02 4.105e-01]
 [3.916e-01 4.400e-03 6.040e-01]
 [5.363e-01 1.990e-02 4.438e-01]
 [4.365e-01 8.600e-03 5.548e-01]
 [5.069e-01 9.800e-03 4.833e-01]
 [5.151e-01 1.660e-02 4.683e-01]
 [4.853e-01 1.300e-02 5.017e-01]
 [4.692e-01 1.140e-02 5.194e-01]
 [3.762e-01 5.100e-03 6.187e-01]
 [4.490e-01 9.600e-03 5.414e-01]
 [5.861e-01 3.070e-02 3.832e-01]
 [5.649e-01 2.540e-02 4.097e-01]
 [5.649e-01 2.540e-02 4.097e-01]
 [5.371e-01 2.000e-02 4.429e-01]
 [4.173e-01 5.700e-03 5.770e-01]
 [4.484e-01 7.200e-03 5.444e-01]
 [4.400e-01 7.100e-03 5.529e-01]
 [4.260e-01 7.900e-03 5.662e-01]
 [5.246e-01 1.800e-02 4.574e-01]
 [5.279e-01 1.700e-02 4.551e-01]
 [5.335e-01 1.940e-02 4.471e-01]
 [5.245e-01 1.260e-02 4.629e-01]
 [4.754e-01 1.160e-02 5.130e-01]
 [5.371e-01 2.000e-02 4.429e-01]
 [5.822e-01 2.840e-02 3.893e-01]
 [5.371e-01 2.000e-02 4.429e-01]
 [5.279e-01 1.700e-02 4.551e-01]
 [5.285e-01 1.860e-02 4.529e-01]
 [5.115e-01 1.610e-02 4.724e-01]
 [5.797e-01 2.900e-02 3.913e-01]
 [5.328e-01 1.930e-02 4.479e-01]
 [2.674e-01 8.000e-04 7.318e-01]
 [3.838e-01 4.300e-03 6.119e-01]
 [3.076e-01 2.400e-03 6.899e-01]
 [3.674e-01 2.900e-03 6.297e-01]
 [2.944e-01 2.300e-03 7.033e-01]
 [3.076e-01 2.400e-03 6.899e-01]
 [4.401e-01 7.300e-03 5.525e-01]
 [3.429e-01 3.100e-03 6.540e-01]
 [3.649e-01 4.600e-03 6.305e-01]
 [2.454e-01 1.100e-03 7.535e-01]
 [3.357e-01 3.500e-03 6.608e-01]
 [3.613e-01 4.400e-03 6.343e-01]
 [3.242e-01 3.100e-03 6.726e-01]
 [3.532e-01 4.000e-03 6.428e-01]
 [3.356e-01 3.100e-03 6.613e-01]
 [2.921e-01 1.900e-03 7.060e-01]
 [3.628e-01 3.100e-03 6.342e-01]
 [2.786e-01 1.100e-03 7.203e-01]
 [2.694e-01 1.800e-03 7.289e-01]
 [4.157e-01 6.600e-03 5.777e-01]
 [2.898e-01 2.200e-03 7.080e-01]
 [3.816e-01 4.900e-03 6.135e-01]
 [3.129e-01 2.800e-03 6.843e-01]
 [4.070e-01 6.700e-03 5.863e-01]
 [3.233e-01 2.200e-03 6.744e-01]
 [3.466e-01 2.000e-03 6.514e-01]
 [4.025e-01 6.400e-03 5.911e-01]
 [3.898e-01 5.800e-03 6.044e-01]
 [3.291e-01 3.300e-03 6.676e-01]
 [3.896e-01 5.000e-03 6.054e-01]
 [3.416e-01 3.500e-03 6.548e-01]
 [3.079e-01 1.500e-03 6.906e-01]
 [3.023e-01 2.500e-03 6.952e-01]
 [4.124e-01 6.100e-03 5.815e-01]
 [4.509e-01 3.700e-03 5.454e-01]
 [2.791e-01 2.000e-03 7.189e-01]
 [3.021e-01 1.400e-03 6.966e-01]
 [3.641e-01 2.700e-03 6.333e-01]
 [3.898e-01 5.800e-03 6.044e-01]
 [3.210e-01 2.900e-03 6.761e-01]
 [2.937e-01 2.300e-03 7.040e-01]
 [3.190e-01 2.900e-03 6.781e-01]
 [3.838e-01 4.300e-03 6.119e-01]
 [2.805e-01 1.400e-03 7.181e-01]
 [2.693e-01 1.700e-03 7.291e-01]
 [3.232e-01 3.000e-03 6.738e-01]
 [3.821e-01 5.400e-03 6.125e-01]
 [3.442e-01 3.800e-03 6.520e-01]
 [3.021e-01 1.400e-03 6.966e-01]
 [3.818e-01 3.500e-03 6.147e-01]]
(150, 3)
(150, 3) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'iris_quantized', 'size': 150, 'accuracy': 0.6666666666666666, 'auc': 0.8526000000000001}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_quantized_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'iris_quantized', 'training_time_in_sec': 0.029, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_quantized_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_quantized', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    0.421131 + -0.105484 * t."OUT_0"  + 0.126969 * t."OUT_1"  + 0.707716 * t."OUT_2"  + 0.830466 * t."OUT_3" AS "OUT_0",
    -0.440162 + 0.424532 * t."OUT_0"  + -0.607619 * t."OUT_1"  + 0.159147 * t."OUT_2"  + -0.790187 * t."OUT_3" AS "OUT_1",
    -0.467933 + -0.380535 * t."OUT_0"  + 0.226357 * t."OUT_1"  + 0.692494 * t."OUT_2"  + -0.390401 * t."OUT_3" AS "OUT_2",
    -0.700583 + -0.091886 * t."OUT_0"  + -0.000797 * t."OUT_1"  + -0.163577 * t."OUT_2"  + 0.293815 * t."OUT_3" AS "OUT_3"
 FROM "Input_Layer_BA" AS t
),
"Hidden_Layer_1_Activati
SQL_OUT_PUT_FIRST_LINES_END ('iris_quantized', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('iris_quantized', 'MLPClassifier', 'duckdb')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_quantized', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 150 entries, 0 to 149
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     150 non-null    float32
 1   X_1     150 non-null    float32
 2   X_2     150 non-null    float32
 3   X_3     150 non-null    float32
dtypes: float32(4)
memory usage: 3.5 KB
       X_0  X_1  X_2  X_3
index                    
0      2.0  8.0  1.0  1.0
1      1.0  4.0  1.0  1.0
2      0.0  6.0  0.0  1.0
3      0.0  5.0  2.0  1.0
4      1.0  8.0  1.0  1.0
...    ...  ...  ...  ...
145    8.0  4.0  7.0  9.0
146    6.0  1.0  7.0  7.0
147    7.0  4.0  7.0  8.0
148    6.0  7.0  8.0  9.0
149    5.0  4.0  7.0  7.0

[150 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          150 non-null    int64  
 1   Score_0        150 non-null    float64
 2   Proba_0        150 non-null    float64
 3   LogProba_0     150 non-null    float64
 4   Score_1        150 non-null    float64
 5   Proba_1        150 non-null    float64
 6   LogProba_1     150 non-null    float64
 7   Score_2        150 non-null    float64
 8   Proba_2        150 non-null    float64
 9   LogProba_2     150 non-null    float64
 10  Decision       150 non-null    int64  
 11  DecisionProba  150 non-null    float64
dtypes: float64(10), int64(2)
memory usage: 14.2 KB
     index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0        0  0.623701  0.669494  ...   -1.218545         0       0.669494
1        1  0.562289  0.660673  ...   -1.236688         0       0.660673
2        2  0.647426  0.673234  ...   -1.285402         0       0.673234
3        3  0.722739  0.679193  ...   -1.205407         0       0.679193
4        4  0.696257  0.678947  ...   -1.229096         0       0.678947
..     ...       ...       ...  ...         ...       ...            ...
145    145 -1.033223  0.323154  ...   -0.394808         2       0.673809
146    146 -0.773626  0.382101  ...   -0.490158         2       0.612530
147    147 -0.940089  0.344203  ...   -0.427693         2       0.652012
148    148 -1.024343  0.302059  ...   -0.361601         2       0.696560
149    149 -0.695907  0.381816  ...   -0.486601         2       0.614712

[150 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
     index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
134    134 -0.310517     0.450889  ...    0.003693    0.545421            2
135    135 -1.246394     0.279149  ...    0.001955    0.718899            2
136    136 -1.024343     0.302059  ...    0.001381    0.696563            2
137    137 -0.753124     0.364066  ...    0.002663    0.633275            2
138    138 -0.740312     0.389841  ...    0.005753    0.604408            2
139    139 -1.041411     0.320956  ...    0.002948    0.676098            2
140    140 -1.174855     0.293700  ...    0.002286    0.704017            2
141    141 -1.052546     0.318983  ...    0.002914    0.678105            2
142    142 -0.723827     0.383804  ...    0.004312    0.611887            2
143    143 -1.169248     0.280492  ...    0.001365    0.718146            2
144    144 -1.288262     0.269268  ...    0.001666    0.729068            2
145    145 -1.033223     0.323154  ...    0.003037    0.673812            2
146    146 -0.773626     0.382101  ...    0.005369    0.612532            2
147    147 -0.940089     0.344203  ...    0.003785    0.652014            2
148    148 -1.024343     0.302059  ...    0.001381    0.696563            2
149    149 -0.695907     0.381816  ...    0.003472    0.614715            2

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_quantized', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 1.8528520269176877e-06
     Py_Proba_0  SQL_Proba_0  SQL_Error_0
134    0.450886     0.450889    -0.000003
135    0.279146     0.279149    -0.000003
136    0.302056     0.302059    -0.000003
137    0.364063     0.364066    -0.000003
138    0.389839     0.389841    -0.000002
139    0.320954     0.320956    -0.000003
140    0.293698     0.293700    -0.000002
141    0.318980     0.318983    -0.000003
142    0.383801     0.383804    -0.000003
143    0.280489     0.280492    -0.000003
144    0.269266     0.269268    -0.000003
145    0.323151     0.323154    -0.000003
146    0.382099     0.382101    -0.000003
147    0.344201     0.344203    -0.000003
148    0.302056     0.302059    -0.000003
149    0.381813     0.381816    -0.000003
MLLITE_CLASS_SQL_ERROR ('iris_quantized', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 1.4675846032044642e-08
     Py_Proba_1  SQL_Proba_1   SQL_Error_1
134    0.003693     0.003693 -1.755720e-09
135    0.001955     0.001955 -1.328040e-08
136    0.001381     0.001381 -3.847805e-09
137    0.002663     0.002663 -4.265390e-09
138    0.005753     0.005753 -2.144664e-08
139    0.002948     0.002948 -5.533422e-09
140    0.002286     0.002286 -1.124589e-08
141    0.002914     0.002914 -2.011368e-08
142    0.004312     0.004312 -7.277478e-09
143    0.001365     0.001365 -4.026586e-09
144    0.001666     0.001666 -1.240140e-08
145    0.003037     0.003037 -1.610425e-08
146    0.005369     0.005369 -2.657634e-08
147    0.003785     0.003785 -1.749538e-08
148    0.001381     0.001381 -3.847805e-09
149    0.003472     0.003472 -6.894867e-09
MLLITE_CLASS_SQL_ERROR ('iris_quantized', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 1.8670129532216695e-06
     Py_Proba_2  SQL_Proba_2  SQL_Error_2
134    0.545421     0.545418     0.000003
135    0.718899     0.718896     0.000003
136    0.696563     0.696560     0.000003
137    0.633275     0.633272     0.000003
138    0.604408     0.604406     0.000002
139    0.676098     0.676095     0.000003
140    0.704017     0.704014     0.000003
141    0.678105     0.678102     0.000003
142    0.611887     0.611884     0.000003
143    0.718146     0.718143     0.000003
144    0.729068     0.729065     0.000003
145    0.673812     0.673809     0.000003
146    0.612532     0.612530     0.000003
147    0.652014     0.652012     0.000003
148    0.696563     0.696560     0.000003
149    0.614715     0.614712     0.000003
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_quantized', 'MLPClassifier', 'duckdb', 'Success')
     Py_Decision  SQL_Decision
134            2             2
135            2             2
136            2             2
137            2             2
138            2             2
139            2             2
140            2             2
141            2             2
142            2             2
143            2             2
144            2             2
145            2             2
146            2             2
147            2             2
148            2             2
149            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_quantized_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_quantized', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    0.421131 + -0.105484 * t."OUT_0"  + 0.126969 * t."OUT_1"  + 0.707716 * t."OUT_2"  + 0.830466 * t."OUT_3" AS "OUT_0",
    -0.440162 + 0.424532 * t."OUT_0"  + -0.607619 * t."OUT_1"  + 0.159147 * t."OUT_2"  + -0.790187 * t."OUT_3" AS "OUT_1",
    -0.467933 + -0.380535 * t."OUT_0"  + 0.226357 * t."OUT_1"  + 0.692494 * t."OUT_2"  + -0.390401 * t."OUT_3" AS "OUT_2",
    -0.700583 + -0.091886 * t."OUT_0"  + -0.000797 * t."OUT_1"  + -0.163577 * t."OUT_2"  + 0.293815 * t."OUT_3" AS "OUT_3"
 FROM "Input_Layer_BA" AS t
),
"Hidden_Layer_1_Activati
SQL_OUT_PUT_FIRST_LINES_END ('iris_quantized', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('iris_quantized', 'MLPClassifier', 'sqlite')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_quantized', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 150 entries, 0 to 149
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     150 non-null    float32
 1   X_1     150 non-null    float32
 2   X_2     150 non-null    float32
 3   X_3     150 non-null    float32
dtypes: float32(4)
memory usage: 3.5 KB
       X_0  X_1  X_2  X_3
index                    
0      2.0  8.0  1.0  1.0
1      1.0  4.0  1.0  1.0
2      0.0  6.0  0.0  1.0
3      0.0  5.0  2.0  1.0
4      1.0  8.0  1.0  1.0
...    ...  ...  ...  ...
145    8.0  4.0  7.0  9.0
146    6.0  1.0  7.0  7.0
147    7.0  4.0  7.0  8.0
148    6.0  7.0  8.0  9.0
149    5.0  4.0  7.0  7.0

[150 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('iris_quantized', 'MLPClassifier', 'sqlite', '')
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_quantized_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_quantized', 'MLPClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    0.421131 + -0.105484 * t."OUT_0"  + 0.126969 * t."OUT_1"  + 0.707716 * t."OUT_2"  + 0.830466 * t."OUT_3" AS "OUT_0",
    -0.440162 + 0.424532 * t."OUT_0"  + -0.607619 * t."OUT_1"  + 0.159147 * t."OUT_2"  + -0.790187 * t."OUT_3" AS "OUT_1",
    -0.467933 + -0.380535 * t."OUT_0"  + 0.226357 * t."OUT_1"  + 0.692494 * t."OUT_2"  + -0.390401 * t."OUT_3" AS "OUT_2",
    -0.700583 + -0.091886 * t."OUT_0"  + -0.000797 * t."OUT_1"  + -0.163577 * t."OUT_2"  + 0.293815 * t."OUT_3" AS "OUT_3"
 FROM "Input_Layer_BA" AS t
),
"Hidden_Layer_1_Activati
SQL_OUT_PUT_FIRST_LINES_END ('iris_quantized', 'MLPClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('iris_quantized', 'MLPClassifier', 'pgsql')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_quantized', 'MLPClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
