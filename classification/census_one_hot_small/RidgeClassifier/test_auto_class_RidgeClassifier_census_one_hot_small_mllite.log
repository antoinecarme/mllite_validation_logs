READING_CSV census_one_hot_small ['data/small/census_one_hot_small.csv']
    age  workclass_Local-gov  ...  native-country_infrequent_sklearn  target
0     2                  0.0  ...                                0.0    >50K
1     1                  0.0  ...                                0.0   <=50K
2     1                  0.0  ...                                0.0    >50K
3     1                  0.0  ...                                1.0    >50K
4     1                  0.0  ...                                0.0   <=50K
..  ...                  ...  ...                                ...     ...
59    1                  0.0  ...                                0.0   <=50K
60    0                  0.0  ...                                0.0   <=50K
61    4                  0.0  ...                                0.0    >50K
62    4                  0.0  ...                                0.0   <=50K
63    3                  0.0  ...                                0.0   <=50K

[64 rows x 54 columns]
MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
('OPERATION_START', 'TRAINING')
[[2.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 1.889500e+05 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 1.400000e+01 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  3.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00 1.033222e+06 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00
  0.000000e+00 1.000000e+01 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 1.297070e+05 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.300000e+01 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 4.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 7.853000e+04 0.000000e+00
  0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 9.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  4.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 1.000000e+00]
 [1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00 1.595370e+05 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 1.200000e+01 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00]] ['>50K' '<=50K' '>50K' '>50K' '<=50K']
MLLITE_FIT_USING_MODEL mllite_ridge_class.RidgeClassifier_ff4_OO8
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 4 4
('OPERATION_END_ELAPSED', 0.012, 'TRAINING')
{ ,   }
{ ,   }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_OO8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 53 },
	"classes" : [ "<=50K", ">50K" ],
	"equations" : {
		"class_1" : {
			"intercept" : -18.536953,
			"coeffs" : [ -0.389896, 1.436057, 0.014928, -0.511843, -1.036811, -0.306719, 0.609890, 1.783399, -0.000001, 0.640935, -0.336014, -0.006074, 0.518129, -0.536055, -0.195877, -0.248807, 0.052483, 5.253624, -2.882544, 2.696191, 2.119449, 0.000000, 5.760149, 0.000000, 3.695498, 2.528209, 3.323309, 2.033349, 2.685369, 2.422610, 2.138203, 11.518270, 4.667580, 4.603795, 5.251261, 1.308711, 9.684451, 4.447962, 6.495255, 8.466047, 0.000000, 6.653052, 0.175778, -0.034008, 0.658594, 0.367425, 0.000000, 2.317548, 5.513644, 0.000000, 0.249897, 0.000000, -1.147889 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_one_hot_small.json'

RELOADING_MODEL_FROM_JSON_START ('census_one_hot_small', 'RidgeClassifier')
MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
MLLITE_RELOADING_MODEL mllite_ridge_class.RidgeClassifier_ff4_OO8
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_OO8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 53 },
	"classes" : [ "<=50K", ">50K" ],
	"equations" : {
		"class_1" : {
			"intercept" : -18.536953,
			"coeffs" : [ -0.389896, 1.436057, 0.014928, -0.511843, -1.036811, -0.306719, 0.609890, 1.783399, -0.000001, 0.640935, -0.336014, -0.006074, 0.518129, -0.536055, -0.195877, -0.248807, 0.052483, 5.253624, -2.882544, 2.696191, 2.119449, 0.000000, 5.760149, 0.000000, 3.695498, 2.528209, 3.323309, 2.033349, 2.685369, 2.422610, 2.138203, 11.518270, 4.667580, 4.603795, 5.251261, 1.308711, 9.684451, 4.447962, 6.495255, 8.466047, 0.000000, 6.653052, 0.175778, -0.034008, 0.658594, 0.367425, 0.000000, 2.317548, 5.513644, 0.000000, 0.249897, 0.000000, -1.147889 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ "<=50K", ">50K" ],
	"dataset" : 	{
		"dataset_features" : 53,
		"dataset_rows" : 64
	},
	"equations" : 	{
		"class_1" : 	{
			"coeffs" : [ -0.389896, 1.436057, 0.014928, -0.511843, -1.036811, -0.306719, 0.60989, 1.783399, -1e-06, 0.640935, -0.336014, -0.006074, 0.518129, -0.536055, -0.195877, -0.248807, 0.052483, 5.253624, -2.882544, 2.696191, 2.119449, 0.0, 5.760149, 0.0, 3.695498, 2.528209, 3.323309, 2.033349, 2.685369, 2.42261, 2.138203, 11.51827, 4.66758, 4.603795, 5.251261, 1.308711, 9.684451, 4.447962, 6.495255, 8.466047, 0.0, 6.653052, 0.175778, -0.034008, 0.658594, 0.367425, 0.0, 2.317548, 5.513644, 0.0, 0.249897, 0.0, -1.147889 ],
			"intercept" : -18.536953
		}
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_OO8", "version" : "2024-W14" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('census_one_hot_small', 'RidgeClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.2819 0.7181]
 [0.7053 0.2947]
 [0.4193 0.5807]
 [0.35   0.65  ]
 [0.4902 0.5098]
 [0.6958 0.3042]
 [0.6907 0.3093]
 [0.6628 0.3372]
 [0.787  0.213 ]
 [0.2678 0.7322]
 [0.8127 0.1873]
 [0.5698 0.4302]
 [0.7827 0.2173]
 [0.6996 0.3004]
 [0.6479 0.3521]
 [0.6899 0.3101]
 [0.7391 0.2609]
 [0.2014 0.7986]
 [0.286  0.714 ]
 [0.4334 0.5666]
 [0.5258 0.4742]
 [0.7569 0.2431]
 [0.7145 0.2855]
 [0.4772 0.5228]
 [0.7302 0.2698]
 [0.5481 0.4519]
 [0.7406 0.2594]
 [0.6694 0.3306]
 [0.8364 0.1636]
 [0.641  0.359 ]
 [0.7467 0.2533]
 [0.8909 0.1091]
 [0.8629 0.1371]
 [0.279  0.721 ]
 [0.4953 0.5047]
 [0.7823 0.2177]
 [0.5409 0.4591]
 [0.9351 0.0649]
 [0.5921 0.4079]
 [0.4197 0.5803]
 [0.6411 0.3589]
 [0.2906 0.7094]
 [0.4041 0.5959]
 [0.3781 0.6219]
 [0.4452 0.5548]
 [0.9692 0.0308]
 [0.8458 0.1542]
 [0.738  0.262 ]
 [0.8575 0.1425]
 [0.0818 0.9182]
 [0.7364 0.2636]
 [0.4447 0.5553]
 [0.8155 0.1845]
 [0.4929 0.5071]
 [0.7357 0.2643]
 [0.6387 0.3613]
 [0.7808 0.2192]
 [0.6775 0.3225]
 [0.7675 0.2325]
 [0.8132 0.1868]
 [0.7064 0.2936]
 [0.692  0.308 ]
 [0.6651 0.3349]
 [0.547  0.453 ]]
(64, 2)
(64,) float32
MODEL_PERFS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'census_one_hot_small', 'size': 64, 'accuracy': 0.828125, 'auc': 0.8585714285714285}
WRITING_PERF_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_one_hot_small.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'census_one_hot_small', 'training_time_in_sec': 0.012, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 10 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 11 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 12 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 13 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 14 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 15 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 16 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 17 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 18 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 19 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 20 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 21 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 22 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 23 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 24 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 25 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 26 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 27 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 28 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 29 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 30 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 31 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 32 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 33 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 34 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 35 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 36 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 37 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 38 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 39 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 40 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 41 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 42 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 43 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 44 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 45 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 46 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 47 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 48 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 49 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 50 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 51 53
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 52 53
{
   "Contributions" : {
      "X_0" : [ -0.011881, 0.011881 ],
      "X_1" : [ 0.000850, -0.000850 ],
      "X_2" : [ -0.000142, 0.000142 ],
      "X_3" : [ -0.001327, 0.001327 ],
      "X_4" : [ -0.002473, 0.002473 ],
      "X_5" : [ -0.000031, 0.000031 ],
      "X_6" : [ 0.002110, -0.002110 ],
      "X_7" : [ 0.002461, -0.002461 ],
      "X_8" : [ 0.002402, -0.002402 ],
      "X_9" : [ -0.000092, 0.000092 ],
      "X_10" : [ -0.000750, 0.000750 ],
      "X_11" : [ -0.000009, 0.000009 ],
      "X_12" : [ -0.001789, 0.001789 ],
      "X_13" : [ -0.000141, 0.000141 ],
      "X_14" : [ -0.000482, 0.000482 ],
      "X_15" : [ 0.000743, -0.000743 ],
      "X_16" : [ -0.001988, 0.001988 ],
      "X_17" : [ 0.050787, -0.050787 ],
      "X_18" : [ -0.002346, 0.002346 ],
      "X_19" : [ -0.001694, 0.001694 ],
      "X_20" : [ -0.012068, 0.012068 ],
      "X_21" : [ 0.000000, 0.000000 ],
      "X_22" : [ 0.012892, -0.012892 ],
      "X_23" : [ 0.000000, 0.000000 ],
      "X_24" : [ 0.023349, -0.023349 ],
      "X_25" : [ -0.008084, 0.008084 ],
      "X_26" : [ 0.006201, -0.006201 ],
      "X_27" : [ -0.003812, 0.003812 ],
      "X_28" : [ -0.006665, 0.006665 ],
      "X_29" : [ -0.010576, 0.010576 ],
      "X_30" : [ 0.014332, -0.014332 ],
      "X_31" : [ -0.069500, 0.069500 ],
      "X_32" : [ -0.022247, 0.022247 ],
      "X_33" : [ -0.003732, 0.003732 ],
      "X_34" : [ -0.003712, 0.003712 ],
      "X_35" : [ 0.006362, -0.006362 ],
      "X_36" : [ 0.031261, -0.031261 ],
      "X_37" : [ -0.005778, 0.005778 ],
      "X_38" : [ -0.016550, 0.016550 ],
      "X_39" : [ -0.032512, 0.032512 ],
      "X_40" : [ 0.000000, 0.000000 ],
      "X_41" : [ 0.046416, -0.046416 ],
      "X_42" : [ -0.000398, 0.000398 ],
      "X_43" : [ -0.000333, 0.000333 ],
      "X_44" : [ 0.009940, -0.009940 ],
      "X_45" : [ -0.002740, 0.002740 ],
      "X_46" : [ 0.000000, 0.000000 ],
      "X_47" : [ -0.002063, 0.002063 ],
      "X_48" : [ -0.003995, 0.003995 ],
      "X_49" : [ 0.000000, 0.000000 ],
      "X_50" : [ 0.000547, -0.000547 ],
      "X_51" : [ 0.000000, 0.000000 ],
      "X_52" : [ -0.000103, 0.000103 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 31, 17, 41, 39, 36, 24, 32, 38, 30, 22 ],
      "class_1" : [ 31, 17, 41, 39, 36, 24, 32, 38, 30, 22 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_one_hot_small_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_one_hot_small_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_one_hot_small', 'RidgeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('census_one_hot_small', 'RidgeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('census_one_hot_small', 'RidgeClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_one_hot_small', 'RidgeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 53 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
 14  X_14    64 non-null     float32
 15  X_15    64 non-null     float32
 16  X_16    64 non-null     float32
 17  X_17    64 non-null     float32
 18  X_18    64 non-null     float32
 19  X_19    64 non-null     float32
 20  X_20    64 non-null     float32
 21  X_21    64 non-null     float32
 22  X_22    64 non-null     float32
 23  X_23    64 non-null     float32
 24  X_24    64 non-null     float32
 25  X_25    64 non-null     float32
 26  X_26    64 non-null     float32
 27  X_27    64 non-null     float32
 28  X_28    64 non-null     float32
 29  X_29    64 non-null     float32
 30  X_30    64 non-null     float32
 31  X_31    64 non-null     float32
 32  X_32    64 non-null     float32
 33  X_33    64 non-null     float32
 34  X_34    64 non-null     float32
 35  X_35    64 non-null     float32
 36  X_36    64 non-null     float32
 37  X_37    64 non-null     float32
 38  X_38    64 non-null     float32
 39  X_39    64 non-null     float32
 40  X_40    64 non-null     float32
 41  X_41    64 non-null     float32
 42  X_42    64 non-null     float32
 43  X_43    64 non-null     float32
 44  X_44    64 non-null     float32
 45  X_45    64 non-null     float32
 46  X_46    64 non-null     float32
 47  X_47    64 non-null     float32
 48  X_48    64 non-null     float32
 49  X_49    64 non-null     float32
 50  X_50    64 non-null     float32
 51  X_51    64 non-null     float32
 52  X_52    64 non-null     float32
dtypes: float32(53)
memory usage: 13.8 KB
       X_0  X_1  X_2  X_3  X_4  X_5  ...  X_47  X_48  X_49  X_50  X_51  X_52
index                                ...                                    
0      2.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
1      1.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
2      1.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
3      1.0  0.0  0.0  1.0  0.0  0.0  ...   0.0   0.0   0.0   0.0   0.0   1.0
4      1.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
...    ...  ...  ...  ...  ...  ...  ...   ...   ...   ...   ...   ...   ...
59     1.0  0.0  0.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
60     0.0  0.0  0.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
61     4.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
62     4.0  0.0  0.0  0.0  1.0  0.0  ...   1.0   0.0   0.0   0.0   0.0   0.0
63     3.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0

[64 rows x 53 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Decision       64 non-null     int64  
 8   DecisionProba  64 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 4.6 KB
    index   Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0 -0.423990  0.299857  ...   -0.356470         1       0.700143
1       1  0.675165  0.794184  ...   -1.580771         0       0.794184
2       2 -0.132897  0.433940  ...   -0.569055         1       0.566060
3       3 -0.291466  0.358258  ...   -0.443569         1       0.641742
4       4  0.017301  0.508650  ...   -0.710598         0       0.508650
..    ...       ...       ...  ...         ...       ...            ...
59     59  0.761529  0.820988  ...   -1.720305         0       0.820988
60     60  0.446803  0.709634  ...   -1.236613         0       0.709634
61     61  0.430666  0.702939  ...   -1.213817         0       0.702939
62     62  0.438094  0.706031  ...   -1.224283         0       0.706031
63     63  0.122430  0.560911  ...   -0.823053         0       0.560911

[64 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
48     48  0.957836     0.871655  ...    0.857549    0.142451        <=50K
49     49 -1.184617     0.085549  ...    0.081809    0.918191         >50K
50     50  0.551190     0.750706  ...    0.736423    0.263577        <=50K
51     51 -0.098064     0.451125  ...    0.444680    0.555320         >50K
52     52  0.794571     0.830495  ...    0.815526    0.184474        <=50K
53     53  0.025564     0.512779  ...    0.492932    0.507068         >50K
54     54  0.553889     0.751715  ...    0.735715    0.264285        <=50K
55     55  0.344915     0.665929  ...    0.638741    0.361259        <=50K
56     56  0.668166     0.791886  ...    0.780841    0.219159        <=50K
57     57  0.391096     0.686152  ...    0.677458    0.322542        <=50K
58     58  0.609493     0.771885  ...    0.767453    0.232547        <=50K
59     59  0.761529     0.820988  ...    0.813188    0.186812        <=50K
60     60  0.446803     0.709634  ...    0.706356    0.293644        <=50K
61     61  0.430666     0.702939  ...    0.692039    0.307961        <=50K
62     62  0.438094     0.706031  ...    0.665073    0.334927        <=50K
63     63  0.122430     0.560911  ...    0.547047    0.452953        <=50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_one_hot_small', 'RidgeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 0.017299087447805284
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
48    0.857549     0.871655    -0.014106
49    0.081809     0.085549    -0.003740
50    0.736423     0.750706    -0.014283
51    0.444680     0.451125    -0.006445
52    0.815526     0.830495    -0.014969
53    0.492932     0.512779    -0.019847
54    0.735715     0.751715    -0.016000
55    0.638741     0.665929    -0.027189
56    0.780841     0.791886    -0.011045
57    0.677458     0.686152    -0.008694
58    0.767453     0.771885    -0.004432
59    0.813188     0.820988    -0.007800
60    0.706356     0.709634    -0.003278
61    0.692039     0.702939    -0.010900
62    0.665073     0.706031    -0.040958
63    0.547047     0.560911    -0.013864
MLLITE_CLASS_SQL_ERROR ('census_one_hot_small', 'RidgeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 0.017299089630592568
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
48    0.142451     0.128345     0.014106
49    0.918191     0.914451     0.003741
50    0.263577     0.249294     0.014283
51    0.555320     0.548875     0.006445
52    0.184474     0.169505     0.014969
53    0.507068     0.487221     0.019847
54    0.264285     0.248285     0.016000
55    0.361259     0.334071     0.027189
56    0.219159     0.208114     0.011045
57    0.322542     0.313848     0.008694
58    0.232547     0.228115     0.004432
59    0.186812     0.179012     0.007800
60    0.293644     0.290366     0.003278
61    0.307961     0.297061     0.010900
62    0.334927     0.293969     0.040958
63    0.452953     0.439089     0.013864
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_one_hot_small', 'RidgeClassifier', 'duckdb', 'Failure')
   Py_Decision  SQL_Decision
48       <=50K             0
49        >50K             1
50       <=50K             0
51        >50K             1
52       <=50K             0
53        >50K             0
54       <=50K             0
55       <=50K             0
56       <=50K             0
57       <=50K             0
58       <=50K             0
59       <=50K             0
60       <=50K             0
61       <=50K             0
62       <=50K             0
63       <=50K             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_census_one_hot_small_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_one_hot_small', 'RidgeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('census_one_hot_small', 'RidgeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('census_one_hot_small', 'RidgeClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_one_hot_small', 'RidgeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 53 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
 14  X_14    64 non-null     float32
 15  X_15    64 non-null     float32
 16  X_16    64 non-null     float32
 17  X_17    64 non-null     float32
 18  X_18    64 non-null     float32
 19  X_19    64 non-null     float32
 20  X_20    64 non-null     float32
 21  X_21    64 non-null     float32
 22  X_22    64 non-null     float32
 23  X_23    64 non-null     float32
 24  X_24    64 non-null     float32
 25  X_25    64 non-null     float32
 26  X_26    64 non-null     float32
 27  X_27    64 non-null     float32
 28  X_28    64 non-null     float32
 29  X_29    64 non-null     float32
 30  X_30    64 non-null     float32
 31  X_31    64 non-null     float32
 32  X_32    64 non-null     float32
 33  X_33    64 non-null     float32
 34  X_34    64 non-null     float32
 35  X_35    64 non-null     float32
 36  X_36    64 non-null     float32
 37  X_37    64 non-null     float32
 38  X_38    64 non-null     float32
 39  X_39    64 non-null     float32
 40  X_40    64 non-null     float32
 41  X_41    64 non-null     float32
 42  X_42    64 non-null     float32
 43  X_43    64 non-null     float32
 44  X_44    64 non-null     float32
 45  X_45    64 non-null     float32
 46  X_46    64 non-null     float32
 47  X_47    64 non-null     float32
 48  X_48    64 non-null     float32
 49  X_49    64 non-null     float32
 50  X_50    64 non-null     float32
 51  X_51    64 non-null     float32
 52  X_52    64 non-null     float32
dtypes: float32(53)
memory usage: 13.8 KB
       X_0  X_1  X_2  X_3  X_4  X_5  ...  X_47  X_48  X_49  X_50  X_51  X_52
index                                ...                                    
0      2.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
1      1.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
2      1.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
3      1.0  0.0  0.0  1.0  0.0  0.0  ...   0.0   0.0   0.0   0.0   0.0   1.0
4      1.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
...    ...  ...  ...  ...  ...  ...  ...   ...   ...   ...   ...   ...   ...
59     1.0  0.0  0.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
60     0.0  0.0  0.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
61     4.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
62     4.0  0.0  0.0  0.0  1.0  0.0  ...   1.0   0.0   0.0   0.0   0.0   0.0
63     3.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0

[64 rows x 53 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Decision       64 non-null     int64  
 8   DecisionProba  64 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 4.6 KB
    index   Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0 -0.423988  0.299857  ...   -0.356471         1       0.700143
1       1  0.675165  0.794184  ...   -1.580771         0       0.794184
2       2 -0.132896  0.433940  ...   -0.569056         1       0.566060
3       3 -0.291465  0.358259  ...   -0.443570         1       0.641741
4       4  0.017302  0.508650  ...   -0.710599         0       0.508650
..    ...       ...       ...  ...         ...       ...            ...
59     59  0.761530  0.820989  ...   -1.720306         0       0.820989
60     60  0.446804  0.709634  ...   -1.236614         0       0.709634
61     61  0.430667  0.702939  ...   -1.213819         0       0.702939
62     62  0.438094  0.706031  ...   -1.224282         0       0.706031
63     63  0.122432  0.560912  ...   -0.823055         0       0.560912

[64 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
48     48  0.957838     0.871655  ...    0.857549    0.142451        <=50K
49     49 -1.184615     0.085549  ...    0.081809    0.918191         >50K
50     50  0.551192     0.750706  ...    0.736423    0.263577        <=50K
51     51 -0.098063     0.451125  ...    0.444680    0.555320         >50K
52     52  0.794572     0.830496  ...    0.815526    0.184474        <=50K
53     53  0.025566     0.512780  ...    0.492932    0.507068         >50K
54     54  0.553891     0.751715  ...    0.735715    0.264285        <=50K
55     55  0.344916     0.665930  ...    0.638741    0.361259        <=50K
56     56  0.668166     0.791886  ...    0.780841    0.219159        <=50K
57     57  0.391098     0.686153  ...    0.677458    0.322542        <=50K
58     58  0.609494     0.771885  ...    0.767453    0.232547        <=50K
59     59  0.761530     0.820989  ...    0.813188    0.186812        <=50K
60     60  0.446804     0.709634  ...    0.706356    0.293644        <=50K
61     61  0.430667     0.702939  ...    0.692039    0.307961        <=50K
62     62  0.438094     0.706031  ...    0.665073    0.334927        <=50K
63     63  0.122432     0.560912  ...    0.547047    0.452953        <=50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_one_hot_small', 'RidgeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 0.017299472801528465
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
48    0.857549     0.871655    -0.014107
49    0.081809     0.085549    -0.003741
50    0.736423     0.750706    -0.014284
51    0.444680     0.451125    -0.006445
52    0.815526     0.830496    -0.014970
53    0.492932     0.512780    -0.019848
54    0.735715     0.751715    -0.016001
55    0.638741     0.665930    -0.027189
56    0.780841     0.791886    -0.011045
57    0.677458     0.686153    -0.008695
58    0.767453     0.771885    -0.004432
59    0.813188     0.820989    -0.007801
60    0.706356     0.709634    -0.003278
61    0.692039     0.702939    -0.010900
62    0.665073     0.706031    -0.040958
63    0.547047     0.560912    -0.013865
MLLITE_CLASS_SQL_ERROR ('census_one_hot_small', 'RidgeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 0.01729947498431576
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
48    0.142451     0.128345     0.014107
49    0.918191     0.914451     0.003741
50    0.263577     0.249294     0.014284
51    0.555320     0.548875     0.006445
52    0.184474     0.169504     0.014970
53    0.507068     0.487220     0.019848
54    0.264285     0.248285     0.016000
55    0.361259     0.334070     0.027189
56    0.219159     0.208114     0.011045
57    0.322542     0.313847     0.008695
58    0.232547     0.228115     0.004432
59    0.186812     0.179011     0.007800
60    0.293644     0.290366     0.003278
61    0.307961     0.297061     0.010900
62    0.334927     0.293969     0.040958
63    0.452953     0.439088     0.013865
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_one_hot_small', 'RidgeClassifier', 'sqlite', 'Failure')
   Py_Decision  SQL_Decision
48       <=50K             0
49        >50K             1
50       <=50K             0
51        >50K             1
52       <=50K             0
53        >50K             0
54       <=50K             0
55       <=50K             0
56       <=50K             0
57       <=50K             0
58       <=50K             0
59       <=50K             0
60       <=50K             0
61       <=50K             0
62       <=50K             0
63       <=50K             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
