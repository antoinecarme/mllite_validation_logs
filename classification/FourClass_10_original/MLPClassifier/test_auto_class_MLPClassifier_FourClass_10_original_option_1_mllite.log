           X_0       X_1       X_2  ...       X_8       X_9  target
0    -1.104915  0.852920  0.507679  ... -1.472978 -1.793182       0
1     1.845877 -1.230132  0.868872  ...  0.362403 -0.619445       3
2    -2.837179  1.477195  0.565303  ...  1.102744  1.483759       1
3    -0.817915  0.349464 -0.778337  ... -0.344547 -0.450057       3
4     2.867865 -1.912016  0.005109  ... -0.616466 -0.572385       0
...        ...       ...       ...  ...       ...       ...     ...
1019 -2.095001  1.294078 -1.552071  ... -3.931552 -1.074179       2
1020 -1.743265  0.891375  1.671782  ... -0.360963  0.011059       3
1021 -1.760887  1.921145  0.350258  ...  2.763857 -0.710372       3
1022 -1.134328  1.876722  2.781903  ...  2.604618  0.626265       3
1023 -0.770972  1.261518  1.808595  ... -1.336243  0.434694       2

[1024 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[-1.10491490e+00  8.52919877e-01  5.07678568e-01 -3.81407499e-01
  -6.32111073e-01  6.43055558e-01  1.64998901e+00  4.79870588e-01
  -1.47297835e+00 -1.79318225e+00]
 [ 1.84587657e+00 -1.23013234e+00  8.68871808e-01 -1.36471283e+00
   1.38019109e+00 -6.07883871e-01 -4.83270741e+00 -3.81645823e+00
   3.62403333e-01 -6.19445145e-01]
 [-2.83717918e+00  1.47719467e+00  5.65303147e-01  1.38211691e+00
   1.26869273e+00 -1.04379274e-01  2.91604996e-01 -1.22561082e-02
   1.10274434e+00  1.48375893e+00]
 [-8.17914605e-01  3.49463820e-01 -7.78337240e-01  3.11694108e-02
   1.09836125e+00 -2.34135496e-03 -4.48572785e-01 -1.05435896e+00
  -3.44547480e-01 -4.50056911e-01]
 [ 2.86786485e+00 -1.91201603e+00  5.10907173e-03 -8.97717237e-01
  -4.13689524e-01  1.13818514e+00 -1.69676435e+00 -1.53572273e+00
  -6.16465807e-01 -5.72385132e-01]] [0 3 1 3 0]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.093, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 1024, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ 0.045240, 0.298486, -0.275899, -0.122668 ],
			"coeffs_1" : [ 0.013316, -0.288278, 0.174770, 0.121733 ],
			"coeffs_2" : [ 0.529895, 0.112930, 0.471531, -0.057398 ],
			"coeffs_3" : [ 0.776123, -0.608271, -0.210723, 0.130754 ],
			"coeffs_4" : [ 0.282606, -0.224849, -0.245951, -0.401599 ],
			"coeffs_5" : [ 0.238465, -0.532928, -0.113580, 0.028016 ],
			"coeffs_6" : [ -0.087671, -0.519750, -0.308733, 0.437061 ],
			"coeffs_7" : [ -0.078674, 0.124330, -0.538146, 0.093886 ],
			"coeffs_8" : [ -0.214350, 0.286180, -0.008363, 0.400714 ],
			"coeffs_9" : [ -0.360593, 0.522150, -0.380834, 0.294398 ],
			"intercepts" : [ -0.477418, 0.292261, 0.098470, 0.508101 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.560769, -0.646680, 0.383280, 0.268020, 0.673748, 0.501080, 0.471304, -0.338897 ],
			"coeffs_1" : [ 0.381866, 0.499967, -0.275979, 0.328962, 0.076269, -0.031502, 0.157172, 0.407769 ],
			"coeffs_2" : [ -0.710277, -0.009855, 0.423894, 0.423534, -0.589040, 0.388369, -0.472032, -0.583883 ],
			"coeffs_3" : [ 0.610808, 0.590501, 0.001632, -0.608494, -0.014068, 0.592712, -0.554062, 0.388023 ],
			"intercepts" : [ 0.249932, 0.333048, 0.755062, -0.357963, 0.364923, 0.402262, 0.485764, 0.013940 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.646633, 0.279121, -0.041297, -0.129513, -0.370162, -0.506065 ],
			"coeffs_1" : [ -0.326381, 0.509867, -0.028035, 0.012734, -0.229043, -0.473633 ],
			"coeffs_2" : [ 0.092666, -0.328679, -0.297389, 0.108641, 0.280273, -0.352417 ],
			"coeffs_3" : [ -0.299465, 0.277734, 0.377155, 0.713018, 0.436900, 0.264556 ],
			"coeffs_4" : [ -0.339963, 0.026929, 0.135989, 0.594643, 0.277432, -0.001604 ],
			"coeffs_5" : [ 0.285815, 0.359362, 0.061186, -0.054068, -0.186018, -0.218781 ],
			"coeffs_6" : [ 0.279092, 0.372862, -0.517097, 0.323760, -0.418412, -0.001729 ],
			"coeffs_7" : [ 0.047460, -0.282937, 0.233032, -0.557169, -0.520512, 0.377295 ],
			"intercepts" : [ 0.486010, -0.528599, -0.302987, -0.302822, -0.524386, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.253344, -0.296174, -0.371317, -0.462823 ],
			"coeffs_1" : [ -0.686347, 0.069423, -0.402848, -0.554463 ],
			"coeffs_2" : [ 0.212291, 0.207802, -0.076155, 0.276645 ],
			"coeffs_3" : [ 0.179591, -0.781489, -0.073075, 0.825715 ],
			"coeffs_4" : [ 0.896900, -0.294299, -0.483480, -0.271416 ],
			"coeffs_5" : [ 0.217087, -0.527762, 0.267267, -0.302027 ],
			"intercepts" : [ 0.638011, 0.617666, -0.186458, 0.474939 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_original_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 1024, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ 0.045240, 0.298486, -0.275899, -0.122668 ],
			"coeffs_1" : [ 0.013316, -0.288278, 0.174770, 0.121733 ],
			"coeffs_2" : [ 0.529895, 0.112930, 0.471531, -0.057398 ],
			"coeffs_3" : [ 0.776123, -0.608271, -0.210723, 0.130754 ],
			"coeffs_4" : [ 0.282606, -0.224849, -0.245951, -0.401599 ],
			"coeffs_5" : [ 0.238465, -0.532928, -0.113580, 0.028016 ],
			"coeffs_6" : [ -0.087671, -0.519750, -0.308733, 0.437061 ],
			"coeffs_7" : [ -0.078674, 0.124330, -0.538146, 0.093886 ],
			"coeffs_8" : [ -0.214350, 0.286180, -0.008363, 0.400714 ],
			"coeffs_9" : [ -0.360593, 0.522150, -0.380834, 0.294398 ],
			"intercepts" : [ -0.477418, 0.292261, 0.098470, 0.508101 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.560769, -0.646680, 0.383280, 0.268020, 0.673748, 0.501080, 0.471304, -0.338897 ],
			"coeffs_1" : [ 0.381866, 0.499967, -0.275979, 0.328962, 0.076269, -0.031502, 0.157172, 0.407769 ],
			"coeffs_2" : [ -0.710277, -0.009855, 0.423894, 0.423534, -0.589040, 0.388369, -0.472032, -0.583883 ],
			"coeffs_3" : [ 0.610808, 0.590501, 0.001632, -0.608494, -0.014068, 0.592712, -0.554062, 0.388023 ],
			"intercepts" : [ 0.249932, 0.333048, 0.755062, -0.357963, 0.364923, 0.402262, 0.485764, 0.013940 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.646633, 0.279121, -0.041297, -0.129513, -0.370162, -0.506065 ],
			"coeffs_1" : [ -0.326381, 0.509867, -0.028035, 0.012734, -0.229043, -0.473633 ],
			"coeffs_2" : [ 0.092666, -0.328679, -0.297389, 0.108641, 0.280273, -0.352417 ],
			"coeffs_3" : [ -0.299465, 0.277734, 0.377155, 0.713018, 0.436900, 0.264556 ],
			"coeffs_4" : [ -0.339963, 0.026929, 0.135989, 0.594643, 0.277432, -0.001604 ],
			"coeffs_5" : [ 0.285815, 0.359362, 0.061186, -0.054068, -0.186018, -0.218781 ],
			"coeffs_6" : [ 0.279092, 0.372862, -0.517097, 0.323760, -0.418412, -0.001729 ],
			"coeffs_7" : [ 0.047460, -0.282937, 0.233032, -0.557169, -0.520512, 0.377295 ],
			"intercepts" : [ 0.486010, -0.528599, -0.302987, -0.302822, -0.524386, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.253344, -0.296174, -0.371317, -0.462823 ],
			"coeffs_1" : [ -0.686347, 0.069423, -0.402848, -0.554463 ],
			"coeffs_2" : [ 0.212291, 0.207802, -0.076155, 0.276645 ],
			"coeffs_3" : [ 0.179591, -0.781489, -0.073075, 0.825715 ],
			"coeffs_4" : [ 0.896900, -0.294299, -0.483480, -0.271416 ],
			"coeffs_5" : [ 0.217087, -0.527762, 0.267267, -0.302027 ],
			"intercepts" : [ 0.638011, 0.617666, -0.186458, 0.474939 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2, 3 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 1024
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ 0.04524, 0.298486, -0.275899, -0.122668 ],
			"coeffs_1" : [ 0.013316, -0.288278, 0.17477, 0.121733 ],
			"coeffs_2" : [ 0.529895, 0.11293, 0.471531, -0.057398 ],
			"coeffs_3" : [ 0.776123, -0.608271, -0.210723, 0.130754 ],
			"coeffs_4" : [ 0.282606, -0.224849, -0.245951, -0.401599 ],
			"coeffs_5" : [ 0.238465, -0.532928, -0.11358, 0.028016 ],
			"coeffs_6" : [ -0.087671, -0.51975, -0.308733, 0.437061 ],
			"coeffs_7" : [ -0.078674, 0.12433, -0.538146, 0.093886 ],
			"coeffs_8" : [ -0.21435, 0.28618, -0.008363, 0.400714 ],
			"coeffs_9" : [ -0.360593, 0.52215, -0.380834, 0.294398 ],
			"intercepts" : [ -0.477418, 0.292261, 0.09847, 0.508101 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.560769, -0.64668, 0.38328, 0.26802, 0.673748, 0.50108, 0.471304, -0.338897 ],
			"coeffs_1" : [ 0.381866, 0.499967, -0.275979, 0.328962, 0.076269, -0.031502, 0.157172, 0.407769 ],
			"coeffs_2" : [ -0.710277, -0.009855, 0.423894, 0.423534, -0.58904, 0.388369, -0.472032, -0.583883 ],
			"coeffs_3" : [ 0.610808, 0.590501, 0.001632, -0.608494, -0.014068, 0.592712, -0.554062, 0.388023 ],
			"intercepts" : [ 0.249932, 0.333048, 0.755062, -0.357963, 0.364923, 0.402262, 0.485764, 0.01394 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.646633, 0.279121, -0.041297, -0.129513, -0.370162, -0.506065 ],
			"coeffs_1" : [ -0.326381, 0.509867, -0.028035, 0.012734, -0.229043, -0.473633 ],
			"coeffs_2" : [ 0.092666, -0.328679, -0.297389, 0.108641, 0.280273, -0.352417 ],
			"coeffs_3" : [ -0.299465, 0.277734, 0.377155, 0.713018, 0.4369, 0.264556 ],
			"coeffs_4" : [ -0.339963, 0.026929, 0.135989, 0.594643, 0.277432, -0.001604 ],
			"coeffs_5" : [ 0.285815, 0.359362, 0.061186, -0.054068, -0.186018, -0.218781 ],
			"coeffs_6" : [ 0.279092, 0.372862, -0.517097, 0.32376, -0.418412, -0.001729 ],
			"coeffs_7" : [ 0.04746, -0.282937, 0.233032, -0.557169, -0.520512, 0.377295 ],
			"intercepts" : [ 0.48601, -0.528599, -0.302987, -0.302822, -0.524386, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.253344, -0.296174, -0.371317, -0.462823 ],
			"coeffs_1" : [ -0.686347, 0.069423, -0.402848, -0.554463 ],
			"coeffs_2" : [ 0.212291, 0.207802, -0.076155, 0.276645 ],
			"coeffs_3" : [ 0.179591, -0.781489, -0.073075, 0.825715 ],
			"coeffs_4" : [ 0.8969, -0.294299, -0.48348, -0.271416 ],
			"coeffs_5" : [ 0.217087, -0.527762, 0.267267, -0.302027 ],
			"intercepts" : [ 0.638011, 0.617666, -0.186458, 0.474939 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 4 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.001, 'PREDICT')
[[0.3255 0.3086 0.1304 0.2355]
 [0.2168 0.1372 0.0808 0.5651]
 [0.2635 0.3667 0.1318 0.238 ]
 ...
 [0.2251 0.094  0.0598 0.621 ]
 [0.2191 0.1693 0.0959 0.5157]
 [0.3196 0.2066 0.1212 0.3526]]
(1024, 4)
(1024, 4) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_original', 'size': 1024, 'accuracy': 0.396484375, 'auc': 0.6928392897092377}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_original_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_original', 'training_time_in_sec': 0.093, 'prediction_time_in_sec': 0.001}
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_original_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_original', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.477418 + 0.045240 * t."OUT_0"  + 0.013316 * t."OUT_1"  + 0.529895 * t."OUT_2"  + 0.776123 * t."OUT_3"  + 0.282606 * t."OUT_4"  + 0.238465 * t."OUT_5"  + -0.087671 * t."OUT_
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_original', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_original', 'MLPClassifier', 'duckdb')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_original', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 1024 entries, 0 to 1023
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     1024 non-null   float32
 1   X_1     1024 non-null   float32
 2   X_2     1024 non-null   float32
 3   X_3     1024 non-null   float32
 4   X_4     1024 non-null   float32
 5   X_5     1024 non-null   float32
 6   X_6     1024 non-null   float32
 7   X_7     1024 non-null   float32
 8   X_8     1024 non-null   float32
 9   X_9     1024 non-null   float32
dtypes: float32(10)
memory usage: 48.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.104915  0.852920  0.507679  ...  0.479871 -1.472978 -1.793182
1      1.845877 -1.230132  0.868872  ... -3.816458  0.362403 -0.619445
2     -2.837179  1.477195  0.565303  ... -0.012256  1.102744  1.483759
3     -0.817915  0.349464 -0.778337  ... -1.054359 -0.344547 -0.450057
4      2.867865 -1.912016  0.005109  ... -1.535723 -0.616466 -0.572385
...         ...       ...       ...  ...       ...       ...       ...
1019  -2.095001  1.294078 -1.552071  ...  1.112683 -3.931551 -1.074179
1020  -1.743265  0.891375  1.671782  ...  0.265348 -0.360963  0.011059
1021  -1.760887  1.921145  0.350258  ... -1.772515  2.763857 -0.710372
1022  -1.134328  1.876722  2.781903  ... -0.109672  2.604619  0.626265
1023  -0.770972  1.261518  1.808595  ... -0.898929 -1.336243  0.434694

[1024 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1024 entries, 0 to 1023
Data columns (total 15 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          1024 non-null   int64  
 1   Score_0        1024 non-null   float64
 2   Proba_0        1024 non-null   float64
 3   LogProba_0     1024 non-null   float64
 4   Score_1        1024 non-null   float64
 5   Proba_1        1024 non-null   float64
 6   LogProba_1     1024 non-null   float64
 7   Score_2        1024 non-null   float64
 8   Proba_2        1024 non-null   float64
 9   LogProba_2     1024 non-null   float64
 10  Score_3        1024 non-null   float64
 11  Proba_3        1024 non-null   float64
 12  LogProba_3     1024 non-null   float64
 13  Decision       1024 non-null   int64  
 14  DecisionProba  1024 non-null   float64
dtypes: float64(13), int64(2)
memory usage: 120.1 KB
      index   Score_0   Proba_0  ...  LogProba_3  Decision  DecisionProba
0         0  0.443822  0.325491  ...   -1.446060         0       0.325491
1         1  0.019213  0.216846  ...   -0.570768         3       0.565091
2         2  0.319500  0.263521  ...   -1.435493         1       0.366689
3         3  0.457793  0.324091  ...   -1.438815         0       0.324091
4         4  0.276917  0.260567  ...   -1.387720         1       0.358918
...     ...       ...       ...  ...         ...       ...            ...
1019   1019  0.487804  0.285956  ...   -1.386127         1       0.330595
1020   1020  0.448057  0.334272  ...   -1.350086         0       0.334272
1021   1021  0.111003  0.225131  ...   -0.476394         3       0.621019
1022   1022 -0.001604  0.219127  ...   -0.662299         3       0.515664
1023   1023  0.525843  0.319567  ...   -1.042398         3       0.352608

[1024 rows x 15 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Decision', 'DecisionProba'],
      dtype='object')
      index   Score_0  SQL_Proba_0  ...  Py_Proba_2  Py_Proba_3  Py_Decision
1008   1008  0.501890     0.340673  ...    0.123264    0.312875            0
1009   1009  0.349354     0.267489  ...    0.132137    0.240200            1
1010   1010  0.297751     0.265106  ...    0.105228    0.465864            3
1011   1011 -0.445064     0.167749  ...    0.115051    0.175479            1
1012   1012 -0.530029     0.157010  ...    0.110141    0.168048            1
1013   1013 -0.282675     0.186711  ...    0.119748    0.189313            1
1014   1014  0.444012     0.325472  ...    0.130382    0.235520            0
1015   1015  0.385698     0.287233  ...    0.116877    0.397337            3
1016   1016  0.444265     0.301354  ...    0.123636    0.342744            3
1017   1017  0.414362     0.316670  ...    0.130575    0.234952            1
1018   1018  0.369961     0.270232  ...    0.132361    0.241704            1
1019   1019  0.487804     0.285956  ...    0.133408    0.250042            1
1020   1020  0.448057     0.334272  ...    0.128321    0.259218            0
1021   1021  0.111003     0.225131  ...    0.059805    0.621018            3
1022   1022 -0.001604     0.219127  ...    0.095865    0.515664            3
1023   1023  0.525843     0.319567  ...    0.121216    0.352608            3

[16 rows x 20 columns]
MLLITE_CLASS_SQL_ERROR ('FourClass_10_original', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 1.3444699060548152e-07
      Py_Proba_0  SQL_Proba_0   SQL_Error_0
1008    0.340673     0.340673 -4.997392e-08
1009    0.267489     0.267489  1.322147e-07
1010    0.265106     0.265106 -2.934425e-07
1011    0.167750     0.167749  3.859056e-07
1012    0.157010     0.157010  3.025727e-07
1013    0.186711     0.186711  1.069782e-07
1014    0.325472     0.325472 -2.733372e-08
1015    0.287233     0.287233  1.253712e-07
1016    0.301354     0.301354  1.427255e-09
1017    0.316670     0.316670  2.115822e-07
1018    0.270232     0.270232  1.138543e-07
1019    0.285956     0.285956  1.180549e-07
1020    0.334272     0.334272 -5.259040e-08
1021    0.225131     0.225131  1.289727e-08
1022    0.219128     0.219127  3.105272e-07
1023    0.319567     0.319567  1.309587e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_10_original', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 2.9929974443007395e-07
      Py_Proba_1  SQL_Proba_1   SQL_Error_1
1008    0.223188     0.223188  4.680840e-08
1009    0.360174     0.360174 -3.627643e-07
1010    0.163802     0.163802  9.144534e-08
1011    0.541721     0.541722 -9.050510e-07
1012    0.564801     0.564802 -7.831472e-07
1013    0.504228     0.504228 -4.289312e-07
1014    0.308627     0.308627 -1.077674e-07
1015    0.198553     0.198553 -7.185353e-08
1016    0.232265     0.232265  1.428379e-07
1017    0.317802     0.317803 -4.407299e-07
1018    0.355703     0.355704 -2.910113e-07
1019    0.330594     0.330595 -3.129175e-07
1020    0.278189     0.278189 -9.326489e-08
1021    0.094046     0.094046  2.075181e-07
1022    0.169344     0.169344  2.269752e-07
1023    0.206609     0.206609 -1.195577e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_10_original', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 8.07386743846828e-08
      Py_Proba_2  SQL_Proba_2   SQL_Error_2
1008    0.123264     0.123264  6.507953e-08
1009    0.132137     0.132137  6.464245e-08
1010    0.105228     0.105228  2.258128e-07
1011    0.115051     0.115051  1.917530e-07
1012    0.110141     0.110141  1.587329e-07
1013    0.119748     0.119748  8.994593e-08
1014    0.130382     0.130382  6.487808e-08
1015    0.116877     0.116877  8.176521e-08
1016    0.123636     0.123636  1.100386e-07
1017    0.130575     0.130575  4.523542e-08
1018    0.132361     0.132361  3.842613e-08
1019    0.133408     0.133408  2.098803e-08
1020    0.128321     0.128320  4.891173e-08
1021    0.059805     0.059805  2.784665e-07
1022    0.095865     0.095864  2.408840e-07
1023    0.121216     0.121216  5.382402e-08
MLLITE_CLASS_SQL_ERROR ('FourClass_10_original', 'MLPClassifier', 'duckdb') ('Py_Proba_3', 'SQL_Proba_3') 2.5056691249259627e-07
      Py_Proba_3  SQL_Proba_3   SQL_Error_3
1008    0.312875     0.312875 -9.171633e-08
1009    0.240200     0.240200  1.659071e-07
1010    0.465864     0.465864  5.986677e-09
1011    0.175479     0.175478  3.944476e-07
1012    0.168048     0.168048  3.292922e-07
1013    0.189313     0.189313  1.649518e-07
1014    0.235520     0.235520  1.596300e-07
1015    0.397337     0.397337 -1.874370e-07
1016    0.342744     0.342745 -2.096003e-07
1017    0.234952     0.234952  2.286158e-07
1018    0.241704     0.241704  1.536320e-07
1019    0.250042     0.250042  1.291710e-07
1020    0.259218     0.259218  1.267459e-07
1021    0.621018     0.621019 -4.504532e-07
1022    0.515664     0.515664 -8.156394e-07
1023    0.352608     0.352608 -1.173791e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_original', 'MLPClassifier', 'duckdb', 'Success')
      Py_Decision  SQL_Decision
1008            0             0
1009            1             1
1010            3             3
1011            1             1
1012            1             1
1013            1             1
1014            0             0
1015            3             3
1016            3             3
1017            1             1
1018            1             1
1019            1             1
1020            0             0
1021            3             3
1022            3             3
1023            3             3
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_original_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_original', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.477418 + 0.045240 * t."OUT_0"  + 0.013316 * t."OUT_1"  + 0.529895 * t."OUT_2"  + 0.776123 * t."OUT_3"  + 0.282606 * t."OUT_4"  + 0.238465 * t."OUT_5"  + -0.087671 * t."OUT_
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_original', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_original', 'MLPClassifier', 'sqlite')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_original', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 1024 entries, 0 to 1023
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     1024 non-null   float32
 1   X_1     1024 non-null   float32
 2   X_2     1024 non-null   float32
 3   X_3     1024 non-null   float32
 4   X_4     1024 non-null   float32
 5   X_5     1024 non-null   float32
 6   X_6     1024 non-null   float32
 7   X_7     1024 non-null   float32
 8   X_8     1024 non-null   float32
 9   X_9     1024 non-null   float32
dtypes: float32(10)
memory usage: 48.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.104915  0.852920  0.507679  ...  0.479871 -1.472978 -1.793182
1      1.845877 -1.230132  0.868872  ... -3.816458  0.362403 -0.619445
2     -2.837179  1.477195  0.565303  ... -0.012256  1.102744  1.483759
3     -0.817915  0.349464 -0.778337  ... -1.054359 -0.344547 -0.450057
4      2.867865 -1.912016  0.005109  ... -1.535723 -0.616466 -0.572385
...         ...       ...       ...  ...       ...       ...       ...
1019  -2.095001  1.294078 -1.552071  ...  1.112683 -3.931551 -1.074179
1020  -1.743265  0.891375  1.671782  ...  0.265348 -0.360963  0.011059
1021  -1.760887  1.921145  0.350258  ... -1.772515  2.763857 -0.710372
1022  -1.134328  1.876722  2.781903  ... -0.109672  2.604619  0.626265
1023  -0.770972  1.261518  1.808595  ... -0.898929 -1.336243  0.434694

[1024 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('FourClass_10_original', 'MLPClassifier', 'sqlite', '')
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_original_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_original', 'MLPClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.477418 + 0.045240 * t."OUT_0"  + 0.013316 * t."OUT_1"  + 0.529895 * t."OUT_2"  + 0.776123 * t."OUT_3"  + 0.282606 * t."OUT_4"  + 0.238465 * t."OUT_5"  + -0.087671 * t."OUT_
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_original', 'MLPClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_original', 'MLPClassifier', 'pgsql')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_original', 'MLPClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
