         X_0       X_1       X_2  ...      X_98      X_99  target
0  -0.001923 -2.371688 -1.181275  ... -0.370192  0.432550       0
1  -0.094974  0.975498  0.650450  ... -0.220261  0.222239       1
2   0.060564 -1.800755  0.053222  ...  0.793880 -0.469869       0
3  -0.113704  0.680545 -0.819322  ...  0.428237 -0.069851       1
4  -0.494085  0.103852  0.838905  ... -0.711862 -0.910029       1
..       ...       ...       ...  ...       ...       ...     ...
59 -1.169706  0.833569 -1.073999  ... -0.652372  0.767728       1
60 -2.264480 -0.441056  0.919001  ... -0.118272  1.843460       0
61  0.085538 -0.999074  1.070574  ...  0.081873  0.336336       0
62  2.044900  2.532641  1.239658  ...  2.476811 -0.145179       1
63 -0.178941  1.595470  1.800108  ... -0.852391  0.839960       0

[64 rows x 101 columns]
MLLITE_MODEL_SET_OPTIONS RidgeClassifier {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { "alpha" : 0.0000001,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
('OPERATION_START', 'TRAINING')
[[-1.92301034e-03 -2.37168813e+00 -1.18127453e+00 -8.41143429e-01
  -2.27833748e+00  5.56165516e-01 -4.33400422e-01  6.68530583e-01
  -4.45269734e-01  1.08730054e+00  9.94111359e-01  6.15174830e-01
  -1.42712057e-01 -5.43691695e-01  2.51998758e+00 -5.76757491e-01
  -4.96940762e-01 -1.37897694e+00 -1.15515006e+00 -5.45445085e-01
   9.39146876e-01  5.58746934e-01  6.42707646e-02  9.41048622e-01
   3.70287567e-01  3.05628687e-01  6.59754872e-01 -5.34938514e-01
   3.41925710e-01 -9.02376890e-01  2.64374584e-01  1.05001062e-01
   1.58149529e+00 -2.39867258e+00  3.65284145e-01 -1.43215582e-01
  -6.91276610e-01 -1.09551179e+00  6.00470424e-01 -1.27839279e+00
  -1.51853383e+00 -7.39996552e-01 -1.09941888e+00 -1.00493443e+00
   5.02316713e-01  5.94181597e-01 -4.22067046e-01  5.80759704e-01
  -9.45604265e-01 -8.63473296e-01  1.73380065e+00  4.05579746e-01
  -1.31068170e+00 -2.56809741e-01  2.29151353e-01  3.84321451e-01
  -5.51349640e-01  1.19658613e+00  3.84441763e-01 -3.77902836e-01
   6.52891636e-01 -1.64592862e+00  1.05294979e+00  8.23636234e-01
   1.37784421e+00 -7.36219212e-02  1.61197138e+00 -1.98621261e+00
   1.18670213e+00  1.34875977e+00 -3.60972047e-01 -2.41051650e+00
  -1.94886446e+00 -6.28324568e-01 -1.05058098e+00 -2.54030657e+00
   1.56220317e-01  1.23859513e+00 -8.52460384e-01 -1.03192151e+00
   7.05807090e-01  3.12049419e-01  1.97033249e-02 -1.49339557e+00
  -9.82222795e-01 -2.90390223e-01  9.48299840e-02 -1.34775198e+00
  -5.61226130e-01 -4.61151361e-01  6.03559203e-02  1.79786313e+00
   4.18422371e-01  1.31290972e+00 -5.27386606e-01  7.88664445e-02
  -4.97837096e-01 -1.82821357e+00 -3.70192051e-01  4.32550102e-01]
 [-9.49740633e-02  9.75498080e-01  6.50450408e-01 -1.63987532e-01
   1.19377956e-01 -8.87404203e-01 -9.85744298e-01 -1.57699615e-01
  -5.53503856e-02 -4.89691913e-01  3.95107746e-01 -1.86406958e+00
   2.06569105e-01  1.19034803e+00  9.08305228e-01 -6.49589598e-01
   8.17796350e-01 -5.65862536e-01 -1.62303770e+00  1.96794593e+00
  -9.01196182e-01  2.21370864e+00 -1.26184642e+00  7.29401052e-01
   1.97460622e-01  5.53488255e-01 -4.16989103e-02  2.21864507e-01
  -1.60427725e+00 -1.14986289e+00  7.22467899e-01 -1.29073668e+00
  -6.89864635e-01 -9.29718554e-01  5.53363264e-01  7.69885540e-01
   3.78352642e-01  9.23741400e-01  2.08281234e-01  3.80240083e-02
  -8.87683213e-01  3.33101004e-01  1.00212204e+00  1.69690156e+00
   2.44307727e-01 -1.86227322e+00 -4.06760365e-01 -6.38921678e-01
  -1.67613909e-01  1.53844684e-01  8.42663527e-01 -1.62592280e+00
  -1.59404182e+00  7.38830745e-01 -8.74506593e-01 -1.22548962e+00
  -5.25257468e-01 -4.70152795e-01 -1.15468964e-01  4.96193357e-02
  -8.19156051e-01  2.99073744e+00  4.35046047e-01 -7.59149939e-02
  -1.56339154e-01 -6.03336692e-01 -6.89302310e-02 -2.13743591e+00
   2.04948735e+00 -1.69878006e+00  1.88749945e+00  4.05677646e-01
  -5.13272583e-01 -5.22737443e-01  1.29273057e+00  1.05886006e+00
  -3.68327975e-01  5.86420834e-01  1.94629407e+00  3.96328539e-01
  -2.22653337e-02  1.84837833e-01  1.55221510e+00  7.67667949e-01
   4.12257463e-01 -4.74151075e-02 -8.58929634e-01 -3.77886832e-01
   8.46213162e-01  3.82268399e-01  4.52266574e-01  3.67907345e-01
  -1.74708021e+00  2.97413111e-01  1.39319599e-01  6.18183054e-02
  -1.14589304e-01 -4.91930753e-01 -2.20261484e-01  2.22238824e-01]
 [ 6.05639964e-02 -1.80075538e+00  5.32221198e-02  1.13705254e+00
  -1.11454320e+00 -6.12991691e-01  6.58748865e-01 -6.18573092e-02
  -1.36188239e-01 -6.56564057e-01 -3.13579798e-01  2.24243671e-01
   4.27837819e-01  1.69016683e+00  1.13053429e+00 -1.34645033e+00
   4.66799051e-01 -1.12207568e+00 -1.80836928e+00  2.61885583e-01
  -1.46927464e+00 -2.81107831e+00  4.71088886e-01 -9.81634736e-01
   1.54162824e-01 -9.45118725e-01 -7.67153800e-01  2.78682500e-01
  -3.97465616e-01 -3.84304225e-01 -2.76822597e-02 -9.13487732e-01
   5.98323822e-01  7.34539688e-01  1.80665767e+00 -1.05402780e+00
  -2.37955928e+00 -1.01849586e-01 -1.25161910e+00 -3.40773277e-02
  -5.89699388e-01  4.64297593e-01 -7.69342899e-01 -4.94058549e-01
   1.90302110e+00 -1.28648996e+00 -2.02911228e-01  1.30722094e+00
  -9.35619593e-01 -7.99053609e-01 -8.04178536e-01 -1.16746537e-01
   1.43000674e+00  5.87966681e-01 -7.76776969e-01  1.36388794e-01
  -1.52828979e+00  1.08090746e+00  1.06615996e+00  6.13719285e-01
  -1.56638134e+00 -2.99079442e+00 -9.23732638e-01  1.24830830e+00
  -3.28231335e-01 -7.79168904e-01 -2.46622109e+00  7.15086102e-01
  -1.71361104e-01  1.16359353e+00  4.88843828e-01  8.57221186e-01
  -1.30257130e+00  7.77815223e-01  1.57720637e+00  2.45493579e+00
   8.09955537e-01  2.80593574e-01  4.77433234e-01 -2.73493845e-02
   1.58274734e+00  1.18173122e+00  1.69938195e+00  1.51718628e+00
  -1.84085965e-01  6.12297058e-01 -1.40703619e-01  9.34502482e-01
   3.93216848e-01 -9.26083088e-01  7.44229436e-01  2.88019562e+00
   1.62651956e+00 -1.24643338e+00  1.11573339e-02  1.65077448e-01
   3.82369637e+00  1.63663363e+00  7.93880284e-01 -4.69868749e-01]
 [-1.13704078e-01  6.80544913e-01 -8.19322228e-01 -9.69877481e-01
   7.71628141e-01 -1.57383764e+00  2.48730704e-01  5.41360080e-01
  -1.59036744e+00 -3.12054634e-01 -1.64359498e+00  1.50122166e+00
  -1.00549912e+00 -1.26486790e+00 -2.33127594e+00  1.01962104e-01
   5.75607657e-01 -1.20477211e+00 -9.19741020e-02 -1.16153848e+00
   2.32242107e+00  1.63334921e-01  1.69249582e+00  2.74418384e-01
  -1.81126118e+00  8.80577981e-01  7.02414274e-01  1.03724468e+00
   1.05812097e+00  1.13643229e+00 -7.69474387e-01  5.84956825e-01
  -9.34404075e-01 -1.12673771e+00 -3.59424800e-01 -1.02582085e+00
  -9.53075886e-01 -8.06699455e-01 -2.95903623e-01  1.28596336e-01
  -2.09618449e+00  1.96716547e-01 -1.33443916e+00  6.67538345e-01
  -2.04303360e+00  6.56667471e-01 -1.87788701e+00 -7.45100915e-01
   3.34480464e-01  2.30912209e-01 -1.05614233e+00  1.71417046e+00
   1.68882191e+00  1.25794733e+00  7.77477682e-01 -1.20922111e-01
   1.01463521e+00  7.94170141e-01  8.18609297e-01  1.13752067e-01
   7.90019155e-01  1.38778999e-01  8.86305422e-02  1.08791220e+00
  -1.64308107e+00 -9.54914749e-01  2.37339306e+00  9.95790303e-01
  -1.40296519e-01 -4.31657374e-01 -3.15623283e-02 -1.30086195e+00
  -5.68930566e-01  5.63574135e-01 -8.70503426e-01  4.14068997e-01
  -8.70141163e-02 -1.51894724e+00 -1.23855531e+00  1.29880026e-01
  -5.59461713e-01 -1.26385403e+00  1.59277141e-01 -1.86286375e-01
   5.10727882e-01  1.43785611e-01 -1.63213980e+00  3.82019728e-01
  -1.09840834e+00 -1.70634732e-01 -4.41302881e-02 -3.41793835e-01
   3.30759794e-01  4.17531244e-02 -3.37710887e-01  1.44820738e+00
   1.34170282e+00 -7.92602599e-01  4.28236961e-01 -6.98510483e-02]
 [-4.94084507e-01  1.03852168e-01  8.38904679e-01 -7.35904038e-01
  -7.04967678e-02  5.73717237e-01  2.18849331e-01  1.05623102e+00
  -1.25785077e+00  1.13013601e+00 -1.55437517e+00  9.51525688e-01
  -1.67592776e+00 -3.48637164e-01  1.60759163e+00  6.90805376e-01
  -1.13699162e+00  9.32226717e-01 -8.86185884e-01  6.50337562e-02
  -6.33093655e-01 -4.60071653e-01 -3.17828417e-01 -6.01315439e-01
  -7.02504814e-02 -2.66349375e-01 -1.10489130e+00  1.07519376e+00
  -4.23042387e-01  3.45855922e-01 -5.60104251e-01  3.57963622e-01
   1.71203125e+00  1.49234402e+00 -1.28127527e+00  3.17688972e-01
   2.95880270e+00  8.53792131e-01 -2.06153846e+00 -3.91467154e-01
  -2.43756063e-02  1.67333499e-01  1.17837632e+00 -4.12473530e-01
   1.56250536e-01 -3.51341099e-01 -9.60100651e-01  1.04467452e+00
   1.08441925e+00  5.52181721e-01 -1.01620758e+00 -2.87865996e+00
   5.76726556e-01 -5.82755208e-01  6.56063616e-01 -1.08061683e+00
  -5.74857712e-01  7.20476925e-01 -1.94190967e+00 -5.61854243e-01
   6.89151466e-01  5.53826809e-01 -3.96725759e-02 -2.25085169e-01
   2.28897452e+00  6.30537391e-01  1.64857304e+00 -5.28170049e-01
   5.29594898e-01 -1.10107467e-01  1.42280829e+00  1.06736279e+00
  -2.18277469e-01 -2.87699342e-01  4.86762732e-01 -1.59002244e+00
   5.11812679e-02 -4.70185161e-01  1.38356775e-01  7.31057286e-01
  -1.03853390e-01  4.13611174e-01  4.17555958e-01  1.10078800e+00
   8.31761479e-01  1.25986600e+00  2.73322630e+00  1.30618227e+00
  -1.60953015e-01 -1.14850438e+00 -1.69689417e+00 -4.59983468e-01
   1.92816043e+00 -1.38011467e+00  1.83180821e+00  5.52028716e-01
   3.90167475e-01 -7.98744082e-01 -7.11862028e-01 -9.10029233e-01]] [0 1 0 1 1]
MLLITE_FIT_USING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 4 4
('OPERATION_END_ELAPSED', 0.03, 'TRAINING')
{ "alpha" : 0.0000001,   }
{ "alpha" : 0.0000001,   }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 100 },
	"classes" : [ 0, 1 ],
	"equations" : {
		"class_1" : {
			"intercept" : -0.167465,
			"coeffs" : [ -0.065824, 0.170214, -0.107565, -0.068493, 0.115024, 0.121796, -0.047109, 0.005172, 0.089224, 0.162715, -0.079149, 0.119719, 0.016897, -0.087088, 0.083283, -0.070554, -0.016709, -0.037898, 0.228948, -0.179669, 0.187460, 0.020380, -0.037970, -0.129015, -0.008958, 0.146960, -0.046528, -0.001090, -0.134297, 0.106961, -0.122439, -0.220896, 0.028229, 0.183677, 0.050027, 0.037509, -0.154468, 0.050939, 0.011170, 0.075074, -0.105360, -0.013765, -0.121208, 0.168776, -0.041765, 0.003042, 0.054148, -0.127650, 0.069400, 0.162826, 0.053973, -0.091615, 0.020842, 0.134181, 0.131316, -0.235558, 0.069716, -0.034860, -0.037456, 0.232644, 0.031175, 0.181672, 0.081640, -0.049070, 0.141853, -0.043451, 0.043152, -0.122339, -0.026675, 0.077395, -0.075449, 0.013319, -0.034997, -0.122370, -0.002006, 0.099435, -0.039288, 0.072277, -0.010824, 0.071603, 0.154134, -0.054102, 0.242759, 0.196158, 0.284719, 0.000240, -0.014958, -0.043787, 0.006879, 0.011691, -0.022347, 0.107993, 0.105420, 0.210431, 0.214516, 0.023638, -0.017314, 0.015000, 0.067656, 0.035863 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_BinaryClass_100_small_option_1.json'

MLLITE_MODEL_SET_OPTIONS RidgeClassifier {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { "alpha" : 0.0000001,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
MLLITE_RELOADING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 100 },
	"classes" : [ 0, 1 ],
	"equations" : {
		"class_1" : {
			"intercept" : -0.167465,
			"coeffs" : [ -0.065824, 0.170214, -0.107565, -0.068493, 0.115024, 0.121796, -0.047109, 0.005172, 0.089224, 0.162715, -0.079149, 0.119719, 0.016897, -0.087088, 0.083283, -0.070554, -0.016709, -0.037898, 0.228948, -0.179669, 0.187460, 0.020380, -0.037970, -0.129015, -0.008958, 0.146960, -0.046528, -0.001090, -0.134297, 0.106961, -0.122439, -0.220896, 0.028229, 0.183677, 0.050027, 0.037509, -0.154468, 0.050939, 0.011170, 0.075074, -0.105360, -0.013765, -0.121208, 0.168776, -0.041765, 0.003042, 0.054148, -0.127650, 0.069400, 0.162826, 0.053973, -0.091615, 0.020842, 0.134181, 0.131316, -0.235558, 0.069716, -0.034860, -0.037456, 0.232644, 0.031175, 0.181672, 0.081640, -0.049070, 0.141853, -0.043451, 0.043152, -0.122339, -0.026675, 0.077395, -0.075449, 0.013319, -0.034997, -0.122370, -0.002006, 0.099435, -0.039288, 0.072277, -0.010824, 0.071603, 0.154134, -0.054102, 0.242759, 0.196158, 0.284719, 0.000240, -0.014958, -0.043787, 0.006879, 0.011691, -0.022347, 0.107993, 0.105420, 0.210431, 0.214516, 0.023638, -0.017314, 0.015000, 0.067656, 0.035863 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1 ],
	"dataset" : 	{
		"dataset_features" : 100,
		"dataset_rows" : 64
	},
	"equations" : 	{
		"class_1" : 	{
			"coeffs" : [ -0.065824, 0.170214, -0.107565, -0.068493, 0.115024, 0.121796, -0.047109, 0.005172, 0.089224, 0.162715, -0.079149, 0.119719, 0.016897, -0.087088, 0.083283, -0.070554, -0.016709, -0.037898, 0.228948, -0.179669, 0.18746, 0.02038, -0.03797, -0.129015, -0.008958, 0.14696, -0.046528, -0.00109, -0.134297, 0.106961, -0.122439, -0.220896, 0.028229, 0.183677, 0.050027, 0.037509, -0.154468, 0.050939, 0.01117, 0.075074, -0.10536, -0.013765, -0.121208, 0.168776, -0.041765, 0.003042, 0.054148, -0.12765, 0.0694, 0.162826, 0.053973, -0.091615, 0.020842, 0.134181, 0.131316, -0.235558, 0.069716, -0.03486, -0.037456, 0.232644, 0.031175, 0.181672, 0.08164, -0.04907, 0.141853, -0.043451, 0.043152, -0.122339, -0.026675, 0.077395, -0.075449, 0.013319, -0.034997, -0.12237, -0.002006, 0.099435, -0.039288, 0.072277, -0.010824, 0.071603, 0.154134, -0.054102, 0.242759, 0.196158, 0.284719, 0.00024, -0.014958, -0.043787, 0.006879, 0.011691, -0.022347, 0.107993, 0.10542, 0.210431, 0.214516, 0.023638, -0.017314, 0.015, 0.067656, 0.035863 ],
			"intercept" : -0.167465
		}
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "alpha" : 0.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.7332 0.2668]
 [0.2676 0.7324]
 [0.7293 0.2707]
 [0.271  0.729 ]
 [0.2684 0.7316]
 [0.2693 0.7307]
 [0.2646 0.7354]
 [0.2713 0.7287]
 [0.7334 0.2666]
 [0.272  0.728 ]
 [0.7306 0.2694]
 [0.2707 0.7293]
 [0.7312 0.2688]
 [0.2665 0.7335]
 [0.7299 0.2701]
 [0.7313 0.2687]
 [0.7306 0.2694]
 [0.2681 0.7319]
 [0.2665 0.7335]
 [0.2682 0.7318]
 [0.7321 0.2679]
 [0.7331 0.2669]
 [0.7293 0.2707]
 [0.7304 0.2696]
 [0.7331 0.2669]
 [0.7325 0.2675]
 [0.7284 0.2716]
 [0.7297 0.2703]
 [0.729  0.271 ]
 [0.2681 0.7319]
 [0.2677 0.7323]
 [0.2668 0.7332]
 [0.7314 0.2686]
 [0.2678 0.7322]
 [0.7335 0.2665]
 [0.7303 0.2697]
 [0.268  0.732 ]
 [0.7324 0.2676]
 [0.7307 0.2693]
 [0.2704 0.7296]
 [0.2731 0.7269]
 [0.7308 0.2692]
 [0.2714 0.7286]
 [0.732  0.268 ]
 [0.2705 0.7295]
 [0.2699 0.7301]
 [0.7263 0.2737]
 [0.729  0.271 ]
 [0.7302 0.2698]
 [0.271  0.729 ]
 [0.7324 0.2676]
 [0.2672 0.7328]
 [0.2707 0.7293]
 [0.7285 0.2715]
 [0.2689 0.7311]
 [0.7299 0.2701]
 [0.7335 0.2665]
 [0.7332 0.2668]
 [0.7309 0.2691]
 [0.2719 0.7281]
 [0.734  0.266 ]
 [0.7308 0.2692]
 [0.2647 0.7353]
 [0.7291 0.2709]]
(64, 2)
(64,) float32
MODEL_PERFS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': '{"alpha" : 0.0000001}', 'dataset': 'BinaryClass_100_small', 'size': 64, 'accuracy': 1.0, 'auc': 1.0}
WRITING_PERF_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_BinaryClass_100_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': '{"alpha" : 0.0000001}', 'dataset': 'BinaryClass_100_small', 'training_time_in_sec': 0.03, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_BinaryClass_100_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_100_small', 'RidgeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_100_small', 'RidgeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_100_small', 'RidgeClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_100_small', 'RidgeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 100 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
 14  X_14    64 non-null     float32
 15  X_15    64 non-null     float32
 16  X_16    64 non-null     float32
 17  X_17    64 non-null     float32
 18  X_18    64 non-null     float32
 19  X_19    64 non-null     float32
 20  X_20    64 non-null     float32
 21  X_21    64 non-null     float32
 22  X_22    64 non-null     float32
 23  X_23    64 non-null     float32
 24  X_24    64 non-null     float32
 25  X_25    64 non-null     float32
 26  X_26    64 non-null     float32
 27  X_27    64 non-null     float32
 28  X_28    64 non-null     float32
 29  X_29    64 non-null     float32
 30  X_30    64 non-null     float32
 31  X_31    64 non-null     float32
 32  X_32    64 non-null     float32
 33  X_33    64 non-null     float32
 34  X_34    64 non-null     float32
 35  X_35    64 non-null     float32
 36  X_36    64 non-null     float32
 37  X_37    64 non-null     float32
 38  X_38    64 non-null     float32
 39  X_39    64 non-null     float32
 40  X_40    64 non-null     float32
 41  X_41    64 non-null     float32
 42  X_42    64 non-null     float32
 43  X_43    64 non-null     float32
 44  X_44    64 non-null     float32
 45  X_45    64 non-null     float32
 46  X_46    64 non-null     float32
 47  X_47    64 non-null     float32
 48  X_48    64 non-null     float32
 49  X_49    64 non-null     float32
 50  X_50    64 non-null     float32
 51  X_51    64 non-null     float32
 52  X_52    64 non-null     float32
 53  X_53    64 non-null     float32
 54  X_54    64 non-null     float32
 55  X_55    64 non-null     float32
 56  X_56    64 non-null     float32
 57  X_57    64 non-null     float32
 58  X_58    64 non-null     float32
 59  X_59    64 non-null     float32
 60  X_60    64 non-null     float32
 61  X_61    64 non-null     float32
 62  X_62    64 non-null     float32
 63  X_63    64 non-null     float32
 64  X_64    64 non-null     float32
 65  X_65    64 non-null     float32
 66  X_66    64 non-null     float32
 67  X_67    64 non-null     float32
 68  X_68    64 non-null     float32
 69  X_69    64 non-null     float32
 70  X_70    64 non-null     float32
 71  X_71    64 non-null     float32
 72  X_72    64 non-null     float32
 73  X_73    64 non-null     float32
 74  X_74    64 non-null     float32
 75  X_75    64 non-null     float32
 76  X_76    64 non-null     float32
 77  X_77    64 non-null     float32
 78  X_78    64 non-null     float32
 79  X_79    64 non-null     float32
 80  X_80    64 non-null     float32
 81  X_81    64 non-null     float32
 82  X_82    64 non-null     float32
 83  X_83    64 non-null     float32
 84  X_84    64 non-null     float32
 85  X_85    64 non-null     float32
 86  X_86    64 non-null     float32
 87  X_87    64 non-null     float32
 88  X_88    64 non-null     float32
 89  X_89    64 non-null     float32
 90  X_90    64 non-null     float32
 91  X_91    64 non-null     float32
 92  X_92    64 non-null     float32
 93  X_93    64 non-null     float32
 94  X_94    64 non-null     float32
 95  X_95    64 non-null     float32
 96  X_96    64 non-null     float32
 97  X_97    64 non-null     float32
 98  X_98    64 non-null     float32
 99  X_99    64 non-null     float32
dtypes: float32(100)
memory usage: 25.5 KB
            X_0       X_1       X_2  ...      X_97      X_98      X_99
index                                ...                              
0     -0.001923 -2.371688 -1.181275  ... -1.828214 -0.370192  0.432550
1     -0.094974  0.975498  0.650450  ... -0.491931 -0.220261  0.222239
2      0.060564 -1.800755  0.053222  ...  1.636634  0.793880 -0.469869
3     -0.113704  0.680545 -0.819322  ... -0.792603  0.428237 -0.069851
4     -0.494085  0.103852  0.838905  ... -0.798744 -0.711862 -0.910029
...         ...       ...       ...  ...       ...       ...       ...
59    -1.169706  0.833569 -1.073999  ...  2.771628 -0.652372  0.767728
60    -2.264480 -0.441056  0.919001  ...  0.156628 -0.118272  1.843460
61     0.085538 -0.999074  1.070574  ... -0.772819  0.081873  0.336336
62     2.044900  2.532641  1.239658  ...  0.677309  2.476811 -0.145179
63    -0.178941  1.595470  1.800108  ... -1.020739 -0.852391  0.839960

[64 rows x 100 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Decision       64 non-null     int64  
 8   DecisionProba  64 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 4.6 KB
    index   Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0  0.505448  0.733196  ...   -1.321239         0       0.733196
1       1 -0.503399  0.267607  ...   -0.311438         1       0.732393
2       2  0.495463  0.729271  ...   -1.306637         0       0.729271
3       3 -0.494846  0.270973  ...   -0.316045         1       0.729027
4       4 -0.501346  0.268412  ...   -0.312538         1       0.731588
..    ...       ...       ...  ...         ...       ...            ...
59     59 -0.492515  0.271895  ...   -0.317310         1       0.728105
60     60  0.507543  0.734014  ...   -1.324313         0       0.734014
61     61  0.499367  0.730810  ...   -1.312336         0       0.730810
62     62 -0.510906  0.264674  ...   -0.307442         1       0.735326
63     63  0.495089  0.729123  ...   -1.306090         0       0.729123

[64 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
48     48  0.497755     0.730175  ...    0.730174    0.269826            0
49     49 -0.494863     0.270966  ...    0.270966    0.729034            1
50     50  0.503546     0.732451  ...    0.732450    0.267550            0
51     51 -0.504398     0.267215  ...    0.267216    0.732784            1
52     52 -0.495589     0.270679  ...    0.270678    0.729322            1
53     53  0.493550     0.728515  ...    0.728515    0.271485            0
54     54 -0.500073     0.268913  ...    0.268912    0.731088            1
55     55  0.497137     0.729931  ...    0.729931    0.270069            0
56     56  0.506164     0.733476  ...    0.733475    0.266525            0
57     57  0.505476     0.733206  ...    0.733207    0.266793            0
58     58  0.499643     0.730918  ...    0.730918    0.269082            0
59     59 -0.492515     0.271895  ...    0.271895    0.728105            1
60     60  0.507543     0.734014  ...    0.734014    0.265986            0
61     61  0.499367     0.730810  ...    0.730810    0.269190            0
62     62 -0.510906     0.264674  ...    0.264674    0.735326            1
63     63  0.495089     0.729123  ...    0.729123    0.270878            0

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('BinaryClass_100_small', 'RidgeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 4.4244880844680756e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
48    0.730174     0.730175 -8.184281e-07
49    0.270966     0.270966 -6.221622e-07
50    0.732450     0.732451 -1.072117e-06
51    0.267216     0.267215  2.590771e-07
52    0.270678     0.270679 -1.193364e-06
53    0.728515     0.728515  3.875137e-08
54    0.268912     0.268913 -1.070207e-06
55    0.729931     0.729931 -2.504176e-07
56    0.733475     0.733476 -7.305413e-07
57    0.733207     0.733206  2.147279e-07
58    0.730918     0.730918  2.571281e-07
59    0.271895     0.271895 -1.683629e-07
60    0.734014     0.734014 -2.371476e-07
61    0.730810     0.730810  3.910151e-07
62    0.264674     0.264674 -2.302683e-07
63    0.729123     0.729123 -4.634074e-07
MLLITE_CLASS_SQL_ERROR ('BinaryClass_100_small', 'RidgeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 4.405861633027808e-07
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
48    0.269826     0.269825  7.290211e-07
49    0.729034     0.729034  6.221622e-07
50    0.267550     0.267549  1.131721e-06
51    0.732784     0.732785 -2.292747e-07
52    0.729322     0.729321  1.163561e-06
53    0.271485     0.271485 -1.281583e-07
54    0.731088     0.731087  1.040405e-06
55    0.270069     0.270069  2.504176e-07
56    0.266525     0.266524  7.007390e-07
57    0.266793     0.266794 -1.849256e-07
58    0.269082     0.269082 -2.273257e-07
59    0.728105     0.728105  1.087582e-07
60    0.265986     0.265986  2.669499e-07
61    0.269190     0.269190 -3.612128e-07
62    0.735326     0.735326  2.302683e-07
63    0.270878     0.270877  4.932097e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('BinaryClass_100_small', 'RidgeClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
48            0             0
49            1             1
50            0             0
51            1             1
52            1             1
53            0             0
54            1             1
55            0             0
56            0             0
57            0             0
58            0             0
59            1             1
60            0             0
61            0             0
62            1             1
63            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_BinaryClass_100_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_100_small', 'RidgeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_100_small', 'RidgeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_100_small', 'RidgeClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_100_small', 'RidgeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 100 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
 14  X_14    64 non-null     float32
 15  X_15    64 non-null     float32
 16  X_16    64 non-null     float32
 17  X_17    64 non-null     float32
 18  X_18    64 non-null     float32
 19  X_19    64 non-null     float32
 20  X_20    64 non-null     float32
 21  X_21    64 non-null     float32
 22  X_22    64 non-null     float32
 23  X_23    64 non-null     float32
 24  X_24    64 non-null     float32
 25  X_25    64 non-null     float32
 26  X_26    64 non-null     float32
 27  X_27    64 non-null     float32
 28  X_28    64 non-null     float32
 29  X_29    64 non-null     float32
 30  X_30    64 non-null     float32
 31  X_31    64 non-null     float32
 32  X_32    64 non-null     float32
 33  X_33    64 non-null     float32
 34  X_34    64 non-null     float32
 35  X_35    64 non-null     float32
 36  X_36    64 non-null     float32
 37  X_37    64 non-null     float32
 38  X_38    64 non-null     float32
 39  X_39    64 non-null     float32
 40  X_40    64 non-null     float32
 41  X_41    64 non-null     float32
 42  X_42    64 non-null     float32
 43  X_43    64 non-null     float32
 44  X_44    64 non-null     float32
 45  X_45    64 non-null     float32
 46  X_46    64 non-null     float32
 47  X_47    64 non-null     float32
 48  X_48    64 non-null     float32
 49  X_49    64 non-null     float32
 50  X_50    64 non-null     float32
 51  X_51    64 non-null     float32
 52  X_52    64 non-null     float32
 53  X_53    64 non-null     float32
 54  X_54    64 non-null     float32
 55  X_55    64 non-null     float32
 56  X_56    64 non-null     float32
 57  X_57    64 non-null     float32
 58  X_58    64 non-null     float32
 59  X_59    64 non-null     float32
 60  X_60    64 non-null     float32
 61  X_61    64 non-null     float32
 62  X_62    64 non-null     float32
 63  X_63    64 non-null     float32
 64  X_64    64 non-null     float32
 65  X_65    64 non-null     float32
 66  X_66    64 non-null     float32
 67  X_67    64 non-null     float32
 68  X_68    64 non-null     float32
 69  X_69    64 non-null     float32
 70  X_70    64 non-null     float32
 71  X_71    64 non-null     float32
 72  X_72    64 non-null     float32
 73  X_73    64 non-null     float32
 74  X_74    64 non-null     float32
 75  X_75    64 non-null     float32
 76  X_76    64 non-null     float32
 77  X_77    64 non-null     float32
 78  X_78    64 non-null     float32
 79  X_79    64 non-null     float32
 80  X_80    64 non-null     float32
 81  X_81    64 non-null     float32
 82  X_82    64 non-null     float32
 83  X_83    64 non-null     float32
 84  X_84    64 non-null     float32
 85  X_85    64 non-null     float32
 86  X_86    64 non-null     float32
 87  X_87    64 non-null     float32
 88  X_88    64 non-null     float32
 89  X_89    64 non-null     float32
 90  X_90    64 non-null     float32
 91  X_91    64 non-null     float32
 92  X_92    64 non-null     float32
 93  X_93    64 non-null     float32
 94  X_94    64 non-null     float32
 95  X_95    64 non-null     float32
 96  X_96    64 non-null     float32
 97  X_97    64 non-null     float32
 98  X_98    64 non-null     float32
 99  X_99    64 non-null     float32
dtypes: float32(100)
memory usage: 25.5 KB
            X_0       X_1       X_2  ...      X_97      X_98      X_99
index                                ...                              
0     -0.001923 -2.371688 -1.181275  ... -1.828214 -0.370192  0.432550
1     -0.094974  0.975498  0.650450  ... -0.491931 -0.220261  0.222239
2      0.060564 -1.800755  0.053222  ...  1.636634  0.793880 -0.469869
3     -0.113704  0.680545 -0.819322  ... -0.792603  0.428237 -0.069851
4     -0.494085  0.103852  0.838905  ... -0.798744 -0.711862 -0.910029
...         ...       ...       ...  ...       ...       ...       ...
59    -1.169706  0.833569 -1.073999  ...  2.771628 -0.652372  0.767728
60    -2.264480 -0.441056  0.919001  ...  0.156628 -0.118272  1.843460
61     0.085538 -0.999074  1.070574  ... -0.772819  0.081873  0.336336
62     2.044900  2.532641  1.239658  ...  0.677309  2.476811 -0.145179
63    -0.178941  1.595470  1.800108  ... -1.020739 -0.852391  0.839960

[64 rows x 100 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Decision       64 non-null     int64  
 8   DecisionProba  64 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 4.6 KB
    index   Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0  0.505448  0.733195  ...   -1.321239         0       0.733195
1       1 -0.503399  0.267607  ...   -0.311438         1       0.732393
2       2  0.495464  0.729271  ...   -1.306637         0       0.729271
3       3 -0.494846  0.270973  ...   -0.316045         1       0.729027
4       4 -0.501346  0.268413  ...   -0.312539         1       0.731587
..    ...       ...       ...  ...         ...       ...            ...
59     59 -0.492515  0.271895  ...   -0.317310         1       0.728105
60     60  0.507543  0.734014  ...   -1.324313         0       0.734014
61     61  0.499367  0.730810  ...   -1.312336         0       0.730810
62     62 -0.510907  0.264674  ...   -0.307442         1       0.735326
63     63  0.495089  0.729123  ...   -1.306090         0       0.729123

[64 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
48     48  0.497755     0.730175  ...    0.730174    0.269826            0
49     49 -0.494863     0.270966  ...    0.270966    0.729034            1
50     50  0.503546     0.732451  ...    0.732450    0.267550            0
51     51 -0.504398     0.267215  ...    0.267216    0.732784            1
52     52 -0.495589     0.270679  ...    0.270678    0.729322            1
53     53  0.493550     0.728515  ...    0.728515    0.271485            0
54     54 -0.500073     0.268913  ...    0.268912    0.731088            1
55     55  0.497137     0.729931  ...    0.729931    0.270069            0
56     56  0.506164     0.733476  ...    0.733475    0.266525            0
57     57  0.505476     0.733206  ...    0.733207    0.266793            0
58     58  0.499643     0.730918  ...    0.730918    0.269082            0
59     59 -0.492515     0.271895  ...    0.271895    0.728105            1
60     60  0.507543     0.734014  ...    0.734014    0.265986            0
61     61  0.499367     0.730810  ...    0.730810    0.269190            0
62     62 -0.510907     0.264674  ...    0.264674    0.735326            1
63     63  0.495089     0.729123  ...    0.729123    0.270878            0

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('BinaryClass_100_small', 'RidgeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 4.384748105478245e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
48    0.730174     0.730175 -7.793266e-07
49    0.270966     0.270966 -6.377468e-07
50    0.732450     0.732451 -1.117501e-06
51    0.267216     0.267215  2.608487e-07
52    0.270678     0.270679 -1.128266e-06
53    0.728515     0.728515  8.975262e-08
54    0.268912     0.268913 -1.004115e-06
55    0.729931     0.729931 -2.854918e-07
56    0.733475     0.733476 -7.767152e-07
57    0.733207     0.733206  2.684539e-07
58    0.730918     0.730918  3.084250e-07
59    0.271895     0.271895 -1.512405e-07
60    0.734014     0.734014 -2.320614e-07
61    0.730810     0.730810  3.268451e-07
62    0.264674     0.264674 -1.470616e-07
63    0.729123     0.729123 -4.540762e-07
MLLITE_CLASS_SQL_ERROR ('BinaryClass_100_small', 'RidgeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 4.3750099559553696e-07
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
48    0.269826     0.269825  6.899196e-07
49    0.729034     0.729034  6.377468e-07
50    0.267550     0.267549  1.177106e-06
51    0.732784     0.732785 -2.310464e-07
52    0.729322     0.729321  1.098463e-06
53    0.271485     0.271485 -1.791596e-07
54    0.731088     0.731087  9.743123e-07
55    0.270069     0.270069  2.854918e-07
56    0.266525     0.266524  7.469128e-07
57    0.266793     0.266794 -2.386516e-07
58    0.269082     0.269082 -2.786227e-07
59    0.728105     0.728105  9.163582e-08
60    0.265986     0.265986  2.618637e-07
61    0.269190     0.269190 -2.970427e-07
62    0.735326     0.735326  1.470616e-07
63    0.270878     0.270877  4.838785e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('BinaryClass_100_small', 'RidgeClassifier', 'sqlite', 'Success')
    Py_Decision  SQL_Decision
48            0             0
49            1             1
50            0             0
51            1             1
52            1             1
53            0             0
54            1             1
55            0             0
56            0             0
57            0             0
58            0             0
59            1             1
60            0             0
61            0             0
62            1             1
63            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_BinaryClass_100_small_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BinaryClass_100_small', 'RidgeClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('BinaryClass_100_small', 'RidgeClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('BinaryClass_100_small', 'RidgeClassifier', 'pgsql')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BinaryClass_100_small', 'RidgeClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
