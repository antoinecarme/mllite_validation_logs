READING_CSV census_small ['data/small/census_small.csv']
    age  workclass     fnlwgt  ...  hoursperweek  native-country  target
0   2.0        0.0   188950.0  ...           3.0             0.0    >50K
1   1.0        0.0  1033222.0  ...           2.0             0.0   <=50K
2   1.0        0.0   129707.0  ...           1.0             0.0    >50K
3   1.0        0.0    78530.0  ...           4.0             0.0    >50K
4   1.0        0.0   159537.0  ...           2.0             0.0   <=50K
..  ...        ...        ...  ...           ...             ...     ...
59  1.0        0.0   112963.0  ...           2.0             0.0   <=50K
60  0.0        0.0    34307.0  ...           2.0             0.0   <=50K
61  4.0        0.0   111795.0  ...           2.0             0.0    >50K
62  4.0        0.0   411604.0  ...           2.0             0.0   <=50K
63  3.0        0.0   121441.0  ...           3.0             0.0   <=50K

[64 rows x 15 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[2.000000e+00 0.000000e+00 1.889500e+05 0.000000e+00 1.400000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 3.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.033222e+06 0.000000e+00 1.000000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 2.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.297070e+05 0.000000e+00 1.300000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  4.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 7.853000e+04 0.000000e+00 9.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 4.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.595370e+05 0.000000e+00 1.200000e+01
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 2.000000e+00 0.000000e+00]] ['>50K' '<=50K' '>50K' '>50K' '<=50K']
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_OO8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.02, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_OO8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"layers" : {
		"sizes" : [ 14, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 14 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 14,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.081865, 0.267358, -0.265554, -0.042498 ],
			"coeffs_01" : [ 0.106196, -0.405079, 0.167347, 0.018387 ],
			"coeffs_02" : [ 0.460172, 0.090351, 0.450135, -0.090487 ],
			"coeffs_03" : [ 0.573998, -0.510525, -0.241867, 0.214797 ],
			"coeffs_04" : [ 0.269660, -0.308743, -0.323726, -0.448023 ],
			"coeffs_05" : [ 0.250130, -0.569974, -0.092054, 0.026923 ],
			"coeffs_06" : [ -0.114696, -0.524515, -0.295619, 0.472280 ],
			"coeffs_07" : [ -0.042435, 0.004762, -0.516970, 0.032922 ],
			"coeffs_08" : [ -0.176366, 0.213042, -0.116169, 0.244452 ],
			"coeffs_09" : [ -0.384231, 0.505643, -0.422723, 0.310274 ],
			"coeffs_10" : [ -0.446813, 0.285505, 0.106082, 0.524453 ],
			"coeffs_11" : [ -0.394538, -0.477113, 0.163235, 0.208203 ],
			"coeffs_12" : [ 0.356231, 0.463104, 0.409475, -0.375053 ],
			"coeffs_13" : [ 0.345192, 0.470522, -0.348629, 0.257880 ],
			"intercepts" : [ 0.138890, 0.011148, 0.043370, 0.329774 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.606422, 0.121554, 0.258217, 0.406786, -0.603558, 0.458648, -0.382859, -0.653897 ],
			"coeffs_1" : [ 0.697656, 0.706566, -0.123965, -0.575044, -0.025484, 0.645295, -0.499465, 0.278759 ],
			"coeffs_2" : [ 0.318401, 0.450019, 0.591613, -0.357124, 0.297565, 0.466153, 0.528823, -0.063368 ],
			"coeffs_3" : [ -0.627765, 0.353350, 0.007842, -0.133978, -0.519289, -0.668986, -0.258634, 0.637559 ],
			"intercepts" : [ 0.029435, -0.111681, -0.195369, -0.633386, 0.235601, -0.246768, -0.263622, -0.143680 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.269611, -0.462554, -0.215160, 0.376506, 0.431074, 0.557300 ],
			"coeffs_1" : [ 0.475690, 0.340393, -0.310044, 0.061712, 0.182889, 0.443776 ],
			"coeffs_2" : [ 0.321790, -0.032525, 0.345006, 0.454500, 0.107910, -0.225065 ],
			"coeffs_3" : [ -0.178974, -0.324393, 0.344409, 0.364227, -0.452853, 0.212193 ],
			"coeffs_4" : [ -0.417195, -0.001729, 0.122957, -0.263423, 0.299111, -0.618701 ],
			"coeffs_5" : [ -0.588556, 0.457213, 0.561823, -0.433210, -0.245913, -0.494865 ],
			"coeffs_6" : [ -0.500519, -0.512915, -0.227625, -0.149899, -0.428461, -0.472013 ],
			"coeffs_7" : [ -0.579535, 0.126355, -0.429881, -0.518473, 0.129981, 0.227266 ],
			"intercepts" : [ -0.102936, 0.144331, 0.045477, -0.433148, -0.107874, 0.542555 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.892674 ],
			"coeffs_1" : [ -0.116154 ],
			"coeffs_2" : [ -0.756370 ],
			"coeffs_3" : [ -0.449855 ],
			"coeffs_4" : [ 0.385942 ],
			"coeffs_5" : [ -0.737057 ],
			"intercepts" : [ 0.351462 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_small_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('census_small', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_OO8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_OO8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"layers" : {
		"sizes" : [ 14, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 14 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 14,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.081865, 0.267358, -0.265554, -0.042498 ],
			"coeffs_01" : [ 0.106196, -0.405079, 0.167347, 0.018387 ],
			"coeffs_02" : [ 0.460172, 0.090351, 0.450135, -0.090487 ],
			"coeffs_03" : [ 0.573998, -0.510525, -0.241867, 0.214797 ],
			"coeffs_04" : [ 0.269660, -0.308743, -0.323726, -0.448023 ],
			"coeffs_05" : [ 0.250130, -0.569974, -0.092054, 0.026923 ],
			"coeffs_06" : [ -0.114696, -0.524515, -0.295619, 0.472280 ],
			"coeffs_07" : [ -0.042435, 0.004762, -0.516970, 0.032922 ],
			"coeffs_08" : [ -0.176366, 0.213042, -0.116169, 0.244452 ],
			"coeffs_09" : [ -0.384231, 0.505643, -0.422723, 0.310274 ],
			"coeffs_10" : [ -0.446813, 0.285505, 0.106082, 0.524453 ],
			"coeffs_11" : [ -0.394538, -0.477113, 0.163235, 0.208203 ],
			"coeffs_12" : [ 0.356231, 0.463104, 0.409475, -0.375053 ],
			"coeffs_13" : [ 0.345192, 0.470522, -0.348629, 0.257880 ],
			"intercepts" : [ 0.138890, 0.011148, 0.043370, 0.329774 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.606422, 0.121554, 0.258217, 0.406786, -0.603558, 0.458648, -0.382859, -0.653897 ],
			"coeffs_1" : [ 0.697656, 0.706566, -0.123965, -0.575044, -0.025484, 0.645295, -0.499465, 0.278759 ],
			"coeffs_2" : [ 0.318401, 0.450019, 0.591613, -0.357124, 0.297565, 0.466153, 0.528823, -0.063368 ],
			"coeffs_3" : [ -0.627765, 0.353350, 0.007842, -0.133978, -0.519289, -0.668986, -0.258634, 0.637559 ],
			"intercepts" : [ 0.029435, -0.111681, -0.195369, -0.633386, 0.235601, -0.246768, -0.263622, -0.143680 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.269611, -0.462554, -0.215160, 0.376506, 0.431074, 0.557300 ],
			"coeffs_1" : [ 0.475690, 0.340393, -0.310044, 0.061712, 0.182889, 0.443776 ],
			"coeffs_2" : [ 0.321790, -0.032525, 0.345006, 0.454500, 0.107910, -0.225065 ],
			"coeffs_3" : [ -0.178974, -0.324393, 0.344409, 0.364227, -0.452853, 0.212193 ],
			"coeffs_4" : [ -0.417195, -0.001729, 0.122957, -0.263423, 0.299111, -0.618701 ],
			"coeffs_5" : [ -0.588556, 0.457213, 0.561823, -0.433210, -0.245913, -0.494865 ],
			"coeffs_6" : [ -0.500519, -0.512915, -0.227625, -0.149899, -0.428461, -0.472013 ],
			"coeffs_7" : [ -0.579535, 0.126355, -0.429881, -0.518473, 0.129981, 0.227266 ],
			"intercepts" : [ -0.102936, 0.144331, 0.045477, -0.433148, -0.107874, 0.542555 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.892674 ],
			"coeffs_1" : [ -0.116154 ],
			"coeffs_2" : [ -0.756370 ],
			"coeffs_3" : [ -0.449855 ],
			"coeffs_4" : [ 0.385942 ],
			"coeffs_5" : [ -0.737057 ],
			"intercepts" : [ 0.351462 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ "<=50K", ">50K" ],
	"dataset" : 	{
		"dataset_features" : 14,
		"dataset_rows" : 64
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 14,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 14,
			"NbOutputs" : 4,
			"coeffs_00" : [ -0.081865, 0.267358, -0.265554, -0.042498 ],
			"coeffs_01" : [ 0.106196, -0.405079, 0.167347, 0.018387 ],
			"coeffs_02" : [ 0.460172, 0.090351, 0.450135, -0.090487 ],
			"coeffs_03" : [ 0.573998, -0.510525, -0.241867, 0.214797 ],
			"coeffs_04" : [ 0.26966, -0.308743, -0.323726, -0.448023 ],
			"coeffs_05" : [ 0.25013, -0.569974, -0.092054, 0.026923 ],
			"coeffs_06" : [ -0.114696, -0.524515, -0.295619, 0.47228 ],
			"coeffs_07" : [ -0.042435, 0.004762, -0.51697, 0.032922 ],
			"coeffs_08" : [ -0.176366, 0.213042, -0.116169, 0.244452 ],
			"coeffs_09" : [ -0.384231, 0.505643, -0.422723, 0.310274 ],
			"coeffs_10" : [ -0.446813, 0.285505, 0.106082, 0.524453 ],
			"coeffs_11" : [ -0.394538, -0.477113, 0.163235, 0.208203 ],
			"coeffs_12" : [ 0.356231, 0.463104, 0.409475, -0.375053 ],
			"coeffs_13" : [ 0.345192, 0.470522, -0.348629, 0.25788 ],
			"intercepts" : [ 0.13889, 0.011148, 0.04337, 0.329774 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.606422, 0.121554, 0.258217, 0.406786, -0.603558, 0.458648, -0.382859, -0.653897 ],
			"coeffs_1" : [ 0.697656, 0.706566, -0.123965, -0.575044, -0.025484, 0.645295, -0.499465, 0.278759 ],
			"coeffs_2" : [ 0.318401, 0.450019, 0.591613, -0.357124, 0.297565, 0.466153, 0.528823, -0.063368 ],
			"coeffs_3" : [ -0.627765, 0.35335, 0.007842, -0.133978, -0.519289, -0.668986, -0.258634, 0.637559 ],
			"intercepts" : [ 0.029435, -0.111681, -0.195369, -0.633386, 0.235601, -0.246768, -0.263622, -0.14368 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ 0.269611, -0.462554, -0.21516, 0.376506, 0.431074, 0.5573 ],
			"coeffs_1" : [ 0.47569, 0.340393, -0.310044, 0.061712, 0.182889, 0.443776 ],
			"coeffs_2" : [ 0.32179, -0.032525, 0.345006, 0.4545, 0.10791, -0.225065 ],
			"coeffs_3" : [ -0.178974, -0.324393, 0.344409, 0.364227, -0.452853, 0.212193 ],
			"coeffs_4" : [ -0.417195, -0.001729, 0.122957, -0.263423, 0.299111, -0.618701 ],
			"coeffs_5" : [ -0.588556, 0.457213, 0.561823, -0.43321, -0.245913, -0.494865 ],
			"coeffs_6" : [ -0.500519, -0.512915, -0.227625, -0.149899, -0.428461, -0.472013 ],
			"coeffs_7" : [ -0.579535, 0.126355, -0.429881, -0.518473, 0.129981, 0.227266 ],
			"intercepts" : [ -0.102936, 0.144331, 0.045477, -0.433148, -0.107874, 0.542555 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.892674 ],
			"coeffs_1" : [ -0.116154 ],
			"coeffs_2" : [ -0.75637 ],
			"coeffs_3" : [ -0.449855 ],
			"coeffs_4" : [ 0.385942 ],
			"coeffs_5" : [ -0.737057 ],
			"intercepts" : [ 0.351462 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 14, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_OO8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('census_small', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]]
(64, 2)
(64,) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'census_small', 'size': 64, 'accuracy': 0.78125, 'auc': 0.5}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'census_small', 'training_time_in_sec': 0.019, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 10 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 11 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 12 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 13 14
{
   "Contributions" : {
      "X_0" : [ 0.000000, 0.000000 ],
      "X_1" : [ 0.000000, 0.000000 ],
      "X_2" : [ 0.000000, 0.000000 ],
      "X_3" : [ 0.000000, 0.000000 ],
      "X_4" : [ 0.000000, 0.000000 ],
      "X_5" : [ 0.000000, 0.000000 ],
      "X_6" : [ 0.000000, 0.000000 ],
      "X_7" : [ 0.000000, 0.000000 ],
      "X_8" : [ 0.000000, 0.000000 ],
      "X_9" : [ 0.000000, 0.000000 ],
      "X_10" : [ 0.000000, 0.000000 ],
      "X_11" : [ 0.000000, 0.000000 ],
      "X_12" : [ 0.000000, 0.000000 ],
      "X_13" : [ 0.000000, 0.000000 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ ],
      "class_1" : [ ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_small_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_small', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "census_small" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9",
    t."X_10" AS "OUT_10",
    t."X_11" AS "OUT_11",
    t."X_12" AS "OUT_12",
    t."X_13" AS "OUT_13"
 FROM "m
SQL_OUT_PUT_FIRST_LINES_END ('census_small', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('census_small', 'MLPClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_small', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
dtypes: float32(14)
memory usage: 4.0 KB
       X_0  X_1        X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                       ...                                  
0      2.0  0.0   188950.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
1      1.0  0.0  1033222.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
2      1.0  0.0   129707.0  0.0  13.0  0.0  ...  0.0  0.0   4.0   0.0   1.0   0.0
3      1.0  0.0    78530.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
4      1.0  0.0   159537.0  0.0  12.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
...    ...  ...        ...  ...   ...  ...  ...  ...  ...   ...   ...   ...   ...
59     1.0  0.0   112963.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
60     0.0  0.0    34307.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
61     4.0  0.0   111795.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
62     4.0  0.0   411604.0  0.0   5.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
63     3.0  0.0   121441.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0

[64 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Decision       64 non-null     int64  
 8   DecisionProba  64 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 4.6 KB
    index        Score_0  Proba_0  ...     LogProba_1  Decision  DecisionProba
0       0   24423.611328      1.0  ... -1.797693e+308         0            1.0
1       1  133553.656250      1.0  ... -1.797693e+308         0            1.0
2       2   16765.468750      1.0  ... -1.797693e+308         0            1.0
3       3   10151.032227      1.0  ... -1.797693e+308         0            1.0
4       4   20621.583984      1.0  ... -1.797693e+308         0            1.0
..    ...            ...      ...  ...            ...       ...            ...
59     59   14601.493164      1.0  ... -1.797693e+308         0            1.0
60     60    4434.463867      1.0  ... -1.797693e+308         0            1.0
61     61   14450.457031      1.0  ... -1.797693e+308         0            1.0
62     62   53203.750000      1.0  ... -1.797693e+308         0            1.0
63     63   15697.503906      1.0  ... -1.797693e+308         0            1.0

[64 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index       Score_0  SQL_Proba_0  ...  Py_Proba_0    Py_Proba_1  Py_Decision
48     48  33733.429688          1.0  ...         1.0  1.266417e-14        <=50K
49     49  13646.900391          1.0  ...         1.0  1.266417e-14        <=50K
50     50  20957.710938          1.0  ...         1.0  1.266417e-14        <=50K
51     51   7290.295898          1.0  ...         1.0  1.266417e-14        <=50K
52     52  28760.679688          1.0  ...         1.0  1.266417e-14        <=50K
53     53  22210.716797          1.0  ...         1.0  1.266417e-14        <=50K
54     54  23487.699219          1.0  ...         1.0  1.266417e-14        <=50K
55     55  33547.226562          1.0  ...         1.0  1.266417e-14        <=50K
56     56  18392.949219          1.0  ...         1.0  1.266417e-14        <=50K
57     57  11212.515625          1.0  ...         1.0  1.266417e-14        <=50K
58     58   6993.131348          1.0  ...         1.0  1.266417e-14        <=50K
59     59  14601.493164          1.0  ...         1.0  1.266417e-14        <=50K
60     60   4434.463867          1.0  ...         1.0  1.266417e-14        <=50K
61     61  14450.457031          1.0  ...         1.0  1.266417e-14        <=50K
62     62  53203.750000          1.0  ...         1.0  1.266417e-14        <=50K
63     63  15697.503906          1.0  ...         1.0  1.266417e-14        <=50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_small', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 0.0
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
48         1.0          1.0          0.0
49         1.0          1.0          0.0
50         1.0          1.0          0.0
51         1.0          1.0          0.0
52         1.0          1.0          0.0
53         1.0          1.0          0.0
54         1.0          1.0          0.0
55         1.0          1.0          0.0
56         1.0          1.0          0.0
57         1.0          1.0          0.0
58         1.0          1.0          0.0
59         1.0          1.0          0.0
60         1.0          1.0          0.0
61         1.0          1.0          0.0
62         1.0          1.0          0.0
63         1.0          1.0          0.0
MLLITE_CLASS_SQL_ERROR ('census_small', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 1.2664165777252073e-14
      Py_Proba_1  SQL_Proba_1   SQL_Error_1
48  1.266417e-14          0.0  1.266417e-14
49  1.266417e-14          0.0  1.266417e-14
50  1.266417e-14          0.0  1.266417e-14
51  1.266417e-14          0.0  1.266417e-14
52  1.266417e-14          0.0  1.266417e-14
53  1.266417e-14          0.0  1.266417e-14
54  1.266417e-14          0.0  1.266417e-14
55  1.266417e-14          0.0  1.266417e-14
56  1.266417e-14          0.0  1.266417e-14
57  1.266417e-14          0.0  1.266417e-14
58  1.266417e-14          0.0  1.266417e-14
59  1.266417e-14          0.0  1.266417e-14
60  1.266417e-14          0.0  1.266417e-14
61  1.266417e-14          0.0  1.266417e-14
62  1.266417e-14          0.0  1.266417e-14
63  1.266417e-14          0.0  1.266417e-14
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_small', 'MLPClassifier', 'duckdb', 'Success')
   Py_Decision  SQL_Decision
48       <=50K             0
49       <=50K             0
50       <=50K             0
51       <=50K             0
52       <=50K             0
53       <=50K             0
54       <=50K             0
55       <=50K             0
56       <=50K             0
57       <=50K             0
58       <=50K             0
59       <=50K             0
60       <=50K             0
61       <=50K             0
62       <=50K             0
63       <=50K             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_small', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "census_small" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9",
    t."X_10" AS "OUT_10",
    t."X_11" AS "OUT_11",
    t."X_12" AS "OUT_12",
    t."X_13" AS "OUT_13"
 FROM "m
SQL_OUT_PUT_FIRST_LINES_END ('census_small', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('census_small', 'MLPClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_small', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
dtypes: float32(14)
memory usage: 4.0 KB
       X_0  X_1        X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                       ...                                  
0      2.0  0.0   188950.0  0.0  14.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0
1      1.0  0.0  1033222.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
2      1.0  0.0   129707.0  0.0  13.0  0.0  ...  0.0  0.0   4.0   0.0   1.0   0.0
3      1.0  0.0    78530.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   4.0   0.0
4      1.0  0.0   159537.0  0.0  12.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
...    ...  ...        ...  ...   ...  ...  ...  ...  ...   ...   ...   ...   ...
59     1.0  0.0   112963.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
60     0.0  0.0    34307.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
61     4.0  0.0   111795.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
62     4.0  0.0   411604.0  0.0   5.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
63     3.0  0.0   121441.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   3.0   0.0

[64 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('census_small', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_small', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
