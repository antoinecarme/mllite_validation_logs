         X_0       X_1       X_2  ...      X_98      X_99  target
0   0.935563  2.247500 -1.070940  ... -0.177791 -0.249523       3
1   0.293314 -1.260450 -3.448018  ...  0.164190  2.205145       2
2   0.596661  1.589408 -0.810968  ...  0.026429 -0.565740       0
3   1.456436 -2.080544  0.694122  ...  1.059889  0.328791       1
4  -1.193096 -0.499944  0.528137  ...  1.236806  1.097111       2
..       ...       ...       ...  ...       ...       ...     ...
59 -0.738184 -0.023435  1.390280  ... -0.211046 -0.198352       0
60  0.890580  0.050042 -0.155679  ...  0.896764  0.804018       1
61 -1.160094 -0.585405 -0.767846  ...  0.921118  1.730518       2
62 -1.487779  0.743603 -1.832211  ... -0.544789 -0.647625       1
63  1.847065 -0.124372 -0.035636  ...  0.770285  0.403637       3

[64 rows x 101 columns]
MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
('OPERATION_START', 'TRAINING')
[[ 9.35562551e-01  2.24750018e+00 -1.07094014e+00  5.08270264e-01
   1.43985808e-01 -4.33900356e-01  2.20938280e-01 -6.05712712e-01
   1.04623568e+00 -5.11191189e-01 -1.49217200e+00  5.78792810e-01
  -5.20725727e-01  8.71259570e-01 -1.55619383e+00  1.52518547e+00
  -7.36531466e-02 -1.17264986e+00 -6.90029681e-01 -1.00071573e+00
   3.37273180e-01 -5.52994728e-01  4.75280344e-01 -1.40307999e+00
   9.60445762e-01 -4.87094879e-01 -7.87123621e-01  4.54730177e+00
   1.16833878e+00 -5.16704082e-01  1.26904652e-01 -2.69020295e+00
  -1.60714972e+00 -1.60194361e+00  1.45940697e+00 -2.07469568e-01
  -7.90602565e-01 -2.78487932e-02 -1.21024287e+00  5.58430433e-01
  -1.63653836e-01  6.32869065e-01 -1.25206620e-01 -3.34407538e-01
   6.30639970e-01  1.33564019e+00  3.52602506e+00  7.06132531e-01
   1.95425427e+00 -2.52463102e-01 -4.60086882e-01 -1.19924438e+00
   6.41360343e-01 -2.27416492e+00 -1.08663130e+00 -1.79455566e+00
  -4.53341693e-01 -5.69205701e-01 -2.71141529e-01  6.19319558e-01
  -2.58924603e+00  9.84492600e-01  2.16141731e-01  8.48047435e-01
  -2.20009804e-01 -3.31227589e+00  1.16689853e-01  1.42259753e+00
   1.79406500e+00 -1.90514177e-01  7.55192041e-01  1.54058591e-01
   7.11078942e-01 -1.32698989e+00 -2.07093787e+00  9.34237540e-01
  -4.60939616e-01 -8.04052234e-01 -5.02367616e-02 -3.75201797e+00
   6.09228611e-02 -1.00079381e+00 -9.43618715e-01  2.28104413e-01
  -9.84539762e-02 -8.51119459e-02  8.69812146e-02 -1.41765642e+00
   2.71681398e-01 -8.74418080e-01 -2.53257823e+00 -5.78377783e-01
  -7.53983378e-01  9.52363431e-01 -9.63835180e-01 -6.48602486e-01
  -1.77499366e+00  6.77245975e-01 -1.77790895e-01 -2.49523029e-01]
 [ 2.93314219e-01 -1.26045048e+00 -3.44801831e+00  2.69382149e-01
   1.54421818e+00 -6.00797161e-02  2.80081749e-01 -3.49374235e-01
  -1.71003997e+00  8.22554767e-01  7.01598311e-03  7.73456335e-01
  -1.02132368e+00 -1.34428933e-01 -2.03461379e-01  1.28476620e+00
  -1.16496360e+00 -5.35073131e-02  8.57034981e-01  1.38256717e+00
   9.03933793e-02  8.63964017e-03 -5.40078878e-01 -4.88574624e-01
   4.52568620e-01  5.42306304e-01  1.07568896e+00  3.46140218e+00
   3.28359604e+00 -3.20053488e-01 -1.14804339e+00 -2.76097941e+00
   1.55631797e-02  8.74092340e-01 -7.98800826e-01 -2.42959595e+00
  -6.76247656e-01 -1.14995682e+00  4.39849287e-01 -1.87727064e-01
   1.34595573e+00 -9.83103573e-01 -8.30253839e-01 -1.39651984e-01
   2.03547105e-01  4.51490223e-01 -3.95970130e+00 -3.51787716e-01
   7.84379542e-01 -4.29442495e-01  1.05397455e-01  7.79593885e-01
  -1.13827668e-01 -5.40005386e-01 -1.16847146e+00 -3.36890638e-01
   9.90479112e-01  5.00425518e-01 -2.40916753e+00 -8.40187371e-01
  -2.07494095e-01 -4.10496503e-01  4.08632898e+00  9.31320012e-01
   9.54048574e-01 -9.11957398e-02 -7.51672363e+00  7.23851264e-01
  -3.96382175e-02  1.77101314e+00 -1.17600811e+00  1.22991554e-01
  -3.74346748e-02  1.72770336e-01 -4.08644319e-01  4.94354963e-01
   1.74994171e+00  9.89653885e-01  1.74723223e-01 -9.37665176e+00
  -4.31565335e-03 -1.70145118e+00 -1.74992526e+00 -1.72720656e-01
   5.82682490e-01 -5.26583374e-01  1.91324139e+00 -2.40155920e-01
  -1.35112417e+00 -3.65208060e-01 -1.35532707e-01  1.08672369e+00
   7.04294443e-01 -8.71233284e-01  1.04183960e+00 -6.46791577e-01
   3.74140948e-01  3.27620208e-01  1.64190233e-01  2.20514464e+00]
 [ 5.96660793e-01  1.58940768e+00 -8.10967982e-01 -4.73919630e-01
  -9.17869389e-01 -1.61617601e+00 -6.78639174e-01  1.03318654e-01
  -5.00028312e-01  1.78057873e+00 -1.34553814e+00 -5.28248453e+00
   7.20736444e-01  1.79546729e-01 -1.75809467e+00 -8.59387755e-01
  -2.27263141e-02 -1.87025774e+00  1.67022240e+00 -2.89478928e-01
   8.37067842e-01  6.59622908e-01  4.29693535e-02 -9.46969926e-01
   4.30729359e-01 -7.75742769e-01  3.41510355e-01 -2.02011466e+00
  -1.02778935e+00 -1.69667840e+00 -1.71012551e-01  4.23166782e-01
  -1.79182720e+00 -5.75773478e-01 -1.71246231e+00  5.68344474e-01
  -6.81339622e-01  3.23087126e-01 -1.44740534e+00 -1.38365650e+00
   3.77985537e-01 -6.37483299e-01  7.76762664e-01  5.55373728e-01
   1.11285400e+00 -1.27088690e+00  2.94207788e+00  4.38418001e-01
   7.77927995e-01  8.14674795e-01 -3.88954520e-01 -1.27854240e+00
   3.87139380e-01 -5.47252417e-01  7.68055022e-01  1.48158407e+00
  -5.30028522e-01  8.71521354e-01  2.20103472e-01 -1.80267835e+00
   1.62707639e+00  2.93988436e-01  4.04036474e+00 -1.38034463e+00
  -8.25688243e-01  7.04825699e-01  8.15395546e+00  1.22501051e+00
   1.66788650e+00  2.72147131e+00  6.49030805e-01 -9.60100591e-01
  -1.05595326e+00 -4.90769893e-02 -1.56489909e+00  3.93039435e-01
   8.80326271e-01  1.46846676e+00  2.43020996e-01 -1.33081412e+00
   2.29413652e+00  7.48559713e-01  1.10301085e-01  1.11530209e+00
  -3.07022452e-01 -3.43551278e-01  7.95005918e-01  2.63235778e-01
   7.99354970e-01 -5.73727824e-02  7.56435156e-01 -3.64444673e-01
   1.29907846e+00 -3.82006057e-02  7.76137769e-01 -8.31591904e-01
   1.53442824e+00 -1.27538812e+00  2.64287349e-02 -5.65739751e-01]
 [ 1.45643616e+00 -2.08054376e+00  6.94121957e-01 -5.21965921e-01
  -2.32917964e-01  1.52993643e+00 -1.81002557e-01 -9.00278687e-01
  -3.17071170e-01  4.05129343e-01 -9.13353622e-01  1.52238500e+00
   1.75047374e+00 -7.30361819e-01  1.55085921e+00  1.42706335e-01
   4.59196642e-02  4.07628447e-01 -3.26506257e-01 -4.81859356e-01
   9.39201862e-02 -2.45961189e-01 -1.96491504e+00  5.07482708e-01
   1.15683150e+00 -3.67391527e-01 -9.73286927e-01 -3.10479784e+00
  -2.73889601e-01  1.66504610e+00 -1.51400971e+00 -9.55533683e-01
   2.07410976e-01  1.52923656e+00 -1.69865060e+00  1.74417377e+00
  -1.26610243e+00 -5.80420077e-01 -8.55364025e-01  1.04407564e-01
   5.93953609e-01 -1.41621888e+00  1.08122841e-01 -4.84067738e-01
   1.69581461e+00  1.38722503e+00 -3.99619937e+00  1.27301514e+00
   6.38230085e-01  2.15354633e+00 -8.86631683e-02  9.06281710e-01
   1.31646347e+00  1.80131924e+00  5.43839991e-01 -1.20308149e+00
   1.03996921e+00  4.74938527e-02 -2.78281540e-01 -1.01100028e+00
   1.63605332e+00 -6.30008936e-01  2.86958098e+00  1.29696774e+00
   1.89161137e-01  2.85747457e+00 -4.18727446e+00 -7.44388819e-01
   2.98897564e-01  1.36116946e+00  1.38416719e+00 -2.11131483e-01
   1.18849802e+00  1.96934193e-01 -1.47064614e+00 -3.63175780e-01
   7.84732163e-01 -1.32636324e-01  1.00253135e-01  2.38688135e+00
  -2.33116910e-01  4.48122442e-01  2.28070378e+00 -1.26993442e+00
  -3.67890954e-01 -8.16320002e-01 -9.08941507e-01 -7.01003969e-01
   1.05856764e+00 -3.64899427e-01 -2.01056767e+00 -1.06769252e+00
   1.60698414e+00 -2.91990757e-01  2.26473403e+00 -4.49902713e-01
   4.62933123e-01  7.53116310e-01  1.05988944e+00  3.28791380e-01]
 [-1.19309628e+00 -4.99944448e-01  5.28136671e-01  1.85364544e-01
  -7.10495830e-01 -8.85336176e-02 -6.38042450e-01  8.81741822e-01
   1.25752389e+00 -8.73580158e-01 -9.55399573e-01 -1.35603696e-01
   4.83997911e-01 -9.96602833e-01  9.37519133e-01 -5.89864291e-02
  -1.13989949e+00 -1.25818241e+00  5.26024342e-01 -7.01516032e-01
   1.32973158e+00  2.44526839e+00 -7.72712529e-01  5.13766646e-01
   4.98695105e-01  1.14376044e+00 -6.54239535e-01 -6.17800094e-02
  -1.03205192e+00  2.77230233e-01 -9.69139159e-01  1.10734671e-01
  -5.05987525e-01  1.02873945e+00  1.02971303e+00 -2.58090401e+00
  -9.99437511e-01  2.12422752e+00 -3.89198899e-01 -9.32601035e-01
  -6.93674445e-01 -4.07995224e-01 -1.90250194e+00 -6.23405516e-01
  -1.66650927e+00 -2.14010692e+00 -3.13505024e-01  9.16595995e-01
  -1.29809892e+00  1.01324391e+00  1.43364155e+00 -1.01352572e+00
  -1.49118865e+00 -2.45811558e+00  1.11938548e+00  4.71531510e-01
   2.87433833e-01  6.17101133e-01  5.58946013e-01 -9.08716619e-01
   2.14687967e+00 -1.05833352e+00 -8.24340701e-01  1.51690736e-01
   1.60771608e+00  9.55081761e-01 -1.60897672e+00 -1.66303873e+00
   7.57982671e-01  3.17573786e-01  3.93135488e-01  1.26543090e-01
   1.48471398e-02 -1.58860159e+00 -5.91678858e-01  3.42316389e-01
  -2.10359603e-01 -1.42355669e+00 -2.23383650e-01 -4.08269119e+00
   9.26247478e-01  5.84456980e-01 -5.01928627e-01 -5.45637131e-01
   6.72929883e-01 -1.34969640e+00  1.73498929e+00 -2.95029342e-01
   7.98496783e-01  1.77032605e-01 -2.69206595e+00  1.26748353e-01
  -5.17131031e-01  9.58465040e-01 -5.24760962e-01  3.00141931e-01
   9.27737057e-02 -5.06614506e-01  1.23680639e+00  1.09711075e+00]] [3 2 0 1 2]
MLLITE_FIT_USING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 6 6
('OPERATION_END_ELAPSED', 0.044, 'TRAINING')
{ ,   }
{ ,   }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 100 },
	"classes" : [ 0, 1, 2, 3 ],
	"equations" : {
		"class_0" : {
			"intercept" : -0.411119,
			"coeffs" : [ -0.102690, -0.021733, 0.015702, 0.097197, 0.006831, -0.054610, -0.079589, 0.028203, 0.113468, 0.123671, 0.040121, 0.026748, -0.197075, 0.006949, 0.100460, -0.072329, 0.000690, -0.021788, -0.021677, -0.093302, 0.112259, -0.120557, -0.070810, 0.116105, 0.074577, 0.043012, 0.081422, -0.006275, -0.083023, 0.026549, 0.032380, 0.075476, -0.249492, -0.066264, -0.001693, 0.068630, 0.101035, 0.064770, 0.023285, -0.153403, -0.014943, 0.015217, 0.042262, 0.144974, -0.034358, 0.185682, 0.092146, 0.071845, -0.076954, 0.000795, 0.134872, -0.052525, 0.108029, 0.009529, -0.111329, 0.085142, 0.001382, 0.308394, -0.035489, 0.031380, -0.055121, -0.077758, 0.054455, -0.031606, 0.038193, -0.019955, 0.023258, 0.049326, 0.074851, 0.020224, -0.078391, 0.245075, 0.019157, -0.012945, 0.058804, -0.073844, 0.144940, 0.066601, -0.025704, 0.036143, 0.101031, 0.115347, -0.032025, -0.133767, -0.012764, 0.219501, 0.056442, -0.245222, -0.105097, 0.053344, 0.062717, 0.087789, 0.137431, 0.044787, 0.142997, 0.110703, 0.117300, 0.042600, -0.086883, 0.000259 ]
		},
		"class_1" : {
			"intercept" : -0.491056,
			"coeffs" : [ 0.048223, 0.106636, -0.052630, 0.003140, 0.067658, 0.200950, -0.031399, -0.012986, -0.109268, -0.062325, 0.022186, -0.004704, 0.280222, 0.100407, 0.089174, 0.033591, -0.036717, 0.001880, 0.070159, 0.106455, -0.172490, 0.042271, 0.052482, -0.105050, -0.055330, -0.286243, -0.067165, -0.029595, 0.116733, 0.105289, -0.052222, 0.025751, 0.283916, -0.091058, 0.120392, 0.053285, -0.120200, -0.024926, -0.121956, -0.165027, 0.000144, -0.043226, 0.032441, 0.088152, 0.096396, -0.014390, -0.104444, -0.126325, -0.091081, 0.030778, -0.195062, -0.092463, -0.106669, -0.065135, 0.186098, -0.055011, -0.030151, -0.269035, -0.086281, -0.094391, 0.114039, -0.119160, 0.007301, -0.011506, 0.015089, 0.006866, 0.003832, 0.013737, -0.080471, 0.024430, 0.008908, -0.220438, -0.057386, 0.117290, 0.015375, -0.003216, -0.001040, -0.129877, 0.113729, 0.010359, 0.021963, 0.036611, -0.043431, 0.046576, -0.073301, 0.027841, -0.158008, 0.112582, 0.031190, 0.064274, -0.178229, 0.076303, -0.020725, -0.181545, -0.211593, -0.203346, -0.127532, 0.161645, 0.105543, -0.162642 ]
		},
		"class_2" : {
			"intercept" : -0.403421,
			"coeffs" : [ -0.039221, -0.051614, 0.019422, 0.118383, -0.195829, -0.012083, 0.096234, 0.038452, -0.058004, 0.045381, 0.094765, -0.030417, -0.191201, -0.205457, 0.005799, 0.106719, 0.000097, 0.017560, -0.135349, 0.094485, 0.198574, -0.054935, -0.052710, 0.007137, -0.028191, 0.177718, 0.110912, 0.000011, -0.095751, -0.131981, 0.001525, -0.014083, -0.219334, 0.078374, -0.097921, -0.144102, -0.003497, 0.079004, 0.116753, 0.149682, 0.120648, -0.032542, -0.281834, -0.080243, -0.040968, -0.136570, 0.029092, -0.057438, -0.008041, 0.071992, 0.058166, 0.081089, 0.131385, 0.027508, -0.149734, 0.034318, 0.031859, 0.098718, -0.063393, 0.160801, 0.015085, 0.122494, -0.046954, 0.054308, -0.066925, 0.016298, -0.033904, -0.117034, -0.029073, 0.043032, -0.000852, 0.164564, 0.007061, -0.009675, -0.069454, 0.003788, -0.065721, -0.029814, -0.058036, -0.029558, -0.008504, -0.092724, 0.082910, 0.038142, 0.045105, -0.025719, 0.070394, -0.014983, 0.061702, -0.075685, 0.159607, -0.195047, -0.075843, 0.040286, 0.051344, -0.027131, 0.029770, -0.136096, 0.073858, 0.078226 ]
		},
		"class_3" : {
			"intercept" : -0.694401,
			"coeffs" : [ 0.093685, -0.033288, 0.017507, -0.218721, 0.121342, -0.134257, 0.014751, -0.053666, 0.053806, -0.106730, -0.157068, 0.008374, 0.108058, 0.098101, -0.195432, -0.067982, 0.035932, 0.002349, 0.086869, -0.107640, -0.138345, 0.133223, 0.071040, -0.018191, 0.008942, 0.065517, -0.125168, 0.035855, 0.062043, 0.000143, 0.018317, -0.087146, 0.184912, 0.078946, -0.020775, 0.022185, 0.022660, -0.118850, -0.018080, 0.168748, -0.105848, 0.060551, 0.207134, -0.152883, -0.021070, -0.034720, -0.016793, 0.111916, 0.176072, -0.103566, 0.002024, 0.063900, -0.132745, 0.028099, 0.074962, -0.064449, -0.003090, -0.138077, 0.185161, -0.097791, -0.074003, 0.074424, -0.014801, -0.011195, 0.013639, -0.003208, 0.006814, 0.053972, 0.034694, -0.087685, 0.070335, -0.189203, 0.031166, -0.094670, -0.004725, 0.073272, -0.078178, 0.093092, -0.029986, -0.016943, -0.114487, -0.059232, -0.007456, 0.049051, 0.040961, -0.221620, 0.031172, 0.147622, 0.012208, -0.041929, -0.044096, 0.030952, -0.040861, 0.096472, 0.017253, 0.119779, -0.019541, -0.068149, -0.092518, 0.084156 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_FourClass_100_small.json'

MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
MLLITE_RELOADING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 100 },
	"classes" : [ 0, 1, 2, 3 ],
	"equations" : {
		"class_0" : {
			"intercept" : -0.411119,
			"coeffs" : [ -0.102690, -0.021733, 0.015702, 0.097197, 0.006831, -0.054610, -0.079589, 0.028203, 0.113468, 0.123671, 0.040121, 0.026748, -0.197075, 0.006949, 0.100460, -0.072329, 0.000690, -0.021788, -0.021677, -0.093302, 0.112259, -0.120557, -0.070810, 0.116105, 0.074577, 0.043012, 0.081422, -0.006275, -0.083023, 0.026549, 0.032380, 0.075476, -0.249492, -0.066264, -0.001693, 0.068630, 0.101035, 0.064770, 0.023285, -0.153403, -0.014943, 0.015217, 0.042262, 0.144974, -0.034358, 0.185682, 0.092146, 0.071845, -0.076954, 0.000795, 0.134872, -0.052525, 0.108029, 0.009529, -0.111329, 0.085142, 0.001382, 0.308394, -0.035489, 0.031380, -0.055121, -0.077758, 0.054455, -0.031606, 0.038193, -0.019955, 0.023258, 0.049326, 0.074851, 0.020224, -0.078391, 0.245075, 0.019157, -0.012945, 0.058804, -0.073844, 0.144940, 0.066601, -0.025704, 0.036143, 0.101031, 0.115347, -0.032025, -0.133767, -0.012764, 0.219501, 0.056442, -0.245222, -0.105097, 0.053344, 0.062717, 0.087789, 0.137431, 0.044787, 0.142997, 0.110703, 0.117300, 0.042600, -0.086883, 0.000259 ]
		},
		"class_1" : {
			"intercept" : -0.491056,
			"coeffs" : [ 0.048223, 0.106636, -0.052630, 0.003140, 0.067658, 0.200950, -0.031399, -0.012986, -0.109268, -0.062325, 0.022186, -0.004704, 0.280222, 0.100407, 0.089174, 0.033591, -0.036717, 0.001880, 0.070159, 0.106455, -0.172490, 0.042271, 0.052482, -0.105050, -0.055330, -0.286243, -0.067165, -0.029595, 0.116733, 0.105289, -0.052222, 0.025751, 0.283916, -0.091058, 0.120392, 0.053285, -0.120200, -0.024926, -0.121956, -0.165027, 0.000144, -0.043226, 0.032441, 0.088152, 0.096396, -0.014390, -0.104444, -0.126325, -0.091081, 0.030778, -0.195062, -0.092463, -0.106669, -0.065135, 0.186098, -0.055011, -0.030151, -0.269035, -0.086281, -0.094391, 0.114039, -0.119160, 0.007301, -0.011506, 0.015089, 0.006866, 0.003832, 0.013737, -0.080471, 0.024430, 0.008908, -0.220438, -0.057386, 0.117290, 0.015375, -0.003216, -0.001040, -0.129877, 0.113729, 0.010359, 0.021963, 0.036611, -0.043431, 0.046576, -0.073301, 0.027841, -0.158008, 0.112582, 0.031190, 0.064274, -0.178229, 0.076303, -0.020725, -0.181545, -0.211593, -0.203346, -0.127532, 0.161645, 0.105543, -0.162642 ]
		},
		"class_2" : {
			"intercept" : -0.403421,
			"coeffs" : [ -0.039221, -0.051614, 0.019422, 0.118383, -0.195829, -0.012083, 0.096234, 0.038452, -0.058004, 0.045381, 0.094765, -0.030417, -0.191201, -0.205457, 0.005799, 0.106719, 0.000097, 0.017560, -0.135349, 0.094485, 0.198574, -0.054935, -0.052710, 0.007137, -0.028191, 0.177718, 0.110912, 0.000011, -0.095751, -0.131981, 0.001525, -0.014083, -0.219334, 0.078374, -0.097921, -0.144102, -0.003497, 0.079004, 0.116753, 0.149682, 0.120648, -0.032542, -0.281834, -0.080243, -0.040968, -0.136570, 0.029092, -0.057438, -0.008041, 0.071992, 0.058166, 0.081089, 0.131385, 0.027508, -0.149734, 0.034318, 0.031859, 0.098718, -0.063393, 0.160801, 0.015085, 0.122494, -0.046954, 0.054308, -0.066925, 0.016298, -0.033904, -0.117034, -0.029073, 0.043032, -0.000852, 0.164564, 0.007061, -0.009675, -0.069454, 0.003788, -0.065721, -0.029814, -0.058036, -0.029558, -0.008504, -0.092724, 0.082910, 0.038142, 0.045105, -0.025719, 0.070394, -0.014983, 0.061702, -0.075685, 0.159607, -0.195047, -0.075843, 0.040286, 0.051344, -0.027131, 0.029770, -0.136096, 0.073858, 0.078226 ]
		},
		"class_3" : {
			"intercept" : -0.694401,
			"coeffs" : [ 0.093685, -0.033288, 0.017507, -0.218721, 0.121342, -0.134257, 0.014751, -0.053666, 0.053806, -0.106730, -0.157068, 0.008374, 0.108058, 0.098101, -0.195432, -0.067982, 0.035932, 0.002349, 0.086869, -0.107640, -0.138345, 0.133223, 0.071040, -0.018191, 0.008942, 0.065517, -0.125168, 0.035855, 0.062043, 0.000143, 0.018317, -0.087146, 0.184912, 0.078946, -0.020775, 0.022185, 0.022660, -0.118850, -0.018080, 0.168748, -0.105848, 0.060551, 0.207134, -0.152883, -0.021070, -0.034720, -0.016793, 0.111916, 0.176072, -0.103566, 0.002024, 0.063900, -0.132745, 0.028099, 0.074962, -0.064449, -0.003090, -0.138077, 0.185161, -0.097791, -0.074003, 0.074424, -0.014801, -0.011195, 0.013639, -0.003208, 0.006814, 0.053972, 0.034694, -0.087685, 0.070335, -0.189203, 0.031166, -0.094670, -0.004725, 0.073272, -0.078178, 0.093092, -0.029986, -0.016943, -0.114487, -0.059232, -0.007456, 0.049051, 0.040961, -0.221620, 0.031172, 0.147622, 0.012208, -0.041929, -0.044096, 0.030952, -0.040861, 0.096472, 0.017253, 0.119779, -0.019541, -0.068149, -0.092518, 0.084156 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2, 3 ],
	"dataset" : 	{
		"dataset_features" : 100,
		"dataset_rows" : 64
	},
	"equations" : 	{
		"class_0" : 	{
			"coeffs" : [ -0.10269, -0.021733, 0.015702, 0.097197, 0.006831, -0.05461, -0.079589, 0.028203, 0.113468, 0.123671, 0.040121, 0.026748, -0.197075, 0.006949, 0.10046, -0.072329, 0.00069, -0.021788, -0.021677, -0.093302, 0.112259, -0.120557, -0.07081, 0.116105, 0.074577, 0.043012, 0.081422, -0.006275, -0.083023, 0.026549, 0.03238, 0.075476, -0.249492, -0.066264, -0.001693, 0.06863, 0.101035, 0.06477, 0.023285, -0.153403, -0.014943, 0.015217, 0.042262, 0.144974, -0.034358, 0.185682, 0.092146, 0.071845, -0.076954, 0.000795, 0.134872, -0.052525, 0.108029, 0.009529, -0.111329, 0.085142, 0.001382, 0.308394, -0.035489, 0.03138, -0.055121, -0.077758, 0.054455, -0.031606, 0.038193, -0.019955, 0.023258, 0.049326, 0.074851, 0.020224, -0.078391, 0.245075, 0.019157, -0.012945, 0.058804, -0.073844, 0.14494, 0.066601, -0.025704, 0.036143, 0.101031, 0.115347, -0.032025, -0.133767, -0.012764, 0.219501, 0.056442, -0.245222, -0.105097, 0.053344, 0.062717, 0.087789, 0.137431, 0.044787, 0.142997, 0.110703, 0.1173, 0.0426, -0.086883, 0.000259 ],
			"intercept" : -0.411119
		},
		"class_1" : 	{
			"coeffs" : [ 0.048223, 0.106636, -0.05263, 0.00314, 0.067658, 0.20095, -0.031399, -0.012986, -0.109268, -0.062325, 0.022186, -0.004704, 0.280222, 0.100407, 0.089174, 0.033591, -0.036717, 0.00188, 0.070159, 0.106455, -0.17249, 0.042271, 0.052482, -0.10505, -0.05533, -0.286243, -0.067165, -0.029595, 0.116733, 0.105289, -0.052222, 0.025751, 0.283916, -0.091058, 0.120392, 0.053285, -0.1202, -0.024926, -0.121956, -0.165027, 0.000144, -0.043226, 0.032441, 0.088152, 0.096396, -0.01439, -0.104444, -0.126325, -0.091081, 0.030778, -0.195062, -0.092463, -0.106669, -0.065135, 0.186098, -0.055011, -0.030151, -0.269035, -0.086281, -0.094391, 0.114039, -0.11916, 0.007301, -0.011506, 0.015089, 0.006866, 0.003832, 0.013737, -0.080471, 0.02443, 0.008908, -0.220438, -0.057386, 0.11729, 0.015375, -0.003216, -0.00104, -0.129877, 0.113729, 0.010359, 0.021963, 0.036611, -0.043431, 0.046576, -0.073301, 0.027841, -0.158008, 0.112582, 0.03119, 0.064274, -0.178229, 0.076303, -0.020725, -0.181545, -0.211593, -0.203346, -0.127532, 0.161645, 0.105543, -0.162642 ],
			"intercept" : -0.491056
		},
		"class_2" : 	{
			"coeffs" : [ -0.039221, -0.051614, 0.019422, 0.118383, -0.195829, -0.012083, 0.096234, 0.038452, -0.058004, 0.045381, 0.094765, -0.030417, -0.191201, -0.205457, 0.005799, 0.106719, 9.7e-05, 0.01756, -0.135349, 0.094485, 0.198574, -0.054935, -0.05271, 0.007137, -0.028191, 0.177718, 0.110912, 1.1e-05, -0.095751, -0.131981, 0.001525, -0.014083, -0.219334, 0.078374, -0.097921, -0.144102, -0.003497, 0.079004, 0.116753, 0.149682, 0.120648, -0.032542, -0.281834, -0.080243, -0.040968, -0.13657, 0.029092, -0.057438, -0.008041, 0.071992, 0.058166, 0.081089, 0.131385, 0.027508, -0.149734, 0.034318, 0.031859, 0.098718, -0.063393, 0.160801, 0.015085, 0.122494, -0.046954, 0.054308, -0.066925, 0.016298, -0.033904, -0.117034, -0.029073, 0.043032, -0.000852, 0.164564, 0.007061, -0.009675, -0.069454, 0.003788, -0.065721, -0.029814, -0.058036, -0.029558, -0.008504, -0.092724, 0.08291, 0.038142, 0.045105, -0.025719, 0.070394, -0.014983, 0.061702, -0.075685, 0.159607, -0.195047, -0.075843, 0.040286, 0.051344, -0.027131, 0.02977, -0.136096, 0.073858, 0.078226 ],
			"intercept" : -0.403421
		},
		"class_3" : 	{
			"coeffs" : [ 0.093685, -0.033288, 0.017507, -0.218721, 0.121342, -0.134257, 0.014751, -0.053666, 0.053806, -0.10673, -0.157068, 0.008374, 0.108058, 0.098101, -0.195432, -0.067982, 0.035932, 0.002349, 0.086869, -0.10764, -0.138345, 0.133223, 0.07104, -0.018191, 0.008942, 0.065517, -0.125168, 0.035855, 0.062043, 0.000143, 0.018317, -0.087146, 0.184912, 0.078946, -0.020775, 0.022185, 0.02266, -0.11885, -0.01808, 0.168748, -0.105848, 0.060551, 0.207134, -0.152883, -0.02107, -0.03472, -0.016793, 0.111916, 0.176072, -0.103566, 0.002024, 0.0639, -0.132745, 0.028099, 0.074962, -0.064449, -0.00309, -0.138077, 0.185161, -0.097791, -0.074003, 0.074424, -0.014801, -0.011195, 0.013639, -0.003208, 0.006814, 0.053972, 0.034694, -0.087685, 0.070335, -0.189203, 0.031166, -0.09467, -0.004725, 0.073272, -0.078178, 0.093092, -0.029986, -0.016943, -0.114487, -0.059232, -0.007456, 0.049051, 0.040961, -0.22162, 0.031172, 0.147622, 0.012208, -0.041929, -0.044096, 0.030952, -0.040861, 0.096472, 0.017253, 0.119779, -0.019541, -0.068149, -0.092518, 0.084156 ],
			"intercept" : -0.694401
		}
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.0955 0.1069 0.0986 0.6991]
 [0.0966 0.1022 0.7052 0.096 ]
 [0.6964 0.1038 0.0971 0.1027]
 [0.0967 0.7108 0.0975 0.0949]
 [0.099  0.0861 0.7232 0.0918]
 [0.0948 0.1048 0.6979 0.1025]
 [0.7012 0.0995 0.0996 0.0998]
 [0.0963 0.0968 0.0968 0.7101]
 [0.6913 0.1114 0.0929 0.1044]
 [0.7084 0.0927 0.0999 0.099 ]
 [0.1018 0.0925 0.0994 0.7063]
 [0.7022 0.0935 0.1007 0.1036]
 [0.0986 0.6981 0.1012 0.1021]
 [0.0924 0.1027 0.0899 0.715 ]
 [0.1029 0.6935 0.1047 0.0989]
 [0.1001 0.1063 0.6954 0.0983]
 [0.0974 0.0975 0.1012 0.7039]
 [0.6989 0.1074 0.0956 0.0982]
 [0.0963 0.7105 0.0973 0.0959]
 [0.7051 0.1022 0.0954 0.0973]
 [0.1038 0.0924 0.1035 0.7003]
 [0.1105 0.6782 0.1112 0.1001]
 [0.1106 0.6731 0.1102 0.1061]
 [0.7114 0.0978 0.0971 0.0937]
 [0.0923 0.1    0.0949 0.7128]
 [0.0984 0.1095 0.6895 0.1026]
 [0.1002 0.0974 0.1019 0.7004]
 [0.1013 0.0954 0.0993 0.7041]
 [0.7161 0.0936 0.0979 0.0924]
 [0.0949 0.098  0.7068 0.1003]
 [0.1014 0.1016 0.6942 0.1027]
 [0.1029 0.0953 0.0991 0.7027]
 [0.0981 0.0909 0.7184 0.0926]
 [0.7094 0.0959 0.0959 0.0988]
 [0.099  0.1054 0.6913 0.1043]
 [0.1007 0.1036 0.6945 0.1012]
 [0.1067 0.0938 0.1062 0.6933]
 [0.708  0.096  0.0975 0.0985]
 [0.0986 0.0949 0.7114 0.0951]
 [0.0931 0.1043 0.7004 0.1023]
 [0.0943 0.104  0.7016 0.1001]
 [0.0919 0.1105 0.092  0.7055]
 [0.1065 0.0912 0.1021 0.7001]
 [0.0994 0.0952 0.0979 0.7075]
 [0.0972 0.0939 0.1013 0.7077]
 [0.7015 0.1025 0.0977 0.0983]
 [0.1023 0.6962 0.1006 0.1009]
 [0.0997 0.0982 0.0972 0.7048]
 [0.7027 0.0978 0.0999 0.0996]
 [0.1013 0.094  0.7047 0.1   ]
 [0.1052 0.6916 0.1002 0.1029]
 [0.0991 0.1048 0.0958 0.7003]
 [0.6924 0.1033 0.1006 0.1037]
 [0.0994 0.6955 0.1026 0.1025]
 [0.6974 0.103  0.0974 0.1022]
 [0.7049 0.097  0.0996 0.0986]
 [0.0995 0.1005 0.7034 0.0966]
 [0.0959 0.1021 0.7026 0.0994]
 [0.0974 0.1021 0.7    0.1004]
 [0.7015 0.1018 0.0982 0.0985]
 [0.1069 0.6806 0.1095 0.103 ]
 [0.097  0.0922 0.7143 0.0966]
 [0.1043 0.6946 0.1041 0.0971]
 [0.0984 0.0999 0.1016 0.7001]]
(64, 4)
(64, 4) float32
MODEL_PERFS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'FourClass_100_small', 'size': 64, 'accuracy': 1.0, 'auc': 1.0}
WRITING_PERF_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_FourClass_100_small.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'FourClass_100_small', 'training_time_in_sec': 0.044, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_FourClass_100_small_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_100_small', 'RidgeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_100_small', 'RidgeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_100_small', 'RidgeClassifier', 'duckdb')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_100_small', 'RidgeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 100 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
 14  X_14    64 non-null     float32
 15  X_15    64 non-null     float32
 16  X_16    64 non-null     float32
 17  X_17    64 non-null     float32
 18  X_18    64 non-null     float32
 19  X_19    64 non-null     float32
 20  X_20    64 non-null     float32
 21  X_21    64 non-null     float32
 22  X_22    64 non-null     float32
 23  X_23    64 non-null     float32
 24  X_24    64 non-null     float32
 25  X_25    64 non-null     float32
 26  X_26    64 non-null     float32
 27  X_27    64 non-null     float32
 28  X_28    64 non-null     float32
 29  X_29    64 non-null     float32
 30  X_30    64 non-null     float32
 31  X_31    64 non-null     float32
 32  X_32    64 non-null     float32
 33  X_33    64 non-null     float32
 34  X_34    64 non-null     float32
 35  X_35    64 non-null     float32
 36  X_36    64 non-null     float32
 37  X_37    64 non-null     float32
 38  X_38    64 non-null     float32
 39  X_39    64 non-null     float32
 40  X_40    64 non-null     float32
 41  X_41    64 non-null     float32
 42  X_42    64 non-null     float32
 43  X_43    64 non-null     float32
 44  X_44    64 non-null     float32
 45  X_45    64 non-null     float32
 46  X_46    64 non-null     float32
 47  X_47    64 non-null     float32
 48  X_48    64 non-null     float32
 49  X_49    64 non-null     float32
 50  X_50    64 non-null     float32
 51  X_51    64 non-null     float32
 52  X_52    64 non-null     float32
 53  X_53    64 non-null     float32
 54  X_54    64 non-null     float32
 55  X_55    64 non-null     float32
 56  X_56    64 non-null     float32
 57  X_57    64 non-null     float32
 58  X_58    64 non-null     float32
 59  X_59    64 non-null     float32
 60  X_60    64 non-null     float32
 61  X_61    64 non-null     float32
 62  X_62    64 non-null     float32
 63  X_63    64 non-null     float32
 64  X_64    64 non-null     float32
 65  X_65    64 non-null     float32
 66  X_66    64 non-null     float32
 67  X_67    64 non-null     float32
 68  X_68    64 non-null     float32
 69  X_69    64 non-null     float32
 70  X_70    64 non-null     float32
 71  X_71    64 non-null     float32
 72  X_72    64 non-null     float32
 73  X_73    64 non-null     float32
 74  X_74    64 non-null     float32
 75  X_75    64 non-null     float32
 76  X_76    64 non-null     float32
 77  X_77    64 non-null     float32
 78  X_78    64 non-null     float32
 79  X_79    64 non-null     float32
 80  X_80    64 non-null     float32
 81  X_81    64 non-null     float32
 82  X_82    64 non-null     float32
 83  X_83    64 non-null     float32
 84  X_84    64 non-null     float32
 85  X_85    64 non-null     float32
 86  X_86    64 non-null     float32
 87  X_87    64 non-null     float32
 88  X_88    64 non-null     float32
 89  X_89    64 non-null     float32
 90  X_90    64 non-null     float32
 91  X_91    64 non-null     float32
 92  X_92    64 non-null     float32
 93  X_93    64 non-null     float32
 94  X_94    64 non-null     float32
 95  X_95    64 non-null     float32
 96  X_96    64 non-null     float32
 97  X_97    64 non-null     float32
 98  X_98    64 non-null     float32
 99  X_99    64 non-null     float32
dtypes: float32(100)
memory usage: 25.5 KB
            X_0       X_1       X_2  ...      X_97      X_98      X_99
index                                ...                              
0      0.935563  2.247500 -1.070940  ...  0.677246 -0.177791 -0.249523
1      0.293314 -1.260450 -3.448018  ...  0.327620  0.164190  2.205145
2      0.596661  1.589408 -0.810968  ... -1.275388  0.026429 -0.565740
3      1.456436 -2.080544  0.694122  ...  0.753116  1.059889  0.328791
4     -1.193096 -0.499944  0.528137  ... -0.506615  1.236806  1.097111
...         ...       ...       ...  ...       ...       ...       ...
59    -0.738184 -0.023435  1.390280  ...  0.655899 -0.211046 -0.198352
60     0.890580  0.050042 -0.155679  ... -1.140350  0.896764  0.804018
61    -1.160094 -0.585405 -0.767846  ...  0.073228  0.921118  1.730518
62    -1.487779  0.743603 -1.832211  ... -0.578315 -0.544789 -0.647625
63     1.847065 -0.124372 -0.035636  ... -0.386424  0.770285  0.403637

[64 rows x 100 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 15 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Score_2        64 non-null     float64
 8   Proba_2        64 non-null     float64
 9   LogProba_2     64 non-null     float64
 10  Score_3        64 non-null     float64
 11  Proba_3        64 non-null     float64
 12  LogProba_3     64 non-null     float64
 13  Decision       64 non-null     int64  
 14  DecisionProba  64 non-null     float64
dtypes: float64(13), int64(2)
memory usage: 7.6 KB
    index   Score_0   Proba_0  ...  LogProba_3  Decision  DecisionProba
0       0 -1.033675  0.095500  ...   -0.358005         3       0.699070
1       1 -1.009663  0.096576  ...   -2.343253         2       0.705244
2       2  0.946803  0.696360  ...   -2.275569         0       0.696360
3       3 -0.995891  0.096733  ...   -2.354925         1       0.710837
4       4 -0.943578  0.098958  ...   -2.388324         2       0.723175
..    ...       ...       ...  ...         ...       ...            ...
59     59  0.965008  0.701532  ...   -2.317556         0       0.701532
60     60 -0.959483  0.106902  ...   -2.273195         1       0.680592
61     61 -0.985678  0.096959  ...   -2.337576         2       0.714262
62     62 -0.955727  0.104273  ...   -2.332457         1       0.694573
63     63 -1.002032  0.098431  ...   -0.356542         3       0.700093

[64 rows x 15 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_2  Py_Proba_3  Py_Decision
48     48  0.969015     0.702665  ...    0.099947    0.099614            0
49     49 -0.962651     0.101343  ...    0.704668    0.099999            2
50     50 -0.953219     0.105207  ...    0.100236    0.102935            1
51     51 -0.994104     0.099123  ...    0.095757    0.700310            3
52     52  0.932447     0.692370  ...    0.100573    0.103742            0
53     53 -1.001767     0.099414  ...    0.102598    0.102461            1
54     54  0.950308     0.697376  ...    0.097402    0.102242            0
55     55  0.976895     0.704853  ...    0.099557    0.098635            0
56     56 -0.984391     0.099468  ...    0.703393    0.096638            2
57     57 -1.022822     0.095861  ...    0.702636    0.099429            2
58     58 -1.012231     0.097438  ...    0.700027    0.100436            2
59     59  0.965008     0.701532  ...    0.098191    0.098514            0
60     60 -0.959483     0.106902  ...    0.109523    0.102983            1
61     61 -0.985678     0.096959  ...    0.714263    0.096561            2
62     62 -0.955727     0.104273  ...    0.104097    0.097057            1
63     63 -1.002032     0.098431  ...    0.101585    0.700095            3

[16 rows x 20 columns]
MLLITE_CLASS_SQL_ERROR ('FourClass_100_small', 'RidgeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 5.188070042465472e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
48    0.702665     0.702665  1.939312e-09
49    0.101342     0.101343 -7.360025e-07
50    0.105207     0.105207 -4.612961e-07
51    0.099122     0.099123 -2.452288e-07
52    0.692367     0.692370 -3.947341e-06
53    0.099414     0.099414  5.750028e-07
54    0.697374     0.697376 -1.702488e-06
55    0.704853     0.704853  7.738057e-07
56    0.099468     0.099468 -2.290965e-07
57    0.095861     0.095861  7.121242e-07
58    0.097439     0.097438  8.595947e-07
59    0.701532     0.701532  4.836488e-08
60    0.106902     0.106902 -4.360766e-07
61    0.096960     0.096959  8.390306e-07
62    0.104272     0.104273 -4.806264e-07
63    0.098431     0.098431 -3.676044e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_100_small', 'RidgeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 4.94067142451076e-07
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
48    0.097775     0.097774  1.525693e-07
49    0.093991     0.093992 -2.972144e-07
50    0.691622     0.691621  8.065595e-07
51    0.104810     0.104811 -6.311368e-07
52    0.103318     0.103316  1.626983e-06
53    0.695526     0.695528 -1.340881e-06
54    0.102982     0.102981  1.259564e-06
55    0.096955     0.096955 -5.637007e-07
56    0.100500     0.100500  7.875083e-08
57    0.102073     0.102072  3.427497e-07
58    0.102098     0.102098 -5.907335e-07
59    0.101763     0.101763  1.203552e-07
60    0.680592     0.680592  3.486287e-07
61    0.092216     0.092217 -6.843957e-07
62    0.694574     0.694573  1.449964e-06
63    0.099890     0.099891 -7.580710e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_100_small', 'RidgeClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 4.086214808450041e-07
    Py_Proba_2  SQL_Proba_2   SQL_Error_2
48    0.099947     0.099947 -2.407715e-07
49    0.704668     0.704667  6.357839e-07
50    0.100236     0.100236 -4.848457e-08
51    0.095757     0.095757 -2.486730e-07
52    0.100573     0.100573  6.330869e-07
53    0.102598     0.102598  3.436822e-07
54    0.097402     0.097402  4.572786e-07
55    0.099557     0.099557 -2.791298e-07
56    0.703393     0.703393  3.776743e-07
57    0.702636     0.702637 -8.163835e-07
58    0.700027     0.700026  6.163658e-07
59    0.098191     0.098191 -7.409126e-08
60    0.109523     0.109523 -1.639464e-08
61    0.714263     0.714262  2.423565e-07
62    0.104097     0.104097 -5.478319e-07
63    0.101585     0.101585 -1.723656e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_100_small', 'RidgeClassifier', 'duckdb') ('Py_Proba_3', 'SQL_Proba_3') 4.118693829530725e-07
    Py_Proba_3  SQL_Proba_3   SQL_Error_3
48    0.099614     0.099614  2.129228e-07
49    0.099999     0.099998  4.272354e-07
50    0.102935     0.102935 -2.595259e-07
51    0.700310     0.700309  1.110137e-06
52    0.103742     0.103741  1.642568e-06
53    0.102461     0.102461  4.892516e-07
54    0.102242     0.102242  6.760129e-08
55    0.098635     0.098635  4.667308e-08
56    0.096638     0.096639 -2.422298e-07
57    0.099429     0.099430 -3.502491e-07
58    0.100436     0.100437 -8.032707e-07
59    0.098514     0.098514 -1.095300e-07
60    0.102983     0.102983  1.336449e-07
61    0.096561     0.096561 -3.969913e-07
62    0.097057     0.097057 -4.289562e-07
63    0.700095     0.700093  1.290590e-06
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_100_small', 'RidgeClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
48            0             0
49            2             2
50            1             1
51            3             3
52            0             0
53            1             1
54            0             0
55            0             0
56            2             2
57            2             2
58            2             2
59            0             0
60            1             1
61            2             2
62            1             1
63            3             3
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_FourClass_100_small_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_100_small', 'RidgeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_100_small', 'RidgeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_100_small', 'RidgeClassifier', 'sqlite')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_100_small', 'RidgeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 100 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
 4   X_4     64 non-null     float32
 5   X_5     64 non-null     float32
 6   X_6     64 non-null     float32
 7   X_7     64 non-null     float32
 8   X_8     64 non-null     float32
 9   X_9     64 non-null     float32
 10  X_10    64 non-null     float32
 11  X_11    64 non-null     float32
 12  X_12    64 non-null     float32
 13  X_13    64 non-null     float32
 14  X_14    64 non-null     float32
 15  X_15    64 non-null     float32
 16  X_16    64 non-null     float32
 17  X_17    64 non-null     float32
 18  X_18    64 non-null     float32
 19  X_19    64 non-null     float32
 20  X_20    64 non-null     float32
 21  X_21    64 non-null     float32
 22  X_22    64 non-null     float32
 23  X_23    64 non-null     float32
 24  X_24    64 non-null     float32
 25  X_25    64 non-null     float32
 26  X_26    64 non-null     float32
 27  X_27    64 non-null     float32
 28  X_28    64 non-null     float32
 29  X_29    64 non-null     float32
 30  X_30    64 non-null     float32
 31  X_31    64 non-null     float32
 32  X_32    64 non-null     float32
 33  X_33    64 non-null     float32
 34  X_34    64 non-null     float32
 35  X_35    64 non-null     float32
 36  X_36    64 non-null     float32
 37  X_37    64 non-null     float32
 38  X_38    64 non-null     float32
 39  X_39    64 non-null     float32
 40  X_40    64 non-null     float32
 41  X_41    64 non-null     float32
 42  X_42    64 non-null     float32
 43  X_43    64 non-null     float32
 44  X_44    64 non-null     float32
 45  X_45    64 non-null     float32
 46  X_46    64 non-null     float32
 47  X_47    64 non-null     float32
 48  X_48    64 non-null     float32
 49  X_49    64 non-null     float32
 50  X_50    64 non-null     float32
 51  X_51    64 non-null     float32
 52  X_52    64 non-null     float32
 53  X_53    64 non-null     float32
 54  X_54    64 non-null     float32
 55  X_55    64 non-null     float32
 56  X_56    64 non-null     float32
 57  X_57    64 non-null     float32
 58  X_58    64 non-null     float32
 59  X_59    64 non-null     float32
 60  X_60    64 non-null     float32
 61  X_61    64 non-null     float32
 62  X_62    64 non-null     float32
 63  X_63    64 non-null     float32
 64  X_64    64 non-null     float32
 65  X_65    64 non-null     float32
 66  X_66    64 non-null     float32
 67  X_67    64 non-null     float32
 68  X_68    64 non-null     float32
 69  X_69    64 non-null     float32
 70  X_70    64 non-null     float32
 71  X_71    64 non-null     float32
 72  X_72    64 non-null     float32
 73  X_73    64 non-null     float32
 74  X_74    64 non-null     float32
 75  X_75    64 non-null     float32
 76  X_76    64 non-null     float32
 77  X_77    64 non-null     float32
 78  X_78    64 non-null     float32
 79  X_79    64 non-null     float32
 80  X_80    64 non-null     float32
 81  X_81    64 non-null     float32
 82  X_82    64 non-null     float32
 83  X_83    64 non-null     float32
 84  X_84    64 non-null     float32
 85  X_85    64 non-null     float32
 86  X_86    64 non-null     float32
 87  X_87    64 non-null     float32
 88  X_88    64 non-null     float32
 89  X_89    64 non-null     float32
 90  X_90    64 non-null     float32
 91  X_91    64 non-null     float32
 92  X_92    64 non-null     float32
 93  X_93    64 non-null     float32
 94  X_94    64 non-null     float32
 95  X_95    64 non-null     float32
 96  X_96    64 non-null     float32
 97  X_97    64 non-null     float32
 98  X_98    64 non-null     float32
 99  X_99    64 non-null     float32
dtypes: float32(100)
memory usage: 25.5 KB
            X_0       X_1       X_2  ...      X_97      X_98      X_99
index                                ...                              
0      0.935563  2.247500 -1.070940  ...  0.677246 -0.177791 -0.249523
1      0.293314 -1.260450 -3.448018  ...  0.327620  0.164190  2.205145
2      0.596661  1.589408 -0.810968  ... -1.275388  0.026429 -0.565740
3      1.456436 -2.080544  0.694122  ...  0.753116  1.059889  0.328791
4     -1.193096 -0.499944  0.528137  ... -0.506615  1.236806  1.097111
...         ...       ...       ...  ...       ...       ...       ...
59    -0.738184 -0.023435  1.390280  ...  0.655899 -0.211046 -0.198352
60     0.890580  0.050042 -0.155679  ... -1.140350  0.896764  0.804018
61    -1.160094 -0.585405 -0.767846  ...  0.073228  0.921118  1.730518
62    -1.487779  0.743603 -1.832211  ... -0.578315 -0.544789 -0.647625
63     1.847065 -0.124372 -0.035636  ... -0.386424  0.770285  0.403637

[64 rows x 100 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 15 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Score_2        64 non-null     float64
 8   Proba_2        64 non-null     float64
 9   LogProba_2     64 non-null     float64
 10  Score_3        64 non-null     float64
 11  Proba_3        64 non-null     float64
 12  LogProba_3     64 non-null     float64
 13  Decision       64 non-null     int64  
 14  DecisionProba  64 non-null     float64
dtypes: float64(13), int64(2)
memory usage: 7.6 KB
    index   Score_0   Proba_0  ...  LogProba_3  Decision  DecisionProba
0       0 -1.033675  0.095500  ...   -0.358005         3       0.699070
1       1 -1.009663  0.096576  ...   -2.343253         2       0.705244
2       2  0.946803  0.696360  ...   -2.275569         0       0.696360
3       3 -0.995891  0.096733  ...   -2.354925         1       0.710837
4       4 -0.943578  0.098958  ...   -2.388324         2       0.723175
..    ...       ...       ...  ...         ...       ...            ...
59     59  0.965008  0.701532  ...   -2.317556         0       0.701532
60     60 -0.959483  0.106902  ...   -2.273194         1       0.680592
61     61 -0.985678  0.096959  ...   -2.337576         2       0.714262
62     62 -0.955727  0.104273  ...   -2.332457         1       0.694573
63     63 -1.002032  0.098431  ...   -0.356542         3       0.700093

[64 rows x 15 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_2  Py_Proba_3  Py_Decision
48     48  0.969015     0.702665  ...    0.099947    0.099614            0
49     49 -0.962652     0.101343  ...    0.704668    0.099999            2
50     50 -0.953220     0.105207  ...    0.100236    0.102935            1
51     51 -0.994104     0.099123  ...    0.095757    0.700310            3
52     52  0.932447     0.692370  ...    0.100573    0.103742            0
53     53 -1.001767     0.099414  ...    0.102598    0.102461            1
54     54  0.950308     0.697376  ...    0.097402    0.102242            0
55     55  0.976896     0.704853  ...    0.099557    0.098635            0
56     56 -0.984391     0.099468  ...    0.703393    0.096638            2
57     57 -1.022822     0.095861  ...    0.702636    0.099429            2
58     58 -1.012231     0.097438  ...    0.700027    0.100436            2
59     59  0.965008     0.701532  ...    0.098191    0.098514            0
60     60 -0.959483     0.106902  ...    0.109523    0.102983            1
61     61 -0.985678     0.096959  ...    0.714263    0.096561            2
62     62 -0.955727     0.104273  ...    0.104097    0.097057            1
63     63 -1.002032     0.098431  ...    0.101585    0.700095            3

[16 rows x 20 columns]
MLLITE_CLASS_SQL_ERROR ('FourClass_100_small', 'RidgeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 5.177710480975574e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
48    0.702665     0.702665 -1.433470e-08
49    0.101342     0.101343 -7.184159e-07
50    0.105207     0.105207 -4.335645e-07
51    0.099122     0.099123 -2.647606e-07
52    0.692367     0.692370 -3.957668e-06
53    0.099414     0.099414  5.722311e-07
54    0.697374     0.697376 -1.695744e-06
55    0.704853     0.704853  7.513542e-07
56    0.099468     0.099468 -2.451509e-07
57    0.095861     0.095861  7.063535e-07
58    0.097439     0.097438  8.434662e-07
59    0.701532     0.701532  1.313389e-07
60    0.106902     0.106902 -4.178430e-07
61    0.096960     0.096959  8.270788e-07
62    0.104272     0.104273 -4.534230e-07
63    0.098431     0.098431 -3.380556e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_100_small', 'RidgeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 4.902843116791431e-07
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
48    0.097775     0.097774  1.657248e-07
49    0.093991     0.093992 -3.024879e-07
50    0.691622     0.691621  7.955074e-07
51    0.104810     0.104811 -6.102847e-07
52    0.103318     0.103316  1.665071e-06
53    0.695526     0.695528 -1.325285e-06
54    0.102982     0.102981  1.288428e-06
55    0.096955     0.096955 -5.568951e-07
56    0.100500     0.100500  4.802877e-08
57    0.102073     0.102072  3.219365e-07
58    0.102098     0.102098 -5.824302e-07
59    0.101763     0.101763  7.114913e-08
60    0.680592     0.680592  3.528975e-07
61    0.092216     0.092217 -6.770160e-07
62    0.694574     0.694573  1.436914e-06
63    0.099890     0.099891 -7.372768e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_100_small', 'RidgeClassifier', 'sqlite') ('Py_Proba_2', 'SQL_Proba_2') 4.049052634660412e-07
    Py_Proba_2  SQL_Proba_2   SQL_Error_2
48    0.099947     0.099947 -2.291419e-07
49    0.704668     0.704667  6.126090e-07
50    0.100236     0.100236 -6.677226e-08
51    0.095757     0.095757 -2.653523e-07
52    0.100573     0.100573  6.201467e-07
53    0.102598     0.102598  3.451942e-07
54    0.097402     0.097402  4.518664e-07
55    0.099557     0.099557 -2.913092e-07
56    0.703393     0.703393  4.221365e-07
57    0.702636     0.702637 -7.940999e-07
58    0.700027     0.700026  5.733750e-07
59    0.098191     0.098191 -8.480903e-08
60    0.109523     0.109523 -5.228579e-09
61    0.714263     0.714262  2.545623e-07
62    0.104097     0.104097 -5.209083e-07
63    0.101585     0.101585 -1.627761e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_100_small', 'RidgeClassifier', 'sqlite') ('Py_Proba_3', 'SQL_Proba_3') 4.1269302706583785e-07
    Py_Proba_3  SQL_Proba_3   SQL_Error_3
48    0.099614     0.099614  2.044117e-07
49    0.099999     0.099998  4.380972e-07
50    0.102935     0.102935 -2.579177e-07
51    0.700310     0.700309  1.125496e-06
52    0.103742     0.103741  1.627748e-06
53    0.102461     0.102461  4.749144e-07
54    0.102242     0.102242  3.740622e-08
55    0.098635     0.098635  7.449836e-08
56    0.096638     0.096639 -2.399155e-07
57    0.099429     0.099430 -3.459488e-07
58    0.100436     0.100437 -7.524547e-07
59    0.098514     0.098514 -1.325802e-07
60    0.102983     0.102983  9.997641e-08
61    0.096561     0.096561 -4.046250e-07
62    0.097057     0.097057 -4.700329e-07
63    0.700095     0.700093  1.230658e-06
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_100_small', 'RidgeClassifier', 'sqlite', 'Success')
    Py_Decision  SQL_Decision
48            0             0
49            2             2
50            1             1
51            3             3
52            0             0
53            1             1
54            0             0
55            0             0
56            2             2
57            2             2
58            2             2
59            0             0
60            1             1
61            2             2
62            1             1
63            3             3
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_FourClass_100_small_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_100_small', 'RidgeClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_100_small', 'RidgeClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_100_small', 'RidgeClassifier', 'pgsql')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_100_small', 'RidgeClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
