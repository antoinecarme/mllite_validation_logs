    mean radius  mean texture  ...  worst fractal dimension  target
0        19.730         19.82  ...                  0.12970       0
1        21.370         15.10  ...                  0.08666       0
2        19.400         23.50  ...                  0.07614       0
3        10.170         14.88  ...                  0.08020       1
4         8.888         14.64  ...                  0.10840       1
..          ...           ...  ...                      ...     ...
66       21.750         20.99  ...                  0.08858       0
67       12.400         17.68  ...                  0.09359       1
68       13.980         19.62  ...                  0.10550       0
69       20.200         26.83  ...                  0.07632       0
70       11.430         17.31  ...                  0.08096       1

[71 rows x 31 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[1.973e+01 1.982e+01 1.307e+02 1.206e+03 1.062e-01 1.849e-01 2.417e-01
  9.740e-02 1.733e-01 6.697e-02 7.661e-01 7.800e-01 4.115e+00 9.281e+01
  8.482e-03 5.057e-02 6.800e-02 1.971e-02 1.467e-02 7.259e-03 2.528e+01
  2.559e+01 1.598e+02 1.933e+03 1.710e-01 5.955e-01 8.489e-01 2.507e-01
  2.749e-01 1.297e-01]
 [2.137e+01 1.510e+01 1.413e+02 1.386e+03 1.001e-01 1.515e-01 1.932e-01
  1.255e-01 1.973e-01 6.183e-02 3.414e-01 1.309e+00 2.407e+00 3.906e+01
  4.426e-03 2.675e-02 3.437e-02 1.343e-02 1.675e-02 4.367e-03 2.269e+01
  2.184e+01 1.521e+02 1.535e+03 1.192e-01 2.840e-01 4.024e-01 1.966e-01
  2.730e-01 8.666e-02]
 [1.940e+01 2.350e+01 1.291e+02 1.155e+03 1.027e-01 1.558e-01 2.049e-01
  8.886e-02 1.978e-01 6.000e-02 5.243e-01 1.802e+00 4.037e+00 6.041e+01
  1.061e-02 3.252e-02 3.915e-02 1.559e-02 2.186e-02 3.949e-03 2.165e+01
  3.053e+01 1.449e+02 1.417e+03 1.463e-01 2.968e-01 3.458e-01 1.564e-01
  2.920e-01 7.614e-02]
 [1.017e+01 1.488e+01 6.455e+01 3.119e+02 1.134e-01 8.061e-02 1.084e-02
  1.290e-02 2.743e-01 6.960e-02 5.158e-01 1.441e+00 3.312e+00 3.462e+01
  7.514e-03 1.099e-02 7.665e-03 8.193e-03 4.183e-02 5.953e-03 1.102e+01
  1.745e+01 6.986e+01 3.686e+02 1.275e-01 9.866e-02 2.168e-02 2.579e-02
  3.557e-01 8.020e-02]
 [8.888e+00 1.464e+01 5.879e+01 2.440e+02 9.783e-02 1.531e-01 8.606e-02
  2.872e-02 1.902e-01 8.980e-02 5.262e-01 8.522e-01 3.168e+00 2.544e+01
  1.721e-02 9.368e-02 5.671e-02 1.766e-02 2.541e-02 2.193e-02 9.733e+00
  1.567e+01 6.256e+01 2.844e+02 1.207e-01 2.436e-01 1.434e-01 4.786e-02
  2.254e-01 1.084e-01]] [0 0 0 1 1]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.027, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 71, "dataset_features" : 30 },
	"classes" : [ 0, 1 ],
	"layers" : {
		"sizes" : [ 30, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 30 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 30,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.057859, 0.217923, -0.171459, -0.030922 ],
			"coeffs_01" : [ 0.055273, -0.294738, 0.121763, 0.013379 ],
			"coeffs_02" : [ 0.336599, 0.089131, 0.349281, -0.065839 ],
			"coeffs_03" : [ 0.396764, -0.371462, -0.175984, 0.156287 ],
			"coeffs_04" : [ 0.197248, -0.201252, -0.213785, -0.325985 ],
			"coeffs_05" : [ 0.160916, -0.414717, -0.066979, 0.019589 ],
			"coeffs_06" : [ -0.103510, -0.381641, -0.215094, 0.343634 ],
			"coeffs_07" : [ -0.051051, 0.003465, -0.376151, 0.023954 ],
			"coeffs_08" : [ -0.150760, 0.155011, -0.084525, 0.177865 ],
			"coeffs_09" : [ -0.302190, 0.367910, -0.307576, 0.225757 ],
			"coeffs_10" : [ -0.322895, 0.231126, 0.098946, 0.381596 ],
			"coeffs_11" : [ -0.286471, -0.323759, 0.140531, 0.151490 ],
			"coeffs_12" : [ 0.261441, 0.360349, 0.319697, -0.272891 ],
			"coeffs_13" : [ 0.230718, 0.342355, -0.253665, 0.187635 ],
			"coeffs_14" : [ 0.101471, 0.031502, 0.053316, 0.239946 ],
			"coeffs_15" : [ -0.381983, 0.053013, 0.172071, 0.241667 ],
			"coeffs_16" : [ -0.380006, 0.291182, -0.233863, -0.388472 ],
			"coeffs_17" : [ 0.392918, 0.400927, -0.055371, -0.341627 ],
			"coeffs_18" : [ -0.037843, 0.401676, -0.303112, 0.165607 ],
			"coeffs_19" : [ 0.166412, 0.248151, 0.370137, -0.212163 ],
			"coeffs_20" : [ 0.155352, 0.295639, 0.307756, -0.037646 ],
			"coeffs_21" : [ -0.394806, 0.209921, 0.004659, -0.079595 ],
			"coeffs_22" : [ -0.329867, -0.397437, -0.153652, 0.378767 ],
			"coeffs_23" : [ -0.003113, -0.085654, -0.097285, -0.376288 ],
			"coeffs_24" : [ 0.117874, -0.127784, -0.163032, -0.085359 ],
			"coeffs_25" : [ 0.152267, -0.296816, -0.138066, 0.241600 ],
			"coeffs_26" : [ 0.256281, 0.357613, 0.305245, 0.238515 ],
			"coeffs_27" : [ -0.198967, 0.039600, 0.117358, 0.284766 ],
			"coeffs_28" : [ 0.184507, -0.001030, 0.241597, 0.291647 ],
			"coeffs_29" : [ 0.047069, -0.144422, -0.114846, -0.208159 ],
			"intercepts" : [ 0.198402, 0.233720, -0.290591, 0.136162 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.450622, -0.001867, 0.114176, -0.284529, 0.304740, -0.668273, -0.635713, 0.545189 ],
			"coeffs_1" : [ 0.640801, -0.467921, -0.265616, -0.534516, -0.540622, -0.542913, -0.234787, -0.161909 ],
			"coeffs_2" : [ -0.462791, -0.509832, -0.625969, 0.136479, -0.464325, -0.560014, 0.140396, 0.245475 ],
			"coeffs_3" : [ -0.111183, 0.189751, 0.083580, -0.467854, -0.116517, 0.586027, 0.704649, -0.112664 ],
			"intercepts" : [ -0.601465, -0.343582, 0.280885, -0.585498, 0.230867, -0.374832, 0.651135, 0.691990 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.299766, 0.339618, -0.315008, 0.480827, -0.555063, 0.391634 ],
			"coeffs_1" : [ 0.136049, -0.365438, 0.304756, 0.303771, 0.018379, -0.284353 ],
			"coeffs_2" : [ 0.529248, 0.575728, -0.264870, 0.092863, 0.337486, 0.094905 ],
			"coeffs_3" : [ -0.013455, 0.598982, 0.231906, 0.268682, -0.460970, -0.088915 ],
			"coeffs_4" : [ 0.514863, 0.380094, -0.189793, -0.154642, 0.441581, -0.321307 ],
			"coeffs_5" : [ 0.085396, 0.534354, -0.603413, -0.358589, -0.368321, -0.341001 ],
			"coeffs_6" : [ -0.264320, -0.009806, -0.535956, 0.404701, 0.617728, 0.111382 ],
			"coeffs_7" : [ 0.008920, 0.274014, 0.067016, 0.333964, 0.029589, 0.409482 ],
			"intercepts" : [ 0.283688, -0.262806, -0.187150, -0.549459, -0.366869, -0.378888 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.237654 ],
			"coeffs_1" : [ -0.152072 ],
			"coeffs_2" : [ -0.393289 ],
			"coeffs_3" : [ -0.795145 ],
			"coeffs_4" : [ 0.794913 ],
			"coeffs_5" : [ -0.374243 ],
			"intercepts" : [ -0.233400 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_sampled_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 71, "dataset_features" : 30 },
	"classes" : [ 0, 1 ],
	"layers" : {
		"sizes" : [ 30, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 30 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 30,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.057859, 0.217923, -0.171459, -0.030922 ],
			"coeffs_01" : [ 0.055273, -0.294738, 0.121763, 0.013379 ],
			"coeffs_02" : [ 0.336599, 0.089131, 0.349281, -0.065839 ],
			"coeffs_03" : [ 0.396764, -0.371462, -0.175984, 0.156287 ],
			"coeffs_04" : [ 0.197248, -0.201252, -0.213785, -0.325985 ],
			"coeffs_05" : [ 0.160916, -0.414717, -0.066979, 0.019589 ],
			"coeffs_06" : [ -0.103510, -0.381641, -0.215094, 0.343634 ],
			"coeffs_07" : [ -0.051051, 0.003465, -0.376151, 0.023954 ],
			"coeffs_08" : [ -0.150760, 0.155011, -0.084525, 0.177865 ],
			"coeffs_09" : [ -0.302190, 0.367910, -0.307576, 0.225757 ],
			"coeffs_10" : [ -0.322895, 0.231126, 0.098946, 0.381596 ],
			"coeffs_11" : [ -0.286471, -0.323759, 0.140531, 0.151490 ],
			"coeffs_12" : [ 0.261441, 0.360349, 0.319697, -0.272891 ],
			"coeffs_13" : [ 0.230718, 0.342355, -0.253665, 0.187635 ],
			"coeffs_14" : [ 0.101471, 0.031502, 0.053316, 0.239946 ],
			"coeffs_15" : [ -0.381983, 0.053013, 0.172071, 0.241667 ],
			"coeffs_16" : [ -0.380006, 0.291182, -0.233863, -0.388472 ],
			"coeffs_17" : [ 0.392918, 0.400927, -0.055371, -0.341627 ],
			"coeffs_18" : [ -0.037843, 0.401676, -0.303112, 0.165607 ],
			"coeffs_19" : [ 0.166412, 0.248151, 0.370137, -0.212163 ],
			"coeffs_20" : [ 0.155352, 0.295639, 0.307756, -0.037646 ],
			"coeffs_21" : [ -0.394806, 0.209921, 0.004659, -0.079595 ],
			"coeffs_22" : [ -0.329867, -0.397437, -0.153652, 0.378767 ],
			"coeffs_23" : [ -0.003113, -0.085654, -0.097285, -0.376288 ],
			"coeffs_24" : [ 0.117874, -0.127784, -0.163032, -0.085359 ],
			"coeffs_25" : [ 0.152267, -0.296816, -0.138066, 0.241600 ],
			"coeffs_26" : [ 0.256281, 0.357613, 0.305245, 0.238515 ],
			"coeffs_27" : [ -0.198967, 0.039600, 0.117358, 0.284766 ],
			"coeffs_28" : [ 0.184507, -0.001030, 0.241597, 0.291647 ],
			"coeffs_29" : [ 0.047069, -0.144422, -0.114846, -0.208159 ],
			"intercepts" : [ 0.198402, 0.233720, -0.290591, 0.136162 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.450622, -0.001867, 0.114176, -0.284529, 0.304740, -0.668273, -0.635713, 0.545189 ],
			"coeffs_1" : [ 0.640801, -0.467921, -0.265616, -0.534516, -0.540622, -0.542913, -0.234787, -0.161909 ],
			"coeffs_2" : [ -0.462791, -0.509832, -0.625969, 0.136479, -0.464325, -0.560014, 0.140396, 0.245475 ],
			"coeffs_3" : [ -0.111183, 0.189751, 0.083580, -0.467854, -0.116517, 0.586027, 0.704649, -0.112664 ],
			"intercepts" : [ -0.601465, -0.343582, 0.280885, -0.585498, 0.230867, -0.374832, 0.651135, 0.691990 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.299766, 0.339618, -0.315008, 0.480827, -0.555063, 0.391634 ],
			"coeffs_1" : [ 0.136049, -0.365438, 0.304756, 0.303771, 0.018379, -0.284353 ],
			"coeffs_2" : [ 0.529248, 0.575728, -0.264870, 0.092863, 0.337486, 0.094905 ],
			"coeffs_3" : [ -0.013455, 0.598982, 0.231906, 0.268682, -0.460970, -0.088915 ],
			"coeffs_4" : [ 0.514863, 0.380094, -0.189793, -0.154642, 0.441581, -0.321307 ],
			"coeffs_5" : [ 0.085396, 0.534354, -0.603413, -0.358589, -0.368321, -0.341001 ],
			"coeffs_6" : [ -0.264320, -0.009806, -0.535956, 0.404701, 0.617728, 0.111382 ],
			"coeffs_7" : [ 0.008920, 0.274014, 0.067016, 0.333964, 0.029589, 0.409482 ],
			"intercepts" : [ 0.283688, -0.262806, -0.187150, -0.549459, -0.366869, -0.378888 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.237654 ],
			"coeffs_1" : [ -0.152072 ],
			"coeffs_2" : [ -0.393289 ],
			"coeffs_3" : [ -0.795145 ],
			"coeffs_4" : [ 0.794913 ],
			"coeffs_5" : [ -0.374243 ],
			"intercepts" : [ -0.233400 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1 ],
	"dataset" : 	{
		"dataset_features" : 30,
		"dataset_rows" : 71
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 30,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 30,
			"NbOutputs" : 4,
			"coeffs_00" : [ -0.057859, 0.217923, -0.171459, -0.030922 ],
			"coeffs_01" : [ 0.055273, -0.294738, 0.121763, 0.013379 ],
			"coeffs_02" : [ 0.336599, 0.089131, 0.349281, -0.065839 ],
			"coeffs_03" : [ 0.396764, -0.371462, -0.175984, 0.156287 ],
			"coeffs_04" : [ 0.197248, -0.201252, -0.213785, -0.325985 ],
			"coeffs_05" : [ 0.160916, -0.414717, -0.066979, 0.019589 ],
			"coeffs_06" : [ -0.10351, -0.381641, -0.215094, 0.343634 ],
			"coeffs_07" : [ -0.051051, 0.003465, -0.376151, 0.023954 ],
			"coeffs_08" : [ -0.15076, 0.155011, -0.084525, 0.177865 ],
			"coeffs_09" : [ -0.30219, 0.36791, -0.307576, 0.225757 ],
			"coeffs_10" : [ -0.322895, 0.231126, 0.098946, 0.381596 ],
			"coeffs_11" : [ -0.286471, -0.323759, 0.140531, 0.15149 ],
			"coeffs_12" : [ 0.261441, 0.360349, 0.319697, -0.272891 ],
			"coeffs_13" : [ 0.230718, 0.342355, -0.253665, 0.187635 ],
			"coeffs_14" : [ 0.101471, 0.031502, 0.053316, 0.239946 ],
			"coeffs_15" : [ -0.381983, 0.053013, 0.172071, 0.241667 ],
			"coeffs_16" : [ -0.380006, 0.291182, -0.233863, -0.388472 ],
			"coeffs_17" : [ 0.392918, 0.400927, -0.055371, -0.341627 ],
			"coeffs_18" : [ -0.037843, 0.401676, -0.303112, 0.165607 ],
			"coeffs_19" : [ 0.166412, 0.248151, 0.370137, -0.212163 ],
			"coeffs_20" : [ 0.155352, 0.295639, 0.307756, -0.037646 ],
			"coeffs_21" : [ -0.394806, 0.209921, 0.004659, -0.079595 ],
			"coeffs_22" : [ -0.329867, -0.397437, -0.153652, 0.378767 ],
			"coeffs_23" : [ -0.003113, -0.085654, -0.097285, -0.376288 ],
			"coeffs_24" : [ 0.117874, -0.127784, -0.163032, -0.085359 ],
			"coeffs_25" : [ 0.152267, -0.296816, -0.138066, 0.2416 ],
			"coeffs_26" : [ 0.256281, 0.357613, 0.305245, 0.238515 ],
			"coeffs_27" : [ -0.198967, 0.0396, 0.117358, 0.284766 ],
			"coeffs_28" : [ 0.184507, -0.00103, 0.241597, 0.291647 ],
			"coeffs_29" : [ 0.047069, -0.144422, -0.114846, -0.208159 ],
			"intercepts" : [ 0.198402, 0.23372, -0.290591, 0.136162 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.450622, -0.001867, 0.114176, -0.284529, 0.30474, -0.668273, -0.635713, 0.545189 ],
			"coeffs_1" : [ 0.640801, -0.467921, -0.265616, -0.534516, -0.540622, -0.542913, -0.234787, -0.161909 ],
			"coeffs_2" : [ -0.462791, -0.509832, -0.625969, 0.136479, -0.464325, -0.560014, 0.140396, 0.245475 ],
			"coeffs_3" : [ -0.111183, 0.189751, 0.08358, -0.467854, -0.116517, 0.586027, 0.704649, -0.112664 ],
			"intercepts" : [ -0.601465, -0.343582, 0.280885, -0.585498, 0.230867, -0.374832, 0.651135, 0.69199 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.299766, 0.339618, -0.315008, 0.480827, -0.555063, 0.391634 ],
			"coeffs_1" : [ 0.136049, -0.365438, 0.304756, 0.303771, 0.018379, -0.284353 ],
			"coeffs_2" : [ 0.529248, 0.575728, -0.26487, 0.092863, 0.337486, 0.094905 ],
			"coeffs_3" : [ -0.013455, 0.598982, 0.231906, 0.268682, -0.46097, -0.088915 ],
			"coeffs_4" : [ 0.514863, 0.380094, -0.189793, -0.154642, 0.441581, -0.321307 ],
			"coeffs_5" : [ 0.085396, 0.534354, -0.603413, -0.358589, -0.368321, -0.341001 ],
			"coeffs_6" : [ -0.26432, -0.009806, -0.535956, 0.404701, 0.617728, 0.111382 ],
			"coeffs_7" : [ 0.00892, 0.274014, 0.067016, 0.333964, 0.029589, 0.409482 ],
			"intercepts" : [ 0.283688, -0.262806, -0.18715, -0.549459, -0.366869, -0.378888 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.237654 ],
			"coeffs_1" : [ -0.152072 ],
			"coeffs_2" : [ -0.393289 ],
			"coeffs_3" : [ -0.795145 ],
			"coeffs_4" : [ 0.794913 ],
			"coeffs_5" : [ -0.374243 ],
			"intercepts" : [ -0.2334 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 30, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[9.986e-01 1.400e-03]
 [9.994e-01 6.000e-04]
 [9.980e-01 2.000e-03]
 [8.396e-01 1.604e-01]
 [7.814e-01 2.186e-01]
 [9.072e-01 9.280e-02]
 [9.548e-01 4.520e-02]
 [8.936e-01 1.064e-01]
 [9.868e-01 1.320e-02]
 [9.705e-01 2.950e-02]
 [9.977e-01 2.300e-03]
 [9.983e-01 1.700e-03]
 [9.768e-01 2.320e-02]
 [9.992e-01 8.000e-04]
 [8.069e-01 1.931e-01]
 [9.070e-01 9.300e-02]
 [9.498e-01 5.020e-02]
 [9.629e-01 3.710e-02]
 [9.150e-01 8.500e-02]
 [9.182e-01 8.180e-02]
 [8.727e-01 1.273e-01]
 [9.791e-01 2.090e-02]
 [9.689e-01 3.110e-02]
 [9.560e-01 4.400e-02]
 [9.677e-01 3.230e-02]
 [9.555e-01 4.450e-02]
 [9.038e-01 9.620e-02]
 [9.995e-01 5.000e-04]
 [9.992e-01 8.000e-04]
 [9.396e-01 6.040e-02]
 [9.301e-01 6.990e-02]
 [9.969e-01 3.100e-03]
 [9.317e-01 6.830e-02]
 [9.928e-01 7.200e-03]
 [8.731e-01 1.269e-01]
 [9.702e-01 2.980e-02]
 [8.890e-01 1.110e-01]
 [9.712e-01 2.880e-02]
 [9.944e-01 5.600e-03]
 [7.404e-01 2.596e-01]
 [9.523e-01 4.770e-02]
 [9.233e-01 7.670e-02]
 [9.846e-01 1.540e-02]
 [9.876e-01 1.240e-02]
 [9.552e-01 4.480e-02]
 [8.328e-01 1.672e-01]
 [9.924e-01 7.600e-03]
 [7.959e-01 2.041e-01]
 [7.988e-01 2.012e-01]
 [9.910e-01 9.000e-03]
 [8.413e-01 1.587e-01]
 [9.579e-01 4.210e-02]
 [9.754e-01 2.460e-02]
 [8.900e-01 1.100e-01]
 [8.382e-01 1.618e-01]
 [9.986e-01 1.400e-03]
 [9.523e-01 4.770e-02]
 [8.677e-01 1.323e-01]
 [9.534e-01 4.660e-02]
 [9.988e-01 1.200e-03]
 [8.072e-01 1.928e-01]
 [9.999e-01 1.000e-04]
 [9.716e-01 2.840e-02]
 [8.705e-01 1.295e-01]
 [8.852e-01 1.148e-01]
 [9.146e-01 8.540e-02]
 [9.997e-01 3.000e-04]
 [9.170e-01 8.300e-02]
 [9.535e-01 4.650e-02]
 [9.988e-01 1.200e-03]
 [8.819e-01 1.181e-01]]
(71, 2)
(71,) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'BreastCancer_sampled', 'size': 71, 'accuracy': 0.4788732394366197, 'auc': 0.9077901430842608}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'BreastCancer_sampled', 'training_time_in_sec': 0.027, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_sampled_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BreastCancer_sampled', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('BreastCancer_sampled', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('BreastCancer_sampled', 'MLPClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BreastCancer_sampled', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 71 entries, 0 to 70
Data columns (total 30 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     71 non-null     float32
 1   X_1     71 non-null     float32
 2   X_2     71 non-null     float32
 3   X_3     71 non-null     float32
 4   X_4     71 non-null     float32
 5   X_5     71 non-null     float32
 6   X_6     71 non-null     float32
 7   X_7     71 non-null     float32
 8   X_8     71 non-null     float32
 9   X_9     71 non-null     float32
 10  X_10    71 non-null     float32
 11  X_11    71 non-null     float32
 12  X_12    71 non-null     float32
 13  X_13    71 non-null     float32
 14  X_14    71 non-null     float32
 15  X_15    71 non-null     float32
 16  X_16    71 non-null     float32
 17  X_17    71 non-null     float32
 18  X_18    71 non-null     float32
 19  X_19    71 non-null     float32
 20  X_20    71 non-null     float32
 21  X_21    71 non-null     float32
 22  X_22    71 non-null     float32
 23  X_23    71 non-null     float32
 24  X_24    71 non-null     float32
 25  X_25    71 non-null     float32
 26  X_26    71 non-null     float32
 27  X_27    71 non-null     float32
 28  X_28    71 non-null     float32
 29  X_29    71 non-null     float32
dtypes: float32(30)
memory usage: 8.9 KB
             X_0        X_1         X_2  ...     X_27    X_28     X_29
index                                    ...                          
0      19.730000  19.820000  130.699997  ...  0.25070  0.2749  0.12970
1      21.370001  15.100000  141.300003  ...  0.19660  0.2730  0.08666
2      19.400000  23.500000  129.100006  ...  0.15640  0.2920  0.07614
3      10.170000  14.880000   64.550003  ...  0.02579  0.3557  0.08020
4       8.888000  14.640000   58.790001  ...  0.04786  0.2254  0.10840
...          ...        ...         ...  ...      ...     ...      ...
66     21.750000  20.990000  147.300003  ...  0.18410  0.2833  0.08858
67     12.400000  17.680000   81.470001  ...  0.07370  0.2556  0.09359
68     13.980000  19.620001   91.120003  ...  0.18270  0.3179  0.10550
69     20.200001  26.830000  133.699997  ...  0.21520  0.3271  0.07632
70     11.430000  17.309999   73.660004  ...  0.06402  0.2584  0.08096

[71 rows x 30 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 71 entries, 0 to 70
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          71 non-null     int64  
 1   Score_0        71 non-null     float64
 2   Proba_0        71 non-null     float64
 3   LogProba_0     71 non-null     float64
 4   Score_1        71 non-null     float64
 5   Proba_1        71 non-null     float64
 6   LogProba_1     71 non-null     float64
 7   Decision       71 non-null     int64  
 8   DecisionProba  71 non-null     float64
dtypes: float64(7), int64(2)
memory usage: 5.1 KB
    index   Score_0   Proba_0  ...  LogProba_1  Decision  DecisionProba
0       0  3.277098  0.998578  ...   -6.555619         0       0.998578
1       1  3.735615  0.999431  ...   -7.471799         0       0.999431
2       2  3.108800  0.998010  ...   -6.219592         0       0.998010
3       3  0.827541  0.839577  ...   -1.829940         0       0.839577
4       4  0.636858  0.781378  ...   -1.520412         0       0.781378
..    ...       ...       ...  ...         ...       ...            ...
66     66  4.107298  0.999729  ...   -8.214866         0       0.999729
67     67  1.201173  0.917006  ...   -2.488988         0       0.917006
68     68  1.509883  0.953459  ...   -3.067425         0       0.953459
69     69  3.363733  0.998804  ...   -6.728663         0       0.998804
70     70  1.005430  0.881933  ...   -2.136500         0       0.881933

[71 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
55     55  3.289677     0.998613  ...    0.998613    0.001387            0
56     56  1.496567     0.952263  ...    0.952263    0.047737            0
57     57  0.940181     0.867653  ...    0.867652    0.132348            0
58     58  1.508834     0.953366  ...    0.953365    0.046635            0
59     59  3.360123     0.998795  ...    0.998795    0.001205            0
60     60  0.715971     0.807204  ...    0.807202    0.192798            0
61     61  4.804354     0.999933  ...    0.999933    0.000067            0
62     62  1.765531     0.971559  ...    0.971559    0.028442            0
63     63  0.952582     0.870475  ...    0.870474    0.129526            0
64     64  1.021292     0.885196  ...    0.885195    0.114805            0
65     65  1.185853     0.914644  ...    0.914643    0.085357            0
66     66  4.107298     0.999729  ...    0.999729    0.000271            0
67     67  1.201173     0.917006  ...    0.917006    0.082994            0
68     68  1.509883     0.953459  ...    0.953458    0.046542            0
69     69  3.363733     0.998804  ...    0.998804    0.001196            0
70     70  1.005430     0.881933  ...    0.881931    0.118069            0

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('BreastCancer_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 5.049650673129937e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
55    0.998613     0.998613 -5.975630e-08
56    0.952263     0.952263 -4.205146e-07
57    0.867652     0.867653 -8.347869e-07
58    0.953365     0.953366 -6.793885e-07
59    0.998795     0.998795  2.603269e-10
60    0.807202     0.807204 -1.573610e-06
61    0.999933     0.999933  2.221583e-08
62    0.971559     0.971559 -2.384154e-07
63    0.870474     0.870475 -9.847408e-07
64    0.885195     0.885196 -9.949401e-07
65    0.914643     0.914644 -1.049335e-06
66    0.999729     0.999729 -4.435058e-09
67    0.917006     0.917006 -4.112391e-07
68    0.953458     0.953459 -7.503347e-07
69    0.998804     0.998804 -1.540860e-08
70    0.881931     0.881933 -1.759690e-06
MLLITE_CLASS_SQL_ERROR ('BreastCancer_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 5.029264987699281e-07
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
55    0.001387     0.001387  4.753269e-08
56    0.047737     0.047737  4.316905e-07
57    0.132348     0.132347  8.198857e-07
58    0.046635     0.046634  6.793885e-07
59    0.001205     0.001205  2.756294e-08
60    0.192798     0.192796  1.543807e-06
61    0.000067     0.000067  4.355967e-09
62    0.028442     0.028441  2.626298e-07
63    0.129526     0.129525  9.698396e-07
64    0.114805     0.114804  1.017292e-06
65    0.085357     0.085356  1.041884e-06
66    0.000271     0.000271  1.031403e-08
67    0.082994     0.082994  4.410414e-07
68    0.046542     0.046541  7.615106e-07
69    0.001196     0.001196  3.647977e-08
70    0.118069     0.118067  1.737338e-06
MLLITE_CLASS_SQL_EXECUTION_STATUS ('BreastCancer_sampled', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
55            0             0
56            0             0
57            0             0
58            0             0
59            0             0
60            0             0
61            0             0
62            0             0
63            0             0
64            0             0
65            0             0
66            0             0
67            0             0
68            0             0
69            0             0
70            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_sampled_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BreastCancer_sampled', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('BreastCancer_sampled', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('BreastCancer_sampled', 'MLPClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BreastCancer_sampled', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 71 entries, 0 to 70
Data columns (total 30 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     71 non-null     float32
 1   X_1     71 non-null     float32
 2   X_2     71 non-null     float32
 3   X_3     71 non-null     float32
 4   X_4     71 non-null     float32
 5   X_5     71 non-null     float32
 6   X_6     71 non-null     float32
 7   X_7     71 non-null     float32
 8   X_8     71 non-null     float32
 9   X_9     71 non-null     float32
 10  X_10    71 non-null     float32
 11  X_11    71 non-null     float32
 12  X_12    71 non-null     float32
 13  X_13    71 non-null     float32
 14  X_14    71 non-null     float32
 15  X_15    71 non-null     float32
 16  X_16    71 non-null     float32
 17  X_17    71 non-null     float32
 18  X_18    71 non-null     float32
 19  X_19    71 non-null     float32
 20  X_20    71 non-null     float32
 21  X_21    71 non-null     float32
 22  X_22    71 non-null     float32
 23  X_23    71 non-null     float32
 24  X_24    71 non-null     float32
 25  X_25    71 non-null     float32
 26  X_26    71 non-null     float32
 27  X_27    71 non-null     float32
 28  X_28    71 non-null     float32
 29  X_29    71 non-null     float32
dtypes: float32(30)
memory usage: 8.9 KB
             X_0        X_1         X_2  ...     X_27    X_28     X_29
index                                    ...                          
0      19.730000  19.820000  130.699997  ...  0.25070  0.2749  0.12970
1      21.370001  15.100000  141.300003  ...  0.19660  0.2730  0.08666
2      19.400000  23.500000  129.100006  ...  0.15640  0.2920  0.07614
3      10.170000  14.880000   64.550003  ...  0.02579  0.3557  0.08020
4       8.888000  14.640000   58.790001  ...  0.04786  0.2254  0.10840
...          ...        ...         ...  ...      ...     ...      ...
66     21.750000  20.990000  147.300003  ...  0.18410  0.2833  0.08858
67     12.400000  17.680000   81.470001  ...  0.07370  0.2556  0.09359
68     13.980000  19.620001   91.120003  ...  0.18270  0.3179  0.10550
69     20.200001  26.830000  133.699997  ...  0.21520  0.3271  0.07632
70     11.430000  17.309999   73.660004  ...  0.06402  0.2584  0.08096

[71 rows x 30 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('BreastCancer_sampled', 'MLPClassifier', 'sqlite', '')
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_BreastCancer_sampled_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('BreastCancer_sampled', 'MLPClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('BreastCancer_sampled', 'MLPClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('BreastCancer_sampled', 'MLPClassifier', 'pgsql')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('BreastCancer_sampled', 'MLPClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
