READING_CSV census_medium ['data/medium/census_medium.csv']
     age  workclass    fnlwgt  ...  hoursperweek  native-country  target
0    2.0        0.0   77516.0  ...           2.0             0.0   <=50K
1    3.0        0.0   83311.0  ...           0.0             0.0   <=50K
2    2.0        0.0  215646.0  ...           2.0             0.0   <=50K
3    3.0        0.0  234721.0  ...           2.0             0.0   <=50K
4    1.0        0.0  338409.0  ...           2.0             0.0   <=50K
..   ...        ...       ...  ...           ...             ...     ...
507  2.0        0.0  112131.0  ...           2.0             0.0   <=50K
508  3.0        0.0  543162.0  ...           2.0             0.0   <=50K
509  2.0        0.0   91996.0  ...           2.0             0.0   <=50K
510  3.0        0.0  141944.0  ...           2.0             0.0   <=50K
511  3.0        0.0  251804.0  ...           1.0             0.0   <=50K

[512 rows x 15 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[2.00000e+00 0.00000e+00 7.75160e+04 0.00000e+00 1.30000e+01 0.00000e+00
  0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 1.00000e+00 0.00000e+00
  2.00000e+00 0.00000e+00]
 [3.00000e+00 0.00000e+00 8.33110e+04 0.00000e+00 1.30000e+01 0.00000e+00
  0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00
  0.00000e+00 0.00000e+00]
 [2.00000e+00 0.00000e+00 2.15646e+05 0.00000e+00 9.00000e+00 0.00000e+00
  0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00
  2.00000e+00 0.00000e+00]
 [3.00000e+00 0.00000e+00 2.34721e+05 0.00000e+00 7.00000e+00 0.00000e+00
  0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00
  2.00000e+00 0.00000e+00]
 [1.00000e+00 0.00000e+00 3.38409e+05 0.00000e+00 1.30000e+01 0.00000e+00
  0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00
  2.00000e+00 0.00000e+00]] ['<=50K' '<=50K' '<=50K' '<=50K' '<=50K']
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_OO8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.039, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_OO8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 512, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"layers" : {
		"sizes" : [ 14, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 14 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 14,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.140631, 0.209992, -0.290350, -0.042498 ],
			"coeffs_01" : [ 0.106196, -0.405079, 0.167347, 0.018387 ],
			"coeffs_02" : [ 0.401633, 0.033205, 0.425472, -0.090487 ],
			"coeffs_03" : [ 0.573998, -0.510525, -0.241867, 0.214797 ],
			"coeffs_04" : [ 0.210775, -0.366229, -0.348595, -0.448023 ],
			"coeffs_05" : [ 0.250130, -0.569974, -0.092054, 0.026923 ],
			"coeffs_06" : [ -0.114696, -0.524515, -0.295619, 0.472280 ],
			"coeffs_07" : [ -0.042435, 0.004762, -0.516970, 0.032922 ],
			"coeffs_08" : [ -0.176366, 0.213042, -0.116169, 0.244452 ],
			"coeffs_09" : [ -0.384231, 0.505643, -0.422723, 0.310274 ],
			"coeffs_10" : [ -0.503336, 0.230330, 0.082614, 0.524453 ],
			"coeffs_11" : [ -0.453923, -0.535188, 0.138009, 0.208203 ],
			"coeffs_12" : [ 0.297448, 0.405719, 0.384668, -0.375053 ],
			"coeffs_13" : [ 0.345192, 0.470522, -0.348629, 0.257880 ],
			"intercepts" : [ 0.079899, -0.046450, 0.018434, 0.329774 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.606422, 0.186847, 0.204802, 0.406786, -0.603558, 0.404326, -0.307316, -0.653897 ],
			"coeffs_1" : [ 0.697656, 0.757507, -0.164261, -0.575044, -0.025484, 0.604246, -0.435326, 0.278759 ],
			"coeffs_2" : [ 0.318401, 0.516373, 0.537208, -0.357124, 0.297565, 0.410830, 0.605333, -0.063368 ],
			"coeffs_3" : [ -0.627765, 0.353350, 0.007842, -0.133978, -0.519289, -0.668986, -0.258634, 0.637559 ],
			"intercepts" : [ 0.029435, -0.042913, -0.252283, -0.633386, 0.235601, -0.304604, -0.185523, -0.143680 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.269611, -0.462554, -0.215160, 0.376506, 0.431074, 0.557300 ],
			"coeffs_1" : [ 0.475690, 0.289921, -0.370287, 0.061712, 0.182889, 0.443776 ],
			"coeffs_2" : [ 0.321790, -0.078411, 0.289606, 0.454500, 0.107910, -0.225065 ],
			"coeffs_3" : [ -0.178974, -0.324393, 0.344409, 0.364227, -0.452853, 0.212193 ],
			"coeffs_4" : [ -0.417195, -0.001729, 0.122957, -0.263423, 0.299111, -0.618701 ],
			"coeffs_5" : [ -0.588556, 0.412714, 0.507989, -0.433210, -0.245913, -0.494865 ],
			"coeffs_6" : [ -0.500519, -0.609476, -0.327690, -0.149899, -0.428461, -0.472013 ],
			"coeffs_7" : [ -0.579535, 0.126355, -0.429881, -0.518473, 0.129981, 0.227266 ],
			"intercepts" : [ -0.102936, 0.092885, -0.015786, -0.433148, -0.107874, 0.542555 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.922603 ],
			"coeffs_1" : [ -0.067759 ],
			"coeffs_2" : [ -0.710605 ],
			"coeffs_3" : [ -0.449855 ],
			"coeffs_4" : [ 0.385942 ],
			"coeffs_5" : [ -0.766597 ],
			"intercepts" : [ 0.414339 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_medium_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('census_medium', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_OO8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_OO8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 512, "dataset_features" : 14 },
	"classes" : [ "<=50K", ">50K" ],
	"layers" : {
		"sizes" : [ 14, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 14 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 14,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.140631, 0.209992, -0.290350, -0.042498 ],
			"coeffs_01" : [ 0.106196, -0.405079, 0.167347, 0.018387 ],
			"coeffs_02" : [ 0.401633, 0.033205, 0.425472, -0.090487 ],
			"coeffs_03" : [ 0.573998, -0.510525, -0.241867, 0.214797 ],
			"coeffs_04" : [ 0.210775, -0.366229, -0.348595, -0.448023 ],
			"coeffs_05" : [ 0.250130, -0.569974, -0.092054, 0.026923 ],
			"coeffs_06" : [ -0.114696, -0.524515, -0.295619, 0.472280 ],
			"coeffs_07" : [ -0.042435, 0.004762, -0.516970, 0.032922 ],
			"coeffs_08" : [ -0.176366, 0.213042, -0.116169, 0.244452 ],
			"coeffs_09" : [ -0.384231, 0.505643, -0.422723, 0.310274 ],
			"coeffs_10" : [ -0.503336, 0.230330, 0.082614, 0.524453 ],
			"coeffs_11" : [ -0.453923, -0.535188, 0.138009, 0.208203 ],
			"coeffs_12" : [ 0.297448, 0.405719, 0.384668, -0.375053 ],
			"coeffs_13" : [ 0.345192, 0.470522, -0.348629, 0.257880 ],
			"intercepts" : [ 0.079899, -0.046450, 0.018434, 0.329774 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.606422, 0.186847, 0.204802, 0.406786, -0.603558, 0.404326, -0.307316, -0.653897 ],
			"coeffs_1" : [ 0.697656, 0.757507, -0.164261, -0.575044, -0.025484, 0.604246, -0.435326, 0.278759 ],
			"coeffs_2" : [ 0.318401, 0.516373, 0.537208, -0.357124, 0.297565, 0.410830, 0.605333, -0.063368 ],
			"coeffs_3" : [ -0.627765, 0.353350, 0.007842, -0.133978, -0.519289, -0.668986, -0.258634, 0.637559 ],
			"intercepts" : [ 0.029435, -0.042913, -0.252283, -0.633386, 0.235601, -0.304604, -0.185523, -0.143680 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.269611, -0.462554, -0.215160, 0.376506, 0.431074, 0.557300 ],
			"coeffs_1" : [ 0.475690, 0.289921, -0.370287, 0.061712, 0.182889, 0.443776 ],
			"coeffs_2" : [ 0.321790, -0.078411, 0.289606, 0.454500, 0.107910, -0.225065 ],
			"coeffs_3" : [ -0.178974, -0.324393, 0.344409, 0.364227, -0.452853, 0.212193 ],
			"coeffs_4" : [ -0.417195, -0.001729, 0.122957, -0.263423, 0.299111, -0.618701 ],
			"coeffs_5" : [ -0.588556, 0.412714, 0.507989, -0.433210, -0.245913, -0.494865 ],
			"coeffs_6" : [ -0.500519, -0.609476, -0.327690, -0.149899, -0.428461, -0.472013 ],
			"coeffs_7" : [ -0.579535, 0.126355, -0.429881, -0.518473, 0.129981, 0.227266 ],
			"intercepts" : [ -0.102936, 0.092885, -0.015786, -0.433148, -0.107874, 0.542555 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.922603 ],
			"coeffs_1" : [ -0.067759 ],
			"coeffs_2" : [ -0.710605 ],
			"coeffs_3" : [ -0.449855 ],
			"coeffs_4" : [ 0.385942 ],
			"coeffs_5" : [ -0.766597 ],
			"intercepts" : [ 0.414339 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ "<=50K", ">50K" ],
	"dataset" : 	{
		"dataset_features" : 14,
		"dataset_rows" : 512
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 14,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 14,
			"NbOutputs" : 4,
			"coeffs_00" : [ -0.140631, 0.209992, -0.29035, -0.042498 ],
			"coeffs_01" : [ 0.106196, -0.405079, 0.167347, 0.018387 ],
			"coeffs_02" : [ 0.401633, 0.033205, 0.425472, -0.090487 ],
			"coeffs_03" : [ 0.573998, -0.510525, -0.241867, 0.214797 ],
			"coeffs_04" : [ 0.210775, -0.366229, -0.348595, -0.448023 ],
			"coeffs_05" : [ 0.25013, -0.569974, -0.092054, 0.026923 ],
			"coeffs_06" : [ -0.114696, -0.524515, -0.295619, 0.47228 ],
			"coeffs_07" : [ -0.042435, 0.004762, -0.51697, 0.032922 ],
			"coeffs_08" : [ -0.176366, 0.213042, -0.116169, 0.244452 ],
			"coeffs_09" : [ -0.384231, 0.505643, -0.422723, 0.310274 ],
			"coeffs_10" : [ -0.503336, 0.23033, 0.082614, 0.524453 ],
			"coeffs_11" : [ -0.453923, -0.535188, 0.138009, 0.208203 ],
			"coeffs_12" : [ 0.297448, 0.405719, 0.384668, -0.375053 ],
			"coeffs_13" : [ 0.345192, 0.470522, -0.348629, 0.25788 ],
			"intercepts" : [ 0.079899, -0.04645, 0.018434, 0.329774 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.606422, 0.186847, 0.204802, 0.406786, -0.603558, 0.404326, -0.307316, -0.653897 ],
			"coeffs_1" : [ 0.697656, 0.757507, -0.164261, -0.575044, -0.025484, 0.604246, -0.435326, 0.278759 ],
			"coeffs_2" : [ 0.318401, 0.516373, 0.537208, -0.357124, 0.297565, 0.41083, 0.605333, -0.063368 ],
			"coeffs_3" : [ -0.627765, 0.35335, 0.007842, -0.133978, -0.519289, -0.668986, -0.258634, 0.637559 ],
			"intercepts" : [ 0.029435, -0.042913, -0.252283, -0.633386, 0.235601, -0.304604, -0.185523, -0.14368 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ 0.269611, -0.462554, -0.21516, 0.376506, 0.431074, 0.5573 ],
			"coeffs_1" : [ 0.47569, 0.289921, -0.370287, 0.061712, 0.182889, 0.443776 ],
			"coeffs_2" : [ 0.32179, -0.078411, 0.289606, 0.4545, 0.10791, -0.225065 ],
			"coeffs_3" : [ -0.178974, -0.324393, 0.344409, 0.364227, -0.452853, 0.212193 ],
			"coeffs_4" : [ -0.417195, -0.001729, 0.122957, -0.263423, 0.299111, -0.618701 ],
			"coeffs_5" : [ -0.588556, 0.412714, 0.507989, -0.43321, -0.245913, -0.494865 ],
			"coeffs_6" : [ -0.500519, -0.609476, -0.32769, -0.149899, -0.428461, -0.472013 ],
			"coeffs_7" : [ -0.579535, 0.126355, -0.429881, -0.518473, 0.129981, 0.227266 ],
			"intercepts" : [ -0.102936, 0.092885, -0.015786, -0.433148, -0.107874, 0.542555 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.922603 ],
			"coeffs_1" : [ -0.067759 ],
			"coeffs_2" : [ -0.710605 ],
			"coeffs_3" : [ -0.449855 ],
			"coeffs_4" : [ 0.385942 ],
			"coeffs_5" : [ -0.766597 ],
			"intercepts" : [ 0.414339 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 14, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_OO8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('census_medium', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[1. 0.]
 [1. 0.]
 [1. 0.]
 ...
 [1. 0.]
 [1. 0.]
 [1. 0.]]
(512, 2)
(512,) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'census_medium', 'size': 512, 'accuracy': 0.779296875, 'auc': 0.5}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_medium_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'census_medium', 'training_time_in_sec': 0.039, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 10 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 11 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 12 14
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 13 14
{
   "Contributions" : {
      "X_0" : [ 0.000000, 0.000000 ],
      "X_1" : [ 0.000000, 0.000000 ],
      "X_2" : [ 0.000000, 0.000000 ],
      "X_3" : [ 0.000000, 0.000000 ],
      "X_4" : [ 0.000000, 0.000000 ],
      "X_5" : [ 0.000000, 0.000000 ],
      "X_6" : [ 0.000000, 0.000000 ],
      "X_7" : [ 0.000000, 0.000000 ],
      "X_8" : [ 0.000000, 0.000000 ],
      "X_9" : [ 0.000000, 0.000000 ],
      "X_10" : [ 0.000000, 0.000000 ],
      "X_11" : [ 0.000000, 0.000000 ],
      "X_12" : [ 0.000000, 0.000000 ],
      "X_13" : [ 0.000000, 0.000000 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ ],
      "class_1" : [ ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_medium_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_medium_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_medium', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "census_medium" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9",
    t."X_10" AS "OUT_10",
    t."X_11" AS "OUT_11",
    t."X_12" AS "OUT_12",
    t."X_13" AS "OUT_13"
 FROM "
SQL_OUT_PUT_FIRST_LINES_END ('census_medium', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('census_medium', 'MLPClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_medium', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 512 entries, 0 to 511
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     512 non-null    float32
 1   X_1     512 non-null    float32
 2   X_2     512 non-null    float32
 3   X_3     512 non-null    float32
 4   X_4     512 non-null    float32
 5   X_5     512 non-null    float32
 6   X_6     512 non-null    float32
 7   X_7     512 non-null    float32
 8   X_8     512 non-null    float32
 9   X_9     512 non-null    float32
 10  X_10    512 non-null    float32
 11  X_11    512 non-null    float32
 12  X_12    512 non-null    float32
 13  X_13    512 non-null    float32
dtypes: float32(14)
memory usage: 32.0 KB
       X_0  X_1       X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                      ...                                  
0      2.0  0.0   77516.0  0.0  13.0  0.0  ...  0.0  0.0   1.0   0.0   2.0   0.0
1      3.0  0.0   83311.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   0.0   0.0
2      2.0  0.0  215646.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
3      3.0  0.0  234721.0  0.0   7.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
4      1.0  0.0  338409.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
...    ...  ...       ...  ...   ...  ...  ...  ...  ...   ...   ...   ...   ...
507    2.0  0.0  112131.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
508    3.0  0.0  543162.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
509    2.0  0.0   91996.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
510    3.0  0.0  141944.0  0.0  11.0  0.0  ...  0.0  0.0   0.0   1.0   2.0   0.0
511    3.0  0.0  251804.0  0.0   3.0  0.0  ...  0.0  0.0   0.0   0.0   1.0   0.0

[512 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 512 entries, 0 to 511
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          512 non-null    int64  
 1   Score_0        512 non-null    float64
 2   Proba_0        512 non-null    float64
 3   LogProba_0     512 non-null    float64
 4   Score_1        512 non-null    float64
 5   Proba_1        512 non-null    float64
 6   LogProba_1     512 non-null    float64
 7   Decision       512 non-null    int64  
 8   DecisionProba  512 non-null    float64
dtypes: float64(7), int64(2)
memory usage: 36.1 KB
     index       Score_0  Proba_0  ...     LogProba_1  Decision  DecisionProba
0        0   3467.701416      1.0  ... -1.797693e+308         0            1.0
1        1   3726.880127      1.0  ... -1.797693e+308         0            1.0
2        2   9647.246094      1.0  ... -1.797693e+308         0            1.0
3        3  10500.594727      1.0  ... -1.797693e+308         0            1.0
4        4  15139.301758      1.0  ... -1.797693e+308         0            1.0
..     ...           ...      ...  ...            ...       ...            ...
507    507   5016.303223      1.0  ... -1.797693e+308         0            1.0
508    508  24299.314453      1.0  ... -1.797693e+308         0            1.0
509    509   4115.520020      1.0  ... -1.797693e+308         0            1.0
510    510   6349.960938      1.0  ... -1.797693e+308         0            1.0
511    511  11264.762695      1.0  ... -1.797693e+308         0            1.0

[512 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
     index       Score_0  SQL_Proba_0  ...  Py_Proba_0    Py_Proba_1  Py_Decision
496    496  11754.490234          1.0  ...         1.0  1.266417e-14        <=50K
497    497  18033.652344          1.0  ...         1.0  1.266417e-14        <=50K
498    498   2876.116211          1.0  ...         1.0  1.266417e-14        <=50K
499    499  13581.388672          1.0  ...         1.0  1.266417e-14        <=50K
500    500  14537.617188          1.0  ...         1.0  1.266417e-14        <=50K
501    501   5102.598633          1.0  ...         1.0  1.266417e-14        <=50K
502    502   2188.660156          1.0  ...         1.0  1.266417e-14        <=50K
503    503   8096.401855          1.0  ...         1.0  1.266417e-14        <=50K
504    504   8099.719238          1.0  ...         1.0  1.266417e-14        <=50K
505    505  17362.011719          1.0  ...         1.0  1.266417e-14        <=50K
506    506  11166.533203          1.0  ...         1.0  1.266417e-14        <=50K
507    507   5016.303223          1.0  ...         1.0  1.266417e-14        <=50K
508    508  24299.314453          1.0  ...         1.0  1.266417e-14        <=50K
509    509   4115.520020          1.0  ...         1.0  1.266417e-14        <=50K
510    510   6349.960938          1.0  ...         1.0  1.266417e-14        <=50K
511    511  11264.762695          1.0  ...         1.0  1.266417e-14        <=50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_medium', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 0.0
     Py_Proba_0  SQL_Proba_0  SQL_Error_0
496         1.0          1.0          0.0
497         1.0          1.0          0.0
498         1.0          1.0          0.0
499         1.0          1.0          0.0
500         1.0          1.0          0.0
501         1.0          1.0          0.0
502         1.0          1.0          0.0
503         1.0          1.0          0.0
504         1.0          1.0          0.0
505         1.0          1.0          0.0
506         1.0          1.0          0.0
507         1.0          1.0          0.0
508         1.0          1.0          0.0
509         1.0          1.0          0.0
510         1.0          1.0          0.0
511         1.0          1.0          0.0
MLLITE_CLASS_SQL_ERROR ('census_medium', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 1.2664165777252073e-14
       Py_Proba_1  SQL_Proba_1   SQL_Error_1
496  1.266417e-14          0.0  1.266417e-14
497  1.266417e-14          0.0  1.266417e-14
498  1.266417e-14          0.0  1.266417e-14
499  1.266417e-14          0.0  1.266417e-14
500  1.266417e-14          0.0  1.266417e-14
501  1.266417e-14          0.0  1.266417e-14
502  1.266417e-14          0.0  1.266417e-14
503  1.266417e-14          0.0  1.266417e-14
504  1.266417e-14          0.0  1.266417e-14
505  1.266417e-14          0.0  1.266417e-14
506  1.266417e-14          0.0  1.266417e-14
507  1.266417e-14          0.0  1.266417e-14
508  1.266417e-14          0.0  1.266417e-14
509  1.266417e-14          0.0  1.266417e-14
510  1.266417e-14          0.0  1.266417e-14
511  1.266417e-14          0.0  1.266417e-14
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_medium', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
496       <=50K             0
497       <=50K             0
498       <=50K             0
499       <=50K             0
500       <=50K             0
501       <=50K             0
502       <=50K             0
503       <=50K             0
504       <=50K             0
505       <=50K             0
506       <=50K             0
507       <=50K             0
508       <=50K             0
509       <=50K             0
510       <=50K             0
511       <=50K             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_medium_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_medium', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13"
  FROM "census_medium" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9",
    t."X_10" AS "OUT_10",
    t."X_11" AS "OUT_11",
    t."X_12" AS "OUT_12",
    t."X_13" AS "OUT_13"
 FROM "
SQL_OUT_PUT_FIRST_LINES_END ('census_medium', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('census_medium', 'MLPClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_medium', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 512 entries, 0 to 511
Data columns (total 14 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     512 non-null    float32
 1   X_1     512 non-null    float32
 2   X_2     512 non-null    float32
 3   X_3     512 non-null    float32
 4   X_4     512 non-null    float32
 5   X_5     512 non-null    float32
 6   X_6     512 non-null    float32
 7   X_7     512 non-null    float32
 8   X_8     512 non-null    float32
 9   X_9     512 non-null    float32
 10  X_10    512 non-null    float32
 11  X_11    512 non-null    float32
 12  X_12    512 non-null    float32
 13  X_13    512 non-null    float32
dtypes: float32(14)
memory usage: 32.0 KB
       X_0  X_1       X_2  X_3   X_4  X_5  ...  X_8  X_9  X_10  X_11  X_12  X_13
index                                      ...                                  
0      2.0  0.0   77516.0  0.0  13.0  0.0  ...  0.0  0.0   1.0   0.0   2.0   0.0
1      3.0  0.0   83311.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   0.0   0.0
2      2.0  0.0  215646.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
3      3.0  0.0  234721.0  0.0   7.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
4      1.0  0.0  338409.0  0.0  13.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
...    ...  ...       ...  ...   ...  ...  ...  ...  ...   ...   ...   ...   ...
507    2.0  0.0  112131.0  0.0  10.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
508    3.0  0.0  543162.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
509    2.0  0.0   91996.0  0.0   9.0  0.0  ...  0.0  0.0   0.0   0.0   2.0   0.0
510    3.0  0.0  141944.0  0.0  11.0  0.0  ...  0.0  0.0   0.0   1.0   2.0   0.0
511    3.0  0.0  251804.0  0.0   3.0  0.0  ...  0.0  0.0   0.0   0.0   1.0   0.0

[512 rows x 14 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('census_medium', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_medium', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
