      age  workclass_Local-gov  ...  native-country_infrequent_sklearn  target
0       2                  0.0  ...                                0.0    >50K
1       1                  0.0  ...                                0.0   <=50K
2       1                  0.0  ...                                0.0    >50K
3       1                  0.0  ...                                1.0    >50K
4       1                  0.0  ...                                0.0   <=50K
...   ...                  ...  ...                                ...     ...
6100    2                  0.0  ...                                1.0   <=50K
6101    2                  0.0  ...                                0.0   <=50K
6102    3                  0.0  ...                                0.0   <=50K
6103    1                  0.0  ...                                0.0   <=50K
6104    4                  0.0  ...                                0.0   <=50K

[6105 rows x 54 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[2.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 1.889500e+05 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 1.400000e+01 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  3.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00 1.033222e+06 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00
  0.000000e+00 1.000000e+01 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 1.297070e+05 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.300000e+01 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 4.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00]
 [1.000000e+00 0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 7.853000e+04 0.000000e+00
  0.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 9.000000e+00 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  4.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 1.000000e+00]
 [1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00 1.595370e+05 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 1.200000e+01 0.000000e+00 1.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  0.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00 0.000000e+00
  2.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00
  1.000000e+00 0.000000e+00 0.000000e+00]] ['>50K' '<=50K' '>50K' '>50K' '<=50K']
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_OO8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.759, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_OO8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 6105, "dataset_features" : 53 },
	"classes" : [ "<=50K", ">50K" ],
	"layers" : {
		"sizes" : [ 53, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 53 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 53,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.027975, 0.294546, -0.132422, -0.160582 ],
			"coeffs_01" : [ 0.059677, -0.142834, 0.094041, -0.084005 ],
			"coeffs_02" : [ 0.276623, 0.012767, 0.269760, -0.005122 ],
			"coeffs_03" : [ 0.322559, 0.187794, -0.135918, -0.359967 ],
			"coeffs_04" : [ 0.169565, -0.167846, -0.165113, -0.249326 ],
			"coeffs_05" : [ 0.140561, -0.319511, -0.051730, 0.005470 ],
			"coeffs_06" : [ -0.064454, -0.596217, -0.166123, 0.561536 ],
			"coeffs_07" : [ -0.023846, 0.073871, -0.290512, -0.061370 ],
			"coeffs_08" : [ -0.099109, 0.103074, -0.065281, 0.143564 ],
			"coeffs_09" : [ -0.215919, -0.056231, -0.237550, 0.509092 ],
			"coeffs_10" : [ -0.233058, 0.164642, 0.076419, 0.298877 ],
			"coeffs_11" : [ -0.203682, 0.063496, 0.108536, -0.205590 ],
			"coeffs_12" : [ 0.218214, 0.094720, 0.246911, -0.036654 ],
			"coeffs_13" : [ 0.193981, 0.682506, -0.195912, -0.279894 ],
			"coeffs_14" : [ 0.096078, -0.099161, 0.041178, 0.298977 ],
			"coeffs_15" : [ -0.278246, 0.003052, 0.132895, 0.215097 ],
			"coeffs_16" : [ -0.276932, 0.272615, -0.180619, -0.358318 ],
			"coeffs_17" : [ 0.320107, -0.005245, -0.042764, 0.043588 ],
			"coeffs_18" : [ -0.011693, 0.657813, -0.234102, -0.228671 ],
			"coeffs_19" : [ 0.146092, -0.007199, 0.285867, 0.029015 ],
			"coeffs_20" : [ 0.136532, -0.143906, 0.237688, 0.335629 ],
			"coeffs_21" : [ -0.288038, -0.123563, 0.003598, 0.217938 ],
			"coeffs_22" : [ -0.238266, -0.579648, -0.118669, 0.558955 ],
			"coeffs_23" : [ 0.013506, -0.082169, -0.075136, -0.276448 ],
			"coeffs_24" : [ 0.108101, -0.278216, -0.125914, 0.104467 ],
			"coeffs_25" : [ 0.133618, -0.260560, -0.106632, 0.208167 ],
			"coeffs_26" : [ 0.213638, 0.656673, 0.235749, -0.203850 ],
			"coeffs_27" : [ -0.137864, -0.331229, 0.090639, 0.574084 ],
			"coeffs_28" : [ 0.159477, 0.347865, 0.186592, -0.132355 ],
			"coeffs_29" : [ 0.053480, -0.100505, -0.088699, -0.181792 ],
			"coeffs_30" : [ 0.170687, -0.043450, -0.224432, 0.320297 ],
			"coeffs_31" : [ -0.206760, 0.342029, 0.060937, -0.482500 ],
			"coeffs_32" : [ 0.148238, -0.604266, -0.291685, 0.531204 ],
			"coeffs_33" : [ 0.294020, -0.592445, -0.121873, 0.127512 ],
			"coeffs_34" : [ -0.248055, -0.662419, -0.107727, 0.332842 ],
			"coeffs_35" : [ -0.212343, -0.580678, -0.287214, 0.401953 ],
			"coeffs_36" : [ -0.213047, 0.131935, 0.064418, -0.282774 ],
			"coeffs_37" : [ -0.051014, -0.196216, 0.038349, 0.063308 ],
			"coeffs_38" : [ -0.053462, 0.244849, 0.323315, -0.036653 ],
			"coeffs_39" : [ -0.275971, -0.394234, 0.135249, -0.040769 ],
			"coeffs_40" : [ 0.111946, -0.295196, 0.298761, 0.429909 ],
			"coeffs_41" : [ -0.148562, 0.176186, -0.156116, 0.219856 ],
			"coeffs_42" : [ -0.275086, 0.291961, 0.067425, -0.289494 ],
			"coeffs_43" : [ 0.151035, 0.808628, 0.009109, -0.802558 ],
			"coeffs_44" : [ 0.271445, 0.724195, -0.131268, -0.414853 ],
			"coeffs_45" : [ 0.176380, 0.106373, -0.006668, 0.217945 ],
			"coeffs_46" : [ 0.114931, 0.215729, -0.228454, -0.131436 ],
			"coeffs_47" : [ 0.264274, -0.153208, -0.094060, 0.242370 ],
			"coeffs_48" : [ 0.227924, -0.149537, 0.042322, 0.240489 ],
			"coeffs_49" : [ -0.299048, -0.430238, -0.182538, 0.081499 ],
			"coeffs_50" : [ -0.130996, -0.017555, -0.265617, 0.202740 ],
			"coeffs_51" : [ 0.306143, 0.106160, 0.013469, 0.070175 ],
			"coeffs_52" : [ 0.033213, 0.104410, 0.023677, 0.236957 ],
			"intercepts" : [ 0.147075, -0.159415, -0.092751, -0.266099 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.382317, -0.422945, 0.195556, -0.102255, -0.300380, -0.593563, 0.621208, -0.272169 ],
			"coeffs_1" : [ -0.168455, 0.260787, 0.343101, 0.290569, -0.632237, 0.540740, 0.608192, 0.539527 ],
			"coeffs_2" : [ 0.039384, 0.705415, 0.442062, 0.191604, -0.240953, 0.626345, -0.702088, -0.656715 ],
			"coeffs_3" : [ -0.074066, -0.021115, 0.288008, 0.561443, 0.129466, -0.099364, -0.477459, -0.402736 ],
			"intercepts" : [ 0.183992, 0.271835, -0.615416, -0.094203, 0.444955, -0.269698, -0.032805, -0.109743 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.231317, -0.333577, -0.003050, 0.444377, 0.199075, 0.421684 ],
			"coeffs_1" : [ 0.475298, 0.438904, 0.225184, -0.466674, -0.040650, -0.466466 ],
			"coeffs_2" : [ 0.256277, 0.132500, 0.656660, 0.318935, 0.618893, -0.367848 ],
			"coeffs_3" : [ 0.161098, 0.366230, 0.256840, 0.582879, -0.317650, 0.412017 ],
			"coeffs_4" : [ 0.307008, 0.651637, -0.023497, 0.246293, 0.379477, 0.336314 ],
			"coeffs_5" : [ 0.416115, -0.654300, 0.251388, 0.560264, 0.149023, 0.507017 ],
			"coeffs_6" : [ -0.202730, 0.201768, -0.445651, 0.157430, -0.611995, 0.351332 ],
			"coeffs_7" : [ 0.006452, 0.024710, 0.305824, -0.569309, -0.459144, -0.187794 ],
			"intercepts" : [ -0.447373, 0.251710, -0.033046, -0.205441, -0.143896, 0.399115 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.515590 ],
			"coeffs_1" : [ -0.365455 ],
			"coeffs_2" : [ 0.504564 ],
			"coeffs_3" : [ -0.770957 ],
			"coeffs_4" : [ 0.780012 ],
			"coeffs_5" : [ -0.189216 ],
			"intercepts" : [ 0.236489 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_one_hot_sampled_option_1.json'

MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_OO8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W13", "signature" : "ff4_OO8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 6105, "dataset_features" : 53 },
	"classes" : [ "<=50K", ">50K" ],
	"layers" : {
		"sizes" : [ 53, 4, 8, 6, 1 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 53 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 53,
			"NbOutputs" : 4 ,
			"coeffs_00" : [ -0.027975, 0.294546, -0.132422, -0.160582 ],
			"coeffs_01" : [ 0.059677, -0.142834, 0.094041, -0.084005 ],
			"coeffs_02" : [ 0.276623, 0.012767, 0.269760, -0.005122 ],
			"coeffs_03" : [ 0.322559, 0.187794, -0.135918, -0.359967 ],
			"coeffs_04" : [ 0.169565, -0.167846, -0.165113, -0.249326 ],
			"coeffs_05" : [ 0.140561, -0.319511, -0.051730, 0.005470 ],
			"coeffs_06" : [ -0.064454, -0.596217, -0.166123, 0.561536 ],
			"coeffs_07" : [ -0.023846, 0.073871, -0.290512, -0.061370 ],
			"coeffs_08" : [ -0.099109, 0.103074, -0.065281, 0.143564 ],
			"coeffs_09" : [ -0.215919, -0.056231, -0.237550, 0.509092 ],
			"coeffs_10" : [ -0.233058, 0.164642, 0.076419, 0.298877 ],
			"coeffs_11" : [ -0.203682, 0.063496, 0.108536, -0.205590 ],
			"coeffs_12" : [ 0.218214, 0.094720, 0.246911, -0.036654 ],
			"coeffs_13" : [ 0.193981, 0.682506, -0.195912, -0.279894 ],
			"coeffs_14" : [ 0.096078, -0.099161, 0.041178, 0.298977 ],
			"coeffs_15" : [ -0.278246, 0.003052, 0.132895, 0.215097 ],
			"coeffs_16" : [ -0.276932, 0.272615, -0.180619, -0.358318 ],
			"coeffs_17" : [ 0.320107, -0.005245, -0.042764, 0.043588 ],
			"coeffs_18" : [ -0.011693, 0.657813, -0.234102, -0.228671 ],
			"coeffs_19" : [ 0.146092, -0.007199, 0.285867, 0.029015 ],
			"coeffs_20" : [ 0.136532, -0.143906, 0.237688, 0.335629 ],
			"coeffs_21" : [ -0.288038, -0.123563, 0.003598, 0.217938 ],
			"coeffs_22" : [ -0.238266, -0.579648, -0.118669, 0.558955 ],
			"coeffs_23" : [ 0.013506, -0.082169, -0.075136, -0.276448 ],
			"coeffs_24" : [ 0.108101, -0.278216, -0.125914, 0.104467 ],
			"coeffs_25" : [ 0.133618, -0.260560, -0.106632, 0.208167 ],
			"coeffs_26" : [ 0.213638, 0.656673, 0.235749, -0.203850 ],
			"coeffs_27" : [ -0.137864, -0.331229, 0.090639, 0.574084 ],
			"coeffs_28" : [ 0.159477, 0.347865, 0.186592, -0.132355 ],
			"coeffs_29" : [ 0.053480, -0.100505, -0.088699, -0.181792 ],
			"coeffs_30" : [ 0.170687, -0.043450, -0.224432, 0.320297 ],
			"coeffs_31" : [ -0.206760, 0.342029, 0.060937, -0.482500 ],
			"coeffs_32" : [ 0.148238, -0.604266, -0.291685, 0.531204 ],
			"coeffs_33" : [ 0.294020, -0.592445, -0.121873, 0.127512 ],
			"coeffs_34" : [ -0.248055, -0.662419, -0.107727, 0.332842 ],
			"coeffs_35" : [ -0.212343, -0.580678, -0.287214, 0.401953 ],
			"coeffs_36" : [ -0.213047, 0.131935, 0.064418, -0.282774 ],
			"coeffs_37" : [ -0.051014, -0.196216, 0.038349, 0.063308 ],
			"coeffs_38" : [ -0.053462, 0.244849, 0.323315, -0.036653 ],
			"coeffs_39" : [ -0.275971, -0.394234, 0.135249, -0.040769 ],
			"coeffs_40" : [ 0.111946, -0.295196, 0.298761, 0.429909 ],
			"coeffs_41" : [ -0.148562, 0.176186, -0.156116, 0.219856 ],
			"coeffs_42" : [ -0.275086, 0.291961, 0.067425, -0.289494 ],
			"coeffs_43" : [ 0.151035, 0.808628, 0.009109, -0.802558 ],
			"coeffs_44" : [ 0.271445, 0.724195, -0.131268, -0.414853 ],
			"coeffs_45" : [ 0.176380, 0.106373, -0.006668, 0.217945 ],
			"coeffs_46" : [ 0.114931, 0.215729, -0.228454, -0.131436 ],
			"coeffs_47" : [ 0.264274, -0.153208, -0.094060, 0.242370 ],
			"coeffs_48" : [ 0.227924, -0.149537, 0.042322, 0.240489 ],
			"coeffs_49" : [ -0.299048, -0.430238, -0.182538, 0.081499 ],
			"coeffs_50" : [ -0.130996, -0.017555, -0.265617, 0.202740 ],
			"coeffs_51" : [ 0.306143, 0.106160, 0.013469, 0.070175 ],
			"coeffs_52" : [ 0.033213, 0.104410, 0.023677, 0.236957 ],
			"intercepts" : [ 0.147075, -0.159415, -0.092751, -0.266099 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.382317, -0.422945, 0.195556, -0.102255, -0.300380, -0.593563, 0.621208, -0.272169 ],
			"coeffs_1" : [ -0.168455, 0.260787, 0.343101, 0.290569, -0.632237, 0.540740, 0.608192, 0.539527 ],
			"coeffs_2" : [ 0.039384, 0.705415, 0.442062, 0.191604, -0.240953, 0.626345, -0.702088, -0.656715 ],
			"coeffs_3" : [ -0.074066, -0.021115, 0.288008, 0.561443, 0.129466, -0.099364, -0.477459, -0.402736 ],
			"intercepts" : [ 0.183992, 0.271835, -0.615416, -0.094203, 0.444955, -0.269698, -0.032805, -0.109743 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ 0.231317, -0.333577, -0.003050, 0.444377, 0.199075, 0.421684 ],
			"coeffs_1" : [ 0.475298, 0.438904, 0.225184, -0.466674, -0.040650, -0.466466 ],
			"coeffs_2" : [ 0.256277, 0.132500, 0.656660, 0.318935, 0.618893, -0.367848 ],
			"coeffs_3" : [ 0.161098, 0.366230, 0.256840, 0.582879, -0.317650, 0.412017 ],
			"coeffs_4" : [ 0.307008, 0.651637, -0.023497, 0.246293, 0.379477, 0.336314 ],
			"coeffs_5" : [ 0.416115, -0.654300, 0.251388, 0.560264, 0.149023, 0.507017 ],
			"coeffs_6" : [ -0.202730, 0.201768, -0.445651, 0.157430, -0.611995, 0.351332 ],
			"coeffs_7" : [ 0.006452, 0.024710, 0.305824, -0.569309, -0.459144, -0.187794 ],
			"intercepts" : [ -0.447373, 0.251710, -0.033046, -0.205441, -0.143896, 0.399115 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 1 ,
			"coeffs_0" : [ 0.515590 ],
			"coeffs_1" : [ -0.365455 ],
			"coeffs_2" : [ 0.504564 ],
			"coeffs_3" : [ -0.770957 ],
			"coeffs_4" : [ 0.780012 ],
			"coeffs_5" : [ -0.189216 ],
			"intercepts" : [ 0.236489 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ "<=50K", ">50K" ],
	"dataset" : 	{
		"dataset_features" : 53,
		"dataset_rows" : 6105
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 53,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 53,
			"NbOutputs" : 4,
			"coeffs_00" : [ -0.027975, 0.294546, -0.132422, -0.160582 ],
			"coeffs_01" : [ 0.059677, -0.142834, 0.094041, -0.084005 ],
			"coeffs_02" : [ 0.276623, 0.012767, 0.26976, -0.005122 ],
			"coeffs_03" : [ 0.322559, 0.187794, -0.135918, -0.359967 ],
			"coeffs_04" : [ 0.169565, -0.167846, -0.165113, -0.249326 ],
			"coeffs_05" : [ 0.140561, -0.319511, -0.05173, 0.00547 ],
			"coeffs_06" : [ -0.064454, -0.596217, -0.166123, 0.561536 ],
			"coeffs_07" : [ -0.023846, 0.073871, -0.290512, -0.06137 ],
			"coeffs_08" : [ -0.099109, 0.103074, -0.065281, 0.143564 ],
			"coeffs_09" : [ -0.215919, -0.056231, -0.23755, 0.509092 ],
			"coeffs_10" : [ -0.233058, 0.164642, 0.076419, 0.298877 ],
			"coeffs_11" : [ -0.203682, 0.063496, 0.108536, -0.20559 ],
			"coeffs_12" : [ 0.218214, 0.09472, 0.246911, -0.036654 ],
			"coeffs_13" : [ 0.193981, 0.682506, -0.195912, -0.279894 ],
			"coeffs_14" : [ 0.096078, -0.099161, 0.041178, 0.298977 ],
			"coeffs_15" : [ -0.278246, 0.003052, 0.132895, 0.215097 ],
			"coeffs_16" : [ -0.276932, 0.272615, -0.180619, -0.358318 ],
			"coeffs_17" : [ 0.320107, -0.005245, -0.042764, 0.043588 ],
			"coeffs_18" : [ -0.011693, 0.657813, -0.234102, -0.228671 ],
			"coeffs_19" : [ 0.146092, -0.007199, 0.285867, 0.029015 ],
			"coeffs_20" : [ 0.136532, -0.143906, 0.237688, 0.335629 ],
			"coeffs_21" : [ -0.288038, -0.123563, 0.003598, 0.217938 ],
			"coeffs_22" : [ -0.238266, -0.579648, -0.118669, 0.558955 ],
			"coeffs_23" : [ 0.013506, -0.082169, -0.075136, -0.276448 ],
			"coeffs_24" : [ 0.108101, -0.278216, -0.125914, 0.104467 ],
			"coeffs_25" : [ 0.133618, -0.26056, -0.106632, 0.208167 ],
			"coeffs_26" : [ 0.213638, 0.656673, 0.235749, -0.20385 ],
			"coeffs_27" : [ -0.137864, -0.331229, 0.090639, 0.574084 ],
			"coeffs_28" : [ 0.159477, 0.347865, 0.186592, -0.132355 ],
			"coeffs_29" : [ 0.05348, -0.100505, -0.088699, -0.181792 ],
			"coeffs_30" : [ 0.170687, -0.04345, -0.224432, 0.320297 ],
			"coeffs_31" : [ -0.20676, 0.342029, 0.060937, -0.4825 ],
			"coeffs_32" : [ 0.148238, -0.604266, -0.291685, 0.531204 ],
			"coeffs_33" : [ 0.29402, -0.592445, -0.121873, 0.127512 ],
			"coeffs_34" : [ -0.248055, -0.662419, -0.107727, 0.332842 ],
			"coeffs_35" : [ -0.212343, -0.580678, -0.287214, 0.401953 ],
			"coeffs_36" : [ -0.213047, 0.131935, 0.064418, -0.282774 ],
			"coeffs_37" : [ -0.051014, -0.196216, 0.038349, 0.063308 ],
			"coeffs_38" : [ -0.053462, 0.244849, 0.323315, -0.036653 ],
			"coeffs_39" : [ -0.275971, -0.394234, 0.135249, -0.040769 ],
			"coeffs_40" : [ 0.111946, -0.295196, 0.298761, 0.429909 ],
			"coeffs_41" : [ -0.148562, 0.176186, -0.156116, 0.219856 ],
			"coeffs_42" : [ -0.275086, 0.291961, 0.067425, -0.289494 ],
			"coeffs_43" : [ 0.151035, 0.808628, 0.009109, -0.802558 ],
			"coeffs_44" : [ 0.271445, 0.724195, -0.131268, -0.414853 ],
			"coeffs_45" : [ 0.17638, 0.106373, -0.006668, 0.217945 ],
			"coeffs_46" : [ 0.114931, 0.215729, -0.228454, -0.131436 ],
			"coeffs_47" : [ 0.264274, -0.153208, -0.09406, 0.24237 ],
			"coeffs_48" : [ 0.227924, -0.149537, 0.042322, 0.240489 ],
			"coeffs_49" : [ -0.299048, -0.430238, -0.182538, 0.081499 ],
			"coeffs_50" : [ -0.130996, -0.017555, -0.265617, 0.20274 ],
			"coeffs_51" : [ 0.306143, 0.10616, 0.013469, 0.070175 ],
			"coeffs_52" : [ 0.033213, 0.10441, 0.023677, 0.236957 ],
			"intercepts" : [ 0.147075, -0.159415, -0.092751, -0.266099 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.382317, -0.422945, 0.195556, -0.102255, -0.30038, -0.593563, 0.621208, -0.272169 ],
			"coeffs_1" : [ -0.168455, 0.260787, 0.343101, 0.290569, -0.632237, 0.54074, 0.608192, 0.539527 ],
			"coeffs_2" : [ 0.039384, 0.705415, 0.442062, 0.191604, -0.240953, 0.626345, -0.702088, -0.656715 ],
			"coeffs_3" : [ -0.074066, -0.021115, 0.288008, 0.561443, 0.129466, -0.099364, -0.477459, -0.402736 ],
			"intercepts" : [ 0.183992, 0.271835, -0.615416, -0.094203, 0.444955, -0.269698, -0.032805, -0.109743 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ 0.231317, -0.333577, -0.00305, 0.444377, 0.199075, 0.421684 ],
			"coeffs_1" : [ 0.475298, 0.438904, 0.225184, -0.466674, -0.04065, -0.466466 ],
			"coeffs_2" : [ 0.256277, 0.1325, 0.65666, 0.318935, 0.618893, -0.367848 ],
			"coeffs_3" : [ 0.161098, 0.36623, 0.25684, 0.582879, -0.31765, 0.412017 ],
			"coeffs_4" : [ 0.307008, 0.651637, -0.023497, 0.246293, 0.379477, 0.336314 ],
			"coeffs_5" : [ 0.416115, -0.6543, 0.251388, 0.560264, 0.149023, 0.507017 ],
			"coeffs_6" : [ -0.20273, 0.201768, -0.445651, 0.15743, -0.611995, 0.351332 ],
			"coeffs_7" : [ 0.006452, 0.02471, 0.305824, -0.569309, -0.459144, -0.187794 ],
			"intercepts" : [ -0.447373, 0.25171, -0.033046, -0.205441, -0.143896, 0.399115 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 1,
			"coeffs_0" : [ 0.51559 ],
			"coeffs_1" : [ -0.365455 ],
			"coeffs_2" : [ 0.504564 ],
			"coeffs_3" : [ -0.770957 ],
			"coeffs_4" : [ 0.780012 ],
			"coeffs_5" : [ -0.189216 ],
			"intercepts" : [ 0.236489 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 53, 4, 8, 6, 1 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_OO8", "version" : "2024-W13" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.007, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.007, 'PREDICT')
[[1.000e-04 9.999e-01]
 [0.000e+00 1.000e+00]
 [3.000e-04 9.997e-01]
 ...
 [1.800e-03 9.982e-01]
 [6.500e-02 9.350e-01]
 [0.000e+00 1.000e+00]]
(6105, 2)
(6105,) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'census_one_hot_sampled', 'size': 6105, 'accuracy': 0.23996723996723995, 'auc': 0.6245548428857244}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_one_hot_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'census_one_hot_sampled', 'training_time_in_sec': 0.759, 'prediction_time_in_sec': 0.007}
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_one_hot_sampled_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_one_hot_sampled', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('census_one_hot_sampled', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('census_one_hot_sampled', 'MLPClassifier', 'duckdb')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_one_hot_sampled', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 6105 entries, 0 to 6104
Data columns (total 53 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     6105 non-null   float32
 1   X_1     6105 non-null   float32
 2   X_2     6105 non-null   float32
 3   X_3     6105 non-null   float32
 4   X_4     6105 non-null   float32
 5   X_5     6105 non-null   float32
 6   X_6     6105 non-null   float32
 7   X_7     6105 non-null   float32
 8   X_8     6105 non-null   float32
 9   X_9     6105 non-null   float32
 10  X_10    6105 non-null   float32
 11  X_11    6105 non-null   float32
 12  X_12    6105 non-null   float32
 13  X_13    6105 non-null   float32
 14  X_14    6105 non-null   float32
 15  X_15    6105 non-null   float32
 16  X_16    6105 non-null   float32
 17  X_17    6105 non-null   float32
 18  X_18    6105 non-null   float32
 19  X_19    6105 non-null   float32
 20  X_20    6105 non-null   float32
 21  X_21    6105 non-null   float32
 22  X_22    6105 non-null   float32
 23  X_23    6105 non-null   float32
 24  X_24    6105 non-null   float32
 25  X_25    6105 non-null   float32
 26  X_26    6105 non-null   float32
 27  X_27    6105 non-null   float32
 28  X_28    6105 non-null   float32
 29  X_29    6105 non-null   float32
 30  X_30    6105 non-null   float32
 31  X_31    6105 non-null   float32
 32  X_32    6105 non-null   float32
 33  X_33    6105 non-null   float32
 34  X_34    6105 non-null   float32
 35  X_35    6105 non-null   float32
 36  X_36    6105 non-null   float32
 37  X_37    6105 non-null   float32
 38  X_38    6105 non-null   float32
 39  X_39    6105 non-null   float32
 40  X_40    6105 non-null   float32
 41  X_41    6105 non-null   float32
 42  X_42    6105 non-null   float32
 43  X_43    6105 non-null   float32
 44  X_44    6105 non-null   float32
 45  X_45    6105 non-null   float32
 46  X_46    6105 non-null   float32
 47  X_47    6105 non-null   float32
 48  X_48    6105 non-null   float32
 49  X_49    6105 non-null   float32
 50  X_50    6105 non-null   float32
 51  X_51    6105 non-null   float32
 52  X_52    6105 non-null   float32
dtypes: float32(53)
memory usage: 1.3 MB
       X_0  X_1  X_2  X_3  X_4  X_5  ...  X_47  X_48  X_49  X_50  X_51  X_52
index                                ...                                    
0      2.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
1      1.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
2      1.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
3      1.0  0.0  0.0  1.0  0.0  0.0  ...   0.0   0.0   0.0   0.0   0.0   1.0
4      1.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
...    ...  ...  ...  ...  ...  ...  ...   ...   ...   ...   ...   ...   ...
6100   2.0  0.0  0.0  1.0  0.0  0.0  ...   0.0   0.0   0.0   0.0   0.0   1.0
6101   2.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
6102   3.0  0.0  0.0  0.0  1.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
6103   1.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
6104   4.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0

[6105 rows x 53 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 6105 entries, 0 to 6104
Data columns (total 9 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          6105 non-null   int64  
 1   Score_0        6105 non-null   float64
 2   Proba_0        6105 non-null   float64
 3   LogProba_0     6105 non-null   float64
 4   Score_1        6105 non-null   float64
 5   Proba_1        6105 non-null   float64
 6   LogProba_1     6105 non-null   float64
 7   Decision       6105 non-null   int64  
 8   DecisionProba  6105 non-null   float64
dtypes: float64(7), int64(2)
memory usage: 429.4 KB
      index    Score_0       Proba_0  ...    LogProba_1  Decision  DecisionProba
0         0  -4.537933  1.143804e-04  ... -1.143869e-04         1       0.999886
1         1 -17.186768  1.179678e-15  ... -1.110223e-15         1       1.000000
2         2  -4.142578  2.521697e-04  ... -2.522015e-04         1       0.999748
3         3  -2.290344  1.014389e-02  ... -1.019569e-02         1       0.989856
4         4  -3.477142  9.536262e-04  ... -9.540812e-04         1       0.999046
...     ...        ...           ...  ...           ...       ...            ...
6100   6100  -3.136200  1.884136e-03  ... -1.885913e-03         1       0.998116
6101   6101  -5.897156  7.547312e-06  ... -7.547341e-06         1       0.999992
6102   6102  -3.157562  1.805475e-03  ... -1.807107e-03         1       0.998195
6103   6103  -1.332870  6.502543e-02  ... -6.723594e-02         1       0.934975
6104   6104 -10.321167  1.084297e-09  ... -1.084297e-09         1       1.000000

[6105 rows x 9 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Decision', 'DecisionProba'],
      dtype='object')
      index    Score_0   SQL_Proba_0  ...  Py_Proba_0  Py_Proba_1  Py_Decision
6089   6089  -3.602264  7.426604e-04  ...    0.000739    0.999261         >50K
6090   6090  -4.301514  1.835156e-04  ...    0.000183    0.999817         >50K
6091   6091  -1.988785  1.838671e-02  ...    0.018363    0.981637         >50K
6092   6092  -2.983398  2.555887e-03  ...    0.002540    0.997460         >50K
6093   6093  -2.494843  6.761775e-03  ...    0.006746    0.993254         >50K
6094   6094  -3.383789  1.149156e-03  ...    0.001142    0.998858         >50K
6095   6095  -2.233551  1.135023e-02  ...    0.011340    0.988660         >50K
6096   6096  -3.795166  5.050580e-04  ...    0.000501    0.999499         >50K
6097   6097  -3.891602  4.165018e-04  ...    0.000415    0.999585         >50K
6098   6098  -2.970856  2.620643e-03  ...    0.002606    0.997394         >50K
6099   6099  -5.337769  2.310272e-05  ...    0.000023    0.999977         >50K
6100   6100  -3.136200  1.884136e-03  ...    0.001881    0.998119         >50K
6101   6101  -5.897156  7.547312e-06  ...    0.000008    0.999992         >50K
6102   6102  -3.157562  1.805475e-03  ...    0.001800    0.998200         >50K
6103   6103  -1.332870  6.502543e-02  ...    0.064958    0.935042         >50K
6104   6104 -10.321167  1.084297e-09  ...    0.000000    1.000000         >50K

[16 rows x 12 columns]
MLLITE_CLASS_SQL_ERROR ('census_one_hot_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 1.6269660427933532e-05
      Py_Proba_0   SQL_Proba_0   SQL_Error_0
6089    0.000739  7.426604e-04 -3.860783e-06
6090    0.000183  1.835156e-04 -1.121088e-07
6091    0.018363  1.838671e-02 -2.364658e-05
6092    0.002540  2.555887e-03 -1.595407e-05
6093    0.006746  6.761775e-03 -1.596007e-05
6094    0.001142  1.149156e-03 -7.428544e-06
6095    0.011340  1.135023e-02 -1.026847e-05
6096    0.000501  5.050580e-04 -3.782971e-06
6097    0.000415  4.165018e-04 -1.295870e-06
6098    0.002606  2.620643e-03 -1.431086e-05
6099    0.000023  2.310272e-05 -2.741407e-07
6100    0.001881  1.884136e-03 -3.192419e-06
6101    0.000008  7.547312e-06 -3.712686e-08
6102    0.001800  1.805475e-03 -5.712653e-06
6103    0.064958  6.502543e-02 -6.768844e-05
6104    0.000000  1.084297e-09 -1.084297e-09
MLLITE_CLASS_SQL_ERROR ('census_one_hot_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 1.626966042793363e-05
      Py_Proba_1  SQL_Proba_1   SQL_Error_1
6089    0.999261     0.999257  3.860783e-06
6090    0.999817     0.999816  1.121088e-07
6091    0.981637     0.981613  2.364658e-05
6092    0.997460     0.997444  1.595407e-05
6093    0.993254     0.993238  1.596007e-05
6094    0.998858     0.998851  7.428544e-06
6095    0.988660     0.988650  1.026847e-05
6096    0.999499     0.999495  3.782971e-06
6097    0.999585     0.999583  1.295870e-06
6098    0.997394     0.997379  1.431086e-05
6099    0.999977     0.999977  2.741407e-07
6100    0.998119     0.998116  3.192419e-06
6101    0.999992     0.999992  3.712686e-08
6102    0.998200     0.998195  5.712653e-06
6103    0.935042     0.934975  6.768844e-05
6104    1.000000     1.000000  1.084297e-09
MLLITE_CLASS_SQL_EXECUTION_STATUS ('census_one_hot_sampled', 'MLPClassifier', 'duckdb', 'Success')
     Py_Decision  SQL_Decision
6089        >50K             1
6090        >50K             1
6091        >50K             1
6092        >50K             1
6093        >50K             1
6094        >50K             1
6095        >50K             1
6096        >50K             1
6097        >50K             1
6098        >50K             1
6099        >50K             1
6100        >50K             1
6101        >50K             1
6102        >50K             1
6103        >50K             1
6104        >50K             1
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_one_hot_sampled_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_one_hot_sampled', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('census_one_hot_sampled', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('census_one_hot_sampled', 'MLPClassifier', 'sqlite')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_one_hot_sampled', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 6105 entries, 0 to 6104
Data columns (total 53 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     6105 non-null   float32
 1   X_1     6105 non-null   float32
 2   X_2     6105 non-null   float32
 3   X_3     6105 non-null   float32
 4   X_4     6105 non-null   float32
 5   X_5     6105 non-null   float32
 6   X_6     6105 non-null   float32
 7   X_7     6105 non-null   float32
 8   X_8     6105 non-null   float32
 9   X_9     6105 non-null   float32
 10  X_10    6105 non-null   float32
 11  X_11    6105 non-null   float32
 12  X_12    6105 non-null   float32
 13  X_13    6105 non-null   float32
 14  X_14    6105 non-null   float32
 15  X_15    6105 non-null   float32
 16  X_16    6105 non-null   float32
 17  X_17    6105 non-null   float32
 18  X_18    6105 non-null   float32
 19  X_19    6105 non-null   float32
 20  X_20    6105 non-null   float32
 21  X_21    6105 non-null   float32
 22  X_22    6105 non-null   float32
 23  X_23    6105 non-null   float32
 24  X_24    6105 non-null   float32
 25  X_25    6105 non-null   float32
 26  X_26    6105 non-null   float32
 27  X_27    6105 non-null   float32
 28  X_28    6105 non-null   float32
 29  X_29    6105 non-null   float32
 30  X_30    6105 non-null   float32
 31  X_31    6105 non-null   float32
 32  X_32    6105 non-null   float32
 33  X_33    6105 non-null   float32
 34  X_34    6105 non-null   float32
 35  X_35    6105 non-null   float32
 36  X_36    6105 non-null   float32
 37  X_37    6105 non-null   float32
 38  X_38    6105 non-null   float32
 39  X_39    6105 non-null   float32
 40  X_40    6105 non-null   float32
 41  X_41    6105 non-null   float32
 42  X_42    6105 non-null   float32
 43  X_43    6105 non-null   float32
 44  X_44    6105 non-null   float32
 45  X_45    6105 non-null   float32
 46  X_46    6105 non-null   float32
 47  X_47    6105 non-null   float32
 48  X_48    6105 non-null   float32
 49  X_49    6105 non-null   float32
 50  X_50    6105 non-null   float32
 51  X_51    6105 non-null   float32
 52  X_52    6105 non-null   float32
dtypes: float32(53)
memory usage: 1.3 MB
       X_0  X_1  X_2  X_3  X_4  X_5  ...  X_47  X_48  X_49  X_50  X_51  X_52
index                                ...                                    
0      2.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
1      1.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
2      1.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
3      1.0  0.0  0.0  1.0  0.0  0.0  ...   0.0   0.0   0.0   0.0   0.0   1.0
4      1.0  0.0  0.0  0.0  0.0  1.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
...    ...  ...  ...  ...  ...  ...  ...   ...   ...   ...   ...   ...   ...
6100   2.0  0.0  0.0  1.0  0.0  0.0  ...   0.0   0.0   0.0   0.0   0.0   1.0
6101   2.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
6102   3.0  0.0  0.0  0.0  1.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
6103   1.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0
6104   4.0  0.0  1.0  0.0  0.0  0.0  ...   0.0   0.0   0.0   1.0   0.0   0.0

[6105 rows x 53 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('census_one_hot_sampled', 'MLPClassifier', 'sqlite', '')
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_census_one_hot_sampled_option_1_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('census_one_hot_sampled', 'MLPClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9", CAST("ADS"."X_10" AS FLOAT) AS "X_10", CAST("ADS"."X_11" AS FLOAT) AS "X_11", CAST("ADS"."X_12" AS FLOAT) AS "X_12", CAST("ADS"."X_13" AS FLOAT) AS "X_13", CAST("ADS"."X_14" AS FLOAT) AS "X_14", CAST("ADS"."X_15" AS FLOAT) AS "X_15", CAST("ADS"."X_16" AS FLOAT) AS "X_16", CAST("ADS"."X_17" AS FLOAT) AS "X_17", CAST("ADS"."X_18" AS FLOAT) AS "X_18", CAST("ADS"."X_19" AS FLOAT) AS "X_19", CAST("ADS"."X_20" AS FLOAT) AS "X_20", CAST("ADS"."X_21" AS FLOAT) AS "X_21", CAST("ADS"."X_22" AS FLOAT) AS "X_22", CAST("ADS"."X_23" AS FLOAT) AS "X_23", CAST("ADS"."X_24" AS FLOAT) AS "X_24", CAST("ADS
SQL_OUT_PUT_FIRST_LINES_END ('census_one_hot_sampled', 'MLPClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('census_one_hot_sampled', 'MLPClassifier', 'pgsql')
"
  FROM
   "arg_max_cte_with_max_proba" AS t
),
arg_max_cte AS 
( SELECT t."index" as "index",
     t."Proba_0" AS "Proba_0",
     t."Score_0" AS "Score_0",
     t."Proba_1" AS "Proba_1",
     t."Score_1" AS "Score_1",
     t."Max_Proba" AS "Max_Proba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('census_one_hot_sampled', 'MLPClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
