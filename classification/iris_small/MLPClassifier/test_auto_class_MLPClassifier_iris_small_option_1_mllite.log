READING_CSV iris_small ['data/small/iris_small.csv']
    sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                 6.4               3.2  ...               2.3       2
1                 6.3               3.3  ...               1.6       1
2                 7.1               3.0  ...               2.1       2
3                 6.1               2.6  ...               1.4       2
4                 6.8               3.2  ...               2.3       2
..                ...               ...  ...               ...     ...
59                5.4               3.9  ...               0.4       0
60                5.0               3.4  ...               0.4       0
61                6.3               2.5  ...               1.9       2
62                6.9               3.1  ...               2.3       2
63                6.5               3.0  ...               2.0       2

[64 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[6.4 3.2 5.3 2.3]
 [6.3 3.3 4.7 1.6]
 [7.1 3.  5.9 2.1]
 [6.1 2.6 5.6 1.4]
 [6.8 3.2 5.9 2.3]] [2 1 2 2 2]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.011, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 3 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.104815, 0.421614, -0.383544, -0.063746 ],
			"coeffs_1" : [ 0.128480, -0.635077, 0.220918, 0.027581 ],
			"coeffs_2" : [ 0.709921, 0.156482, 0.690080, -0.135730 ],
			"coeffs_3" : [ 0.833956, -0.792758, -0.392632, 0.322195 ],
			"intercepts" : [ 0.421953, -0.442519, -0.470825, -0.672035 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.338409, -0.698073, -0.112743, 0.003089, -0.109050, -0.642397, -0.362057, 0.549075 ],
			"coeffs_1" : [ -0.024160, 0.005832, -0.633156, 0.015147, -0.203087, 0.260923, -0.142278, 0.274568 ],
			"coeffs_2" : [ -0.439537, 0.619284, -0.517727, 0.352094, -0.507938, 0.389044, 0.166551, 0.617247 ],
			"coeffs_3" : [ -0.443915, -0.544968, 0.236548, 0.254996, 0.475586, 0.606558, 0.538130, -0.459344 ],
			"intercepts" : [ 0.454032, 0.576270, -0.426981, 0.285765, 0.240944, 0.053026, 0.089744, 0.373351 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.073931, 0.239541, 0.345250, -0.592209, 0.483484 ],
			"coeffs_1" : [ -0.364449, -0.605391, 0.645904, 0.624800, -0.086289, -0.532388 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.576816, -0.346982, 0.248926, 0.432010, 0.447722, -0.031256 ],
			"coeffs_4" : [ -0.581198, 0.355965, 0.037182, -0.094103, -0.509028, -0.649212 ],
			"coeffs_5" : [ -0.239449, 0.590265, 0.027252, -0.133482, -0.151607, -0.586402 ],
			"coeffs_6" : [ 0.218124, -0.199137, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_7" : [ -0.215160, 0.359756, 0.403039, 0.527259, 0.442846, 0.400585 ],
			"intercepts" : [ -0.278179, 0.065878, 0.157454, 0.413057, 0.288842, 0.025662 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 3 ,
			"coeffs_0" : [ 0.469580, 0.566861, 0.134588 ],
			"coeffs_1" : [ -0.310450, -0.192056, -0.376145 ],
			"coeffs_2" : [ 0.399958, 0.485336, -0.536619 ],
			"coeffs_3" : [ 0.234990, -0.489175, 0.026015 ],
			"coeffs_4" : [ 0.125161, -0.299080, 0.400254 ],
			"coeffs_5" : [ -0.802146, -0.702170, 0.637836 ],
			"intercepts" : [ 0.709969, -0.508510, -0.280184 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_small_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('iris_small', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"layers" : {
		"sizes" : [ 4, 4, 8, 6, 3 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 4 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 4,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.104815, 0.421614, -0.383544, -0.063746 ],
			"coeffs_1" : [ 0.128480, -0.635077, 0.220918, 0.027581 ],
			"coeffs_2" : [ 0.709921, 0.156482, 0.690080, -0.135730 ],
			"coeffs_3" : [ 0.833956, -0.792758, -0.392632, 0.322195 ],
			"intercepts" : [ 0.421953, -0.442519, -0.470825, -0.672035 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ 0.338409, -0.698073, -0.112743, 0.003089, -0.109050, -0.642397, -0.362057, 0.549075 ],
			"coeffs_1" : [ -0.024160, 0.005832, -0.633156, 0.015147, -0.203087, 0.260923, -0.142278, 0.274568 ],
			"coeffs_2" : [ -0.439537, 0.619284, -0.517727, 0.352094, -0.507938, 0.389044, 0.166551, 0.617247 ],
			"coeffs_3" : [ -0.443915, -0.544968, 0.236548, 0.254996, 0.475586, 0.606558, 0.538130, -0.459344 ],
			"intercepts" : [ 0.454032, 0.576270, -0.426981, 0.285765, 0.240944, 0.053026, 0.089744, 0.373351 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.561438, 0.073931, 0.239541, 0.345250, -0.592209, 0.483484 ],
			"coeffs_1" : [ -0.364449, -0.605391, 0.645904, 0.624800, -0.086289, -0.532388 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.576816, -0.346982, 0.248926, 0.432010, 0.447722, -0.031256 ],
			"coeffs_4" : [ -0.581198, 0.355965, 0.037182, -0.094103, -0.509028, -0.649212 ],
			"coeffs_5" : [ -0.239449, 0.590265, 0.027252, -0.133482, -0.151607, -0.586402 ],
			"coeffs_6" : [ 0.218124, -0.199137, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_7" : [ -0.215160, 0.359756, 0.403039, 0.527259, 0.442846, 0.400585 ],
			"intercepts" : [ -0.278179, 0.065878, 0.157454, 0.413057, 0.288842, 0.025662 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 3 ,
			"coeffs_0" : [ 0.469580, 0.566861, 0.134588 ],
			"coeffs_1" : [ -0.310450, -0.192056, -0.376145 ],
			"coeffs_2" : [ 0.399958, 0.485336, -0.536619 ],
			"coeffs_3" : [ 0.234990, -0.489175, 0.026015 ],
			"coeffs_4" : [ 0.125161, -0.299080, 0.400254 ],
			"coeffs_5" : [ -0.802146, -0.702170, 0.637836 ],
			"intercepts" : [ 0.709969, -0.508510, -0.280184 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 64
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 4,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.104815, 0.421614, -0.383544, -0.063746 ],
			"coeffs_1" : [ 0.12848, -0.635077, 0.220918, 0.027581 ],
			"coeffs_2" : [ 0.709921, 0.156482, 0.69008, -0.13573 ],
			"coeffs_3" : [ 0.833956, -0.792758, -0.392632, 0.322195 ],
			"intercepts" : [ 0.421953, -0.442519, -0.470825, -0.672035 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ 0.338409, -0.698073, -0.112743, 0.003089, -0.10905, -0.642397, -0.362057, 0.549075 ],
			"coeffs_1" : [ -0.02416, 0.005832, -0.633156, 0.015147, -0.203087, 0.260923, -0.142278, 0.274568 ],
			"coeffs_2" : [ -0.439537, 0.619284, -0.517727, 0.352094, -0.507938, 0.389044, 0.166551, 0.617247 ],
			"coeffs_3" : [ -0.443915, -0.544968, 0.236548, 0.254996, 0.475586, 0.606558, 0.53813, -0.459344 ],
			"intercepts" : [ 0.454032, 0.57627, -0.426981, 0.285765, 0.240944, 0.053026, 0.089744, 0.373351 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.561438, 0.073931, 0.239541, 0.34525, -0.592209, 0.483484 ],
			"coeffs_1" : [ -0.364449, -0.605391, 0.645904, 0.6248, -0.086289, -0.532388 ],
			"coeffs_2" : [ -0.023593, 0.625967, -0.472366, 0.258081, 0.294782, 0.386716 ],
			"coeffs_3" : [ 0.576816, -0.346982, 0.248926, 0.43201, 0.447722, -0.031256 ],
			"coeffs_4" : [ -0.581198, 0.355965, 0.037182, -0.094103, -0.509028, -0.649212 ],
			"coeffs_5" : [ -0.239449, 0.590265, 0.027252, -0.133482, -0.151607, -0.586402 ],
			"coeffs_6" : [ 0.218124, -0.199137, -0.254067, -0.133022, 0.269611, -0.462554 ],
			"coeffs_7" : [ -0.21516, 0.359756, 0.403039, 0.527259, 0.442846, 0.400585 ],
			"intercepts" : [ -0.278179, 0.065878, 0.157454, 0.413057, 0.288842, 0.025662 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 3,
			"coeffs_0" : [ 0.46958, 0.566861, 0.134588 ],
			"coeffs_1" : [ -0.31045, -0.192056, -0.376145 ],
			"coeffs_2" : [ 0.399958, 0.485336, -0.536619 ],
			"coeffs_3" : [ 0.23499, -0.489175, 0.026015 ],
			"coeffs_4" : [ 0.125161, -0.29908, 0.400254 ],
			"coeffs_5" : [ -0.802146, -0.70217, 0.637836 ],
			"intercepts" : [ 0.709969, -0.50851, -0.280184 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 4, 4, 8, 6, 3 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('iris_small', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.4873 0.0151 0.4976]
 [0.5266 0.0212 0.4522]
 [0.484  0.0132 0.5028]
 [0.5201 0.0136 0.4663]
 [0.4759 0.0119 0.5122]
 [0.5603 0.029  0.4107]
 [0.5487 0.0321 0.4192]
 [0.5305 0.0218 0.4477]
 [0.6416 0.069  0.2894]
 [0.6373 0.0669 0.2958]
 [0.6358 0.0662 0.2981]
 [0.5392 0.0267 0.4342]
 [0.5765 0.0417 0.3819]
 [0.554  0.0311 0.4148]
 [0.4881 0.013  0.4989]
 [0.6452 0.0708 0.284 ]
 [0.5449 0.0277 0.4275]
 [0.6475 0.072  0.2805]
 [0.4852 0.0125 0.5022]
 [0.6364 0.0664 0.2972]
 [0.4882 0.0175 0.4943]
 [0.47   0.0132 0.5168]
 [0.5293 0.0238 0.4469]
 [0.4627 0.0086 0.5287]
 [0.6456 0.071  0.2835]
 [0.5043 0.0137 0.482 ]
 [0.648  0.0722 0.2798]
 [0.4772 0.0138 0.509 ]
 [0.6394 0.0678 0.2928]
 [0.6562 0.0769 0.2669]
 [0.483  0.0122 0.5047]
 [0.4622 0.0108 0.527 ]
 [0.5249 0.0184 0.4568]
 [0.638  0.0672 0.2948]
 [0.4763 0.0108 0.513 ]
 [0.55   0.0268 0.4232]
 [0.5137 0.0162 0.4701]
 [0.624  0.0611 0.3149]
 [0.4886 0.0156 0.4958]
 [0.4939 0.0126 0.4935]
 [0.518  0.0194 0.4626]
 [0.6321 0.0645 0.3034]
 [0.6325 0.0647 0.3029]
 [0.5037 0.0141 0.4822]
 [0.5483 0.0263 0.4254]
 [0.6446 0.0704 0.285 ]
 [0.5055 0.0143 0.4802]
 [0.5079 0.0173 0.4748]
 [0.6461 0.0712 0.2826]
 [0.5525 0.0261 0.4215]
 [0.5657 0.035  0.3993]
 [0.6464 0.0714 0.2822]
 [0.6421 0.0692 0.2886]
 [0.51   0.0164 0.4735]
 [0.6428 0.0695 0.2877]
 [0.5311 0.0249 0.4439]
 [0.5251 0.0221 0.4528]
 [0.5376 0.0279 0.4345]
 [0.4859 0.0134 0.5007]
 [0.6259 0.0618 0.3123]
 [0.6304 0.0638 0.3058]
 [0.5101 0.0198 0.4702]
 [0.489  0.0189 0.4921]
 [0.5016 0.0171 0.4812]]
(64, 3)
(64, 3) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'iris_small', 'size': 64, 'accuracy': 0.5625, 'auc': 0.8541666666666666}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_small_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'iris_small', 'training_time_in_sec': 0.011, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ 0.000345, 0.000034, -0.000378 ],
      "X_1" : [ 0.000158, -0.000055, -0.000104 ],
      "X_2" : [ 0.008799, 0.005294, -0.014092 ],
      "X_3" : [ 0.006402, 0.001272, -0.007674 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 2, 3, 0, 1 ],
      "class_1" : [ 2, 3, 1, 0 ],
      "class_2" : [ 2, 3, 0, 1 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_small_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_small_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_small', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_small" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    0.421953 + -0.104815 * t."OUT_0"  + 0.128480 * t."OUT_1"  + 0.709921 * t."OUT_2"  + 0.833956 * t."OUT_3" AS "OUT_0",
    -0.442519 + 0.421614 * t."OUT_0"  + -0.635077 * t."OUT_1"  + 0.156482 * t."OUT_2"  + -0.792758 * t."OUT_3" AS "OUT_1",
    -0.470825 + -0.383544 * t."OUT_0"  + 0.220918 * t."OUT_1"  + 0.690080 * t."OUT_2"  + -0.392632 * t."OUT_3" AS "OUT_2",
    -0.672035 + -0.063746 * t."OUT_0"  + 0.027581 * t."OUT_1"  + -0.135730 * t."OUT_2"  + 0.322195 * t."OUT_3" AS "OUT_3"
 FROM "Input_Layer_BA" AS t
),
"Hidden_Layer_1_Activation" AS
 (
SQL_OUT_PUT_FIRST_LINES_END ('iris_small', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('iris_small', 'MLPClassifier', 'duckdb')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_small', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
       X_0  X_1  X_2  X_3
index                    
0      6.4  3.2  5.3  2.3
1      6.3  3.3  4.7  1.6
2      7.1  3.0  5.9  2.1
3      6.1  2.6  5.6  1.4
4      6.8  3.2  5.9  2.3
...    ...  ...  ...  ...
59     5.4  3.9  1.7  0.4
60     5.0  3.4  1.6  0.4
61     6.3  2.5  5.0  1.9
62     6.9  3.1  5.1  2.3
63     6.5  3.0  5.2  2.0

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        64 non-null     float64
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        64 non-null     float64
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Score_2        64 non-null     float64
 8   Proba_2        64 non-null     float64
 9   LogProba_2     64 non-null     float64
 10  Decision       64 non-null     int64  
 11  DecisionProba  64 non-null     float64
dtypes: float64(10), int64(2)
memory usage: 6.1 KB
    index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0       0  0.019069  0.487293  ...   -0.697975         2       0.497592
1       1  0.153794  0.526587  ...   -0.793556         0       0.526587
2       2  0.033228  0.483954  ...   -0.687551         2       0.502806
3       3  0.222847  0.520111  ...   -0.762874         0       0.520111
4       4  0.016188  0.475915  ...   -0.669060         2       0.512190
..    ...       ...       ...  ...         ...       ...            ...
59     59  0.521914  0.625883  ...   -1.163807         0       0.625883
60     60  0.539716  0.630426  ...   -1.184762         0       0.630426
61     61  0.079508  0.510063  ...   -0.754671         0       0.510063
62     62 -0.024909  0.489008  ...   -0.709166         2       0.492054
63     63  0.066752  0.501619  ...   -0.731386         0       0.501619

[64 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
    index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
48     48  0.605078     0.646134  ...    0.071244    0.282622            0
49     49  0.250742     0.552458  ...    0.026088    0.421454            0
50     50  0.268463     0.565677  ...    0.035045    0.399277            0
51     51  0.606350     0.646424  ...    0.071396    0.282180            0
52     52  0.587836     0.642143  ...    0.069207    0.288650            0
53     53  0.122315     0.510030  ...    0.016423    0.473546            0
54     54  0.590438     0.642752  ...    0.069512    0.287736            0
55     55  0.143277     0.531129  ...    0.024945    0.443925            0
56     56  0.136582     0.525109  ...    0.022092    0.452798            0
57     57  0.156014     0.537614  ...    0.027858    0.434528            0
58     58  0.041909     0.485948  ...    0.013355    0.500696            2
59     59  0.521914     0.625883  ...    0.061822    0.312294            0
60     60  0.539716     0.630426  ...    0.063755    0.305818            0
61     61  0.079508     0.510063  ...    0.019772    0.470165            0
62     62 -0.024909     0.489008  ...    0.018938    0.492053            2
63     63  0.066752     0.501619  ...    0.017140    0.481241            0

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_small', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 6.868571238091703e-07
    Py_Proba_0  SQL_Proba_0   SQL_Error_0
48    0.646134     0.646134  4.546567e-07
49    0.552458     0.552458  6.660778e-07
50    0.565678     0.565677  6.651768e-07
51    0.646424     0.646424  4.238099e-07
52    0.642143     0.642143  4.805517e-07
53    0.510031     0.510030  8.651375e-07
54    0.642753     0.642752  5.511475e-07
55    0.531130     0.531129  7.210904e-07
56    0.525110     0.525109  7.326682e-07
57    0.537615     0.537614  5.133056e-07
58    0.485949     0.485948  8.766984e-07
59    0.625883     0.625883  5.072402e-07
60    0.630427     0.630426  5.486367e-07
61    0.510063     0.510063  7.869466e-07
62    0.489009     0.489008  7.800799e-07
63    0.501620     0.501619  7.958138e-07
MLLITE_CLASS_SQL_ERROR ('iris_small', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 6.098010583001443e-08
    Py_Proba_1  SQL_Proba_1   SQL_Error_1
48    0.071244     0.071243  6.755398e-08
49    0.026088     0.026088  5.929060e-08
50    0.035045     0.035045  5.819859e-08
51    0.071396     0.071395  9.469193e-08
52    0.069207     0.069207  9.009116e-08
53    0.016423     0.016423  5.360228e-08
54    0.069512     0.069512  8.905519e-08
55    0.024945     0.024945  6.091523e-08
56    0.022092     0.022092  4.581861e-08
57    0.027858     0.027857  4.174999e-08
58    0.013355     0.013355  4.581031e-08
59    0.061822     0.061822  8.969369e-08
60    0.063755     0.063755  8.554313e-08
61    0.019772     0.019772  4.687501e-08
62    0.018938     0.018938  4.005170e-08
63    0.017140     0.017140  4.424959e-08
MLLITE_CLASS_SQL_ERROR ('iris_small', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 7.512423778124888e-07
    Py_Proba_2  SQL_Proba_2   SQL_Error_2
48    0.282622     0.282623 -4.924084e-07
49    0.421454     0.421454 -7.104673e-07
50    0.399277     0.399278 -7.196501e-07
51    0.282180     0.282181 -5.855571e-07
52    0.288650     0.288650 -5.333900e-07
53    0.473546     0.473547 -9.019760e-07
54    0.287736     0.287736 -5.433451e-07
55    0.443925     0.443926 -7.764177e-07
56    0.452798     0.452798 -8.287782e-07
57    0.434528     0.434528 -5.643688e-07
58    0.500696     0.500697 -9.122641e-07
59    0.312294     0.312295 -5.336040e-07
60    0.305818     0.305819 -6.639821e-07
61    0.470165     0.470165 -8.300963e-07
62    0.492053     0.492054 -8.406207e-07
63    0.481241     0.481242 -8.214369e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_small', 'MLPClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
48            0             0
49            0             0
50            0             0
51            0             0
52            0             0
53            0             0
54            0             0
55            0             0
56            0             0
57            0             0
58            2             2
59            0             0
60            0             0
61            0             0
62            2             2
63            0             0
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_iris_small_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_small', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_small" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    0.421953 + -0.104815 * t."OUT_0"  + 0.128480 * t."OUT_1"  + 0.709921 * t."OUT_2"  + 0.833956 * t."OUT_3" AS "OUT_0",
    -0.442519 + 0.421614 * t."OUT_0"  + -0.635077 * t."OUT_1"  + 0.156482 * t."OUT_2"  + -0.792758 * t."OUT_3" AS "OUT_1",
    -0.470825 + -0.383544 * t."OUT_0"  + 0.220918 * t."OUT_1"  + 0.690080 * t."OUT_2"  + -0.392632 * t."OUT_3" AS "OUT_2",
    -0.672035 + -0.063746 * t."OUT_0"  + 0.027581 * t."OUT_1"  + -0.135730 * t."OUT_2"  + 0.322195 * t."OUT_3" AS "OUT_3"
 FROM "Input_Layer_BA" AS t
),
"Hidden_Layer_1_Activation" AS
 (
SQL_OUT_PUT_FIRST_LINES_END ('iris_small', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('iris_small', 'MLPClassifier', 'sqlite')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_small', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
       X_0  X_1  X_2  X_3
index                    
0      6.4  3.2  5.3  2.3
1      6.3  3.3  4.7  1.6
2      7.1  3.0  5.9  2.1
3      6.1  2.6  5.6  1.4
4      6.8  3.2  5.9  2.3
...    ...  ...  ...  ...
59     5.4  3.9  1.7  0.4
60     5.0  3.4  1.6  0.4
61     6.3  2.5  5.0  1.9
62     6.9  3.1  5.1  2.3
63     6.5  3.0  5.2  2.0

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('iris_small', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_small', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
