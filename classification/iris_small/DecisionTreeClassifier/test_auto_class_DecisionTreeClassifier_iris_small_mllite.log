READING_CSV iris_small ['data/small/iris_small.csv']
    sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                 6.4               3.2  ...               2.3       2
1                 6.3               3.3  ...               1.6       1
2                 7.1               3.0  ...               2.1       2
3                 6.1               2.6  ...               1.4       2
4                 6.8               3.2  ...               2.3       2
..                ...               ...  ...               ...     ...
59                5.4               3.9  ...               0.4       0
60                5.0               3.4  ...               0.4       0
61                6.3               2.5  ...               1.9       2
62                6.9               3.1  ...               2.3       2
63                6.5               3.0  ...               2.0       2

[64 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS DecisionTreeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT DecisionTreeClassifier { "max_leaf_nodes" : 64}
MLLITE_MODEL_OPTIONS_AFTER_SETTING DecisionTreeClassifier { ,  "max_leaf_nodes" : 64 }
MLLITE_MODEL_JSON_AFTER_SETTING DecisionTreeClassifier None
('OPERATION_START', 'TRAINING')
[[6.4 3.2 5.3 2.3]
 [6.3 3.3 4.7 1.6]
 [7.1 3.  5.9 2.1]
 [6.1 2.6 5.6 1.4]
 [6.8 3.2 5.9 2.3]] [2 1 2 2 2]
MLLITE_FIT_USING_MODEL mllite_decision_tree_class.DecisionTreeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 0 64
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 64 64
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 4 4
('OPERATION_END_ELAPSED', 0.007, 'TRAINING')
{ ,  "max_leaf_nodes" : 64 }
{ ,  "max_leaf_nodes" : 64 }
{
	"metadata" : { "model" : "Breiman_CART", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "ccp_alpha" : 0.000000, "criterion" : "", "max_depth" : null, "max_features" : null, "max_leaf_nodes" : 64, "min_impurity_decrease" : 0.000000, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.000000, "random_state" : 1789, "splitter" : "best" },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"tree" : {
	"features" : 4,
	"outputs" : 3,
	"max_depth" : 2,
	"node_count" : 9,
	"nodes" : {
		"node_0" : {"left" : 1, "right" : 2, "feature" : 2, "threshold" : 4.750000, "impurity" : 0.651855, "n_samples" : 64, "w_samples" : 64.000000, "value" : [0.328125, 0.250000, 0.421875]},
		"node_1" : {"left" : 3, "right" : 4, "feature" : 2, "threshold" : 2.350000, "impurity" : 0.486111, "n_samples" : 36, "w_samples" : 36.000000, "value" : [0.583333, 0.416667, 0.000000]},
		"node_2" : {"left" : 5, "right" : 6, "feature" : 2, "threshold" : 4.950000, "impurity" : 0.068878, "n_samples" : 28, "w_samples" : 28.000000, "value" : [0.000000, 0.035714, 0.964286]},
		"node_3" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 21, "w_samples" : 21.000000, "value" : [1.000000, 0.000000, 0.000000]},
		"node_4" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 15, "w_samples" : 15.000000, "value" : [0.000000, 1.000000, 0.000000]},
		"node_5" : {"left" : 7, "right" : 8, "feature" : 1, "threshold" : 3.050000, "impurity" : 0.500000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 0.500000, 0.500000]},
		"node_6" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 26, "w_samples" : 26.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_7" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_8" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 1.000000, 0.000000]}
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_small.json'

RELOADING_MODEL_FROM_JSON_START ('iris_small', 'DecisionTreeClassifier')
MLLITE_MODEL_SET_OPTIONS DecisionTreeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT DecisionTreeClassifier { "max_leaf_nodes" : 64}
MLLITE_MODEL_OPTIONS_AFTER_SETTING DecisionTreeClassifier { ,  "max_leaf_nodes" : 64 }
MLLITE_MODEL_JSON_AFTER_SETTING DecisionTreeClassifier None
MLLITE_RELOADING_MODEL mllite_decision_tree_class.DecisionTreeClassifier_ff4_il8
{
	"metadata" : { "model" : "Breiman_CART", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "ccp_alpha" : 0.000000, "criterion" : "", "max_depth" : null, "max_features" : null, "max_leaf_nodes" : 64, "min_impurity_decrease" : 0.000000, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.000000, "random_state" : 1789, "splitter" : "best" },
	"dataset" : { "dataset_rows" : 64, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"tree" : {
	"features" : 4,
	"outputs" : 3,
	"max_depth" : 2,
	"node_count" : 9,
	"nodes" : {
		"node_0" : {"left" : 1, "right" : 2, "feature" : 2, "threshold" : 4.750000, "impurity" : 0.651855, "n_samples" : 64, "w_samples" : 64.000000, "value" : [0.328125, 0.250000, 0.421875]},
		"node_1" : {"left" : 3, "right" : 4, "feature" : 2, "threshold" : 2.350000, "impurity" : 0.486111, "n_samples" : 36, "w_samples" : 36.000000, "value" : [0.583333, 0.416667, 0.000000]},
		"node_2" : {"left" : 5, "right" : 6, "feature" : 2, "threshold" : 4.950000, "impurity" : 0.068878, "n_samples" : 28, "w_samples" : 28.000000, "value" : [0.000000, 0.035714, 0.964286]},
		"node_3" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 21, "w_samples" : 21.000000, "value" : [1.000000, 0.000000, 0.000000]},
		"node_4" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 15, "w_samples" : 15.000000, "value" : [0.000000, 1.000000, 0.000000]},
		"node_5" : {"left" : 7, "right" : 8, "feature" : 1, "threshold" : 3.050000, "impurity" : 0.500000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 0.500000, 0.500000]},
		"node_6" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 26, "w_samples" : 26.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_7" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_8" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 1.000000, 0.000000]}
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 64
	},
	"metadata" :  { "model" : "Breiman_CART", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "ccp_alpha" : 0.0, "criterion" : "", "max_depth" : null, "max_features" : null, "max_leaf_nodes" : 64, "min_impurity_decrease" : 0.0, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.0, "random_state" : 1789, "splitter" : "best" },
	"tree" : 	{
		"features" : 4,
		"max_depth" : 2,
		"node_count" : 9,
		"nodes" : 	{
			"node_0" :  { "feature" : 2, "impurity" : 0.651855, "left" : 1, "n_samples" : 64, "right" : 2, "threshold" : 4.75, "value" : [ 0.328125, 0.25, 0.421875 ], "w_samples" : 64.0 },
			"node_1" :  { "feature" : 2, "impurity" : 0.486111, "left" : 3, "n_samples" : 36, "right" : 4, "threshold" : 2.35, "value" : [ 0.583333, 0.416667, 0.0 ], "w_samples" : 36.0 },
			"node_2" :  { "feature" : 2, "impurity" : 0.068878, "left" : 5, "n_samples" : 28, "right" : 6, "threshold" : 4.95, "value" : [ 0.0, 0.035714, 0.964286 ], "w_samples" : 28.0 },
			"node_3" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 21, "right" : null, "threshold" : null, "value" : [ 1.0, 0.0, 0.0 ], "w_samples" : 21.0 },
			"node_4" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 15, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0, 0.0 ], "w_samples" : 15.0 },
			"node_5" :  { "feature" : 1, "impurity" : 0.5, "left" : 7, "n_samples" : 2, "right" : 8, "threshold" : 3.05, "value" : [ 0.0, 0.5, 0.5 ], "w_samples" : 2.0 },
			"node_6" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 26, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 1.0 ], "w_samples" : 26.0 },
			"node_7" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 1.0 ], "w_samples" : 1.0 },
			"node_8" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0, 0.0 ], "w_samples" : 1.0 }
		},
		"outputs" : 3
	}
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('iris_small', 'DecisionTreeClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0. 0. 1.]
 [0. 1. 0.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [1. 0. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 1. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [1. 0. 0.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]]
(64, 3)
(64, 3) float32
MODEL_PERFS {'class_name': 'mllite.DecisionTreeClassifier', 'model_name': 'DecisionTreeClassifier', 'options': None, 'dataset': 'iris_small', 'size': 64, 'accuracy': 1.0, 'auc': 1.0}
WRITING_PERF_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_small.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.DecisionTreeClassifier', 'model_name': 'DecisionTreeClassifier', 'options': None, 'dataset': 'iris_small', 'training_time_in_sec': 0.007, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ 0.000000, 0.000000, 0.000000 ],
      "X_1" : [ 0.000000, 0.003418, -0.003418 ],
      "X_2" : [ 0.109375, 0.061035, -0.170410 ],
      "X_3" : [ 0.000000, 0.000000, 0.000000 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 2 ],
      "class_1" : [ 2, 1 ],
      "class_2" : [ 2, 1 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_small_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_small_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_small', 'DecisionTreeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_small" AS "ADS" 
 ),
"DT_node_lookup" AS 
 (SELECT
    t."index" AS "index",
    COALESCE( t1."Leaf_3", t1."Leaf_4", t1."Leaf_6", t1."Leaf_7", t1."Leaf_8" ) AS node_id
  FROM
    "model_input" AS t
    LEFT OUTER JOIN
   (SELECT
      t."index" AS "index",
      CASE WHEN((t."X_2" <= 4.750000) AND (t."X_2" <= 2.350000)) THEN 3 ELSE NULL END AS "Leaf_3",
      CASE WHEN((t."X_2" <= 4.750000) AND (t."X_2" > 2.350000)) THEN 4 ELSE NULL END AS "Leaf_4",
      CASE WHEN((t."X_2" > 4.750000) AND (t."X_2" > 4.950000)) THEN 6 ELSE NULL END AS "Leaf_6",
      CASE WHEN((t."X_2" > 4.750000) AND (t."X_2" <= 4.950000) AND (t."X_1" <= 3.050000)) THEN 7 ELSE NULL END AS "Leaf_7",
      CASE WHEN((t."X_2" > 4.750000) AND (t."X_2" <= 4.950000) AND (t."X_1" > 3.050000)) THEN 8 ELSE NULL END AS "Leaf_8"
    FRO
SQL_OUT_PUT_FIRST_LINES_END ('iris_small', 'DecisionTreeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('iris_small', 'DecisionTreeClassifier', 'duckdb')
d AS node_id,
   t2.nid AS nid,
   t2."P_0" AS "P_0", t2."P_1" AS "P_1", t2."P_2" AS "P_2", 
   t2."D" AS "D", 
   t2."DP" AS "DP"
  FROM
   "DT_node_lookup" AS t1
   LEFT OUTER JOIN
   "DT_node_data" AS t2
   ON t1.node_id = t2.nid
 )
SELECT
   "DT_Output"."index" AS "index",
   CAST(NULL AS FLOAT)  AS "Score_0",
   "DT_Output"."P_0" AS "Proba_0",
   CASE WHEN ("DT_Output"."P_0" IS NULL OR "DT_Output"."P_0" > 0.0) THEN LN( "DT_Output"."P_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
   CAST(NULL AS FLOAT)  AS "Score_1",
   "DT_Output"."P_1" AS "Proba_1",
   CASE WHEN ("DT_Output"."P_1" IS NULL OR "DT_Output"."P_1" > 0.0) THEN LN( "DT_Output"."P_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
   CAST(NULL AS FLOAT)  AS "Score_2",
   "DT_Output"."P_2" AS "Proba_2",
   CASE WHEN ("DT_Output"."P_2" IS NULL OR "DT_Output"."P_2" > 0.0) THEN LN( "DT_Output"."P_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
   "DT_Output"."D" AS "Decision",
   "DT_Output"."DP" AS "DecisionProba"
FROM "DT_Output"
SQL_OUT_PUT_LAST_LINES_END ('iris_small', 'DecisionTreeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
       X_0  X_1  X_2  X_3
index                    
0      6.4  3.2  5.3  2.3
1      6.3  3.3  4.7  1.6
2      7.1  3.0  5.9  2.1
3      6.1  2.6  5.6  1.4
4      6.8  3.2  5.9  2.3
...    ...  ...  ...  ...
59     5.4  3.9  1.7  0.4
60     5.0  3.4  1.6  0.4
61     6.3  2.5  5.0  1.9
62     6.9  3.1  5.1  2.3
63     6.5  3.0  5.2  2.0

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        0 non-null      object 
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        0 non-null      object 
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Score_2        0 non-null      object 
 8   Proba_2        64 non-null     float64
 9   LogProba_2     64 non-null     float64
 10  Decision       64 non-null     int64  
 11  DecisionProba  64 non-null     float64
dtypes: float64(7), int64(2), object(3)
memory usage: 6.1+ KB
    index Score_0  Proba_0  ...     LogProba_2 Decision  DecisionProba
0       0    None      0.0  ...   0.000000e+00        2            1.0
1       1    None      0.0  ... -1.797693e+308        1            1.0
2       2    None      0.0  ...   0.000000e+00        2            1.0
3       3    None      0.0  ...   0.000000e+00        2            1.0
4       4    None      0.0  ...   0.000000e+00        2            1.0
..    ...     ...      ...  ...            ...      ...            ...
59     59    None      1.0  ... -1.797693e+308        0            1.0
60     60    None      1.0  ... -1.797693e+308        0            1.0
61     61    None      0.0  ...   0.000000e+00        2            1.0
62     62    None      0.0  ...   0.000000e+00        2            1.0
63     63    None      0.0  ...   0.000000e+00        2            1.0

[64 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
    index Score_0  SQL_Proba_0  ...  Py_Proba_1 Py_Proba_2  Py_Decision
48     48    None          1.0  ...         0.0        0.0            0
49     49    None          0.0  ...         1.0        0.0            1
50     50    None          0.0  ...         1.0        0.0            1
51     51    None          1.0  ...         0.0        0.0            0
52     52    None          1.0  ...         0.0        0.0            0
53     53    None          0.0  ...         0.0        1.0            2
54     54    None          1.0  ...         0.0        0.0            0
55     55    None          0.0  ...         1.0        0.0            1
56     56    None          0.0  ...         1.0        0.0            1
57     57    None          0.0  ...         1.0        0.0            1
58     58    None          0.0  ...         0.0        1.0            2
59     59    None          1.0  ...         0.0        0.0            0
60     60    None          1.0  ...         0.0        0.0            0
61     61    None          0.0  ...         0.0        1.0            2
62     62    None          0.0  ...         0.0        1.0            2
63     63    None          0.0  ...         0.0        1.0            2

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_small', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 0.0
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
48         1.0          1.0          0.0
49         0.0          0.0          0.0
50         0.0          0.0          0.0
51         1.0          1.0          0.0
52         1.0          1.0          0.0
53         0.0          0.0          0.0
54         1.0          1.0          0.0
55         0.0          0.0          0.0
56         0.0          0.0          0.0
57         0.0          0.0          0.0
58         0.0          0.0          0.0
59         1.0          1.0          0.0
60         1.0          1.0          0.0
61         0.0          0.0          0.0
62         0.0          0.0          0.0
63         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('iris_small', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 0.0
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
48         0.0          0.0          0.0
49         1.0          1.0          0.0
50         1.0          1.0          0.0
51         0.0          0.0          0.0
52         0.0          0.0          0.0
53         0.0          0.0          0.0
54         0.0          0.0          0.0
55         1.0          1.0          0.0
56         1.0          1.0          0.0
57         1.0          1.0          0.0
58         0.0          0.0          0.0
59         0.0          0.0          0.0
60         0.0          0.0          0.0
61         0.0          0.0          0.0
62         0.0          0.0          0.0
63         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('iris_small', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 0.0
    Py_Proba_2  SQL_Proba_2  SQL_Error_2
48         0.0          0.0          0.0
49         0.0          0.0          0.0
50         0.0          0.0          0.0
51         0.0          0.0          0.0
52         0.0          0.0          0.0
53         1.0          1.0          0.0
54         0.0          0.0          0.0
55         0.0          0.0          0.0
56         0.0          0.0          0.0
57         0.0          0.0          0.0
58         1.0          1.0          0.0
59         0.0          0.0          0.0
60         0.0          0.0          0.0
61         1.0          1.0          0.0
62         1.0          1.0          0.0
63         1.0          1.0          0.0
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_small', 'DecisionTreeClassifier', 'duckdb', 'Success')
    Py_Decision  SQL_Decision
48            0             0
49            1             1
50            1             1
51            0             0
52            0             0
53            2             2
54            0             0
55            1             1
56            1             1
57            1             1
58            2             2
59            0             0
60            0             0
61            2             2
62            2             2
63            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_small_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_small', 'DecisionTreeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_small" AS "ADS" 
 ),
"DT_node_lookup" AS 
 (SELECT
    t."index" AS "index",
    COALESCE( t1."Leaf_3", t1."Leaf_4", t1."Leaf_6", t1."Leaf_7", t1."Leaf_8" ) AS node_id
  FROM
    "model_input" AS t
    LEFT OUTER JOIN
   (SELECT
      t."index" AS "index",
      CASE WHEN((t."X_2" <= 4.750000) AND (t."X_2" <= 2.350000)) THEN 3 ELSE NULL END AS "Leaf_3",
      CASE WHEN((t."X_2" <= 4.750000) AND (t."X_2" > 2.350000)) THEN 4 ELSE NULL END AS "Leaf_4",
      CASE WHEN((t."X_2" > 4.750000) AND (t."X_2" > 4.950000)) THEN 6 ELSE NULL END AS "Leaf_6",
      CASE WHEN((t."X_2" > 4.750000) AND (t."X_2" <= 4.950000) AND (t."X_1" <= 3.050000)) THEN 7 ELSE NULL END AS "Leaf_7",
      CASE WHEN((t."X_2" > 4.750000) AND (t."X_2" <= 4.950000) AND (t."X_1" > 3.050000)) THEN 8 ELSE NULL END AS "Leaf_8"
    FRO
SQL_OUT_PUT_FIRST_LINES_END ('iris_small', 'DecisionTreeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('iris_small', 'DecisionTreeClassifier', 'sqlite')
d AS node_id,
   t2.nid AS nid,
   t2."P_0" AS "P_0", t2."P_1" AS "P_1", t2."P_2" AS "P_2", 
   t2."D" AS "D", 
   t2."DP" AS "DP"
  FROM
   "DT_node_lookup" AS t1
   LEFT OUTER JOIN
   "DT_node_data" AS t2
   ON t1.node_id = t2.nid
 )
SELECT
   "DT_Output"."index" AS "index",
   CAST(NULL AS FLOAT)  AS "Score_0",
   "DT_Output"."P_0" AS "Proba_0",
   CASE WHEN ("DT_Output"."P_0" IS NULL OR "DT_Output"."P_0" > 0.0) THEN LN( "DT_Output"."P_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
   CAST(NULL AS FLOAT)  AS "Score_1",
   "DT_Output"."P_1" AS "Proba_1",
   CASE WHEN ("DT_Output"."P_1" IS NULL OR "DT_Output"."P_1" > 0.0) THEN LN( "DT_Output"."P_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
   CAST(NULL AS FLOAT)  AS "Score_2",
   "DT_Output"."P_2" AS "Proba_2",
   CASE WHEN ("DT_Output"."P_2" IS NULL OR "DT_Output"."P_2" > 0.0) THEN LN( "DT_Output"."P_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
   "DT_Output"."D" AS "Decision",
   "DT_Output"."DP" AS "DecisionProba"
FROM "DT_Output"
SQL_OUT_PUT_LAST_LINES_END ('iris_small', 'DecisionTreeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 64 entries, 0 to 63
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     64 non-null     float32
 1   X_1     64 non-null     float32
 2   X_2     64 non-null     float32
 3   X_3     64 non-null     float32
dtypes: float32(4)
memory usage: 1.5 KB
       X_0  X_1  X_2  X_3
index                    
0      6.4  3.2  5.3  2.3
1      6.3  3.3  4.7  1.6
2      7.1  3.0  5.9  2.1
3      6.1  2.6  5.6  1.4
4      6.8  3.2  5.9  2.3
...    ...  ...  ...  ...
59     5.4  3.9  1.7  0.4
60     5.0  3.4  1.6  0.4
61     6.3  2.5  5.0  1.9
62     6.9  3.1  5.1  2.3
63     6.5  3.0  5.2  2.0

[64 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 64 entries, 0 to 63
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          64 non-null     int64  
 1   Score_0        0 non-null      object 
 2   Proba_0        64 non-null     float64
 3   LogProba_0     64 non-null     float64
 4   Score_1        0 non-null      object 
 5   Proba_1        64 non-null     float64
 6   LogProba_1     64 non-null     float64
 7   Score_2        0 non-null      object 
 8   Proba_2        64 non-null     float64
 9   LogProba_2     64 non-null     float64
 10  Decision       64 non-null     int64  
 11  DecisionProba  64 non-null     float64
dtypes: float64(7), int64(2), object(3)
memory usage: 6.1+ KB
    index Score_0  Proba_0  ...     LogProba_2 Decision  DecisionProba
0       0    None      0.0  ...   0.000000e+00        2            1.0
1       1    None      0.0  ... -1.797693e+308        1            1.0
2       2    None      0.0  ...   0.000000e+00        2            1.0
3       3    None      0.0  ...   0.000000e+00        2            1.0
4       4    None      0.0  ...   0.000000e+00        2            1.0
..    ...     ...      ...  ...            ...      ...            ...
59     59    None      1.0  ... -1.797693e+308        0            1.0
60     60    None      1.0  ... -1.797693e+308        0            1.0
61     61    None      0.0  ...   0.000000e+00        2            1.0
62     62    None      0.0  ...   0.000000e+00        2            1.0
63     63    None      0.0  ...   0.000000e+00        2            1.0

[64 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
    index Score_0  SQL_Proba_0  ...  Py_Proba_1 Py_Proba_2  Py_Decision
48     48    None          1.0  ...         0.0        0.0            0
49     49    None          0.0  ...         1.0        0.0            1
50     50    None          0.0  ...         1.0        0.0            1
51     51    None          1.0  ...         0.0        0.0            0
52     52    None          1.0  ...         0.0        0.0            0
53     53    None          0.0  ...         0.0        1.0            2
54     54    None          1.0  ...         0.0        0.0            0
55     55    None          0.0  ...         1.0        0.0            1
56     56    None          0.0  ...         1.0        0.0            1
57     57    None          0.0  ...         1.0        0.0            1
58     58    None          0.0  ...         0.0        1.0            2
59     59    None          1.0  ...         0.0        0.0            0
60     60    None          1.0  ...         0.0        0.0            0
61     61    None          0.0  ...         0.0        1.0            2
62     62    None          0.0  ...         0.0        1.0            2
63     63    None          0.0  ...         0.0        1.0            2

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_small', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 0.0
    Py_Proba_0  SQL_Proba_0  SQL_Error_0
48         1.0          1.0          0.0
49         0.0          0.0          0.0
50         0.0          0.0          0.0
51         1.0          1.0          0.0
52         1.0          1.0          0.0
53         0.0          0.0          0.0
54         1.0          1.0          0.0
55         0.0          0.0          0.0
56         0.0          0.0          0.0
57         0.0          0.0          0.0
58         0.0          0.0          0.0
59         1.0          1.0          0.0
60         1.0          1.0          0.0
61         0.0          0.0          0.0
62         0.0          0.0          0.0
63         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('iris_small', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 0.0
    Py_Proba_1  SQL_Proba_1  SQL_Error_1
48         0.0          0.0          0.0
49         1.0          1.0          0.0
50         1.0          1.0          0.0
51         0.0          0.0          0.0
52         0.0          0.0          0.0
53         0.0          0.0          0.0
54         0.0          0.0          0.0
55         1.0          1.0          0.0
56         1.0          1.0          0.0
57         1.0          1.0          0.0
58         0.0          0.0          0.0
59         0.0          0.0          0.0
60         0.0          0.0          0.0
61         0.0          0.0          0.0
62         0.0          0.0          0.0
63         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('iris_small', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_2', 'SQL_Proba_2') 0.0
    Py_Proba_2  SQL_Proba_2  SQL_Error_2
48         0.0          0.0          0.0
49         0.0          0.0          0.0
50         0.0          0.0          0.0
51         0.0          0.0          0.0
52         0.0          0.0          0.0
53         1.0          1.0          0.0
54         0.0          0.0          0.0
55         0.0          0.0          0.0
56         0.0          0.0          0.0
57         0.0          0.0          0.0
58         1.0          1.0          0.0
59         0.0          0.0          0.0
60         0.0          0.0          0.0
61         1.0          1.0          0.0
62         1.0          1.0          0.0
63         1.0          1.0          0.0
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_small', 'DecisionTreeClassifier', 'sqlite', 'Success')
    Py_Decision  SQL_Decision
48            0             0
49            1             1
50            1             1
51            0             0
52            0             0
53            2             2
54            0             0
55            1             1
56            1             1
57            1             1
58            2             2
59            0             0
60            0             0
61            2             2
62            2             2
63            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
