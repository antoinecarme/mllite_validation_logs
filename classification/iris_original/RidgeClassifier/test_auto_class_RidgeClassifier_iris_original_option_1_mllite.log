READING_CSV iris_original ['data/original/iris.csv']
     sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                  5.1               3.5  ...               0.2       0
1                  4.9               3.0  ...               0.2       0
2                  4.7               3.2  ...               0.2       0
3                  4.6               3.1  ...               0.2       0
4                  5.0               3.6  ...               0.2       0
..                 ...               ...  ...               ...     ...
145                6.7               3.0  ...               2.3       2
146                6.3               2.5  ...               1.9       2
147                6.5               3.0  ...               2.0       2
148                6.2               3.4  ...               2.3       2
149                5.9               3.0  ...               1.8       2

[150 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS RidgeClassifier {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { "alpha" : 0.0000001,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
('OPERATION_START', 'TRAINING')
[[5.1 3.5 1.4 0.2]
 [4.9 3.  1.4 0.2]
 [4.7 3.2 1.3 0.2]
 [4.6 3.1 1.5 0.2]
 [5.  3.6 1.4 0.2]] [0 0 0 0 0]
MLLITE_FIT_USING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 1 5
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 2 5
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 3 5
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 4 5
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 5 5
('OPERATION_END_ELAPSED', 0.012, 'TRAINING')
{ "alpha" : 0.0000001,   }
{ "alpha" : 0.0000001,   }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 150, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"equations" : {
		"class_0" : {
			"intercept" : -0.763496,
			"coeffs" : [ 0.131989, 0.485751, -0.449226, -0.115067 ]
		},
		"class_1" : {
			"intercept" : 2.154100,
			"coeffs" : [ -0.040224, -0.891304, 0.441200, -0.988387 ]
		},
		"class_2" : {
			"intercept" : -2.390598,
			"coeffs" : [ -0.091762, 0.405549, 0.008021, 1.103463 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('iris_original', 'RidgeClassifier')
MLLITE_MODEL_SET_OPTIONS RidgeClassifier {"alpha" : 0.0000001}
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { "alpha" : 0.0000001,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
MLLITE_RELOADING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "alpha" : 0.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 150, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"equations" : {
		"class_0" : {
			"intercept" : -0.763496,
			"coeffs" : [ 0.131989, 0.485751, -0.449226, -0.115067 ]
		},
		"class_1" : {
			"intercept" : 2.154100,
			"coeffs" : [ -0.040224, -0.891304, 0.441200, -0.988387 ]
		},
		"class_2" : {
			"intercept" : -2.390598,
			"coeffs" : [ -0.091762, 0.405549, 0.008021, 1.103463 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 150
	},
	"equations" : 	{
		"class_0" : 	{
			"coeffs" : [ 0.131989, 0.485751, -0.449226, -0.115067 ],
			"intercept" : -0.763496
		},
		"class_1" : 	{
			"coeffs" : [ -0.040224, -0.891304, 0.4412, -0.988387 ],
			"intercept" : 2.1541
		},
		"class_2" : 	{
			"coeffs" : [ -0.091762, 0.405549, 0.008021, 1.103463 ],
			"intercept" : -2.390598
		}
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "alpha" : 0.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('iris_original', 'RidgeClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.7717 0.1398 0.0885]
 [0.6675 0.2491 0.0834]
 [0.7188 0.1929 0.0883]
 [0.6609 0.2474 0.0917]
 [0.7831 0.1258 0.0912]
 [0.7931 0.0863 0.1206]
 [0.7387 0.1534 0.1079]
 [0.738  0.1706 0.0914]
 [0.622  0.2904 0.0876]
 [0.6654 0.2582 0.0764]
 [0.7979 0.1139 0.0882]
 [0.7158 0.1872 0.097 ]
 [0.6547 0.2713 0.074 ]
 [0.6868 0.2375 0.0757]
 [0.8669 0.0585 0.0746]
 [0.8561 0.0372 0.1067]
 [0.8314 0.0633 0.1053]
 [0.7718 0.1281 0.1   ]
 [0.796  0.103  0.101 ]
 [0.7984 0.0958 0.1057]
 [0.7236 0.1866 0.0898]
 [0.783  0.0989 0.1181]
 [0.8153 0.0982 0.0864]
 [0.698  0.1674 0.1346]
 [0.6679 0.2282 0.1038]
 [0.636  0.2788 0.0851]
 [0.7259 0.1541 0.12  ]
 [0.7621 0.1483 0.0895]
 [0.759  0.1551 0.0859]
 [0.6705 0.235  0.0944]
 [0.6518 0.2577 0.0905]
 [0.7543 0.1367 0.109 ]
 [0.8389 0.078  0.0831]
 [0.8593 0.0554 0.0852]
 [0.6733 0.2394 0.0873]
 [0.7447 0.1736 0.0817]
 [0.7969 0.1233 0.0799]
 [0.779  0.1389 0.0821]
 [0.6642 0.2472 0.0886]
 [0.7417 0.1685 0.0898]
 [0.7806 0.1206 0.0988]
 [0.4914 0.4319 0.0766]
 [0.7073 0.1999 0.0929]
 [0.7328 0.1138 0.1534]
 [0.7481 0.1175 0.1344]
 [0.6701 0.2332 0.0967]
 [0.7899 0.1131 0.097 ]
 [0.6994 0.2087 0.0919]
 [0.7947 0.1154 0.0898]
 [0.7342 0.1782 0.0875]
 [0.2627 0.3434 0.3939]
 [0.2578 0.2865 0.4557]
 [0.2181 0.3646 0.4173]
 [0.1704 0.5827 0.2469]
 [0.2024 0.4194 0.3782]
 [0.19   0.4922 0.3179]
 [0.2326 0.251  0.5163]
 [0.2421 0.5574 0.2005]
 [0.2206 0.4661 0.3133]
 [0.2294 0.3992 0.3714]
 [0.1514 0.71   0.1387]
 [0.2517 0.3075 0.4408]
 [0.1518 0.7106 0.1376]
 [0.1928 0.4449 0.3622]
 [0.3169 0.3266 0.3565]
 [0.2764 0.3342 0.3894]
 [0.2071 0.348  0.4449]
 [0.2168 0.5766 0.2066]
 [0.1322 0.6029 0.2648]
 [0.2073 0.5763 0.2164]
 [0.1823 0.222  0.5957]
 [0.2655 0.4113 0.3232]
 [0.1328 0.5623 0.3049]
 [0.1774 0.5593 0.2633]
 [0.2519 0.4218 0.3263]
 [0.2588 0.3654 0.3759]
 [0.1901 0.4877 0.3222]
 [0.1813 0.3304 0.4883]
 [0.2092 0.3766 0.4143]
 [0.2804 0.5103 0.2094]
 [0.2001 0.5942 0.2057]
 [0.2069 0.6133 0.1799]
 [0.2513 0.4697 0.2789]
 [0.1299 0.4816 0.3885]
 [0.2006 0.3488 0.4506]
 [0.2514 0.2083 0.5403]
 [0.234  0.3388 0.4272]
 [0.149  0.6341 0.2168]
 [0.2629 0.3684 0.3687]
 [0.1991 0.517  0.2839]
 [0.1659 0.5847 0.2494]
 [0.2165 0.3981 0.3854]
 [0.2215 0.5192 0.2593]
 [0.2266 0.5884 0.185 ]
 [0.2075 0.4805 0.312 ]
 [0.2555 0.4198 0.3247]
 [0.2395 0.4139 0.3466]
 [0.2447 0.424  0.3313]
 [0.3191 0.434  0.2469]
 [0.2377 0.4312 0.3312]
 [0.0685 0.1071 0.8244]
 [0.1182 0.349  0.5328]
 [0.1028 0.2749 0.6223]
 [0.1122 0.3929 0.495 ]
 [0.0913 0.2269 0.6818]
 [0.0768 0.3511 0.5721]
 [0.1332 0.4222 0.4446]
 [0.088  0.4842 0.4278]
 [0.081  0.5491 0.3699]
 [0.0831 0.0806 0.8363]
 [0.1566 0.1886 0.6548]
 [0.1176 0.3743 0.5081]
 [0.1196 0.2358 0.6446]
 [0.1067 0.3539 0.5394]
 [0.0919 0.1527 0.7554]
 [0.1126 0.1269 0.7605]
 [0.1299 0.3505 0.5196]
 [0.0945 0.1415 0.764 ]
 [0.0486 0.4159 0.5355]
 [0.0909 0.6697 0.2393]
 [0.1028 0.1518 0.7455]
 [0.1272 0.2597 0.6131]
 [0.067  0.4733 0.4598]
 [0.1486 0.3676 0.4838]
 [0.1179 0.1869 0.6952]
 [0.124  0.3515 0.5245]
 [0.1623 0.3256 0.5121]
 [0.1662 0.2815 0.5524]
 [0.097  0.2949 0.6081]
 [0.1283 0.4773 0.3944]
 [0.0935 0.4448 0.4617]
 [0.1316 0.1735 0.6949]
 [0.092  0.2564 0.6516]
 [0.147  0.492  0.361 ]
 [0.0856 0.6656 0.2487]
 [0.0924 0.2236 0.6839]
 [0.0922 0.096  0.8118]
 [0.1343 0.3211 0.5447]
 [0.1717 0.2707 0.5576]
 [0.1326 0.2049 0.6625]
 [0.0933 0.1371 0.7696]
 [0.1325 0.1315 0.736 ]
 [0.1182 0.349  0.5328]
 [0.0916 0.1643 0.7441]
 [0.0853 0.0954 0.8192]
 [0.1187 0.1531 0.7281]
 [0.1223 0.3992 0.4785]
 [0.1392 0.2414 0.6193]
 [0.1082 0.1047 0.7871]
 [0.1448 0.3034 0.5517]]
(150, 3)
(150, 3) float32
MODEL_PERFS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': '{"alpha" : 0.0000001}', 'dataset': 'iris_original', 'size': 150, 'accuracy': 0.8466666666666667, 'auc': 0.9507333333333333}
WRITING_PERF_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': '{"alpha" : 0.0000001}', 'dataset': 'iris_original', 'training_time_in_sec': 0.012, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ 0.002151, -0.000370, -0.001782 ],
      "X_1" : [ 0.012898, -0.027483, 0.014585 ],
      "X_2" : [ -0.010996, 0.009471, 0.001524 ],
      "X_3" : [ 0.000816, 0.004787, -0.005603 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 1, 2, 0, 3 ],
      "class_1" : [ 1, 2, 3, 0 ],
      "class_2" : [ 1, 3, 0, 2 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_original', 'RidgeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT t."index" AS "index",
   -0.763496 + 0.131989 * t."X_0" + 0.485751 * t."X_1" + -0.449226 * t."X_2" + -0.115067 * t."X_3" AS "Score_0",
   CAST(NULL AS FLOAT) AS "Proba_0",
   CAST(NULL AS FLOAT) AS "LogProba_0",
   2.154100 + -0.040224 * t."X_0" + -0.891304 * t."X_1" + 0.441200 * t."X_2" + -0.988387 * t."X_3" AS "Score_1",
   CAST(NULL AS FLOAT) AS "Proba_1",
   CAST(NULL AS FLOAT) AS "LogProba_1",
   -2.390598 + -0.091762 * t."X_0" + 0.405549 * t."X_1" + 0.008021 * t."X_2" + 1.103463 * t."X_3" AS "Score_2",
   CAST(NULL AS FLOAT) AS "Proba_2",
   CAST(NULL AS FLOAT) AS "LogProba_2"
  FROM model_input AS t
 ),
soft_max_orig_cte AS 
( SELECT t."index" AS "index", 
   t."Score_0" AS "Score_0",
   t."Proba_0" AS "Proba_0",
   t."LogProba_0" AS
SQL_OUT_PUT_FIRST_LINES_END ('iris_original', 'RidgeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('iris_original', 'RidgeClassifier', 'duckdb')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_original', 'RidgeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 150 entries, 0 to 149
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     150 non-null    float32
 1   X_1     150 non-null    float32
 2   X_2     150 non-null    float32
 3   X_3     150 non-null    float32
dtypes: float32(4)
memory usage: 3.5 KB
       X_0  X_1  X_2  X_3
index                    
0      5.1  3.5  1.4  0.2
1      4.9  3.0  1.4  0.2
2      4.7  3.2  1.3  0.2
3      4.6  3.1  1.5  0.2
4      5.0  3.6  1.4  0.2
...    ...  ...  ...  ...
145    6.7  3.0  5.2  2.3
146    6.3  2.5  5.0  1.9
147    6.5  3.0  5.2  2.0
148    6.2  3.4  5.4  2.3
149    5.9  3.0  5.1  1.8

[150 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          150 non-null    int64  
 1   Score_0        150 non-null    float64
 2   Proba_0        150 non-null    float64
 3   LogProba_0     150 non-null    float64
 4   Score_1        150 non-null    float64
 5   Proba_1        150 non-null    float64
 6   LogProba_1     150 non-null    float64
 7   Score_2        150 non-null    float64
 8   Proba_2        150 non-null    float64
 9   LogProba_2     150 non-null    float64
 10  Decision       150 non-null    int64  
 11  DecisionProba  150 non-null    float64
dtypes: float64(10), int64(2)
memory usage: 14.2 KB
     index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0        0  0.957847  0.771673  ...   -2.424282         0       0.771673
1        1  0.688573  0.667485  ...   -2.484474         0       0.667485
2        2  0.804248  0.718837  ...   -2.427372         0       0.718837
3        3  0.652629  0.660901  ...   -2.389558         0       0.660901
4        4  0.993223  0.783096  ...   -2.395233         0       0.783096
..     ...       ...       ...  ...         ...       ...            ...
145    145 -1.022546  0.118750  ...   -0.317272         2       0.728133
146    146 -1.182345  0.122306  ...   -0.737028         2       0.478534
147    147 -1.014424  0.139213  ...   -0.479093         2       0.619345
148    148 -0.984085  0.108167  ...   -0.239374         2       0.787120
149    149 -1.025681  0.144834  ...   -0.594691         2       0.551733

[150 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
     index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
134    134 -1.372170     0.085649  ...    0.665642    0.248708            1
135    135 -1.294860     0.092445  ...    0.223625    0.683929            2
136    136 -1.072238     0.092168  ...    0.096034    0.811798            2
137    137 -1.090802     0.134252  ...    0.321067    0.544681            2
138    138 -0.877714     0.171699  ...    0.270687    0.557614            2
139    139 -1.014405     0.132633  ...    0.204868    0.662499            2
140    140 -1.165168     0.093284  ...    0.137135    0.769581            2
141    141 -0.902651     0.132459  ...    0.131534    0.736008            2
142    142 -1.196112     0.118205  ...    0.348974    0.532821            2
143    143 -1.226655     0.091565  ...    0.164334    0.744100            2
144    144 -1.124447     0.085340  ...    0.095417    0.819242            2
145    145 -1.022546     0.118750  ...    0.153117    0.728133            2
146    146 -1.182345     0.122306  ...    0.399160    0.478535            2
147    147 -1.014424     0.139213  ...    0.241442    0.619345            2
148    148 -0.984085     0.108167  ...    0.104713    0.787120            2
149    149 -1.025681     0.144834  ...    0.303432    0.551733            2

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 6.82142544846757e-08
     Py_Proba_0  SQL_Proba_0   SQL_Error_0
134    0.085649     0.085649  5.163436e-08
135    0.092445     0.092445  3.638181e-09
136    0.092168     0.092168 -1.099134e-07
137    0.134252     0.134252  3.410852e-08
138    0.171699     0.171699  6.773814e-09
139    0.132633     0.132633 -3.083330e-09
140    0.093284     0.093284 -4.239989e-08
141    0.132459     0.132459 -1.250482e-08
142    0.118205     0.118205 -3.620017e-09
143    0.091565     0.091565 -5.073004e-08
144    0.085340     0.085340 -3.375598e-08
145    0.118750     0.118750 -1.222887e-08
146    0.122306     0.122306  8.468088e-09
147    0.139213     0.139213 -3.609939e-08
148    0.108167     0.108167 -8.969808e-08
149    0.144834     0.144834 -3.079973e-08
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 2.340500579597893e-07
     Py_Proba_1  SQL_Proba_1   SQL_Error_1
134    0.665642     0.665643 -3.972737e-07
135    0.223625     0.223625 -3.714010e-07
136    0.096034     0.096034 -1.839410e-07
137    0.321067     0.321067 -3.991839e-07
138    0.270687     0.270687 -2.607904e-07
139    0.204868     0.204868 -2.735930e-07
140    0.137135     0.137135 -2.234029e-07
141    0.131534     0.131534 -1.409852e-07
142    0.348974     0.348974 -3.970155e-07
143    0.164334     0.164334 -3.048071e-07
144    0.095417     0.095418 -1.521537e-07
145    0.153117     0.153117 -2.383378e-07
146    0.399160     0.399160 -3.395837e-07
147    0.241442     0.241442 -2.898278e-07
148    0.104713     0.104713 -1.786558e-07
149    0.303432     0.303433 -3.808086e-07
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 2.0135313598845794e-07
     Py_Proba_2  SQL_Proba_2   SQL_Error_2
134    0.248708     0.248708  3.679911e-07
135    0.683929     0.683929  3.156088e-07
136    0.811798     0.811798  2.491509e-07
137    0.544681     0.544680  4.097788e-07
138    0.557614     0.557614  2.987200e-07
139    0.662499     0.662499  2.617752e-07
140    0.769581     0.769581  2.658027e-07
141    0.736008     0.736007  1.534900e-07
142    0.532821     0.532821  3.708332e-07
143    0.744100     0.744100  3.108337e-07
144    0.819242     0.819242  2.753167e-07
145    0.728133     0.728133  3.101713e-07
146    0.478535     0.478534  3.460168e-07
147    0.619345     0.619345  3.557295e-07
148    0.787120     0.787120  3.205080e-07
149    0.551733     0.551733  4.116083e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_original', 'RidgeClassifier', 'duckdb', 'Success')
     Py_Decision  SQL_Decision
134            1             1
135            2             2
136            2             2
137            2             2
138            2             2
139            2             2
140            2             2
141            2             2
142            2             2
143            2             2
144            2             2
145            2             2
146            2             2
147            2             2
148            2             2
149            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_original', 'RidgeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_original" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT t."index" AS "index",
   -0.763496 + 0.131989 * t."X_0" + 0.485751 * t."X_1" + -0.449226 * t."X_2" + -0.115067 * t."X_3" AS "Score_0",
   CAST(NULL AS FLOAT) AS "Proba_0",
   CAST(NULL AS FLOAT) AS "LogProba_0",
   2.154100 + -0.040224 * t."X_0" + -0.891304 * t."X_1" + 0.441200 * t."X_2" + -0.988387 * t."X_3" AS "Score_1",
   CAST(NULL AS FLOAT) AS "Proba_1",
   CAST(NULL AS FLOAT) AS "LogProba_1",
   -2.390598 + -0.091762 * t."X_0" + 0.405549 * t."X_1" + 0.008021 * t."X_2" + 1.103463 * t."X_3" AS "Score_2",
   CAST(NULL AS FLOAT) AS "Proba_2",
   CAST(NULL AS FLOAT) AS "LogProba_2"
  FROM model_input AS t
 ),
soft_max_orig_cte AS 
( SELECT t."index" AS "index", 
   t."Score_0" AS "Score_0",
   t."Proba_0" AS "Proba_0",
   t."LogProba_0" AS
SQL_OUT_PUT_FIRST_LINES_END ('iris_original', 'RidgeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('iris_original', 'RidgeClassifier', 'sqlite')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_original', 'RidgeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 150 entries, 0 to 149
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     150 non-null    float32
 1   X_1     150 non-null    float32
 2   X_2     150 non-null    float32
 3   X_3     150 non-null    float32
dtypes: float32(4)
memory usage: 3.5 KB
       X_0  X_1  X_2  X_3
index                    
0      5.1  3.5  1.4  0.2
1      4.9  3.0  1.4  0.2
2      4.7  3.2  1.3  0.2
3      4.6  3.1  1.5  0.2
4      5.0  3.6  1.4  0.2
...    ...  ...  ...  ...
145    6.7  3.0  5.2  2.3
146    6.3  2.5  5.0  1.9
147    6.5  3.0  5.2  2.0
148    6.2  3.4  5.4  2.3
149    5.9  3.0  5.1  1.8

[150 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          150 non-null    int64  
 1   Score_0        150 non-null    float64
 2   Proba_0        150 non-null    float64
 3   LogProba_0     150 non-null    float64
 4   Score_1        150 non-null    float64
 5   Proba_1        150 non-null    float64
 6   LogProba_1     150 non-null    float64
 7   Score_2        150 non-null    float64
 8   Proba_2        150 non-null    float64
 9   LogProba_2     150 non-null    float64
 10  Decision       150 non-null    int64  
 11  DecisionProba  150 non-null    float64
dtypes: float64(10), int64(2)
memory usage: 14.2 KB
     index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0        0  0.957847  0.771673  ...   -2.424282         0       0.771673
1        1  0.688573  0.667485  ...   -2.484474         0       0.667485
2        2  0.804248  0.718837  ...   -2.427372         0       0.718837
3        3  0.652629  0.660901  ...   -2.389558         0       0.660901
4        4  0.993223  0.783096  ...   -2.395233         0       0.783096
..     ...       ...       ...  ...         ...       ...            ...
145    145 -1.022546  0.118750  ...   -0.317272         2       0.728133
146    146 -1.182345  0.122306  ...   -0.737028         2       0.478534
147    147 -1.014424  0.139213  ...   -0.479093         2       0.619345
148    148 -0.984085  0.108167  ...   -0.239374         2       0.787120
149    149 -1.025681  0.144834  ...   -0.594691         2       0.551733

[150 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
     index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
134    134 -1.372170     0.085649  ...    0.665642    0.248708            1
135    135 -1.294860     0.092445  ...    0.223625    0.683929            2
136    136 -1.072238     0.092168  ...    0.096034    0.811798            2
137    137 -1.090802     0.134252  ...    0.321067    0.544681            2
138    138 -0.877714     0.171699  ...    0.270687    0.557614            2
139    139 -1.014405     0.132633  ...    0.204868    0.662499            2
140    140 -1.165168     0.093284  ...    0.137135    0.769581            2
141    141 -0.902650     0.132459  ...    0.131534    0.736008            2
142    142 -1.196112     0.118205  ...    0.348974    0.532821            2
143    143 -1.226655     0.091565  ...    0.164334    0.744100            2
144    144 -1.124447     0.085340  ...    0.095417    0.819242            2
145    145 -1.022546     0.118750  ...    0.153117    0.728133            2
146    146 -1.182345     0.122306  ...    0.399160    0.478535            2
147    147 -1.014424     0.139213  ...    0.241442    0.619345            2
148    148 -0.984085     0.108167  ...    0.104713    0.787120            2
149    149 -1.025681     0.144834  ...    0.303432    0.551733            2

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 8.57053076691594e-08
     Py_Proba_0  SQL_Proba_0   SQL_Error_0
134    0.085649     0.085649  6.945813e-08
135    0.092445     0.092445 -7.784061e-09
136    0.092168     0.092168 -8.756228e-08
137    0.134252     0.134252  2.841947e-08
138    0.171699     0.171699  3.043208e-08
139    0.132633     0.132633 -2.589159e-09
140    0.093284     0.093284 -2.773550e-08
141    0.132459     0.132459 -3.730570e-08
142    0.118205     0.118205  3.593004e-10
143    0.091565     0.091565 -4.942446e-08
144    0.085340     0.085340 -4.252812e-08
145    0.118750     0.118750 -2.095387e-08
146    0.122306     0.122306  2.479215e-08
147    0.139213     0.139213 -2.632612e-08
148    0.108167     0.108167 -7.292155e-08
149    0.144834     0.144834 -1.887344e-08
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 2.656289566381476e-07
     Py_Proba_1  SQL_Proba_1   SQL_Error_1
134    0.665642     0.665643 -4.511661e-07
135    0.223625     0.223625 -4.030156e-07
136    0.096034     0.096034 -1.910463e-07
137    0.321067     0.321067 -4.669327e-07
138    0.270687     0.270687 -3.043980e-07
139    0.204868     0.204868 -3.361629e-07
140    0.137135     0.137135 -2.483760e-07
141    0.131534     0.131534 -1.670467e-07
142    0.348974     0.348974 -4.352799e-07
143    0.164334     0.164334 -3.070775e-07
144    0.095417     0.095418 -1.723896e-07
145    0.153117     0.153117 -2.420368e-07
146    0.399160     0.399160 -3.929806e-07
147    0.241442     0.241442 -3.354187e-07
148    0.104713     0.104713 -1.860582e-07
149    0.303432     0.303433 -3.872027e-07
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'sqlite') ('Py_Proba_2', 'SQL_Proba_2') 2.165324511740896e-07
     Py_Proba_2  SQL_Proba_2   SQL_Error_2
134    0.248708     0.248708  4.040597e-07
135    0.683929     0.683929  3.586456e-07
136    0.811798     0.811798  2.339051e-07
137    0.544681     0.544680  4.832167e-07
138    0.557614     0.557614  3.186694e-07
139    0.662499     0.662499  3.238509e-07
140    0.769581     0.769581  2.761115e-07
141    0.736008     0.736007  2.043524e-07
142    0.532821     0.532821  4.051182e-07
143    0.744100     0.744100  3.117984e-07
144    0.819242     0.819242  3.043247e-07
145    0.728133     0.728133  3.225953e-07
146    0.478535     0.478534  3.830896e-07
147    0.619345     0.619345  3.915471e-07
148    0.787120     0.787120  3.111338e-07
149    0.551733     0.551733  4.060761e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_original', 'RidgeClassifier', 'sqlite', 'Success')
     Py_Decision  SQL_Decision
134            1             1
135            2             2
136            2             2
137            2             2
138            2             2
139            2             2
140            2             2
141            2             2
142            2             2
143            2             2
144            2             2
145            2             2
146            2             2
147            2             2
148            2             2
149            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
