     sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                  5.1               3.5  ...               0.2       0
1                  4.9               3.0  ...               0.2       0
2                  4.7               3.2  ...               0.2       0
3                  4.6               3.1  ...               0.2       0
4                  5.0               3.6  ...               0.2       0
..                 ...               ...  ...               ...     ...
145                6.7               3.0  ...               2.3       2
146                6.3               2.5  ...               1.9       2
147                6.5               3.0  ...               2.0       2
148                6.2               3.4  ...               2.3       2
149                5.9               3.0  ...               1.8       2

[150 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
('OPERATION_START', 'TRAINING')
[[5.1 3.5 1.4 0.2]
 [4.9 3.  1.4 0.2]
 [4.7 3.2 1.3 0.2]
 [4.6 3.1 1.5 0.2]
 [5.  3.6 1.4 0.2]] [0 0 0 0 0]
MLLITE_FIT_USING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 1 5
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 2 5
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 3 5
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 4 5
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 1 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 5 6
PROGRESS_REPORT_ELAPSED_TOTAL 'CHOLESKY_SOLVER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'RIDGE_CLASSIFIER_FIT' 5 5
('OPERATION_END_ELAPSED', 0.012, 'TRAINING')
{ ,   }
{ ,   }
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 150, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"equations" : {
		"class_0" : {
			"intercept" : -0.722604,
			"coeffs" : [ 0.079178, 0.527384, -0.382754, -0.206277 ]
		},
		"class_1" : {
			"intercept" : 2.144600,
			"coeffs" : [ 0.019623, -0.941850, 0.334453, -0.808719 ]
		},
		"class_2" : {
			"intercept" : -2.421992,
			"coeffs" : [ -0.098799, 0.414462, 0.048296, 1.015004 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original.json'

MLLITE_MODEL_SET_OPTIONS RidgeClassifier None
MLLITE_MODEL_OPTIONS_DEFAULT RidgeClassifier { }
MLLITE_MODEL_OPTIONS_AFTER_SETTING RidgeClassifier { ,   }
MLLITE_MODEL_JSON_AFTER_SETTING RidgeClassifier None
MLLITE_RELOADING_MODEL mllite_ridge_class.RidgeClassifier_ff4_il8
{
	"metadata" : { "model" : "Tikhonov_Ridge", "version" : "2024-W13", "signature" : "ff4_il8"},
	"options" : { "alpha" : 1.000000, "random_state" : 1789 },
	"dataset" : { "dataset_rows" : 150, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"equations" : {
		"class_0" : {
			"intercept" : -0.722604,
			"coeffs" : [ 0.079178, 0.527384, -0.382754, -0.206277 ]
		},
		"class_1" : {
			"intercept" : 2.144600,
			"coeffs" : [ 0.019623, -0.941850, 0.334453, -0.808719 ]
		},
		"class_2" : {
			"intercept" : -2.421992,
			"coeffs" : [ -0.098799, 0.414462, 0.048296, 1.015004 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 150
	},
	"equations" : 	{
		"class_0" : 	{
			"coeffs" : [ 0.079178, 0.527384, -0.382754, -0.206277 ],
			"intercept" : -0.722604
		},
		"class_1" : 	{
			"coeffs" : [ 0.019623, -0.94185, 0.334453, -0.808719 ],
			"intercept" : 2.1446
		},
		"class_2" : 	{
			"coeffs" : [ -0.098799, 0.414462, 0.048296, 1.015004 ],
			"intercept" : -2.421992
		}
	},
	"metadata" :  { "model" : "Tikhonov_Ridge", "signature" : "ff4_il8", "version" : "2024-W13" },
	"options" :  { "alpha" : 1.0, "random_state" : 1789 }
}
BEAUTIFIED_JSON_END
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.7695 0.1412 0.0892]
 [0.6603 0.2557 0.084 ]
 [0.7167 0.1949 0.0884]
 [0.6648 0.2431 0.092 ]
 [0.7836 0.1249 0.0915]
 [0.7919 0.0872 0.1209]
 [0.7402 0.1526 0.1072]
 [0.7383 0.1697 0.092 ]
 [0.624  0.2883 0.0877]
 [0.6677 0.2547 0.0776]
 [0.7958 0.1149 0.0893]
 [0.7222 0.1804 0.0974]
 [0.6543 0.2707 0.0749]
 [0.6879 0.2364 0.0757]
 [0.8606 0.063  0.0764]
 [0.8544 0.0384 0.1072]
 [0.8257 0.0683 0.1061]
 [0.767  0.1325 0.1005]
 [0.792  0.1054 0.1026]
 [0.7989 0.0955 0.1056]
 [0.7218 0.1869 0.0913]
 [0.7804 0.1017 0.1179]
 [0.8143 0.0998 0.0859]
 [0.6899 0.1758 0.1343]
 [0.6834 0.2117 0.1049]
 [0.6327 0.2811 0.0861]
 [0.722  0.158  0.1199]
 [0.7605 0.1491 0.0904]
 [0.7538 0.1593 0.0868]
 [0.6768 0.2282 0.095 ]
 [0.6546 0.2541 0.0913]
 [0.7423 0.1477 0.11  ]
 [0.8442 0.0728 0.083 ]
 [0.8592 0.0551 0.0857]
 [0.6709 0.241  0.0881]
 [0.735  0.1827 0.0823]
 [0.7872 0.1313 0.0814]
 [0.784  0.1335 0.0824]
 [0.6647 0.2468 0.0885]
 [0.7403 0.1691 0.0906]
 [0.7755 0.1255 0.0991]
 [0.4691 0.4559 0.075 ]
 [0.7108 0.1967 0.0925]
 [0.7261 0.1216 0.1523]
 [0.7534 0.1129 0.1337]
 [0.6609 0.2424 0.0966]
 [0.7946 0.1083 0.0971]
 [0.7018 0.2062 0.092 ]
 [0.794  0.1153 0.0907]
 [0.7308 0.181  0.0882]
 [0.2595 0.342  0.3985]
 [0.2573 0.2868 0.4559]
 [0.2166 0.3615 0.4219]
 [0.1686 0.5863 0.2451]
 [0.1983 0.4248 0.3769]
 [0.1999 0.4715 0.3287]
 [0.2354 0.2476 0.517 ]
 [0.2454 0.5535 0.2011]
 [0.2212 0.4588 0.32  ]
 [0.2321 0.3999 0.368 ]
 [0.152  0.7083 0.1396]
 [0.2511 0.3119 0.437 ]
 [0.1512 0.7079 0.1409]
 [0.199  0.43   0.3711]
 [0.3128 0.336  0.3512]
 [0.2708 0.3394 0.3899]
 [0.2147 0.3367 0.4486]
 [0.2275 0.5556 0.2169]
 [0.1257 0.616  0.2583]
 [0.2104 0.5692 0.2204]
 [0.1863 0.2214 0.5923]
 [0.2602 0.4187 0.3212]
 [0.1334 0.5572 0.3094]
 [0.1886 0.5327 0.2787]
 [0.2494 0.4221 0.3285]
 [0.2536 0.3704 0.376 ]
 [0.188  0.485  0.3269]
 [0.1791 0.3337 0.4872]
 [0.2109 0.374  0.415 ]
 [0.2771 0.5129 0.21  ]
 [0.2014 0.5907 0.2079]
 [0.2094 0.6073 0.1833]
 [0.2505 0.4699 0.2796]
 [0.1353 0.4661 0.3986]
 [0.2105 0.3339 0.4556]
 [0.2563 0.2052 0.5385]
 [0.2318 0.3392 0.4291]
 [0.1446 0.6387 0.2166]
 [0.2699 0.3583 0.3718]
 [0.1995 0.517  0.2835]
 [0.1772 0.561  0.2618]
 [0.2221 0.3857 0.3922]
 [0.2216 0.5172 0.2612]
 [0.2267 0.5887 0.1846]
 [0.2126 0.4712 0.3162]
 [0.2662 0.4009 0.3329]
 [0.2456 0.4034 0.3509]
 [0.2453 0.42   0.3347]
 [0.3088 0.4513 0.2398]
 [0.2407 0.4262 0.3331]
 [0.0709 0.1102 0.8189]
 [0.1203 0.35   0.5297]
 [0.1019 0.2778 0.6202]
 [0.1173 0.3754 0.5072]
 [0.0925 0.2292 0.6783]
 [0.0775 0.3389 0.5836]
 [0.1385 0.4186 0.4429]
 [0.092  0.4581 0.45  ]
 [0.0828 0.5372 0.38  ]
 [0.0837 0.0852 0.831 ]
 [0.156  0.1966 0.6474]
 [0.1169 0.3788 0.5043]
 [0.1178 0.2455 0.6367]
 [0.1064 0.366  0.5277]
 [0.0919 0.1709 0.7372]
 [0.1128 0.1378 0.7494]
 [0.1335 0.3392 0.5274]
 [0.0968 0.1314 0.7718]
 [0.048  0.4126 0.5394]
 [0.0931 0.6609 0.246 ]
 [0.102  0.1612 0.7368]
 [0.129  0.2676 0.6034]
 [0.0683 0.4543 0.4774]
 [0.1456 0.3783 0.4761]
 [0.1197 0.1864 0.6939]
 [0.1277 0.3321 0.5403]
 [0.1599 0.3359 0.5042]
 [0.1675 0.2836 0.5489]
 [0.0974 0.2994 0.6032]
 [0.133  0.4534 0.4136]
 [0.0933 0.4365 0.4702]
 [0.1331 0.1623 0.7046]
 [0.0918 0.2657 0.6425]
 [0.1528 0.474  0.3733]
 [0.0976 0.6249 0.2775]
 [0.0885 0.2381 0.6734]
 [0.0946 0.1012 0.8043]
 [0.1392 0.3072 0.5536]
 [0.173  0.2742 0.5527]
 [0.13   0.2164 0.6536]
 [0.0925 0.1501 0.7575]
 [0.1277 0.152  0.7203]
 [0.1203 0.35   0.5297]
 [0.0922 0.1691 0.7387]
 [0.0857 0.1048 0.8095]
 [0.1154 0.1728 0.7118]
 [0.118  0.4162 0.4657]
 [0.1379 0.2506 0.6115]
 [0.1109 0.1098 0.7793]
 [0.1498 0.2961 0.5542]]
(150, 3)
(150, 3) float32
MODEL_PERFS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'iris_original', 'size': 150, 'accuracy': 0.8466666666666667, 'auc': 0.9523999999999999}
WRITING_PERF_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.RidgeClassifier', 'model_name': 'RidgeClassifier', 'options': None, 'dataset': 'iris_original', 'training_time_in_sec': 0.012, 'prediction_time_in_sec': 0.0}
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_original', 'RidgeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT t."index" AS "index",
   -0.722604 + 0.079178 * t."X_0" + 0.527384 * t."X_1" + -0.382754 * t."X_2" + -0.206277 * t."X_3" AS "Score_0",
   CAST(NULL AS FLOAT) AS "Proba_0",
   CAST(NULL AS FLOAT) AS "LogProba_0",
   2.144600 + 0.019623 * t."X_0" + -0.941850 * t."X_1" + 0.334453 * t."X_2" + -0.808719 * t."X_3" AS "Score_1",
   CAST(NULL AS FLOAT) AS "Proba_1",
   CAST(NULL AS FLOAT) AS "LogProba_1",
   -2.421992 + -0.098799 * t."X_0" + 0.414462 * t."X_1" + 0.048296 * t."X_2" + 1.015004 * t."X_3" AS "Score_2",
   CAST(NULL AS FLOAT) AS "Proba_2",
   CAST(NULL AS FLOAT) AS "LogProba_2"
  FROM model_input AS t
 ),
soft_max_orig_cte AS 
( SELECT t."index" AS "index", 
   t."Score_0" AS "Score_0",
   t."Proba_0" AS "Proba_0",
   t."LogProba_0
SQL_OUT_PUT_FIRST_LINES_END ('iris_original', 'RidgeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('iris_original', 'RidgeClassifier', 'duckdb')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_original', 'RidgeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 150 entries, 0 to 149
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     150 non-null    float32
 1   X_1     150 non-null    float32
 2   X_2     150 non-null    float32
 3   X_3     150 non-null    float32
dtypes: float32(4)
memory usage: 3.5 KB
       X_0  X_1  X_2  X_3
index                    
0      5.1  3.5  1.4  0.2
1      4.9  3.0  1.4  0.2
2      4.7  3.2  1.3  0.2
3      4.6  3.1  1.5  0.2
4      5.0  3.6  1.4  0.2
...    ...  ...  ...  ...
145    6.7  3.0  5.2  2.3
146    6.3  2.5  5.0  1.9
147    6.5  3.0  5.2  2.0
148    6.2  3.4  5.4  2.3
149    5.9  3.0  5.1  1.8

[150 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          150 non-null    int64  
 1   Score_0        150 non-null    float64
 2   Proba_0        150 non-null    float64
 3   LogProba_0     150 non-null    float64
 4   Score_1        150 non-null    float64
 5   Proba_1        150 non-null    float64
 6   LogProba_1     150 non-null    float64
 7   Score_2        150 non-null    float64
 8   Proba_2        150 non-null    float64
 9   LogProba_2     150 non-null    float64
 10  Decision       150 non-null    int64  
 11  DecisionProba  150 non-null    float64
dtypes: float64(10), int64(2)
memory usage: 14.2 KB
     index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0        0  0.949937  0.769522  ...   -2.416557         0       0.769522
1        1  0.670409  0.660340  ...   -2.477516         0       0.660340
2        2  0.798326  0.716717  ...   -2.425683         0       0.716717
3        3  0.661119  0.664849  ...   -2.385505         0       0.664849
4        4  0.994757  0.783619  ...   -2.391898         0       0.783619
..     ...       ...       ...  ...         ...       ...            ...
145    145 -1.074717  0.115354  ...   -0.339945         2       0.711810
146    146 -1.211019  0.118027  ...   -0.764110         2       0.465748
147    147 -1.028670  0.137943  ...   -0.491898         2       0.611465
148    148 -0.979904  0.110896  ...   -0.249326         2       0.779326
149    149 -0.996646  0.149763  ...   -0.590259         2       0.554183

[150 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
     index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
134    134 -1.300630     0.097589  ...    0.624917    0.277493            1
135    135 -1.340018     0.088462  ...    0.238136    0.673402            2
136    136 -1.069164     0.094589  ...    0.101155    0.804256            2
137    137 -1.057420     0.139193  ...    0.307209    0.553598            2
138    138 -0.873902     0.173045  ...    0.274218    0.552737            2
139    139 -1.041439     0.130012  ...    0.216386    0.653602            2
140    140 -1.195708     0.092474  ...    0.150053    0.757473            2
141    141 -0.967868     0.127724  ...    0.151966    0.720310            2
142    142 -1.183406     0.120304  ...    0.350020    0.529676            2
143    143 -1.229251     0.092184  ...    0.169079    0.738737            2
144    144 -1.149134     0.085685  ...    0.104833    0.809481            2
145    145 -1.074717     0.115354  ...    0.172837    0.711809            2
146    146 -1.211019     0.118027  ...    0.416225    0.465748            2
147    147 -1.028670     0.137943  ...    0.250592    0.611465            2
148    148 -0.979904     0.110896  ...    0.109778    0.779326            2
149    149 -0.996646     0.149763  ...    0.296054    0.554183            2

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 1.50773353340868e-07
     Py_Proba_0  SQL_Proba_0   SQL_Error_0
134    0.097590     0.097589  1.699958e-07
135    0.088462     0.088462  1.738321e-07
136    0.094589     0.094589  1.745663e-07
137    0.139193     0.139193  2.132838e-07
138    0.173045     0.173045  1.853422e-07
139    0.130012     0.130012  1.796038e-07
140    0.092474     0.092474  1.822369e-07
141    0.127724     0.127724  1.829819e-07
142    0.120304     0.120304  1.785968e-07
143    0.092184     0.092184  1.745443e-07
144    0.085686     0.085685  1.610388e-07
145    0.115354     0.115354  2.160951e-07
146    0.118027     0.118027  1.572015e-07
147    0.137943     0.137943  2.096185e-07
148    0.110896     0.110896  2.100452e-07
149    0.149763     0.149763  1.847121e-07
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 5.234156299355197e-08
     Py_Proba_1  SQL_Proba_1   SQL_Error_1
134    0.624917     0.624917 -3.061760e-08
135    0.238136     0.238136  7.270279e-08
136    0.101155     0.101155  5.723386e-08
137    0.307209     0.307209  2.631067e-08
138    0.274218     0.274218  3.162415e-08
139    0.216386     0.216386  5.176613e-08
140    0.150053     0.150052  9.739283e-08
141    0.151966     0.151966  7.872053e-08
142    0.350020     0.350020 -2.426949e-08
143    0.169079     0.169079  2.165316e-08
144    0.104833     0.104833  6.310317e-08
145    0.172837     0.172837  1.138591e-07
146    0.416225     0.416225 -1.112927e-08
147    0.250592     0.250592  6.969976e-08
148    0.109778     0.109778  3.677255e-08
149    0.296054     0.296054  9.846325e-08
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 1.35043317006552e-07
     Py_Proba_2  SQL_Proba_2   SQL_Error_2
134    0.277493     0.277493 -1.468287e-07
135    0.673402     0.673402 -3.210407e-07
136    0.804256     0.804256 -2.094484e-07
137    0.553598     0.553599 -2.246933e-07
138    0.552737     0.552737 -2.467687e-07
139    0.653602     0.653602 -2.462711e-07
140    0.757473     0.757474 -3.764873e-07
141    0.720310     0.720310 -1.424931e-07
142    0.529676     0.529676 -1.841296e-07
143    0.738737     0.738737 -1.961975e-07
144    0.809481     0.809481 -2.688455e-07
145    0.711809     0.711810 -3.299542e-07
146    0.465748     0.465748 -1.162699e-07
147    0.611465     0.611465 -3.091206e-07
148    0.779326     0.779326 -2.095648e-07
149    0.554183     0.554183 -2.831754e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_original', 'RidgeClassifier', 'duckdb', 'Success')
     Py_Decision  SQL_Decision
134            1             1
135            2             2
136            2             2
137            2             2
138            2             2
139            2             2
140            2             2
141            2             2
142            2             2
143            2             2
144            2             2
145            2             2
146            2             2
147            2             2
148            2             2
149            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_original', 'RidgeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT t."index" AS "index",
   -0.722604 + 0.079178 * t."X_0" + 0.527384 * t."X_1" + -0.382754 * t."X_2" + -0.206277 * t."X_3" AS "Score_0",
   CAST(NULL AS FLOAT) AS "Proba_0",
   CAST(NULL AS FLOAT) AS "LogProba_0",
   2.144600 + 0.019623 * t."X_0" + -0.941850 * t."X_1" + 0.334453 * t."X_2" + -0.808719 * t."X_3" AS "Score_1",
   CAST(NULL AS FLOAT) AS "Proba_1",
   CAST(NULL AS FLOAT) AS "LogProba_1",
   -2.421992 + -0.098799 * t."X_0" + 0.414462 * t."X_1" + 0.048296 * t."X_2" + 1.015004 * t."X_3" AS "Score_2",
   CAST(NULL AS FLOAT) AS "Proba_2",
   CAST(NULL AS FLOAT) AS "LogProba_2"
  FROM model_input AS t
 ),
soft_max_orig_cte AS 
( SELECT t."index" AS "index", 
   t."Score_0" AS "Score_0",
   t."Proba_0" AS "Proba_0",
   t."LogProba_0
SQL_OUT_PUT_FIRST_LINES_END ('iris_original', 'RidgeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('iris_original', 'RidgeClassifier', 'sqlite')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_original', 'RidgeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 150 entries, 0 to 149
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     150 non-null    float32
 1   X_1     150 non-null    float32
 2   X_2     150 non-null    float32
 3   X_3     150 non-null    float32
dtypes: float32(4)
memory usage: 3.5 KB
       X_0  X_1  X_2  X_3
index                    
0      5.1  3.5  1.4  0.2
1      4.9  3.0  1.4  0.2
2      4.7  3.2  1.3  0.2
3      4.6  3.1  1.5  0.2
4      5.0  3.6  1.4  0.2
...    ...  ...  ...  ...
145    6.7  3.0  5.2  2.3
146    6.3  2.5  5.0  1.9
147    6.5  3.0  5.2  2.0
148    6.2  3.4  5.4  2.3
149    5.9  3.0  5.1  1.8

[150 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          150 non-null    int64  
 1   Score_0        150 non-null    float64
 2   Proba_0        150 non-null    float64
 3   LogProba_0     150 non-null    float64
 4   Score_1        150 non-null    float64
 5   Proba_1        150 non-null    float64
 6   LogProba_1     150 non-null    float64
 7   Score_2        150 non-null    float64
 8   Proba_2        150 non-null    float64
 9   LogProba_2     150 non-null    float64
 10  Decision       150 non-null    int64  
 11  DecisionProba  150 non-null    float64
dtypes: float64(10), int64(2)
memory usage: 14.2 KB
     index   Score_0   Proba_0  ...  LogProba_2  Decision  DecisionProba
0        0  0.949937  0.769522  ...   -2.416557         0       0.769522
1        1  0.670409  0.660340  ...   -2.477516         0       0.660340
2        2  0.798326  0.716717  ...   -2.425683         0       0.716717
3        3  0.661119  0.664849  ...   -2.385505         0       0.664849
4        4  0.994757  0.783619  ...   -2.391898         0       0.783619
..     ...       ...       ...  ...         ...       ...            ...
145    145 -1.074717  0.115354  ...   -0.339945         2       0.711809
146    146 -1.211019  0.118027  ...   -0.764110         2       0.465748
147    147 -1.028670  0.137943  ...   -0.491898         2       0.611465
148    148 -0.979903  0.110896  ...   -0.249326         2       0.779326
149    149 -0.996646  0.149763  ...   -0.590260         2       0.554183

[150 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
     index   Score_0  SQL_Proba_0  ...  Py_Proba_1  Py_Proba_2  Py_Decision
134    134 -1.300630     0.097589  ...    0.624917    0.277493            1
135    135 -1.340018     0.088462  ...    0.238136    0.673402            2
136    136 -1.069164     0.094589  ...    0.101155    0.804256            2
137    137 -1.057420     0.139193  ...    0.307209    0.553598            2
138    138 -0.873902     0.173045  ...    0.274218    0.552737            2
139    139 -1.041439     0.130012  ...    0.216386    0.653602            2
140    140 -1.195708     0.092474  ...    0.150053    0.757473            2
141    141 -0.967868     0.127724  ...    0.151966    0.720310            2
142    142 -1.183406     0.120304  ...    0.350020    0.529676            2
143    143 -1.229250     0.092184  ...    0.169079    0.738737            2
144    144 -1.149134     0.085685  ...    0.104833    0.809481            2
145    145 -1.074717     0.115354  ...    0.172837    0.711809            2
146    146 -1.211019     0.118027  ...    0.416225    0.465748            2
147    147 -1.028670     0.137943  ...    0.250592    0.611465            2
148    148 -0.979903     0.110896  ...    0.109778    0.779326            2
149    149 -0.996646     0.149763  ...    0.296054    0.554183            2

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 1.5401094797603173e-07
     Py_Proba_0  SQL_Proba_0   SQL_Error_0
134    0.097590     0.097589  1.690930e-07
135    0.088462     0.088462  1.713024e-07
136    0.094589     0.094589  1.543671e-07
137    0.139193     0.139193  2.349821e-07
138    0.173045     0.173045  1.862030e-07
139    0.130012     0.130012  2.042550e-07
140    0.092474     0.092474  1.595682e-07
141    0.127724     0.127724  2.005663e-07
142    0.120304     0.120304  1.748511e-07
143    0.092184     0.092184  1.760553e-07
144    0.085686     0.085685  1.621262e-07
145    0.115354     0.115354  2.065791e-07
146    0.118027     0.118027  1.697859e-07
147    0.137943     0.137943  2.118012e-07
148    0.110896     0.110896  2.081192e-07
149    0.149763     0.149763  1.875867e-07
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 5.047398683941107e-08
     Py_Proba_1  SQL_Proba_1   SQL_Error_1
134    0.624917     0.624917 -9.069563e-08
135    0.238136     0.238136  3.199034e-08
136    0.101155     0.101155  2.751636e-08
137    0.307209     0.307209 -1.624802e-08
138    0.274218     0.274218  5.089032e-09
139    0.216386     0.216386  2.217258e-08
140    0.150053     0.150052  5.666487e-08
141    0.151966     0.151966  4.747320e-08
142    0.350020     0.350020 -3.515707e-08
143    0.169079     0.169079  1.504822e-08
144    0.104833     0.104833  4.214530e-08
145    0.172837     0.172837  6.601983e-08
146    0.416225     0.416225 -7.422034e-08
147    0.250592     0.250592  1.578004e-08
148    0.109778     0.109778  2.974190e-08
149    0.296054     0.296054  3.522584e-08
MLLITE_CLASS_SQL_ERROR ('iris_original', 'RidgeClassifier', 'sqlite') ('Py_Proba_2', 'SQL_Proba_2') 1.1566449853570952e-07
     Py_Proba_2  SQL_Proba_2   SQL_Error_2
134    0.277493     0.277493 -8.584791e-08
135    0.673402     0.673402 -2.777985e-07
136    0.804256     0.804256 -1.595317e-07
137    0.553598     0.553599 -2.038329e-07
138    0.552737     0.552737 -2.210944e-07
139    0.653602     0.653602 -2.413288e-07
140    0.757473     0.757474 -3.130906e-07
141    0.720310     0.720310 -1.288302e-07
142    0.529676     0.529676 -1.694964e-07
143    0.738737     0.738737 -1.911035e-07
144    0.809481     0.809481 -2.489750e-07
145    0.711809     0.711809 -2.725989e-07
146    0.465748     0.465748 -6.576323e-08
147    0.611465     0.611465 -2.573836e-07
148    0.779326     0.779326 -2.006082e-07
149    0.554183     0.554183 -2.228125e-07
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_original', 'RidgeClassifier', 'sqlite', 'Success')
     Py_Decision  SQL_Decision
134            1             1
135            2             2
136            2             2
137            2             2
138            2             2
139            2             2
140            2             2
141            2             2
142            2             2
143            2             2
144            2             2
145            2             2
146            2             2
147            2             2
148            2             2
149            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/RidgeClassifier/mllite.RidgeClassifier_iris_original_pgsql.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_original', 'RidgeClassifier', 'pgsql')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "MLLITE_INPUT_TABLE" AS "ADS" 
 ),
model_scores_cte AS 
 (SELECT t."index" AS "index",
   -0.722604 + 0.079178 * t."X_0" + 0.527384 * t."X_1" + -0.382754 * t."X_2" + -0.206277 * t."X_3" AS "Score_0",
   CAST(NULL AS FLOAT) AS "Proba_0",
   CAST(NULL AS FLOAT) AS "LogProba_0",
   2.144600 + 0.019623 * t."X_0" + -0.941850 * t."X_1" + 0.334453 * t."X_2" + -0.808719 * t."X_3" AS "Score_1",
   CAST(NULL AS FLOAT) AS "Proba_1",
   CAST(NULL AS FLOAT) AS "LogProba_1",
   -2.421992 + -0.098799 * t."X_0" + 0.414462 * t."X_1" + 0.048296 * t."X_2" + 1.015004 * t."X_3" AS "Score_2",
   CAST(NULL AS FLOAT) AS "Proba_2",
   CAST(NULL AS FLOAT) AS "LogProba_2"
  FROM model_input AS t
 ),
soft_max_orig_cte AS 
( SELECT t."index" AS "index", 
   t."Score_0" AS "Score_0",
   t."Proba_0" AS "Proba_0",
   t."LogProba_0
SQL_OUT_PUT_FIRST_LINES_END ('iris_original', 'RidgeClassifier', 'pgsql')
SQL_OUT_PUT_LAST_LINES_START ('iris_original', 'RidgeClassifier', 'pgsql')
roba",
     t."Max_Score" AS "Max_Score",
     COALESCE(  t."max_idx_0", t."max_idx_1", t."max_idx_2" ) AS argmax_class_idx
   FROM
     "arg_max_cte_with_max_proba_idx" AS t
)
SELECT arg_max_cte."index" AS "index",
  arg_max_cte."Score_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('iris_original', 'RidgeClassifier', 'pgsql') 




COPY_TRAINING_DATA_TO_SQLITE_START
