READING_CSV iris_original ['data/original/iris.csv']
     sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target
0                  5.1               3.5  ...               0.2       0
1                  4.9               3.0  ...               0.2       0
2                  4.7               3.2  ...               0.2       0
3                  4.6               3.1  ...               0.2       0
4                  5.0               3.6  ...               0.2       0
..                 ...               ...  ...               ...     ...
145                6.7               3.0  ...               2.3       2
146                6.3               2.5  ...               1.9       2
147                6.5               3.0  ...               2.0       2
148                6.2               3.4  ...               2.3       2
149                5.9               3.0  ...               1.8       2

[150 rows x 5 columns]
MLLITE_MODEL_SET_OPTIONS DecisionTreeClassifier {"max_depth" : 6, "max_leaf_nodes" : 32}
MLLITE_MODEL_OPTIONS_DEFAULT DecisionTreeClassifier { "max_leaf_nodes" : 64}
MLLITE_MODEL_OPTIONS_AFTER_SETTING DecisionTreeClassifier { "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
MLLITE_MODEL_JSON_AFTER_SETTING DecisionTreeClassifier None
('OPERATION_START', 'TRAINING')
[[5.1 3.5 1.4 0.2]
 [4.9 3.  1.4 0.2]
 [4.7 3.2 1.3 0.2]
 [4.6 3.1 1.5 0.2]
 [5.  3.6 1.4 0.2]] [0 0 0 0 0]
MLLITE_FIT_USING_MODEL mllite_decision_tree_class.DecisionTreeClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 0 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 2 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 3 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 4 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_BEST_FIRST_BUILDER' 6 6
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 3 4
PROGRESS_REPORT_ELAPSED_TOTAL 'DECISION_TREE_CLASSIFIER_FIT' 4 4
('OPERATION_END_ELAPSED', 0.011, 'TRAINING')
{ "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
{ "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
{
	"metadata" : { "model" : "Breiman_CART", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "ccp_alpha" : 0.000000, "criterion" : "", "max_depth" : 6, "max_features" : null, "max_leaf_nodes" : 32, "min_impurity_decrease" : 0.000000, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.000000, "random_state" : 1789, "splitter" : "best" },
	"dataset" : { "dataset_rows" : 150, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"tree" : {
	"features" : 4,
	"outputs" : 3,
	"max_depth" : 4,
	"node_count" : 17,
	"nodes" : {
		"node_00" : {"left" : 1, "right" : 2, "feature" : 2, "threshold" : 2.450000, "impurity" : 0.666667, "n_samples" : 150, "w_samples" : 150.000000, "value" : [0.333333, 0.333333, 0.333333]},
		"node_01" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 50, "w_samples" : 50.000000, "value" : [1.000000, 0.000000, 0.000000]},
		"node_02" : {"left" : 3, "right" : 4, "feature" : 3, "threshold" : 1.750000, "impurity" : 0.500000, "n_samples" : 100, "w_samples" : 100.000000, "value" : [0.000000, 0.500000, 0.500000]},
		"node_03" : {"left" : 5, "right" : 6, "feature" : 2, "threshold" : 4.950000, "impurity" : 0.168038, "n_samples" : 54, "w_samples" : 54.000000, "value" : [0.000000, 0.907407, 0.092593]},
		"node_04" : {"left" : 13, "right" : 14, "feature" : 2, "threshold" : 4.850000, "impurity" : 0.042533, "n_samples" : 46, "w_samples" : 46.000000, "value" : [0.000000, 0.021739, 0.978261]},
		"node_05" : {"left" : 11, "right" : 12, "feature" : 3, "threshold" : 1.650000, "impurity" : 0.040799, "n_samples" : 48, "w_samples" : 48.000000, "value" : [0.000000, 0.979167, 0.020833]},
		"node_06" : {"left" : 7, "right" : 8, "feature" : 3, "threshold" : 1.550000, "impurity" : 0.444444, "n_samples" : 6, "w_samples" : 6.000000, "value" : [0.000000, 0.333333, 0.666667]},
		"node_07" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_08" : {"left" : 9, "right" : 10, "feature" : 2, "threshold" : 5.450000, "impurity" : 0.444444, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 0.666667, 0.333333]},
		"node_09" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 1.000000, 0.000000]},
		"node_10" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_11" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 47, "w_samples" : 47.000000, "value" : [0.000000, 1.000000, 0.000000]},
		"node_12" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_13" : {"left" : 15, "right" : 16, "feature" : 0, "threshold" : 5.950000, "impurity" : 0.444444, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 0.333333, 0.666667]},
		"node_14" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 43, "w_samples" : 43.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_15" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 1.000000, 0.000000]},
		"node_16" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 0.000000, 1.000000]}
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_original_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('iris_original', 'DecisionTreeClassifier')
MLLITE_MODEL_SET_OPTIONS DecisionTreeClassifier {"max_depth" : 6, "max_leaf_nodes" : 32}
MLLITE_MODEL_OPTIONS_DEFAULT DecisionTreeClassifier { "max_leaf_nodes" : 64}
MLLITE_MODEL_OPTIONS_AFTER_SETTING DecisionTreeClassifier { "max_depth" : 6, "max_leaf_nodes" : 32,  "max_leaf_nodes" : 64 }
MLLITE_MODEL_JSON_AFTER_SETTING DecisionTreeClassifier None
MLLITE_RELOADING_MODEL mllite_decision_tree_class.DecisionTreeClassifier_ff4_il8
{
	"metadata" : { "model" : "Breiman_CART", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : { "ccp_alpha" : 0.000000, "criterion" : "", "max_depth" : 6, "max_features" : null, "max_leaf_nodes" : 32, "min_impurity_decrease" : 0.000000, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.000000, "random_state" : 1789, "splitter" : "best" },
	"dataset" : { "dataset_rows" : 150, "dataset_features" : 4 },
	"classes" : [ 0, 1, 2 ],
	"tree" : {
	"features" : 4,
	"outputs" : 3,
	"max_depth" : 4,
	"node_count" : 17,
	"nodes" : {
		"node_00" : {"left" : 1, "right" : 2, "feature" : 2, "threshold" : 2.450000, "impurity" : 0.666667, "n_samples" : 150, "w_samples" : 150.000000, "value" : [0.333333, 0.333333, 0.333333]},
		"node_01" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 50, "w_samples" : 50.000000, "value" : [1.000000, 0.000000, 0.000000]},
		"node_02" : {"left" : 3, "right" : 4, "feature" : 3, "threshold" : 1.750000, "impurity" : 0.500000, "n_samples" : 100, "w_samples" : 100.000000, "value" : [0.000000, 0.500000, 0.500000]},
		"node_03" : {"left" : 5, "right" : 6, "feature" : 2, "threshold" : 4.950000, "impurity" : 0.168038, "n_samples" : 54, "w_samples" : 54.000000, "value" : [0.000000, 0.907407, 0.092593]},
		"node_04" : {"left" : 13, "right" : 14, "feature" : 2, "threshold" : 4.850000, "impurity" : 0.042533, "n_samples" : 46, "w_samples" : 46.000000, "value" : [0.000000, 0.021739, 0.978261]},
		"node_05" : {"left" : 11, "right" : 12, "feature" : 3, "threshold" : 1.650000, "impurity" : 0.040799, "n_samples" : 48, "w_samples" : 48.000000, "value" : [0.000000, 0.979167, 0.020833]},
		"node_06" : {"left" : 7, "right" : 8, "feature" : 3, "threshold" : 1.550000, "impurity" : 0.444444, "n_samples" : 6, "w_samples" : 6.000000, "value" : [0.000000, 0.333333, 0.666667]},
		"node_07" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_08" : {"left" : 9, "right" : 10, "feature" : 2, "threshold" : 5.450000, "impurity" : 0.444444, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 0.666667, 0.333333]},
		"node_09" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 1.000000, 0.000000]},
		"node_10" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_11" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 47, "w_samples" : 47.000000, "value" : [0.000000, 1.000000, 0.000000]},
		"node_12" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_13" : {"left" : 15, "right" : 16, "feature" : 0, "threshold" : 5.950000, "impurity" : 0.444444, "n_samples" : 3, "w_samples" : 3.000000, "value" : [0.000000, 0.333333, 0.666667]},
		"node_14" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 43, "w_samples" : 43.000000, "value" : [0.000000, 0.000000, 1.000000]},
		"node_15" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 1, "w_samples" : 1.000000, "value" : [0.000000, 1.000000, 0.000000]},
		"node_16" : {"left" : null, "right" : null, "feature" : null, "threshold" : null, "impurity" : 0.000000, "n_samples" : 2, "w_samples" : 2.000000, "value" : [0.000000, 0.000000, 1.000000]}
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2 ],
	"dataset" : 	{
		"dataset_features" : 4,
		"dataset_rows" : 150
	},
	"metadata" :  { "model" : "Breiman_CART", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "ccp_alpha" : 0.0, "criterion" : "", "max_depth" : 6, "max_features" : null, "max_leaf_nodes" : 32, "min_impurity_decrease" : 0.0, "min_samples_leaf" : 1, "min_samples_split" : 2, "min_weight_fraction_leaf" : 0.0, "random_state" : 1789, "splitter" : "best" },
	"tree" : 	{
		"features" : 4,
		"max_depth" : 4,
		"node_count" : 17,
		"nodes" : 	{
			"node_00" :  { "feature" : 2, "impurity" : 0.666667, "left" : 1, "n_samples" : 150, "right" : 2, "threshold" : 2.45, "value" : [ 0.333333, 0.333333, 0.333333 ], "w_samples" : 150.0 },
			"node_01" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 50, "right" : null, "threshold" : null, "value" : [ 1.0, 0.0, 0.0 ], "w_samples" : 50.0 },
			"node_02" :  { "feature" : 3, "impurity" : 0.5, "left" : 3, "n_samples" : 100, "right" : 4, "threshold" : 1.75, "value" : [ 0.0, 0.5, 0.5 ], "w_samples" : 100.0 },
			"node_03" :  { "feature" : 2, "impurity" : 0.168038, "left" : 5, "n_samples" : 54, "right" : 6, "threshold" : 4.95, "value" : [ 0.0, 0.907407, 0.092593 ], "w_samples" : 54.0 },
			"node_04" :  { "feature" : 2, "impurity" : 0.042533, "left" : 13, "n_samples" : 46, "right" : 14, "threshold" : 4.85, "value" : [ 0.0, 0.021739, 0.978261 ], "w_samples" : 46.0 },
			"node_05" :  { "feature" : 3, "impurity" : 0.040799, "left" : 11, "n_samples" : 48, "right" : 12, "threshold" : 1.65, "value" : [ 0.0, 0.979167, 0.020833 ], "w_samples" : 48.0 },
			"node_06" :  { "feature" : 3, "impurity" : 0.444444, "left" : 7, "n_samples" : 6, "right" : 8, "threshold" : 1.55, "value" : [ 0.0, 0.333333, 0.666667 ], "w_samples" : 6.0 },
			"node_07" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 3, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 1.0 ], "w_samples" : 3.0 },
			"node_08" :  { "feature" : 2, "impurity" : 0.444444, "left" : 9, "n_samples" : 3, "right" : 10, "threshold" : 5.45, "value" : [ 0.0, 0.666667, 0.333333 ], "w_samples" : 3.0 },
			"node_09" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 2, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0, 0.0 ], "w_samples" : 2.0 },
			"node_10" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 1.0 ], "w_samples" : 1.0 },
			"node_11" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 47, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0, 0.0 ], "w_samples" : 47.0 },
			"node_12" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 1.0 ], "w_samples" : 1.0 },
			"node_13" :  { "feature" : 0, "impurity" : 0.444444, "left" : 15, "n_samples" : 3, "right" : 16, "threshold" : 5.95, "value" : [ 0.0, 0.333333, 0.666667 ], "w_samples" : 3.0 },
			"node_14" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 43, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 1.0 ], "w_samples" : 43.0 },
			"node_15" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 1, "right" : null, "threshold" : null, "value" : [ 0.0, 1.0, 0.0 ], "w_samples" : 1.0 },
			"node_16" :  { "feature" : null, "impurity" : 0.0, "left" : null, "n_samples" : 2, "right" : null, "threshold" : null, "value" : [ 0.0, 0.0, 1.0 ], "w_samples" : 2.0 }
		},
		"outputs" : 3
	}
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('iris_original', 'DecisionTreeClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]
 [0. 0. 1.]]
(150, 3)
(150, 3) float32
MODEL_PERFS {'class_name': 'mllite.DecisionTreeClassifier', 'model_name': 'DecisionTreeClassifier', 'options': '{"max_depth" : 6, "max_leaf_nodes" : 32}', 'dataset': 'iris_original', 'size': 150, 'accuracy': 1.0, 'auc': 1.0}
WRITING_PERF_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_original_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.DecisionTreeClassifier', 'model_name': 'DecisionTreeClassifier', 'options': '{"max_depth" : 6, "max_leaf_nodes" : 32}', 'dataset': 'iris_original', 'training_time_in_sec': 0.011, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 4
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 4
{
   "Contributions" : {
      "X_0" : [ 0.000000, 0.018542, -0.018542 ],
      "X_1" : [ 0.000000, 0.000000, 0.000000 ],
      "X_2" : [ -0.010417, -0.010833, 0.021250 ],
      "X_3" : [ 0.000000, 0.023333, -0.023333 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 2 ],
      "class_1" : [ 3, 0, 2 ],
      "class_2" : [ 3, 2, 0 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_original_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_original_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_original', 'DecisionTreeClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_original" AS "ADS" 
 ),
"DT_node_lookup" AS 
 (SELECT
    t."index" AS "index",
    COALESCE( t1."Leaf_1", t1."Leaf_7", t1."Leaf_9", t1."Leaf_10", t1."Leaf_11", t1."Leaf_12", t1."Leaf_14", t1."Leaf_15", t1."Leaf_16" ) AS node_id
  FROM
    "model_input" AS t
    LEFT OUTER JOIN
   (SELECT
      t."index" AS "index",
      CASE WHEN((t."X_2" <= 2.450000)) THEN 1 ELSE NULL END AS "Leaf_1",
      CASE WHEN((t."X_2" > 2.450000) AND (t."X_3" <= 1.750000) AND (t."X_2" > 4.950000) AND (t."X_3" <= 1.550000)) THEN 7 ELSE NULL END AS "Leaf_7",
      CASE WHEN((t."X_2" > 2.450000) AND (t."X_3" <= 1.750000) AND (t."X_2" > 4.950000) AND (t."X_3" > 1.550000) AND (t."X_2" <= 5.450000)) THEN 9 ELSE NULL END AS "Leaf_9",
      CASE WHEN((t."X_2" > 2.450000) AND (t."X_3" <= 1.750000) AND (t."X_2" > 4.950000) AN
SQL_OUT_PUT_FIRST_LINES_END ('iris_original', 'DecisionTreeClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('iris_original', 'DecisionTreeClassifier', 'duckdb')
d AS node_id,
   t2.nid AS nid,
   t2."P_0" AS "P_0", t2."P_1" AS "P_1", t2."P_2" AS "P_2", 
   t2."D" AS "D", 
   t2."DP" AS "DP"
  FROM
   "DT_node_lookup" AS t1
   LEFT OUTER JOIN
   "DT_node_data" AS t2
   ON t1.node_id = t2.nid
 )
SELECT
   "DT_Output"."index" AS "index",
   CAST(NULL AS FLOAT)  AS "Score_0",
   "DT_Output"."P_0" AS "Proba_0",
   CASE WHEN ("DT_Output"."P_0" IS NULL OR "DT_Output"."P_0" > 0.0) THEN LN( "DT_Output"."P_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
   CAST(NULL AS FLOAT)  AS "Score_1",
   "DT_Output"."P_1" AS "Proba_1",
   CASE WHEN ("DT_Output"."P_1" IS NULL OR "DT_Output"."P_1" > 0.0) THEN LN( "DT_Output"."P_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
   CAST(NULL AS FLOAT)  AS "Score_2",
   "DT_Output"."P_2" AS "Proba_2",
   CASE WHEN ("DT_Output"."P_2" IS NULL OR "DT_Output"."P_2" > 0.0) THEN LN( "DT_Output"."P_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
   "DT_Output"."D" AS "Decision",
   "DT_Output"."DP" AS "DecisionProba"
FROM "DT_Output"
SQL_OUT_PUT_LAST_LINES_END ('iris_original', 'DecisionTreeClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 150 entries, 0 to 149
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     150 non-null    float32
 1   X_1     150 non-null    float32
 2   X_2     150 non-null    float32
 3   X_3     150 non-null    float32
dtypes: float32(4)
memory usage: 3.5 KB
       X_0  X_1  X_2  X_3
index                    
0      5.1  3.5  1.4  0.2
1      4.9  3.0  1.4  0.2
2      4.7  3.2  1.3  0.2
3      4.6  3.1  1.5  0.2
4      5.0  3.6  1.4  0.2
...    ...  ...  ...  ...
145    6.7  3.0  5.2  2.3
146    6.3  2.5  5.0  1.9
147    6.5  3.0  5.2  2.0
148    6.2  3.4  5.4  2.3
149    5.9  3.0  5.1  1.8

[150 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          150 non-null    int64  
 1   Score_0        0 non-null      object 
 2   Proba_0        150 non-null    float64
 3   LogProba_0     150 non-null    float64
 4   Score_1        0 non-null      object 
 5   Proba_1        150 non-null    float64
 6   LogProba_1     150 non-null    float64
 7   Score_2        0 non-null      object 
 8   Proba_2        150 non-null    float64
 9   LogProba_2     150 non-null    float64
 10  Decision       150 non-null    int64  
 11  DecisionProba  150 non-null    float64
dtypes: float64(7), int64(2), object(3)
memory usage: 14.2+ KB
     index Score_0  Proba_0  ...     LogProba_2 Decision  DecisionProba
0        0    None      1.0  ... -1.797693e+308        0            1.0
1        1    None      1.0  ... -1.797693e+308        0            1.0
2        2    None      1.0  ... -1.797693e+308        0            1.0
3        3    None      1.0  ... -1.797693e+308        0            1.0
4        4    None      1.0  ... -1.797693e+308        0            1.0
..     ...     ...      ...  ...            ...      ...            ...
145    145    None      0.0  ...   0.000000e+00        2            1.0
146    146    None      0.0  ...   0.000000e+00        2            1.0
147    147    None      0.0  ...   0.000000e+00        2            1.0
148    148    None      0.0  ...   0.000000e+00        2            1.0
149    149    None      0.0  ...   0.000000e+00        2            1.0

[150 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
     index Score_0  SQL_Proba_0  ...  Py_Proba_1 Py_Proba_2  Py_Decision
134    134    None          0.0  ...         0.0        1.0            2
135    135    None          0.0  ...         0.0        1.0            2
136    136    None          0.0  ...         0.0        1.0            2
137    137    None          0.0  ...         0.0        1.0            2
138    138    None          0.0  ...         0.0        1.0            2
139    139    None          0.0  ...         0.0        1.0            2
140    140    None          0.0  ...         0.0        1.0            2
141    141    None          0.0  ...         0.0        1.0            2
142    142    None          0.0  ...         0.0        1.0            2
143    143    None          0.0  ...         0.0        1.0            2
144    144    None          0.0  ...         0.0        1.0            2
145    145    None          0.0  ...         0.0        1.0            2
146    146    None          0.0  ...         0.0        1.0            2
147    147    None          0.0  ...         0.0        1.0            2
148    148    None          0.0  ...         0.0        1.0            2
149    149    None          0.0  ...         0.0        1.0            2

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_original', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 0.0
     Py_Proba_0  SQL_Proba_0  SQL_Error_0
134         0.0          0.0          0.0
135         0.0          0.0          0.0
136         0.0          0.0          0.0
137         0.0          0.0          0.0
138         0.0          0.0          0.0
139         0.0          0.0          0.0
140         0.0          0.0          0.0
141         0.0          0.0          0.0
142         0.0          0.0          0.0
143         0.0          0.0          0.0
144         0.0          0.0          0.0
145         0.0          0.0          0.0
146         0.0          0.0          0.0
147         0.0          0.0          0.0
148         0.0          0.0          0.0
149         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('iris_original', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 0.0
     Py_Proba_1  SQL_Proba_1  SQL_Error_1
134         0.0          0.0          0.0
135         0.0          0.0          0.0
136         0.0          0.0          0.0
137         0.0          0.0          0.0
138         0.0          0.0          0.0
139         0.0          0.0          0.0
140         0.0          0.0          0.0
141         0.0          0.0          0.0
142         0.0          0.0          0.0
143         0.0          0.0          0.0
144         0.0          0.0          0.0
145         0.0          0.0          0.0
146         0.0          0.0          0.0
147         0.0          0.0          0.0
148         0.0          0.0          0.0
149         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('iris_original', 'DecisionTreeClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 0.0
     Py_Proba_2  SQL_Proba_2  SQL_Error_2
134         1.0          1.0          0.0
135         1.0          1.0          0.0
136         1.0          1.0          0.0
137         1.0          1.0          0.0
138         1.0          1.0          0.0
139         1.0          1.0          0.0
140         1.0          1.0          0.0
141         1.0          1.0          0.0
142         1.0          1.0          0.0
143         1.0          1.0          0.0
144         1.0          1.0          0.0
145         1.0          1.0          0.0
146         1.0          1.0          0.0
147         1.0          1.0          0.0
148         1.0          1.0          0.0
149         1.0          1.0          0.0
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_original', 'DecisionTreeClassifier', 'duckdb', 'Success')
     Py_Decision  SQL_Decision
134            2             2
135            2             2
136            2             2
137            2             2
138            2             2
139            2             2
140            2             2
141            2             2
142            2             2
143            2             2
144            2             2
145            2             2
146            2             2
147            2             2
148            2             2
149            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/DecisionTreeClassifier/mllite.DecisionTreeClassifier_iris_original_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('iris_original', 'DecisionTreeClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3"
  FROM "iris_original" AS "ADS" 
 ),
"DT_node_lookup" AS 
 (SELECT
    t."index" AS "index",
    COALESCE( t1."Leaf_1", t1."Leaf_7", t1."Leaf_9", t1."Leaf_10", t1."Leaf_11", t1."Leaf_12", t1."Leaf_14", t1."Leaf_15", t1."Leaf_16" ) AS node_id
  FROM
    "model_input" AS t
    LEFT OUTER JOIN
   (SELECT
      t."index" AS "index",
      CASE WHEN((t."X_2" <= 2.450000)) THEN 1 ELSE NULL END AS "Leaf_1",
      CASE WHEN((t."X_2" > 2.450000) AND (t."X_3" <= 1.750000) AND (t."X_2" > 4.950000) AND (t."X_3" <= 1.550000)) THEN 7 ELSE NULL END AS "Leaf_7",
      CASE WHEN((t."X_2" > 2.450000) AND (t."X_3" <= 1.750000) AND (t."X_2" > 4.950000) AND (t."X_3" > 1.550000) AND (t."X_2" <= 5.450000)) THEN 9 ELSE NULL END AS "Leaf_9",
      CASE WHEN((t."X_2" > 2.450000) AND (t."X_3" <= 1.750000) AND (t."X_2" > 4.950000) AN
SQL_OUT_PUT_FIRST_LINES_END ('iris_original', 'DecisionTreeClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('iris_original', 'DecisionTreeClassifier', 'sqlite')
d AS node_id,
   t2.nid AS nid,
   t2."P_0" AS "P_0", t2."P_1" AS "P_1", t2."P_2" AS "P_2", 
   t2."D" AS "D", 
   t2."DP" AS "DP"
  FROM
   "DT_node_lookup" AS t1
   LEFT OUTER JOIN
   "DT_node_data" AS t2
   ON t1.node_id = t2.nid
 )
SELECT
   "DT_Output"."index" AS "index",
   CAST(NULL AS FLOAT)  AS "Score_0",
   "DT_Output"."P_0" AS "Proba_0",
   CASE WHEN ("DT_Output"."P_0" IS NULL OR "DT_Output"."P_0" > 0.0) THEN LN( "DT_Output"."P_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
   CAST(NULL AS FLOAT)  AS "Score_1",
   "DT_Output"."P_1" AS "Proba_1",
   CASE WHEN ("DT_Output"."P_1" IS NULL OR "DT_Output"."P_1" > 0.0) THEN LN( "DT_Output"."P_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
   CAST(NULL AS FLOAT)  AS "Score_2",
   "DT_Output"."P_2" AS "Proba_2",
   CASE WHEN ("DT_Output"."P_2" IS NULL OR "DT_Output"."P_2" > 0.0) THEN LN( "DT_Output"."P_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
   "DT_Output"."D" AS "Decision",
   "DT_Output"."DP" AS "DecisionProba"
FROM "DT_Output"
SQL_OUT_PUT_LAST_LINES_END ('iris_original', 'DecisionTreeClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 150 entries, 0 to 149
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     150 non-null    float32
 1   X_1     150 non-null    float32
 2   X_2     150 non-null    float32
 3   X_3     150 non-null    float32
dtypes: float32(4)
memory usage: 3.5 KB
       X_0  X_1  X_2  X_3
index                    
0      5.1  3.5  1.4  0.2
1      4.9  3.0  1.4  0.2
2      4.7  3.2  1.3  0.2
3      4.6  3.1  1.5  0.2
4      5.0  3.6  1.4  0.2
...    ...  ...  ...  ...
145    6.7  3.0  5.2  2.3
146    6.3  2.5  5.0  1.9
147    6.5  3.0  5.2  2.0
148    6.2  3.4  5.4  2.3
149    5.9  3.0  5.1  1.8

[150 rows x 4 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 12 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          150 non-null    int64  
 1   Score_0        0 non-null      object 
 2   Proba_0        150 non-null    float64
 3   LogProba_0     150 non-null    float64
 4   Score_1        0 non-null      object 
 5   Proba_1        150 non-null    float64
 6   LogProba_1     150 non-null    float64
 7   Score_2        0 non-null      object 
 8   Proba_2        150 non-null    float64
 9   LogProba_2     150 non-null    float64
 10  Decision       150 non-null    int64  
 11  DecisionProba  150 non-null    float64
dtypes: float64(7), int64(2), object(3)
memory usage: 14.2+ KB
     index Score_0  Proba_0  ...     LogProba_2 Decision  DecisionProba
0        0    None      1.0  ... -1.797693e+308        0            1.0
1        1    None      1.0  ... -1.797693e+308        0            1.0
2        2    None      1.0  ... -1.797693e+308        0            1.0
3        3    None      1.0  ... -1.797693e+308        0            1.0
4        4    None      1.0  ... -1.797693e+308        0            1.0
..     ...     ...      ...  ...            ...      ...            ...
145    145    None      0.0  ...   0.000000e+00        2            1.0
146    146    None      0.0  ...   0.000000e+00        2            1.0
147    147    None      0.0  ...   0.000000e+00        2            1.0
148    148    None      0.0  ...   0.000000e+00        2            1.0
149    149    None      0.0  ...   0.000000e+00        2            1.0

[150 rows x 12 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Decision',
       'DecisionProba'],
      dtype='object')
     index Score_0  SQL_Proba_0  ...  Py_Proba_1 Py_Proba_2  Py_Decision
134    134    None          0.0  ...         0.0        1.0            2
135    135    None          0.0  ...         0.0        1.0            2
136    136    None          0.0  ...         0.0        1.0            2
137    137    None          0.0  ...         0.0        1.0            2
138    138    None          0.0  ...         0.0        1.0            2
139    139    None          0.0  ...         0.0        1.0            2
140    140    None          0.0  ...         0.0        1.0            2
141    141    None          0.0  ...         0.0        1.0            2
142    142    None          0.0  ...         0.0        1.0            2
143    143    None          0.0  ...         0.0        1.0            2
144    144    None          0.0  ...         0.0        1.0            2
145    145    None          0.0  ...         0.0        1.0            2
146    146    None          0.0  ...         0.0        1.0            2
147    147    None          0.0  ...         0.0        1.0            2
148    148    None          0.0  ...         0.0        1.0            2
149    149    None          0.0  ...         0.0        1.0            2

[16 rows x 16 columns]
MLLITE_CLASS_SQL_ERROR ('iris_original', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_0', 'SQL_Proba_0') 0.0
     Py_Proba_0  SQL_Proba_0  SQL_Error_0
134         0.0          0.0          0.0
135         0.0          0.0          0.0
136         0.0          0.0          0.0
137         0.0          0.0          0.0
138         0.0          0.0          0.0
139         0.0          0.0          0.0
140         0.0          0.0          0.0
141         0.0          0.0          0.0
142         0.0          0.0          0.0
143         0.0          0.0          0.0
144         0.0          0.0          0.0
145         0.0          0.0          0.0
146         0.0          0.0          0.0
147         0.0          0.0          0.0
148         0.0          0.0          0.0
149         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('iris_original', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_1', 'SQL_Proba_1') 0.0
     Py_Proba_1  SQL_Proba_1  SQL_Error_1
134         0.0          0.0          0.0
135         0.0          0.0          0.0
136         0.0          0.0          0.0
137         0.0          0.0          0.0
138         0.0          0.0          0.0
139         0.0          0.0          0.0
140         0.0          0.0          0.0
141         0.0          0.0          0.0
142         0.0          0.0          0.0
143         0.0          0.0          0.0
144         0.0          0.0          0.0
145         0.0          0.0          0.0
146         0.0          0.0          0.0
147         0.0          0.0          0.0
148         0.0          0.0          0.0
149         0.0          0.0          0.0
MLLITE_CLASS_SQL_ERROR ('iris_original', 'DecisionTreeClassifier', 'sqlite') ('Py_Proba_2', 'SQL_Proba_2') 0.0
     Py_Proba_2  SQL_Proba_2  SQL_Error_2
134         1.0          1.0          0.0
135         1.0          1.0          0.0
136         1.0          1.0          0.0
137         1.0          1.0          0.0
138         1.0          1.0          0.0
139         1.0          1.0          0.0
140         1.0          1.0          0.0
141         1.0          1.0          0.0
142         1.0          1.0          0.0
143         1.0          1.0          0.0
144         1.0          1.0          0.0
145         1.0          1.0          0.0
146         1.0          1.0          0.0
147         1.0          1.0          0.0
148         1.0          1.0          0.0
149         1.0          1.0          0.0
MLLITE_CLASS_SQL_EXECUTION_STATUS ('iris_original', 'DecisionTreeClassifier', 'sqlite', 'Success')
     Py_Decision  SQL_Decision
134            2             2
135            2             2
136            2             2
137            2             2
138            2             2
139            2             2
140            2             2
141            2             2
142            2             2
143            2             2
144            2             2
145            2             2
146            2             2
147            2             2
148            2             2
149            2             2
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
