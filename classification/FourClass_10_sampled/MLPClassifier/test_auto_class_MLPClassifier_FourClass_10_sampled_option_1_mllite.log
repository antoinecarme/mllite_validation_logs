READING_CSV FourClass_10_sampled ['data/sampled/FourClass_10_sampled.csv']
          X_0       X_1       X_2  ...       X_8       X_9  target
0   -1.050659  0.920640 -0.455125  ... -0.010797 -1.586949       2
1    1.869880 -2.312190 -1.153852  ... -1.648043  2.109906       3
2   -0.124049  0.768644 -1.040184  ...  1.247335 -1.413962       1
3    0.928858 -1.177375  0.542731  ...  0.485529  1.106564       0
4   -1.598324  1.482463  1.664691  ...  1.816533  0.637000       3
..        ...       ...       ...  ...       ...       ...     ...
123 -0.598158  0.629641  1.754569  ... -0.570026  1.113417       0
124 -1.067863  0.728836  1.338623  ... -0.770565  0.644973       2
125 -1.123043  1.342440  0.659906  ... -1.312702  0.946601       2
126  0.795537 -0.282125 -0.219283  ... -1.614865  0.927883       2
127  1.126231 -0.791891 -0.032095  ...  0.796760  0.714492       1

[128 rows x 11 columns]
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
('OPERATION_START', 'TRAINING')
[[-1.0506592   0.92064023 -0.4551253  -0.05012989 -0.19162714  0.5843286
   0.9430313   1.0213077  -0.01079692 -1.5869486 ]
 [ 1.86988    -2.3121896  -1.1538523   1.292078   -1.061729    2.0429258
   1.284271   -1.3353989  -1.6480426   2.1099062 ]
 [-0.1240493   0.7686444  -1.040184   -1.0419097  -0.5159428   1.4802165
  -1.7200696   0.34235197  1.2473352  -1.4139622 ]
 [ 0.9288579  -1.1773754   0.5427306   1.248167   -0.7323589   0.6922126
   0.362028   -0.05373104  0.48552942  1.1065644 ]
 [-1.5983242   1.4824632   1.6646907  -0.7911312  -0.3269162  -0.07355959
  -3.3526254  -1.3474813   1.8165325   0.6370003 ]] [2 3 1 0 3]
MLLITE_FIT_USING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 1 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 2 3
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 3 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 6 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 9 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 12 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 15 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 18 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 21 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 24 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 27 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 30 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT_BACK_PROP_ITERATION' 32 32
PROGRESS_REPORT_ELAPSED_TOTAL 'MLP_MODEL_FIT' 3 3
('OPERATION_END_ELAPSED', 0.018, 'TRAINING')
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{ "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 128, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.076196, 0.308656, -0.237719, -0.078950 ],
			"coeffs_1" : [ 0.143340, -0.426912, 0.160711, 0.051604 ],
			"coeffs_2" : [ 0.529151, 0.107901, 0.519108, -0.071925 ],
			"coeffs_3" : [ 0.627277, -0.551050, -0.245234, 0.212878 ],
			"coeffs_4" : [ 0.310995, -0.284112, -0.366196, -0.477295 ],
			"coeffs_5" : [ 0.254553, -0.614954, -0.073105, 0.000340 ],
			"coeffs_6" : [ -0.159093, -0.564511, -0.306762, 0.504943 ],
			"coeffs_7" : [ -0.030071, 0.036034, -0.557189, 0.068571 ],
			"coeffs_8" : [ -0.172134, 0.211757, -0.144616, 0.307907 ],
			"coeffs_9" : [ -0.406463, 0.542483, -0.470611, 0.322659 ],
			"intercepts" : [ -0.498807, 0.330552, 0.125066, 0.564950 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.473558, -0.574985, 0.268609, 0.228998, 0.505835, 0.576691, 0.508937, -0.426775 ],
			"coeffs_1" : [ 0.392561, 0.546064, -0.395222, 0.287333, 0.178772, 0.022882, 0.061296, 0.426228 ],
			"coeffs_2" : [ -0.637238, 0.058823, 0.320678, 0.379188, -0.634925, 0.459759, -0.422899, -0.635374 ],
			"coeffs_3" : [ 0.667951, 0.645026, -0.062490, -0.602120, -0.049703, 0.646406, -0.538812, 0.310777 ],
			"intercepts" : [ 0.288556, 0.387514, 0.654506, -0.385677, 0.275589, 0.467426, 0.489125, -0.032589 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.610322, 0.297578, -0.021745, -0.094846, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.269129, 0.560237, -0.001730, -0.101092, -0.122365, -0.586402 ],
			"coeffs_2" : [ 0.187011, -0.230256, -0.280399, -0.107912, 0.298298, -0.462554 ],
			"coeffs_3" : [ -0.244751, 0.346403, 0.403052, 0.589683, 0.506902, 0.371699 ],
			"coeffs_4" : [ -0.307121, 0.032844, 0.155367, 0.467885, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.346631, 0.424403, 0.079888, -0.192722, -0.147848, -0.324393 ],
			"coeffs_6" : [ 0.316212, 0.336156, -0.481349, 0.236273, -0.409486, -0.001729 ],
			"coeffs_7" : [ 0.093239, -0.293772, 0.268780, -0.591247, -0.588556, 0.488080 ],
			"intercepts" : [ 0.562888, -0.463634, -0.274702, -0.462375, -0.470369, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.232859, -0.207702, -0.475703, -0.528464 ],
			"coeffs_1" : [ -0.658112, 0.119759, -0.478214, -0.583608 ],
			"coeffs_2" : [ 0.179647, 0.240691, -0.093798, 0.236867 ],
			"coeffs_3" : [ 0.108497, -0.545103, -0.158943, 0.676117 ],
			"coeffs_4" : [ 0.806697, -0.158639, -0.645165, -0.341085 ],
			"coeffs_5" : [ 0.322902, -0.641381, 0.267267, -0.410608 ],
			"intercepts" : [ 0.737729, 0.713637, -0.322994, 0.432592 ]
		}
	}
}
WRITING_JSON_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_sampled_option_1.json'

RELOADING_MODEL_FROM_JSON_START ('FourClass_10_sampled', 'MLPClassifier')
MLLITE_MODEL_SET_OPTIONS MLPClassifier {"hidden_layer_sizes" : [4, 8, 6]}
MLLITE_MODEL_OPTIONS_DEFAULT MLPClassifier { "max_iter" : 32}
MLLITE_MODEL_OPTIONS_AFTER_SETTING MLPClassifier { "hidden_layer_sizes" : [4, 8, 6],  "max_iter" : 32 }
MLLITE_MODEL_JSON_AFTER_SETTING MLPClassifier None
MLLITE_RELOADING_MODEL mllite_mlp_class.MLPClassifier_ff4_il8
{
	"metadata" : { "model" : "Rosenblatt_MLP", "version" : "2024-W14", "signature" : "ff4_il8"},
	"options" : {  "hidden_layer_sizes" : [ 4, 8, 6 ], "activation" : "relu", "solver" : "adam", "alpha" : 0.000100, "batch_size" : null, "learning_rate" : "constant", "learning_rate_init" : 0.001000, "power_t" : 0.500000, "max_iter" : 32, "shuffle" : 1, "random_state" : 1789, "tol" : 0.000100, "verbose" : 0, "warm_start" : 0, "momentum" : 0.900000, "nesterovs_momentum" : 1, "early_stopping" : 0, "validation_fraction" : 0.100000, "beta_1" : 0.900000, "beta_2" : 0.999000, "epsilon" : 0.000000, "n_iter_no_change" : 10, "max_fun" : 15000 },
	"dataset" : { "dataset_rows" : 128, "dataset_features" : 10 },
	"classes" : [ 0, 1, 2, 3 ],
	"layers" : {
		"sizes" : [ 10, 4, 8, 6, 4 ],
		"Layer_0" : {
			"name" : "Input_Layer",
			"NbInputs" : 0,
			"NbOutputs" : 10 
		},
		"Layer_1" : {
			"name" : "Hidden_Layer_1",
			"NbInputs" : 10,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.076196, 0.308656, -0.237719, -0.078950 ],
			"coeffs_1" : [ 0.143340, -0.426912, 0.160711, 0.051604 ],
			"coeffs_2" : [ 0.529151, 0.107901, 0.519108, -0.071925 ],
			"coeffs_3" : [ 0.627277, -0.551050, -0.245234, 0.212878 ],
			"coeffs_4" : [ 0.310995, -0.284112, -0.366196, -0.477295 ],
			"coeffs_5" : [ 0.254553, -0.614954, -0.073105, 0.000340 ],
			"coeffs_6" : [ -0.159093, -0.564511, -0.306762, 0.504943 ],
			"coeffs_7" : [ -0.030071, 0.036034, -0.557189, 0.068571 ],
			"coeffs_8" : [ -0.172134, 0.211757, -0.144616, 0.307907 ],
			"coeffs_9" : [ -0.406463, 0.542483, -0.470611, 0.322659 ],
			"intercepts" : [ -0.498807, 0.330552, 0.125066, 0.564950 ]
		},
		"Layer_2" : {
			"name" : "Hidden_Layer_2",
			"NbInputs" : 4,
			"NbOutputs" : 8 ,
			"coeffs_0" : [ -0.473558, -0.574985, 0.268609, 0.228998, 0.505835, 0.576691, 0.508937, -0.426775 ],
			"coeffs_1" : [ 0.392561, 0.546064, -0.395222, 0.287333, 0.178772, 0.022882, 0.061296, 0.426228 ],
			"coeffs_2" : [ -0.637238, 0.058823, 0.320678, 0.379188, -0.634925, 0.459759, -0.422899, -0.635374 ],
			"coeffs_3" : [ 0.667951, 0.645026, -0.062490, -0.602120, -0.049703, 0.646406, -0.538812, 0.310777 ],
			"intercepts" : [ 0.288556, 0.387514, 0.654506, -0.385677, 0.275589, 0.467426, 0.489125, -0.032589 ]
		},
		"Layer_3" : {
			"name" : "Hidden_Layer_3",
			"NbInputs" : 8,
			"NbOutputs" : 6 ,
			"coeffs_0" : [ -0.610322, 0.297578, -0.021745, -0.094846, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.269129, 0.560237, -0.001730, -0.101092, -0.122365, -0.586402 ],
			"coeffs_2" : [ 0.187011, -0.230256, -0.280399, -0.107912, 0.298298, -0.462554 ],
			"coeffs_3" : [ -0.244751, 0.346403, 0.403052, 0.589683, 0.506902, 0.371699 ],
			"coeffs_4" : [ -0.307121, 0.032844, 0.155367, 0.467885, 0.321790, -0.001604 ],
			"coeffs_5" : [ 0.346631, 0.424403, 0.079888, -0.192722, -0.147848, -0.324393 ],
			"coeffs_6" : [ 0.316212, 0.336156, -0.481349, 0.236273, -0.409486, -0.001729 ],
			"coeffs_7" : [ 0.093239, -0.293772, 0.268780, -0.591247, -0.588556, 0.488080 ],
			"intercepts" : [ 0.562888, -0.463634, -0.274702, -0.462375, -0.470369, -0.502640 ]
		},
		"Layer_4" : {
			"name" : "Output_Layer",
			"NbInputs" : 6,
			"NbOutputs" : 4 ,
			"coeffs_0" : [ -0.232859, -0.207702, -0.475703, -0.528464 ],
			"coeffs_1" : [ -0.658112, 0.119759, -0.478214, -0.583608 ],
			"coeffs_2" : [ 0.179647, 0.240691, -0.093798, 0.236867 ],
			"coeffs_3" : [ 0.108497, -0.545103, -0.158943, 0.676117 ],
			"coeffs_4" : [ 0.806697, -0.158639, -0.645165, -0.341085 ],
			"coeffs_5" : [ 0.322902, -0.641381, 0.267267, -0.410608 ],
			"intercepts" : [ 0.737729, 0.713637, -0.322994, 0.432592 ]
		}
	}
}
BEAUTIFIED_JSON_START
{
	"classes" : [ 0, 1, 2, 3 ],
	"dataset" : 	{
		"dataset_features" : 10,
		"dataset_rows" : 128
	},
	"layers" : 	{
		"Layer_0" : 	{
			"NbInputs" : 0,
			"NbOutputs" : 10,
			"name" : "Input_Layer"
		},
		"Layer_1" : 	{
			"NbInputs" : 10,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.076196, 0.308656, -0.237719, -0.07895 ],
			"coeffs_1" : [ 0.14334, -0.426912, 0.160711, 0.051604 ],
			"coeffs_2" : [ 0.529151, 0.107901, 0.519108, -0.071925 ],
			"coeffs_3" : [ 0.627277, -0.55105, -0.245234, 0.212878 ],
			"coeffs_4" : [ 0.310995, -0.284112, -0.366196, -0.477295 ],
			"coeffs_5" : [ 0.254553, -0.614954, -0.073105, 0.00034 ],
			"coeffs_6" : [ -0.159093, -0.564511, -0.306762, 0.504943 ],
			"coeffs_7" : [ -0.030071, 0.036034, -0.557189, 0.068571 ],
			"coeffs_8" : [ -0.172134, 0.211757, -0.144616, 0.307907 ],
			"coeffs_9" : [ -0.406463, 0.542483, -0.470611, 0.322659 ],
			"intercepts" : [ -0.498807, 0.330552, 0.125066, 0.56495 ],
			"name" : "Hidden_Layer_1"
		},
		"Layer_2" : 	{
			"NbInputs" : 4,
			"NbOutputs" : 8,
			"coeffs_0" : [ -0.473558, -0.574985, 0.268609, 0.228998, 0.505835, 0.576691, 0.508937, -0.426775 ],
			"coeffs_1" : [ 0.392561, 0.546064, -0.395222, 0.287333, 0.178772, 0.022882, 0.061296, 0.426228 ],
			"coeffs_2" : [ -0.637238, 0.058823, 0.320678, 0.379188, -0.634925, 0.459759, -0.422899, -0.635374 ],
			"coeffs_3" : [ 0.667951, 0.645026, -0.06249, -0.60212, -0.049703, 0.646406, -0.538812, 0.310777 ],
			"intercepts" : [ 0.288556, 0.387514, 0.654506, -0.385677, 0.275589, 0.467426, 0.489125, -0.032589 ],
			"name" : "Hidden_Layer_2"
		},
		"Layer_3" : 	{
			"NbInputs" : 8,
			"NbOutputs" : 6,
			"coeffs_0" : [ -0.610322, 0.297578, -0.021745, -0.094846, -0.480768, -0.619361 ],
			"coeffs_1" : [ -0.269129, 0.560237, -0.00173, -0.101092, -0.122365, -0.586402 ],
			"coeffs_2" : [ 0.187011, -0.230256, -0.280399, -0.107912, 0.298298, -0.462554 ],
			"coeffs_3" : [ -0.244751, 0.346403, 0.403052, 0.589683, 0.506902, 0.371699 ],
			"coeffs_4" : [ -0.307121, 0.032844, 0.155367, 0.467885, 0.32179, -0.001604 ],
			"coeffs_5" : [ 0.346631, 0.424403, 0.079888, -0.192722, -0.147848, -0.324393 ],
			"coeffs_6" : [ 0.316212, 0.336156, -0.481349, 0.236273, -0.409486, -0.001729 ],
			"coeffs_7" : [ 0.093239, -0.293772, 0.26878, -0.591247, -0.588556, 0.48808 ],
			"intercepts" : [ 0.562888, -0.463634, -0.274702, -0.462375, -0.470369, -0.50264 ],
			"name" : "Hidden_Layer_3"
		},
		"Layer_4" : 	{
			"NbInputs" : 6,
			"NbOutputs" : 4,
			"coeffs_0" : [ -0.232859, -0.207702, -0.475703, -0.528464 ],
			"coeffs_1" : [ -0.658112, 0.119759, -0.478214, -0.583608 ],
			"coeffs_2" : [ 0.179647, 0.240691, -0.093798, 0.236867 ],
			"coeffs_3" : [ 0.108497, -0.545103, -0.158943, 0.676117 ],
			"coeffs_4" : [ 0.806697, -0.158639, -0.645165, -0.341085 ],
			"coeffs_5" : [ 0.322902, -0.641381, 0.267267, -0.410608 ],
			"intercepts" : [ 0.737729, 0.713637, -0.322994, 0.432592 ],
			"name" : "Output_Layer"
		},
		"sizes" : [ 10, 4, 8, 6, 4 ]
	},
	"metadata" :  { "model" : "Rosenblatt_MLP", "signature" : "ff4_il8", "version" : "2024-W14" },
	"options" :  { "activation" : "relu", "alpha" : 0.0001, "batch_size" : null, "beta_1" : 0.9, "beta_2" : 0.999, "early_stopping" : 0, "epsilon" : 0.0, "hidden_layer_sizes" : [ 4, 8, 6 ], "learning_rate" : "constant", "learning_rate_init" : 0.001, "max_fun" : 15000, "max_iter" : 32, "momentum" : 0.9, "n_iter_no_change" : 10, "nesterovs_momentum" : 1, "power_t" : 0.5, "random_state" : 1789, "shuffle" : 1, "solver" : "adam", "tol" : 0.0001, "validation_fraction" : 0.1, "verbose" : 0, "warm_start" : 0 }
}
BEAUTIFIED_JSON_END
RELOADING_MODEL_FROM_JSON_END ('FourClass_10_sampled', 'MLPClassifier')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
('OPERATION_START', 'PREDICT')
('OPERATION_END_ELAPSED', 0.0, 'PREDICT')
[[0.2797 0.4289 0.0982 0.1931]
 [0.1947 0.5596 0.0865 0.1591]
 [0.3487 0.3588 0.0969 0.1956]
 [0.185  0.5789 0.0835 0.1526]
 [0.1574 0.6643 0.0615 0.1168]
 [0.2589 0.5049 0.0829 0.1533]
 [0.2276 0.5138 0.0899 0.1687]
 [0.2577 0.4424 0.101  0.1989]
 [0.3007 0.4217 0.094  0.1836]
 [0.1717 0.6397 0.0649 0.1237]
 [0.1522 0.6682 0.0616 0.1179]
 [0.1988 0.5516 0.0876 0.162 ]
 [0.2575 0.4518 0.0985 0.1922]
 [0.1373 0.6772 0.0666 0.119 ]
 [0.3204 0.3705 0.102  0.2071]
 [0.1273 0.7024 0.0565 0.1138]
 [0.1485 0.6523 0.0728 0.1264]
 [0.2137 0.5228 0.0915 0.172 ]
 [0.3419 0.457  0.0673 0.1338]
 [0.2666 0.4824 0.0871 0.1639]
 [0.309  0.4759 0.0732 0.1418]
 [0.1836 0.6151 0.0701 0.1312]
 [0.26   0.5125 0.0803 0.1472]
 [0.1996 0.5548 0.085  0.1606]
 [0.1631 0.6297 0.0735 0.1338]
 [0.2598 0.4464 0.0993 0.1945]
 [0.3191 0.4447 0.082  0.1542]
 [0.2766 0.4161 0.1026 0.2047]
 [0.1746 0.5994 0.0808 0.1451]
 [0.1773 0.5939 0.0817 0.1471]
 [0.1786 0.6972 0.0402 0.0839]
 [0.271  0.4222 0.1026 0.2042]
 [0.1965 0.5573 0.0851 0.1611]
 [0.1698 0.6115 0.0755 0.1432]
 [0.1083 0.7687 0.039  0.0839]
 [0.2999 0.3951 0.1014 0.2036]
 [0.1471 0.6551 0.0724 0.1254]
 [0.3186 0.4238 0.0881 0.1695]
 [0.1925 0.5656 0.0832 0.1586]
 [0.2514 0.4628 0.0972 0.1886]
 [0.2651 0.45   0.0967 0.1882]
 [0.2246 0.5021 0.0942 0.1792]
 [0.1552 0.6419 0.0698 0.1331]
 [0.1728 0.6056 0.0762 0.1454]
 [0.1869 0.5773 0.0833 0.1525]
 [0.1876 0.5989 0.0737 0.1397]
 [0.2521 0.5039 0.0853 0.1587]
 [0.1967 0.5797 0.0799 0.1437]
 [0.1757 0.5984 0.0793 0.1466]
 [0.1982 0.5536 0.0861 0.1621]
 [0.213  0.5242 0.0913 0.1715]
 [0.1392 0.6715 0.0697 0.1196]
 [0.2051 0.5394 0.0893 0.1662]
 [0.1478 0.6587 0.0651 0.1285]
 [0.3231 0.3696 0.1015 0.2059]
 [0.3474 0.365  0.0956 0.192 ]
 [0.326  0.3934 0.0942 0.1863]
 [0.149  0.675  0.0601 0.1159]
 [0.2646 0.4667 0.0922 0.1765]
 [0.1807 0.5891 0.0799 0.1504]
 [0.3408 0.3771 0.0943 0.1878]
 [0.186  0.6029 0.0762 0.135 ]
 [0.2871 0.4098 0.1012 0.2018]
 [0.3497 0.3628 0.0955 0.1919]
 [0.2308 0.5447 0.0798 0.1447]
 [0.2032 0.5455 0.0881 0.1632]
 [0.2063 0.5381 0.0879 0.1676]
 [0.2836 0.4118 0.1017 0.2029]
 [0.3298 0.4664 0.0688 0.135 ]
 [0.2679 0.4839 0.0863 0.1619]
 [0.2455 0.5492 0.0738 0.1315]
 [0.1776 0.5934 0.0817 0.1473]
 [0.2368 0.6111 0.0506 0.1014]
 [0.3535 0.3536 0.0969 0.196 ]
 [0.2548 0.5262 0.0779 0.1412]
 [0.1427 0.6692 0.0634 0.1247]
 [0.3264 0.3753 0.099  0.1993]
 [0.1603 0.6322 0.0704 0.1371]
 [0.2507 0.4679 0.096  0.1854]
 [0.2794 0.4183 0.1012 0.2011]
 [0.3144 0.4091 0.0934 0.1831]
 [0.3014 0.4341 0.0903 0.1742]
 [0.2367 0.5031 0.0902 0.17  ]
 [0.3017 0.4768 0.078  0.1435]
 [0.2531 0.5198 0.0803 0.1468]
 [0.1629 0.6269 0.0712 0.139 ]
 [0.2754 0.4175 0.1026 0.2046]
 [0.1229 0.7119 0.0547 0.1105]
 [0.2083 0.5332 0.0901 0.1684]
 [0.3514 0.3734 0.0922 0.1829]
 [0.2985 0.447  0.0876 0.1669]
 [0.1139 0.7304 0.0524 0.1033]
 [0.1268 0.7027 0.0576 0.1129]
 [0.2615 0.4335 0.1023 0.2027]
 [0.123  0.7056 0.0639 0.1075]
 [0.3209 0.4137 0.0902 0.1752]
 [0.224  0.5032 0.094  0.1788]
 [0.2178 0.515  0.0925 0.1747]
 [0.053  0.86   0.0253 0.0616]
 [0.2743 0.4386 0.0971 0.19  ]
 [0.3436 0.3906 0.0898 0.1759]
 [0.2632 0.4413 0.0997 0.1958]
 [0.3427 0.3735 0.0947 0.189 ]
 [0.3413 0.421  0.0804 0.1573]
 [0.1139 0.74   0.0493 0.0967]
 [0.3528 0.3526 0.0974 0.1973]
 [0.2021 0.5453 0.0885 0.1642]
 [0.2752 0.4203 0.1019 0.2026]
 [0.3303 0.37   0.0993 0.2004]
 [0.1414 0.6716 0.0633 0.1236]
 [0.1863 0.5761 0.0842 0.1534]
 [0.3566 0.3752 0.0902 0.178 ]
 [0.3298 0.409  0.0889 0.1723]
 [0.2788 0.454  0.0915 0.1757]
 [0.1657 0.6204 0.0734 0.1405]
 [0.3531 0.353  0.0971 0.1967]
 [0.2291 0.4936 0.0952 0.1821]
 [0.1632 0.6617 0.0598 0.1153]
 [0.1782 0.5922 0.0819 0.1477]
 [0.232  0.4941 0.0942 0.1797]
 [0.2739 0.5267 0.0686 0.1308]
 [0.3196 0.4162 0.0899 0.1743]
 [0.2127 0.5341 0.0885 0.1647]
 [0.2113 0.545  0.0858 0.158 ]
 [0.2075 0.5348 0.0899 0.1678]
 [0.2745 0.478  0.086  0.1615]
 [0.2711 0.44   0.0977 0.1912]
 [0.2414 0.4705 0.0981 0.1901]]
(128, 4)
(128, 4) float32
MODEL_PERFS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_sampled', 'size': 128, 'accuracy': 0.2578125, 'auc': 0.485189668970218}
WRITING_PERF_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_sampled_option_1.perf'

MODEL_PERFS_TIMINGS {'class_name': 'mllite.MLPClassifier', 'model_name': 'MLPClassifier', 'options': '{"hidden_layer_sizes" : [4, 8, 6]}', 'dataset': 'FourClass_10_sampled', 'training_time_in_sec': 0.018, 'prediction_time_in_sec': 0.0}

MODEL_EXPLANATION_START
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 0 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 1 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 2 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 3 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 4 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 5 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 6 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 7 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 8 10
PROGRESS_REPORT_ELAPSED_TOTAL 'MONTE_CARLO_CLASSIFICATION_EXPLAINER' 9 10
{
   "Contributions" : {
      "X_0" : [ 0.001652, -0.001582, -0.000046, -0.000024 ],
      "X_1" : [ 0.002701, -0.003617, 0.000259, 0.000658 ],
      "X_2" : [ 0.002106, -0.004452, 0.000991, 0.001355 ],
      "X_3" : [ 0.000779, -0.002887, 0.000781, 0.001327 ],
      "X_4" : [ 0.001654, -0.003753, 0.000702, 0.001397 ],
      "X_5" : [ 0.002345, -0.003364, 0.000327, 0.000693 ],
      "X_6" : [ 0.002375, -0.002646, -0.000081, 0.000352 ],
      "X_7" : [ 0.000820, 0.000427, -0.000429, -0.000818 ],
      "X_8" : [ 0.002356, -0.003862, 0.000378, 0.001129 ],
      "X_9" : [ -0.006960, 0.009845, -0.000901, -0.001983 ]   
   },
   "Most_Contributive_Features_By_Class" : {
      "class_0" : [ 9, 1, 6, 8, 5, 2, 4, 0, 7, 3 ],
      "class_1" : [ 9, 2, 8, 4, 1, 5, 3, 6, 0, 7 ],
      "class_2" : [ 2, 9, 3, 4, 7, 8, 5, 1, 6, 0 ],
      "class_3" : [ 9, 4, 2, 3, 8, 7, 5, 1, 6, 0 ]
   }
}
WRITING_EXPLAIN_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_sampled_option_1_explain.json'

MODEL_EXPLANATION_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_sampled_option_1_duckdb.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_sampled', 'MLPClassifier', 'duckdb')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "FourClass_10_sampled" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498807 + -0.076196 * t."OUT_0"  + 0.143340 * t."OUT_1"  + 0.529151 * t."OUT_2"  + 0.627277 * t."OUT_3"  + 0.310995 * t."OUT_4"  + 0.254553 * t."OUT_5"  + -0.159093 * t."O
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_sampled', 'MLPClassifier', 'duckdb')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_sampled', 'MLPClassifier', 'duckdb')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_sampled', 'MLPClassifier', 'duckdb') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 128 entries, 0 to 127
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     128 non-null    float32
 1   X_1     128 non-null    float32
 2   X_2     128 non-null    float32
 3   X_3     128 non-null    float32
 4   X_4     128 non-null    float32
 5   X_5     128 non-null    float32
 6   X_6     128 non-null    float32
 7   X_7     128 non-null    float32
 8   X_8     128 non-null    float32
 9   X_9     128 non-null    float32
dtypes: float32(10)
memory usage: 6.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.050659  0.920640 -0.455125  ...  1.021308 -0.010797 -1.586949
1      1.869880 -2.312190 -1.153852  ... -1.335399 -1.648043  2.109906
2     -0.124049  0.768644 -1.040184  ...  0.342352  1.247335 -1.413962
3      0.928858 -1.177375  0.542731  ... -0.053731  0.485529  1.106564
4     -1.598324  1.482463  1.664691  ... -1.347481  1.816532  0.637000
...         ...       ...       ...  ...       ...       ...       ...
123   -0.598158  0.629641  1.754569  ...  0.046530 -0.570026  1.113417
124   -1.067863  0.728836  1.338623  ...  1.442460 -0.770565  0.644973
125   -1.123043  1.342440  0.659906  ... -1.324783 -1.312703  0.946601
126    0.795537 -0.282125 -0.219283  ... -0.631660 -1.614865  0.927883
127    1.126231 -0.791891 -0.032095  ... -0.283264  0.796760  0.714492

[128 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 128 entries, 0 to 127
Data columns (total 15 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   index          128 non-null    int64  
 1   Score_0        128 non-null    float64
 2   Proba_0        128 non-null    float64
 3   LogProba_0     128 non-null    float64
 4   Score_1        128 non-null    float64
 5   Proba_1        128 non-null    float64
 6   LogProba_1     128 non-null    float64
 7   Score_2        128 non-null    float64
 8   Proba_2        128 non-null    float64
 9   LogProba_2     128 non-null    float64
 10  Score_3        128 non-null    float64
 11  Proba_3        128 non-null    float64
 12  LogProba_3     128 non-null    float64
 13  Decision       128 non-null    int64  
 14  DecisionProba  128 non-null    float64
dtypes: float64(13), int64(2)
memory usage: 15.1 KB
     index   Score_0   Proba_0  ...  LogProba_3  Decision  DecisionProba
0        0  0.278616  0.279721  ...   -1.644339         1       0.428940
1        1 -0.175832  0.194713  ...   -1.837943         1       0.559609
2        2  0.495963  0.348704  ...   -1.631565         1       0.358766
3        3 -0.244593  0.184997  ...   -1.880247         1       0.578942
4        4 -0.533845  0.157391  ...   -2.147657         1       0.664307
..     ...       ...       ...  ...         ...       ...            ...
123    123 -0.140193  0.211301  ...   -1.845362         1       0.544976
124    124 -0.083717  0.207479  ...   -1.784865         1       0.534787
125    125  0.048886  0.274506  ...   -1.823088         1       0.478001
126    126  0.241789  0.271071  ...   -1.654382         1       0.440008
127    127  0.152532  0.241353  ...   -1.660382         1       0.470528

[128 rows x 15 columns]
PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_END


COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_START
Index(['index', 'Score_0', 'Proba_0', 'LogProba_0', 'Score_1', 'Proba_1',
       'LogProba_1', 'Score_2', 'Proba_2', 'LogProba_2', 'Score_3', 'Proba_3',
       'LogProba_3', 'Decision', 'DecisionProba'],
      dtype='object')
     index   Score_0  SQL_Proba_0  ...  Py_Proba_2  Py_Proba_3  Py_Decision
112    112  0.274691     0.329797  ...    0.088852    0.172321            1
113    113  0.158716     0.278761  ...    0.091517    0.175689            1
114    114 -0.347066     0.165721  ...    0.073354    0.140547            1
115    115  0.517243     0.353120  ...    0.097139    0.196718            0
116    116  0.067641     0.229113  ...    0.095216    0.182071            1
117    117 -0.512969     0.163198  ...    0.059847    0.115291            1
118    118 -0.298787     0.178191  ...    0.081897    0.147682            1
119    119  0.060120     0.232012  ...    0.094217    0.179715            1
120    120 -0.075270     0.273930  ...    0.068605    0.130812            1
121    121  0.260645     0.319568  ...    0.089912    0.174332            1
122    122 -0.090879     0.212700  ...    0.088522    0.164679            1
123    123 -0.140193     0.211301  ...    0.085755    0.157968            1
124    124 -0.083717     0.207479  ...    0.089914    0.167820            1
125    125  0.048886     0.274506  ...    0.085967    0.161526            1
126    126  0.241789     0.271071  ...    0.097711    0.191210            1
127    127  0.152532     0.241353  ...    0.098053    0.190066            1

[16 rows x 20 columns]
MLLITE_CLASS_SQL_ERROR ('FourClass_10_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_0', 'SQL_Proba_0') 1.7979142245545636e-07
     Py_Proba_0  SQL_Proba_0   SQL_Error_0
112    0.329797     0.329797  3.459935e-07
113    0.278761     0.278761  2.840401e-07
114    0.165721     0.165721 -5.135920e-08
115    0.353120     0.353120  1.961409e-07
116    0.229113     0.229113  1.826248e-07
117    0.163198     0.163198  1.530530e-07
118    0.178191     0.178191  1.985477e-07
119    0.232012     0.232012  1.842805e-07
120    0.273931     0.273930  4.730416e-07
121    0.319568     0.319568  2.716765e-07
122    0.212700     0.212700  2.977523e-07
123    0.211301     0.211301  1.984577e-07
124    0.207480     0.207479  1.783720e-07
125    0.274506     0.274506  3.305421e-07
126    0.271071     0.271071  1.412476e-07
127    0.241353     0.241353  1.047484e-07
MLLITE_CLASS_SQL_ERROR ('FourClass_10_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_1', 'SQL_Proba_1') 2.626518715029627e-07
     Py_Proba_1  SQL_Proba_1   SQL_Error_1
112    0.409031     0.409031 -5.283451e-07
113    0.454033     0.454033 -3.580907e-07
114    0.620378     0.620378  2.263463e-07
115    0.353023     0.353024 -1.821631e-07
116    0.493600     0.493601 -1.713926e-07
117    0.661663     0.661663 -7.418362e-08
118    0.592230     0.592230 -2.764104e-07
119    0.494056     0.494056 -3.010782e-07
120    0.526652     0.526652 -5.332310e-07
121    0.416187     0.416188 -4.460738e-07
122    0.534098     0.534098 -3.916006e-07
123    0.544976     0.544976 -3.724155e-07
124    0.534787     0.534787 -2.071210e-07
125    0.478000     0.478001 -5.352405e-07
126    0.440008     0.440008 -1.549842e-07
127    0.470528     0.470528 -6.165666e-08
MLLITE_CLASS_SQL_ERROR ('FourClass_10_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_2', 'SQL_Proba_2') 3.540603184601235e-08
     Py_Proba_2  SQL_Proba_2   SQL_Error_2
112    0.088852     0.088852  2.580976e-08
113    0.091517     0.091517  6.020160e-08
114    0.073354     0.073355 -8.658841e-08
115    0.097139     0.097139  2.421529e-08
116    0.095216     0.095216  4.998503e-08
117    0.059847     0.059847 -9.444058e-08
118    0.081897     0.081897  4.035740e-08
119    0.094217     0.094217  3.498552e-08
120    0.068605     0.068605 -5.785486e-08
121    0.089912     0.089912  3.997560e-08
122    0.088522     0.088522  7.086339e-08
123    0.085755     0.085755  3.679071e-08
124    0.089914     0.089914  5.328625e-08
125    0.085967     0.085967  3.046473e-08
126    0.097711     0.097711  3.754217e-08
127    0.098053     0.098053  2.071136e-08
MLLITE_CLASS_SQL_ERROR ('FourClass_10_sampled', 'MLPClassifier', 'duckdb') ('Py_Proba_3', 'SQL_Proba_3') 6.510996185027417e-08
     Py_Proba_3  SQL_Proba_3   SQL_Error_3
112    0.172321     0.172321  1.192890e-07
113    0.175689     0.175689  1.256077e-07
114    0.140547     0.140547 -1.256516e-07
115    0.196718     0.196718  6.611500e-08
116    0.182071     0.182071 -9.063125e-09
117    0.115291     0.115291 -4.030818e-08
118    0.147682     0.147682  1.515355e-08
119    0.179715     0.179715  7.306439e-09
120    0.130812     0.130812  5.843956e-08
121    0.174332     0.174332  1.046194e-07
122    0.164679     0.164679  9.004013e-08
123    0.157968     0.157968  7.756248e-08
124    0.167820     0.167820  1.271567e-08
125    0.161526     0.161526  1.220796e-07
126    0.191210     0.191210  1.344728e-08
127    0.190066     0.190066 -4.890197e-08
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_sampled', 'MLPClassifier', 'duckdb', 'Success')
     Py_Decision  SQL_Decision
112            1             1
113            1             1
114            1             1
115            0             0
116            1             1
117            1             1
118            1             1
119            1             1
120            1             1
121            1             1
122            1             1
123            1             1
124            1             1
125            1             1
126            1             1
127            1             1
COMPARE_SQL_OUTPUT_AND_PYTHON_OUTPUT_END
WRITING_SQL_CODE 'logs/auto_tests/classification/MLPClassifier/mllite.MLPClassifier_FourClass_10_sampled_option_1_sqlite.sql'



SQL_OUT_PUT_FIRST_LINES_START ('FourClass_10_sampled', 'MLPClassifier', 'sqlite')
WITH model_input AS 
 (SELECT "ADS"."index" AS "index",
    CAST("ADS"."X_0" AS FLOAT) AS "X_0", CAST("ADS"."X_1" AS FLOAT) AS "X_1", CAST("ADS"."X_2" AS FLOAT) AS "X_2", CAST("ADS"."X_3" AS FLOAT) AS "X_3", CAST("ADS"."X_4" AS FLOAT) AS "X_4", CAST("ADS"."X_5" AS FLOAT) AS "X_5", CAST("ADS"."X_6" AS FLOAT) AS "X_6", CAST("ADS"."X_7" AS FLOAT) AS "X_7", CAST("ADS"."X_8" AS FLOAT) AS "X_8", CAST("ADS"."X_9" AS FLOAT) AS "X_9"
  FROM "FourClass_10_sampled" AS "ADS" 
 ),
"Input_Layer_BA" AS
 ( SELECT t."index" as "index",
    t."X_0" AS "OUT_0",
    t."X_1" AS "OUT_1",
    t."X_2" AS "OUT_2",
    t."X_3" AS "OUT_3",
    t."X_4" AS "OUT_4",
    t."X_5" AS "OUT_5",
    t."X_6" AS "OUT_6",
    t."X_7" AS "OUT_7",
    t."X_8" AS "OUT_8",
    t."X_9" AS "OUT_9"
 FROM "model_input" AS t
),
"Hidden_Layer_1_BA" AS
 ( SELECT t."index" as "index",
    -0.498807 + -0.076196 * t."OUT_0"  + 0.143340 * t."OUT_1"  + 0.529151 * t."OUT_2"  + 0.627277 * t."OUT_3"  + 0.310995 * t."OUT_4"  + 0.254553 * t."OUT_5"  + -0.159093 * t."O
SQL_OUT_PUT_FIRST_LINES_END ('FourClass_10_sampled', 'MLPClassifier', 'sqlite')
SQL_OUT_PUT_LAST_LINES_START ('FourClass_10_sampled', 'MLPClassifier', 'sqlite')
ore_0" AS "Score_0",
  arg_max_cte."Proba_0" AS "Proba_0",
  CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN LN( arg_max_cte."Proba_0" ) ELSE -1.79769313486231e+308 END AS "LogProba_0",
  arg_max_cte."Score_1" AS "Score_1",
  arg_max_cte."Proba_1" AS "Proba_1",
  CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN LN( arg_max_cte."Proba_1" ) ELSE -1.79769313486231e+308 END AS "LogProba_1",
  arg_max_cte."Score_2" AS "Score_2",
  arg_max_cte."Proba_2" AS "Proba_2",
  CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN LN( arg_max_cte."Proba_2" ) ELSE -1.79769313486231e+308 END AS "LogProba_2",
  arg_max_cte."Score_3" AS "Score_3",
  arg_max_cte."Proba_3" AS "Proba_3",
  CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN LN( arg_max_cte."Proba_3" ) ELSE -1.79769313486231e+308 END AS "LogProba_3",
  arg_max_cte."argmax_class_idx" AS "Decision",
  arg_max_cte."Max_Proba" AS "DecisionProba"
FROM arg_max_cte
SQL_OUT_PUT_LAST_LINES_END ('FourClass_10_sampled', 'MLPClassifier', 'sqlite') 




COPY_TRAINING_DATA_TO_SQLITE_START
<class 'pandas.core.frame.DataFrame'>
Index: 128 entries, 0 to 127
Data columns (total 10 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   X_0     128 non-null    float32
 1   X_1     128 non-null    float32
 2   X_2     128 non-null    float32
 3   X_3     128 non-null    float32
 4   X_4     128 non-null    float32
 5   X_5     128 non-null    float32
 6   X_6     128 non-null    float32
 7   X_7     128 non-null    float32
 8   X_8     128 non-null    float32
 9   X_9     128 non-null    float32
dtypes: float32(10)
memory usage: 6.0 KB
            X_0       X_1       X_2  ...       X_7       X_8       X_9
index                                ...                              
0     -1.050659  0.920640 -0.455125  ...  1.021308 -0.010797 -1.586949
1      1.869880 -2.312190 -1.153852  ... -1.335399 -1.648043  2.109906
2     -0.124049  0.768644 -1.040184  ...  0.342352  1.247335 -1.413962
3      0.928858 -1.177375  0.542731  ... -0.053731  0.485529  1.106564
4     -1.598324  1.482463  1.664691  ... -1.347481  1.816532  0.637000
...         ...       ...       ...  ...       ...       ...       ...
123   -0.598158  0.629641  1.754569  ...  0.046530 -0.570026  1.113417
124   -1.067863  0.728836  1.338623  ...  1.442460 -0.770565  0.644973
125   -1.123043  1.342440  0.659906  ... -1.324783 -1.312703  0.946601
126    0.795537 -0.282125 -0.219283  ... -0.631660 -1.614865  0.927883
127    1.126231 -0.791891 -0.032095  ... -0.283264  0.796760  0.714492

[128 rows x 10 columns]
COPY_TRAINING_DATA_TO_SQLITE_END


PREDICT_MODEL_ON_TRAINING_DATA_INSIDE_SQLITE_START
MODEL_SQL_EXECUTION_FAILED ('FourClass_10_sampled', 'MLPClassifier', 'sqlite', '')
MLLITE_CLASS_SQL_EXECUTION_STATUS ('FourClass_10_sampled', 'MLPClassifier', 'sqlite', 'sql_execution_failed')
